Notebook[{

Cell[CellGroupData[{
Cell[TextData[{
 Cell[BoxData[
  GraphicsBox[{
    {Hue[0.6, 1.19, 0.5], Thickness[0.06], Opacity[0.5], CapForm["Round"], 
     {Hue[0.5574712643678161, 1.1204545454545456`, 0.88], 
      LineBox[{{0.5258, -0.5958}, {0.7629, -1.326}}]}, 
     {Hue[0.07845916656838701, 1.1681578652082303`, 0.962492], 
      LineBox[{{0.5258, -0.5958}, {1.1466, -0.1445}}]}, 
     {Hue[0.24069567738279826`, 1.0184923684210525`, 0.76], 
      LineBox[{{0.5258, -0.5958}, {1.1466, -0.394}}]}, 
     {Hue[0.7551042492139238, 0.8100533706312133, 0.850093], 
      LineBox[{{0.5258, -0.5958}, {0.9095, -1.1242}}]}, 
     {Hue[0.24069567738279826`, 1.0184923684210525`, 0.76], 
      LineBox[{{0.7629, -1.326}, {1.5302, -1.326}}]}, 
     {Hue[0.7551042492139238, 0.8100533706312133, 0.850093], 
      LineBox[{{0.7629, -1.326}, {0.7629, -0.6729}}]}, 
     {Hue[0.07845916656838701, 1.1681578652082303`, 0.962492], 
      LineBox[{{0.7629, -1.326}, {1.3837, -1.1242}}]}, 
     {Hue[0.24069567738279826`, 1.0184923684210525`, 0.76], 
      LineBox[{{1.1466, -0.1445}, {1.7673, -0.5958}}]}, 
     {Hue[0.5574712643678161, 1.1204545454545456`, 0.88], 
      LineBox[{{1.1466, -0.1445}, {0.7629, -0.6729}}]}, 
     {Hue[0.7551042492139238, 0.8100533706312133, 0.850093], 
      LineBox[{{1.1466, -0.1445}, {1.5302, -0.6729}}]}, 
     {Hue[0.7551042492139238, 0.8100533706312133, 0.850093], 
      LineBox[{{1.5302, -1.326}, {1.7673, -0.5958}}]}, 
     {Hue[0.07845916656838701, 1.1681578652082303`, 0.962492], 
      LineBox[{{1.5302, -1.326}, {1.5302, -0.6729}}]}, 
     {Hue[0.5574712643678161, 1.1204545454545456`, 0.88], 
      LineBox[{{1.5302, -1.326}, {0.9095, -1.1242}}]}, 
     {Hue[0.07845916656838701, 1.1681578652082303`, 0.962492], 
      LineBox[{{1.7673, -0.5958}, {1.1466, -0.394}}]}, 
     {Hue[0.5574712643678161, 1.1204545454545456`, 0.88], 
      LineBox[{{1.7673, -0.5958}, {1.3837, -1.1242}}]}, 
     {Hue[0.24069567738279826`, 1.0184923684210525`, 0.76], 
      LineBox[{{1.1466, -0.7976}, {0.7629, -0.6729}}]}, 
     {Hue[0.9847981351056443, 0.9243770416459248, 0.889907], 
      LineBox[{{1.1466, -0.7976}, {1.1466, -0.394}}]}, 
     {Hue[0.5574712643678161, 1.1204545454545456`, 0.88], 
      LineBox[{{1.1466, -0.7976}, {1.5302, -0.6729}}]}, 
     {Hue[0.7551042492139238, 0.8100533706312133, 0.850093], 
      LineBox[{{1.1466, -0.7976}, {1.3837, -1.1242}}]}, 
     {Hue[0.07845916656838701, 1.1681578652082303`, 0.962492], 
      LineBox[{{1.1466, -0.7976}, {0.9095, -1.1242}}]}}, 
    {Hue[0., 0., 0.2], EdgeForm[{Hue[0., 0., 0.], Opacity[0.7]}], EdgeForm[
     None], DiskBox[{0.5258, -0.5958}, 0.051415348389367156], 
     DiskBox[{0.7629, -1.326}, 0.051415348389367156], 
     DiskBox[{1.1466, -0.1445}, 0.051415348389367156], 
     DiskBox[{1.5302, -1.326}, 0.051415348389367156], 
     DiskBox[{1.7673, -0.5958}, 0.051415348389367156], 
     DiskBox[{1.1466, -0.7976}, 0.051415348389367156], 
     DiskBox[{0.7629, -0.6729}, 0.051415348389367156], 
     DiskBox[{1.1466, -0.394}, 0.051415348389367156], 
     DiskBox[{1.5302, -0.6729}, 0.051415348389367156], 
     DiskBox[{1.3837, -1.1242}, 0.051415348389367156], 
     DiskBox[{0.9095, -1.1242}, 0.051415348389367156]}},
   BaselinePosition->Scaled[0.15],
   FormatType->TraditionalForm,
   FrameTicks->None,
   ImageSize->52]],
  CellChangeTimes->{
   3.721140502050939*^9, {3.721140572382607*^9, 3.7211405953455887`*^9}, 
    3.7211406439523773`*^9},ExpressionUUID->
  "80bbe961-5bdd-4f40-aafd-81eb7008c620"],
 " IGraph/M"
}], "Title",ExpressionUUID->"9456953a-e186-4c32-b417-e426e66d0378"],

Cell[TextData[{
 " the ",
 ButtonBox["igraph",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://igraph.org/"], None},
  ButtonNote->"http://igraph.org/"],
 " interface for ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Subtitle",ExpressionUUID->"a8b17106-dee9-45d7-88b0-2ab32fe4908a"],

Cell[TextData[{
 "This notebook can be opened using the command ",
 Cell[BoxData[
  RowBox[{"IGDocumentation", "[", "]"}]],ExpressionUUID->
  "37f539f3-3381-48e1-a64c-f664f26bb8bd"],
 " or through the ",
 ButtonBox["Documentation Centre",
  BaseStyle->"Link",
  ButtonData->"paclet:IGraphM"],
 ". It cannot be saved, so feel free to edit and evaluate input cells, and \
experiment!"
}], "Text",ExpressionUUID->"ebfd4b26-386f-4053-9151-6da87d9a61bc"],

Cell[TextData[{
 "The documentation is currently incomplete. ",
 StyleBox["Contributions are very welcome!",
  FontSlant->"Italic"]
}], "Text",ExpressionUUID->"05dcc844-82fe-4ecf-898a-ac36ece21ff6"],

Cell[CellGroupData[{

Cell["Introduction", \
"Section",ExpressionUUID->"9b2696d4-873c-4717-af1b-c072cf2f5100"],

Cell[TextData[{
 "IGraph/M provides a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " interface to the popular ",
 ButtonBox["igraph network analysis package",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://igraph.org/"], None},
  ButtonNote->"http://igraph.org/"],
 ", as well as many other functions for working with graphs in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". The purpose of IGraph/M is not to replace ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s built-in graph theory functionality, but to complement \
it. Thus the IGraph/M interface is designed to interoperate seamlessly with \
built-in functions and datatypes, while also being familiar to users of other \
igraph interfaces (",
 ButtonBox["R",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://igraph.org/r/"], None},
  ButtonNote->"https://igraph.org/r/"],
 ", ",
 ButtonBox["Python",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://igraph.org/python/"], None},
  ButtonNote->"https://igraph.org/python/"],
 " or ",
 ButtonBox["C",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://igraph.org/c/"], None},
  ButtonNote->"https://igraph.org/c/"],
 ")."
}], "Text",ExpressionUUID->"05c9b49b-5a7a-44f7-822f-981911a91788"],

Cell[TextData[{
 "The full igraph functionality is not yet exposed. Priority is given to \
functionality that is not currently built into ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". While many of the functions that IGraph/M provides overlap with built-in \
ones, like ",
 Cell[BoxData[
 "IGBetweenness"],ExpressionUUID->"6ef1b7e2-1a3c-4012-ae22-f179614c393f"],
 " and ",
 Cell[BoxData[
 "BetweeneessCentrality"],ExpressionUUID->
  "8c622ce4-aa31-4ada-a6ce-652c1273fb3f"],
 ", there are usually some relevant differences. For example, ",
 Cell[BoxData[
 "IGBetweenness"],ExpressionUUID->"518fdf49-d031-4dd3-8c53-97bf9e3bf300"],
 " uses edge weights, while the built-in function ",
 Cell[BoxData[
 "BetweennessCentrality"],ExpressionUUID->
  "8cb01d14-6c13-46a1-96b2-fe12555f6bd6"],
 " does not."
}], "Text",ExpressionUUID->"efb9a54b-1884-4f09-af9c-f0bea50712b3"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Basic usage", \
"Section",ExpressionUUID->"3a41d2fa-be34-4272-b853-89becc4ea4f4"],

Cell["The package can be loaded using", \
"Text",ExpressionUUID->"d22e0f57-2525-4441-979d-ee6d4f816a6e"],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<IGraphM`\>\"", "]"}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"7beaf991-20ef-47fc-864d-1e8cd5490feb"],

Cell[TextData[{
 "The list of included functions can be queried with the command below. \
Notice that their names always have the ",
 Cell[BoxData["IG"],ExpressionUUID->"2e85d618-13a8-4b07-9766-2093818b9495"],
 " prefix. Click on the name of a function to see its usage message."
}], "Text",ExpressionUUID->"f8e74182-e503-4e97-9b40-b84740cef256"],

Cell[BoxData[
 RowBox[{"?", "IGraphM`*"}]], "Input",
 CellTags->
  "DeleteOutput",ExpressionUUID->"3b4c1715-9fd6-4349-b149-f429d86807bd"],

Cell["Or just type a question mark followed by the symbol\[CloseCurlyQuote]s \
name:", "Text",ExpressionUUID->"4b34f4e0-5bb1-4323-ae08-7ebe0dfb12c4"],

Cell[BoxData[
 RowBox[{"?", 
  "IGVersion"}]], \
"Input",ExpressionUUID->"fd33b0cb-8b34-4b01-835b-22980bb298e5"],

Cell[BoxData[
 RowBox[{"IGVersion", "[", 
  "]"}]], "Input",ExpressionUUID->"32734371-858c-48f4-b35e-169167111e94"],

Cell[TextData[{
 "IGraph/M functions work directly with ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s built-in ",
 Cell[BoxData["Graph"],ExpressionUUID->"15a654a8-3e22-4074-909b-2a9699a6a1df"],
 " datatype. No new special graph datatype is introduced."
}], "Text",ExpressionUUID->"358b3b0b-6ed2-4db7-bbe7-7a080c8f19b0"],

Cell[TextData[{
 "Let\[CloseCurlyQuote]s take a look at a few examples. Let us first generate \
a graph using the built-in functions of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "."
}], "Text",ExpressionUUID->"39c589f3-1ffb-4c1f-b454-66ac6a61b696"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "42", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"g", "=", 
  RowBox[{"RandomGraph", "[", 
   RowBox[{"BarabasiAlbertGraphDistribution", "[", 
    RowBox[{"100", ",", "2"}], "]"}], 
   "]"}]}]}], "Input",ExpressionUUID->"1577d802-10b4-47fc-b1c2-39879ab19c71"],

Cell["\<\
We can compute the betweenness centrality of each vertex either using \
IGraph/M, ...\
\>", "Text",ExpressionUUID->"225fe171-c72c-46d3-bf5f-9f7c99e9b16d"],

Cell[BoxData[
 RowBox[{"IGBetweenness", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"78c6e823-0c98-451d-82d2-713b4f1abc74"],

Cell[TextData[{
 "... or using ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s built-ins, and obtain the same result."
}], "Text",ExpressionUUID->"1b9ab3f0-20f6-4758-9b5a-7ced9c5dd4ec"],

Cell[BoxData[
 RowBox[{"BetweennessCentrality", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"57145db6-51b4-4571-90e7-893dfad08e0f"],

Cell[TextData[{
 "Let us now assign weights to the edges. Many IGraph/M functions, including ",
 Cell[BoxData[
 "IGBetweenness"],ExpressionUUID->"d1723ec5-af4c-4526-a194-00c51fb5d014"],
 ", support edge weights."
}], "Text",ExpressionUUID->"f1230d15-4c62-4ba6-a630-c470be5ebeda"],

Cell[BoxData[
 RowBox[{
  RowBox[{"wg", "=", 
   RowBox[{"SetProperty", "[", 
    RowBox[{"g", ",", 
     RowBox[{"EdgeWeight", "\[Rule]", 
      RowBox[{"RandomReal", "[", 
       RowBox[{"1", ",", 
        RowBox[{"EdgeCount", "[", "g", "]"}]}], "]"}]}]}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"724ab3d2-50f3-4e63-9d12-06ac68972e5a"],

Cell[BoxData[
 RowBox[{"IGBetweenness", "[", "wg", 
  "]"}]], "Input",ExpressionUUID->"9ca8f04c-5a42-45d6-8ddc-9297ef6b4906"],

Cell[TextData[{
 "Notice that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " 12.1 does not include functionality to compute weighted vertex \
betweenness. The built-in function ",
 Cell[BoxData[
  RowBox[{"BetweennessCentrality", "[", "]"}]],ExpressionUUID->
  "a6a0f821-5954-4dd0-b8a2-29d180645105"],
 " ignores the weights."
}], "Text",ExpressionUUID->"2f57dfb7-76f7-4d73-b8ee-533d1348da8c"],

Cell[BoxData[
 RowBox[{"BetweennessCentrality", "[", "wg", 
  "]"}]], "Input",ExpressionUUID->"98881779-b5f2-47dc-ad6e-8f9c48798603"],

Cell["\<\
Let us delete the minimum feedback edge set to obtain an acyclic graph:\
\>", "Text",ExpressionUUID->"101dec9f-c8d9-4836-a34a-e5d9f2bb1c60"],

Cell[BoxData[
 RowBox[{"acg", "=", 
  RowBox[{"EdgeDelete", "[", 
   RowBox[{"g", ",", 
    RowBox[{"IGFeedbackArcSet", "[", "g", "]"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"758b67d5-3b3d-421b-9642-f145b59557d2"],

Cell["And try out a few of igraph\[CloseCurlyQuote]s layout algorithms.", \
"Text",ExpressionUUID->"a7a554c1-f12f-4529-8744-ba1c8d1103c4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"IGLayoutGraphOpt", "[", "acg", "]"}], ",", 
   RowBox[{"IGLayoutKamadaKawai", "[", "acg", "]"}], ",", 
   RowBox[{"IGLayoutFruchtermanReingold", "[", "acg", "]"}]}], 
  "}"}]], "Input",ExpressionUUID->"a61d5e41-6428-48c6-9de7-0a91184f6a2f"],

Cell["Layout functions typically have many options to tune:", \
"Text",ExpressionUUID->"53510444-62c5-45fe-80af-8a0b2410c6ef"],

Cell[BoxData[
 RowBox[{"Options", "[", "IGLayoutGraphOpt", 
  "]"}]], "Input",ExpressionUUID->"aa0e9e0a-77b4-47f2-a8d4-b908d5a150a3"],

Cell["\<\
Increasing the number of iterations will usually improve the result.\
\>", "Text",ExpressionUUID->"e0dc75c3-e1e6-422c-9a6f-e60481003ebe"],

Cell[BoxData[
 RowBox[{"IGLayoutGraphOpt", "[", 
  RowBox[{"acg", ",", 
   RowBox[{"\"\<MaxIterations\>\"", "\[Rule]", "5000"}]}], 
  "]"}]], "Input",ExpressionUUID->"c2c7654e-25f1-449b-9497-fc7c0021b38e"],

Cell[TextData[StyleBox["A final note",
 FontWeight->
  "Bold"]], "Text",ExpressionUUID->"a239138f-b5cd-4e27-95e1-45a77296c5be"],

Cell[TextData[{
 "Please refer to the usage messages for information on how to use each \
function. For more information on the meaning of various function options, \
the algorithms used by the functions, references, etc. please refer to ",
 ButtonBox["the C/igraph documentation",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://igraph.org/c/doc/"], None},
  ButtonNote->"http://igraph.org/c/doc/"],
 ". The igraph documentation provides article references for most nontrivial \
algorithms."
}], "Text",ExpressionUUID->"2427ecc1-9659-49b0-9ab2-3df83262ac2d"],

Cell["\<\
The following sections provide general information on each functionality \
area, and show common usage patterns.\
\>", "Text",ExpressionUUID->"30339ffb-b0e8-4bfb-968e-40d3e48f635e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Graph creation", \
"Section",ExpressionUUID->"8fbc5c3f-7766-4e72-900b-8bbf01a413ee"],

Cell[TextData[{
 "All the graph creation functions in IGraph/M take any standard ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " ",
 Cell[BoxData[
  ButtonBox["Graph",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Graph"]],ExpressionUUID->
  "e00421ed-23eb-4e61-aedb-f36fdc79c0b2"],
 " option such as ",
 Cell[BoxData[
 "VertexLabels"],ExpressionUUID->"0f7c3399-9f76-4514-a513-8ef409d2f346"],
 ", ",
 Cell[BoxData[
 "EdgeLabels"],ExpressionUUID->"e2b7d8ad-d50d-4c1f-8b5c-0463b368fdf1"],
 ", ",
 Cell[BoxData[
 "VertexStyle"],ExpressionUUID->"4c83a535-b0bf-461b-b904-3b3108756d0a"],
 ", ",
 Cell[BoxData[
 "GraphStyle"],ExpressionUUID->"decff222-ed20-4899-b3f2-e401bef6ff41"],
 ", ",
 Cell[BoxData[
 "PlotTheme"],ExpressionUUID->"a3f5e2a8-329e-44f9-bcc3-c2d9f05fe098"],
 ", etc."
}], "Text",ExpressionUUID->"d265aa47-c222-422f-9f0c-41be0308e577"],

Cell[BoxData[
 RowBox[{"IGLCF", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"5", ",", 
     RowBox[{"-", "5"}]}], "}"}], ",", "7", ",", 
   RowBox[{"GraphStyle", "\[Rule]", "\"\<SmallNetwork\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"6a94399a-2c66-45d4-a068-43379352ad1c"],

Cell[CellGroupData[{

Cell["Deterministic graph generators", \
"Subsection",ExpressionUUID->"0b6453fa-b913-4f28-be15-d4b2044fcab5"],

Cell[CellGroupData[{

Cell["IGShorthand", \
"Subsubsection",ExpressionUUID->"16b5f24d-d786-48d2-aee4-0d9f8f9aee55"],

Cell[TextData[{
 Cell[BoxData[
 "IGShorthand"],ExpressionUUID->"5fd84221-a51d-4473-aebe-8f5107a78bdb"],
 " provides an easy way to create small graphs from a simple and \
quick-to-type notation."
}], "Text",ExpressionUUID->"5f029bc1-063e-4288-a6d3-e449a375e336"],

Cell[BoxData[
 RowBox[{"?", 
  "IGShorthand"}]], \
"Input",ExpressionUUID->"e1197ffb-6fd8-4da0-af4f-26ed479159d1"],

Cell["The available options are:", \
"Text",ExpressionUUID->"ffb9ab81-5abc-42de-b24d-2405b4d68693"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"SelfLoops", "\[Rule]", "True"}]],ExpressionUUID->
  "ad4d8b82-39bc-49d8-b5f3-a1f4b0f2746b"],
 " keeps self-loops in the graph."
}], "Item",ExpressionUUID->"0fcba618-f6c4-4db9-a23f-e1a592bdbaee"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"MultiEdges", "\[Rule]", "True"}]],ExpressionUUID->
  "d7cae271-71b2-4cbf-9410-cca7d4130fb8"],
 " keeps parallel edges in the graph."
}], "Item",ExpressionUUID->"dab67fb7-a80d-4fe9-b7c1-226ef3d87a05"],

Cell["Construct a cycle graph.", \
"Text",ExpressionUUID->"a6f31a97-b4de-4cb2-b135-6472d89fe23e"],

Cell[BoxData[
 RowBox[{"IGShorthand", "[", "\"\<1-2-3-4-1\>\"", 
  "]"}]], "Input",ExpressionUUID->"a4b56bf0-c66f-4b9c-b8db-f102ffb0cb6c"],

Cell[TextData[{
 "Vertex labels are shown by default. They can be turned off using ",
 Cell[BoxData[
  RowBox[{"VertexLabels", "\[Rule]", "None"}]],ExpressionUUID->
  "994a69ff-e673-410f-ac60-fe688d9d7a6c"],
 "."
}], "Text",ExpressionUUID->"400af4e2-7e0f-40af-bf2d-429eee4fe89b"],

Cell[BoxData[
 RowBox[{"IGShorthand", "[", 
  RowBox[{"\"\<1-2-3-1\>\"", ",", 
   RowBox[{"VertexLabels", "\[Rule]", "None"}]}], 
  "]"}]], "Input",ExpressionUUID->"fd21e417-35a7-4cfd-bb3c-c979fc770e89"],

Cell[TextData[{
 "The interpretation of ",
 Cell[BoxData["-"],ExpressionUUID->"c108ae5e-961b-4b76-a15b-a59919ebe0bf"],
 " as directed or undirected is controlled by the ",
 Cell[BoxData[
 "DirectedEdges"],ExpressionUUID->"0789e26f-13b0-4575-935a-4a3dd295aabf"],
 " option."
}], "Text",ExpressionUUID->"b3eb63b5-b25c-4d4d-89af-b8b07b6440cc"],

Cell[BoxData[
 RowBox[{"IGShorthand", "[", 
  RowBox[{"\"\<1-2-3-1\>\"", ",", 
   RowBox[{"DirectedEdges", "\[Rule]", "True"}]}], 
  "]"}]], "Input",ExpressionUUID->"022007c0-0c67-403f-8b3a-445dfd0f79e9"],

Cell[TextData[{
 "Directed edges can be input using ",
 StyleBox["->", "Program"],
 ", ",
 StyleBox["<-", "Program"],
 " or ",
 StyleBox["<->", "Program"],
 "."
}], "Text",ExpressionUUID->"119937b4-c803-4097-a17e-9dad7d7ce0f3"],

Cell[BoxData[
 RowBox[{"IGShorthand", "[", "\"\<Jim -> Suzy <- Joe\>\"", 
  "]"}]], "Input",ExpressionUUID->"8aa6f6ad-a08d-4cb8-8053-0be43404f5ac"],

Cell[TextData[{
 StyleBox["<->", "Program"],
 " is interpreted as a pair of directed edges."
}], "Text",ExpressionUUID->"d2f00832-2f84-40f9-a06a-5a4f57573324"],

Cell[BoxData[
 RowBox[{"IGShorthand", "[", "\"\<1<->2->3\>\"", 
  "]"}]], "Input",ExpressionUUID->"bc9cd3ff-d13d-4fcf-9491-d78977ea0c1f"],

Cell["\<\
Mixed graphs, containing both directed and undirected edges, are supported. \
Note that mixed graphs are not allowed as input to most IGraph/M functions.\
\>", "Text",ExpressionUUID->"f0baea53-bdd7-435d-8e0e-58380212dea9"],

Cell[BoxData[
 RowBox[{"IGShorthand", "[", "\"\<1-2<-3\>\"", 
  "]"}]], "Input",ExpressionUUID->"a52b7267-5915-4cfc-9f4b-fc5bf77da83d"],

Cell["Disconnected components are separated by commas.", \
"Text",ExpressionUUID->"d9d8c7c9-03d6-418a-a7e0-b3f6067a4e63"],

Cell[BoxData[
 RowBox[{"IGShorthand", "[", "\"\<1, 2-3, 4-5-6\>\"", 
  "]"}]], "Input",ExpressionUUID->"c59b7db5-fc7b-4033-884e-f16212069848"],

Cell["\<\
Groups of vertices can be given using the colon separator. Edges will be \
connected to each vertex in the group. This makes it easy to specify a \
complete graph ...\
\>", "Text",ExpressionUUID->"3aad68c7-fb04-4dc6-a8e1-68b5fbe3c3ca"],

Cell[BoxData[
 RowBox[{"IGShorthand", "[", "\"\<A:B:C:D:E -- A:B:C:D:E\>\"", 
  "]"}]], "Input",ExpressionUUID->"49224e77-7179-4bd6-9217-2db45372cc11"],

Cell["... or a complete bipartite graph.", \
"Text",ExpressionUUID->"e880296f-bbb3-4f88-8f8f-53872b3cebea"],

Cell[BoxData[
 RowBox[{"IGLayoutBipartite", "@", 
  RowBox[{
  "IGShorthand", "[", "\"\<a:b:c - 1:2:3:4\>\"", 
   "]"}]}]], "Input",ExpressionUUID->"e6861e09-4645-4a4b-86e8-80760b85647f"],

Cell["\<\
Vertex names are taken as strings, except when they can be interpreted as an \
integer.\
\>", "Text",ExpressionUUID->"1bbbf653-6e45-4939-9b5e-112116b25a14"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IGShorthand", "[", "\"\<xyz - 137\>\"", "]"}], "//", 
   "VertexList"}], "//", 
  "InputForm"}]], \
"Input",ExpressionUUID->"a7629a47-0651-4d32-8be1-57305b068713"],

Cell[TextData[{
 "Spaces are allowed in vertex names, and edges can be specified using any \
number of ",
 Cell[BoxData["-"],ExpressionUUID->"43b5c09c-5aba-4875-8793-b5261c8c63c0"],
 " characters."
}], "Text",ExpressionUUID->"43203e39-416f-4fd8-8494-92cbf7ed12cd"],

Cell[BoxData[
 RowBox[{"IGShorthand", "[", "\"\<Sophus Lie --- Camille Jordan\>\"", 
  "]"}]], "Input",ExpressionUUID->"8d0556e2-e3a1-4a14-bd9b-1b77f027527d"],

Cell[TextData[{
 "Self-loops and parallel edges are removed by default because these are \
often created as an undesired by-product of vertex groups. They can be \
re-enabled using the ",
 Cell[BoxData[
 "SelfLoops"],ExpressionUUID->"b9d96814-0051-4ed1-ba53-ea7ab6f96171"],
 " or ",
 Cell[BoxData[
 "MultiEdges"],ExpressionUUID->"09a3bcfa-5785-41e3-89f5-2f17498bffff"],
 " options when desired."
}], "Text",ExpressionUUID->"902cc1e8-8fa2-47be-a694-542eac87504c"],

Cell[BoxData[
 RowBox[{"IGShorthand", "[", 
  RowBox[{"\"\<1:2:3 - 1:2:3\>\"", ",", 
   RowBox[{"SelfLoops", "\[Rule]", "True"}]}], 
  "]"}]], "Input",ExpressionUUID->"1daa86d6-080a-4ebb-b70f-05c648a71646"],

Cell[BoxData[
 RowBox[{"IGShorthand", "[", 
  RowBox[{"\"\<1:2:3 - 1:2:3\>\"", ",", 
   RowBox[{"SelfLoops", "\[Rule]", "True"}], ",", 
   RowBox[{"MultiEdges", "\[Rule]", "True"}]}], 
  "]"}]], "Input",ExpressionUUID->"3c1b8e11-f4e0-45d4-b4aa-8ce69f312a8f"],

Cell[BoxData[
 RowBox[{"IGShorthand", "[", 
  RowBox[{"\"\<1-2-1-3\>\"", ",", 
   RowBox[{"MultiEdges", "\[Rule]", "True"}]}], 
  "]"}]], "Input",ExpressionUUID->"a3b2eb10-d775-41fa-b7e1-78267f23d0cd"],

Cell["\<\
The vertex order will follow the order of appearance of vertices in the input \
string. To control the order, simply list vertices at the beginning of the \
shorthand specification.\
\>", "Text",ExpressionUUID->"af4fd411-be9f-4e01-ad77-b14fffb83abb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGShorthand", "[", "\"\<4-3-1-2-4\>\"", "]"}], "//", 
  "VertexList"}]], \
"Input",ExpressionUUID->"21115e0c-e7c5-473e-847f-5a78963ec4db"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGShorthand", "[", "\"\<1,2,3,4, 4-3-1-2-4\>\"", "]"}], "//", 
  "VertexList"}]], \
"Input",ExpressionUUID->"8bc943b9-d7a1-4fb5-ad09-c2e381ae25ee"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGEmptyGraph", \
"Subsubsection",ExpressionUUID->"cfea3ceb-3ef6-4b83-9098-b01bed775fe8"],

Cell[BoxData[
 RowBox[{"?", 
  "IGEmptyGraph"}]], \
"Input",ExpressionUUID->"87e5f440-0d70-4f2a-8097-34812fce8e2a"],

Cell[TextData[{
 Cell[BoxData[
 "IGEmptyGraph"],ExpressionUUID->"ae52e1a3-0432-4080-9d62-9dabf380feab"],
 " is a convenience function for creating graphs with no edges."
}], "Text",ExpressionUUID->"86cb91aa-5a00-45b6-bca6-910abfc7da94"],

Cell["Create a null graph.", \
"Text",ExpressionUUID->"51d0eccf-14bb-442d-a3a3-37dc96d2d7e4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGEmptyGraph", "[", "]"}], "//", 
  "VertexCount"}]], \
"Input",ExpressionUUID->"e1f79805-76f4-40c5-851d-064ffb616248"],

Cell["Create an empty graph on 15 vertices.", \
"Text",ExpressionUUID->"7412707a-5fe8-4407-867e-18f5bc947858"],

Cell[BoxData[
 RowBox[{"IGEmptyGraph", "[", "15", 
  "]"}]], "Input",ExpressionUUID->"5ef691c6-634a-4ab8-905e-6304bf69a792"],

Cell[TextData[{
 "The built-in ",
 Cell[BoxData[
 "EmptyGraphQ"],ExpressionUUID->"c98d1bd8-bdd1-47bb-b4e1-13c0dbb6bb2c"],
 " returns ",
 Cell[BoxData[
 "True"],ExpressionUUID->"b13077d3-736a-4714-ac39-8accc8a0ea62"],
 " for these graphs."
}], "Text",ExpressionUUID->"4cb9f311-cf17-4387-b726-d01793755ead"],

Cell[BoxData[
 RowBox[{"EmptyGraphQ", "[", "%", 
  "]"}]], "Input",ExpressionUUID->"7249d64c-7eee-4cbc-9197-d3904c325b90"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGLCF", \
"Subsubsection",ExpressionUUID->"d7b42577-f8b3-4c64-b727-7e57c4d05e48"],

Cell[BoxData[
 RowBox[{"?", 
  "IGLCF"}]], "Input",ExpressionUUID->"4cbcf696-8cbb-427e-b6fb-c2acf30cf71b"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGLCF", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      SubscriptBox["k", "1"], ",", 
      SubscriptBox["k", "2"], ",", "\[Ellipsis]"}], "}"}], ",", "n"}], "]"}]],
  ExpressionUUID->"3cdfbdff-fdcf-4042-8a5f-0e6a8c12ee13"],
 " creates a graph based on the ",
 ButtonBox["LCF notation ",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://mathworld.wolfram.com/LCFNotation.html"], None},
  ButtonNote->"http://mathworld.wolfram.com/LCFNotation.html"],
 Cell[BoxData[
  SuperscriptBox[
   RowBox[{"[", 
    RowBox[{
     SubscriptBox["k", "1"], ",", 
     SubscriptBox["k", "2"], ",", "\[Ellipsis]"}], "]"}], "n"]],
  ExpressionUUID->"fd798cf5-8c80-4c92-a1dc-e67e131166eb"],
 "."
}], "Text",ExpressionUUID->"7f614131-ba8f-4e11-9fe4-29c04a22e0b9"],

Cell[TextData[{
 "The M\[ODoubleDot]bius\[Dash]Kantor graph is ",
 Cell[BoxData[
  SuperscriptBox[
   RowBox[{"[", 
    RowBox[{"5", ",", 
     RowBox[{"-", "5"}]}], "]"}], "8"]],ExpressionUUID->
  "e6eaa879-21f6-467c-ad96-1b33f6754df4"],
 "."
}], "Text",ExpressionUUID->"f2f361da-a561-4a23-a610-c1b1a3f8bce0"],

Cell[BoxData[
 RowBox[{"IGLCF", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"5", ",", 
     RowBox[{"-", "5"}]}], "}"}], ",", "8", ",", 
   RowBox[{"GraphStyle", "->", "\"\<DiagramGreen\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"e59753a4-4063-4423-966e-f1524641aa27"],

Cell[TextData[{
 "The Pappus graph is ",
 Cell[BoxData[
  SuperscriptBox[
   RowBox[{"[", 
    RowBox[{"5", ",", "7", ",", 
     RowBox[{"-", "7"}], ",", "7", ",", 
     RowBox[{"-", "7"}], ",", 
     RowBox[{"-", "5"}]}], "]"}], "3"]],ExpressionUUID->
  "dd42b71e-349c-4dac-a12f-31ee69222a0e"],
 "."
}], "Text",ExpressionUUID->"294eb99c-4215-4e2f-aa72-88b9c1f73f0e"],

Cell[BoxData[
 RowBox[{"IGLCF", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"5", ",", "7", ",", 
     RowBox[{"-", "7"}], ",", "7", ",", 
     RowBox[{"-", "7"}], ",", 
     RowBox[{"-", "5"}]}], "}"}], ",", "3", ",", 
   RowBox[{"GraphStyle", "->", "\"\<ThickEdge\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"4f5b60e9-fe6d-46be-808c-9a3da5b6470c"],

Cell[TextData[{
 "The cuboctahedral graph is ",
 Cell[BoxData[
  SuperscriptBox[
   RowBox[{"[", 
    RowBox[{"4", ",", "2"}], "]"}], "6"]],ExpressionUUID->
  "a6411c08-5eef-4206-83f7-adfcf0ea1484"],
 "."
}], "Text",ExpressionUUID->"4483d3c9-bfa1-4a43-a987-04f55284be63"],

Cell[BoxData[
 RowBox[{"IGLayoutKamadaKawai3D", "@", 
  RowBox[{"IGLCF", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"4", ",", "2"}], "}"}], ",", "6"}], 
   "]"}]}]], "Input",ExpressionUUID->"344b8c25-05be-4ded-9c19-f865fc89a811"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGChordalRing", \
"Subsubsection",ExpressionUUID->"a379288f-4522-450b-a2a9-c3ea568d9a99"],

Cell[BoxData[
 RowBox[{"?", 
  "IGChordalRing"}]], \
"Input",ExpressionUUID->"ecf3838d-d8d4-4d1b-ac82-d1cd910c2db2"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGChordalRing", "[", 
   RowBox[{"n", ",", "w"}], "]"}]],ExpressionUUID->
  "50740f59-7591-46c3-980b-369a1f53114e"],
 " constructs an extended chordal ring based on the offset specification \
vector or matrix ",
 Cell[BoxData[
  FormBox["w", TraditionalForm]],ExpressionUUID->
  "b17ab580-886b-4d7b-bc70-54222bda1ecb"],
 " as follows:"
}], "Text",ExpressionUUID->"cdd9ba40-8a5e-4478-9fba-a5b8b5c2124f"],

Cell[TextData[{
 "It creates a cycle graph (i.e. ring) on ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "070bbbdd-bf39-41cd-b778-88f25cd0cff6"],
 " vertices."
}], "ItemNumbered",ExpressionUUID->"bcee0e39-c2b3-4830-bd87-133d55d5bb71"],

Cell[TextData[{
 "For each vertex ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "f2018db2-0b62-4659-92c7-4a0fa3f386e9"],
 " on the ring, it adds a chord to a vertex ",
 Cell[BoxData[
  FormBox[
   RowBox[{"w", "\[LeftDoubleBracket]", 
    TemplateBox[{"i", "p"},
     "Mod"], "\[RightDoubleBracket]"}], TraditionalForm]],ExpressionUUID->
  "0f82c30b-9c7e-40e3-b4fb-af9920f5b4ae"],
 " steps ahead counter-clockwise on the ring."
}], "ItemNumbered",ExpressionUUID->"94501367-6272-4005-9450-08ef8af8d1c6"],

Cell[TextData[{
 "If ",
 Cell[BoxData[
  FormBox["w", TraditionalForm]],ExpressionUUID->
  "f3b17650-b69c-48d0-9c80-376c998cd11a"],
 " is a matrix, the procedure is carried out for each row."
}], "ItemNumbered",ExpressionUUID->"5844820e-c6b1-490b-9bc5-2e296f20f522"],

Cell[TextData[{
 "The number of vertices ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "65e14d19-d40e-491f-8d86-80724d05d426"],
 " must be an integer multiple of the number of columns in the matrix ",
 Cell[BoxData[
  FormBox["w", TraditionalForm]],ExpressionUUID->
  "41d41258-197a-47d1-abb6-19de313b8ec0"],
 "."
}], "Text",ExpressionUUID->"65d894df-d3e0-44ec-954f-8cebfbd365d4"],

Cell["The available options are:", \
"Text",ExpressionUUID->"22b9f30f-0349-4f80-b1e7-e835c874dd87"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "True"}]],ExpressionUUID->
  "cb8d6bcc-7bcb-4fcc-a18e-17aaeb2b922a"],
 " creates a graph with directed edges."
}], "Item",ExpressionUUID->"e1fe5067-80d1-49c9-b6dd-3c57a8daa68c"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"SelfLoops", "\[Rule]", "False"}]],ExpressionUUID->
  "ffb6e4a0-a028-437f-add7-4a1eb1dd490d"],
 " prevents the creation of self-loops."
}], "Item",ExpressionUUID->"19421160-105f-47b2-9cfc-7166868708ee"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"MultiEgdes", "\[Rule]", "False"}]],ExpressionUUID->
  "67d3be01-ee30-4ab2-a9bd-142fbfee9768"],
 " prevents the creation of multi-edges."
}], "Item",ExpressionUUID->"7086adfb-23d9-4024-a4fa-28b7c7004582"],

Cell["Create an extended chordal graph.", \
"Text",ExpressionUUID->"3f67a2a3-5f41-4484-90da-00c4b56494f3"],

Cell[BoxData[
 RowBox[{"IGChordalRing", "[", 
  RowBox[{"15", ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "8"}], "}"}], ",", 
   RowBox[{"GraphStyle", "\[Rule]", "\"\<Business\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"fc72513a-202e-4f23-8217-468994c62c22"],

Cell["Negative offsets are allowed.", \
"Text",ExpressionUUID->"e268ca8a-ac31-44be-bba9-11f41c9d6f8c"],

Cell[BoxData[
 RowBox[{"IGChordalRing", "[", 
  RowBox[{"15", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "4", ",", "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "3"}], ",", 
       RowBox[{"-", "4"}], ",", 
       RowBox[{"-", "8"}]}], "}"}]}], "}"}]}], 
  "]"}]], "Input",ExpressionUUID->"33ffaab3-0266-4166-a7f1-e5ca67101951"],

Cell[TextData[{
 Cell[BoxData[
 "IGChordalGraph"],ExpressionUUID->"d9ea098e-2a0c-49a5-9009-36003d919878"],
 " may create self-loops or multi-edges. This can be prevented by setting the \
",
 Cell[BoxData[
 "SelfLoops"],ExpressionUUID->"308787cc-0b20-47f6-a4b3-73b6cc3d975a"],
 " or ",
 Cell[BoxData[
 "MultiEdges"],ExpressionUUID->"70081c3f-3a5f-456b-ac60-009ba7444033"],
 " options to ",
 Cell[BoxData["False"],ExpressionUUID->"68f1759c-fd9f-44d7-bd21-d6160d9c3c1f"],
 "."
}], "Text",ExpressionUUID->"b08f9106-0866-4852-aa76-a269c3afe4ff"],

Cell[BoxData[
 RowBox[{"IGChordalRing", "[", 
  RowBox[{"15", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "4", ",", "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "3"}], ",", 
       RowBox[{"-", "4"}], ",", 
       RowBox[{"-", "8"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"MultiEdges", "\[Rule]", "False"}]}], 
  "]"}]], "Input",ExpressionUUID->"ffdad3a4-6031-4bfc-9a38-1ff21c6609b7"],

Cell["Create a chordal graph with directed edges.", \
"Text",ExpressionUUID->"29b43c49-181a-43ba-a577-2252a2f3c869"],

Cell[BoxData[
 RowBox[{"IGChordalRing", "[", 
  RowBox[{"8", ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}], ",", 
   RowBox[{"DirectedEdges", "\[Rule]", "True"}], ",", 
   RowBox[{"GraphStyle", "\[Rule]", "\"\<DiagramGold\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"626d2339-d7a1-49e8-b506-49ede93822b9"],

Cell[TextData[{
 "Colour the chords of the ring based on which entry of the ",
 Cell[BoxData[
  FormBox["w", TraditionalForm]],ExpressionUUID->
  "3a41407e-bce2-4889-85df-d93226db6cf6"],
 " vector they correspond to."
}], "Text",ExpressionUUID->"33a319a2-994e-439c-86aa-e5b8e1459054"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"w", "=", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "4"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"IGChordalRing", "[", 
   RowBox[{"12", ",", "w", ",", 
    RowBox[{"GraphStyle", "\[Rule]", "\"\<ThickEdge\>\""}], ",", 
    RowBox[{"EdgeStyle", "\[Rule]", 
     RowBox[{"Opacity", "[", 
      RowBox[{"1", "/", "2"}], "]"}]}]}], "]"}], "//", 
  RowBox[{"IGEdgeMap", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ColorData", "[", "97", "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"EdgeStyle", "\[Rule]", 
     RowBox[{"Function", "[", 
      RowBox[{"g", ",", "\[IndentingNewLine]", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"i", "\[LessEqual]", 
            RowBox[{"VertexCount", "[", "g", "]"}]}], ",", "0", ",", 
           RowBox[{"Mod", "[", 
            RowBox[{"i", ",", 
             RowBox[{"Length", "[", "w", "]"}], ",", "1"}], "]"}]}], "]"}], 
         ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"EdgeCount", "[", "g", "]"}]}], "}"}]}], "]"}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",ExpressionUUID->"0111f537-6d08-42c2-beb0-876b2ea8f58f"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGSquareLattice", \
"Subsubsection",ExpressionUUID->"3746659c-8d18-428d-836c-fbaea707b33a"],

Cell[BoxData[
 RowBox[{"?", 
  "IGSquareLattice"}]], \
"Input",ExpressionUUID->"f74eb108-2134-421a-89d9-9918fa9b5613"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGSquareLattice", "[", 
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["d", "1"], ",", 
     SubscriptBox["d", "2"], ",", "\[Ellipsis]"}], "}"}], "]"}]],
  ExpressionUUID->"12b22009-02d4-4ef1-bb79-03c245fc58f5"],
 " creates a square lattice graph of the given dimensions. The available \
options are:"
}], "Text",ExpressionUUID->"28304c04-15b7-40f0-8dfe-de50204d5a82"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<Radius\>\""],ExpressionUUID->"8d4143b6-6522-4e62-a2b1-5a3c5299a5e0"],
 " controls the size of the neighbourhood within which vertices will be \
connected."
}], "Item",ExpressionUUID->"151d772b-f77a-438f-9862-56d048885812"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<Periodic\>\"", "\[Rule]", "True"}]],ExpressionUUID->
  "e16847e6-22f3-4730-8f46-8e5bf443a43e"],
 " creates a periodic lattice."
}], "Item",ExpressionUUID->"6aa22085-8443-4d9f-9ec4-ab2bc8df3300"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<Mutual\>\"", "\[Rule]", "True"}]],ExpressionUUID->
  "8081ac2d-8f75-41a5-8707-acda3b4e6d40"],
 " inserts directed edges in both directions when ",
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "True"}]],ExpressionUUID->
  "9f8b4988-99b0-4b8c-a319-4f7c120c1d84"],
 " is used."
}], "Item",ExpressionUUID->"a3d0b490-501d-4c64-ae0b-9c423ccb1aae"],

Cell[TextData[{
 "In previous versions, ",
 Cell[BoxData[
 "IGSquareLattice"],ExpressionUUID->"42633585-92c7-40e5-a8da-3fb83006c67a"],
 " was called ",
 Cell[BoxData[
 "IGMakeLattice"],ExpressionUUID->"99e35240-2bf3-48c8-b349-b6b3d1a77df7"],
 ". This name can still be used as a synonym for the sake of backwards \
compatibility, however, it will be removed in a future version."
}], "Text",ExpressionUUID->"daba12c1-7599-4bad-a006-46d7d63e66be"],

Cell[TextData[{
 "To create other types of lattices, see ",
 Cell[BoxData[
 "IGTriangleLattice"],ExpressionUUID->
  "acd2ff9f-067c-44fd-ae2e-f21e7234c660"],
 " and ",
 Cell[BoxData[
 "IGLatticeMesh"],ExpressionUUID->"3474ba0e-a8aa-4807-9677-802881b220b7"],
 "."
}], "Text",ExpressionUUID->"6411b904-5c9e-41a4-a42f-df8819d41a48"],

Cell[BoxData[
 RowBox[{"IGSquareLattice", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}], ",", 
   RowBox[{"GraphStyle", "\[Rule]", "\"\<VintageDiagram\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"f3b1e70a-6bdb-4bc9-aa8b-6afc8c1bcdc5"],

Cell[BoxData[
 RowBox[{"IGSquareLattice", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"10", ",", "10"}], "}"}], ",", 
   RowBox[{"\"\<Periodic\>\"", "\[Rule]", "True"}]}], 
  "]"}]], "Input",ExpressionUUID->"69ec8660-b0ff-477f-bf93-6e34ccf93644"],

Cell[BoxData[
 RowBox[{"Graph3D", "@", 
  RowBox[{"IGSquareLattice", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"5", ",", "4", ",", "3"}], "}"}], ",", 
    RowBox[{"GraphStyle", "\[Rule]", "\"\<Prototype\>\""}]}], 
   "]"}]}]], "Input",ExpressionUUID->"01710643-9ee5-430e-964c-b27dbb77ad1f"],

Cell[BoxData[
 RowBox[{"Graph3D", "@", 
  RowBox[{"IGSquareLattice", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "5"}], "}"}], ",", 
    RowBox[{"DirectedEdges", "\[Rule]", "True"}], ",", 
    RowBox[{"\"\<Periodic\>\"", "\[Rule]", "True"}], ",", 
    RowBox[{"PlotTheme", "\[Rule]", "\"\<NeonColor\>\""}]}], 
   "]"}]}]], "Input",ExpressionUUID->"9f128bcd-f83f-4305-af54-41832589164c"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGTriangularLattice", \
"Subsubsection",ExpressionUUID->"ab8fda81-d893-415b-b588-a3d9724486c8"],

Cell[BoxData[
 RowBox[{"?", 
  "IGTriangularLattice"}]], \
"Input",ExpressionUUID->"94340d39-0f90-4d64-b4d0-cb1f067bb2e9"],

Cell[TextData[{
 Cell[BoxData[
 "IGTriangularLattice"],ExpressionUUID->
  "36af1738-0e8f-4eb5-ab1c-42103d44db3e"],
 " can create a triangular grid graph in the shape of a triangle or a \
rectangle. To generate other types of lattices, see ",
 Cell[BoxData[
 "IGSquareLattice"],ExpressionUUID->"1c83ff60-cf7e-4bf1-b422-7dd4be5d14bf"],
 " and ",
 Cell[BoxData[
 "IGLatticeMesh"],ExpressionUUID->"2e6bdfda-8956-45dd-ba25-79c4b4cf9984"],
 "."
}], "Text",ExpressionUUID->"4ae44865-8aa6-484f-baad-0389d580a145"],

Cell["The available options are:", \
"Text",ExpressionUUID->"d7415cba-271e-4c15-9671-537aa1ca6ee7"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "True"}]],ExpressionUUID->
  "2d845b99-8079-4ef9-9c92-8fec05cdec66"],
 " creates a directed graph."
}], "Item",ExpressionUUID->"ad74e8bc-b08b-4af6-9035-e8432a994f3d"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<Periodic\>\"", "\[Rule]", "True"}]],ExpressionUUID->
  "da853fc5-1d19-4028-84d3-f2240f8a69e3"],
 " creates a periodic lattice."
}], "Item",ExpressionUUID->"fe168368-7342-4099-9017-eda0a483063d"],

Cell["\<\
Generate a triangular lattice on an equilateral triangle with 6 vertices \
along each of its edges.\
\>", "Text",ExpressionUUID->"6e1c4d99-360b-47b8-8c82-3e42f377e19d"],

Cell[BoxData[
 RowBox[{"IGTriangularLattice", "[", 
  RowBox[{"6", ",", 
   RowBox[{"GraphStyle", "\[Rule]", "\"\<SmallNetwork\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"6b7df866-ec70-4642-a88e-8db1a8e50091"],

Cell["\<\
Create a directed triangle lattice on a rectangle. Notice the vertex \
labelling and that the arrows are oriented from smaller index vertices to \
larger index ones, making this an acyclic graph.\
\>", "Text",ExpressionUUID->"aa7d6fe5-fd99-4b29-8518-db417abb7725"],

Cell[BoxData[
 RowBox[{"IGTriangularLattice", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"4", ",", "4"}], "}"}], ",", 
   RowBox[{"DirectedEdges", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
   RowBox[{"VertexShapeFunction", "\[Rule]", "\"\<Name\>\""}], ",", 
   RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"d6eaac24-667c-4ecf-bd39-6dddd6fc6d7f"],

Cell["Create a triangle lattice and colour its vertices.", \
"Text",ExpressionUUID->"6031dac1-da27-4435-8ed4-58ff0e472677"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGTriangularLattice", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"8", ",", "6"}], "}"}], ",", 
    RowBox[{"VertexSize", "\[Rule]", "Large"}], ",", 
    RowBox[{"EdgeStyle", "\[Rule]", "Gray"}]}], "]"}], "//", 
  RowBox[{"IGVertexMap", "[", 
   RowBox[{
    RowBox[{"ColorData", "[", "98", "]"}], ",", 
    RowBox[{"VertexStyle", "\[Rule]", "IGMinimumVertexColoring"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"93cc6373-c86c-4d5a-89ce-e6f96c0ee504"],

Cell["Take a hexagonal subgraph of a triangle lattice.", \
"Text",ExpressionUUID->"4ea7c500-b17c-46db-8459-a49c3121ddf9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"IGTriangularLattice", "[", "13", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"center", "=", 
   RowBox[{"First", "@", 
    RowBox[{"GraphCenter", "[", "g", "]"}]}]}], ";"}], "\n", 
 RowBox[{"VertexDelete", "[", 
  RowBox[{"g", ",", "\[IndentingNewLine]", 
   RowBox[{"Complement", "[", 
    RowBox[{
     RowBox[{"VertexList", "[", "g", "]"}], ",", 
     RowBox[{"AdjacencyList", "[", 
      RowBox[{"g", ",", "center", ",", "4"}], "]"}], ",", 
     RowBox[{"{", "center", "}"}]}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]}], "Input",ExpressionUUID->"b57f12bd-1c84-4167-a84b-38ed97e9e6e5"],

Cell["Create a periodic (i.e. toroidal topology) triangle lattice.", \
"Text",ExpressionUUID->"4b65592e-3b55-42c7-9827-7eeecfc0c871"],

Cell[BoxData[
 RowBox[{"Graph3D", "@", 
  RowBox[{"IGTriangularLattice", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"24", ",", "8"}], "}"}], ",", 
    RowBox[{"\"\<Periodic\>\"", "\[Rule]", "True"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"1e6fd022-8d48-47fc-89d7-d8d7934384a4"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGKaryTree", \
"Subsubsection",ExpressionUUID->"a7995e15-8e6c-4032-b159-670a210bc921"],

Cell[BoxData[
 RowBox[{"?", 
  "IGKaryTree"}]], \
"Input",ExpressionUUID->"757f30d6-5539-46b8-beb0-3c3c53456e9d"],

Cell["The available options are:", \
"Text",ExpressionUUID->"d4d4a569-95b3-4a98-9e91-db9554242fd2"],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "True"}]],ExpressionUUID->
  "b53560f4-426c-4dd4-9535-9e8306597893"],
 " creates a directed tree."
}], "Item",ExpressionUUID->"acef4ff0-3508-471b-870b-5d509ed25f45"],

Cell[BoxData[
 RowBox[{"IGKaryTree", "[", "15", 
  "]"}]], "Input",ExpressionUUID->"c9944c33-11ed-4df3-a7b4-1bd31eb7f751"],

Cell[BoxData[
 RowBox[{"IGKaryTree", "[", 
  RowBox[{"10", ",", "3", ",", 
   RowBox[{"DirectedEdges", "\[Rule]", "True"}]}], 
  "]"}]], "Input",ExpressionUUID->"3ca5da73-a894-4e78-af54-5d9292e81c59"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["IGSymmetricTree", \
"Subsubsection",ExpressionUUID->"e72f97d9-8743-4a70-b1fd-6af2c27e18e8"],

Cell[BoxData[
 RowBox[{"?", 
  "IGSymmetricTree"}]], \
"Input",ExpressionUUID->"6b905b49-3f13-42be-a360-8789e9a29e9e"],

Cell[TextData[{
 Cell[BoxData[
 "IGSymmetricTree"],ExpressionUUID->"fc509d29-1869-4690-a388-d37d1b6d545e"],
 " creates a tree where successive layers (i.e. vertices at the same distance \
from the root) have the specified number of children."
}], "Text",ExpressionUUID->"0bf1f33e-5079-4b53-a950-5e5291f9a8f3"],

Cell["\<\
Create a tree where the root has 4 children, its children have 3 children, \
and so on.\
\>", "Text",ExpressionUUID->"0c837508-4185-4e32-8fa4-d252a33a716d"],

Cell[BoxData[
 RowBox[{"IGSymmetricTree", "[", 
  RowBox[{"{", 
   RowBox[{"4", ",", "3", ",", "2", ",", "1"}], "}"}], 
  "]"}]], "Input",ExpressionUUID->"9d3389a9-bfcd-4391-aa21-9838eebb0c49"],

Cell["Create a directed tree.", \
"Text",ExpressionUUID->"387cb2a0-61b3-44b5-95e4-6d2382025c1d"],

Cell[BoxData[
 RowBox[{"IGSymmetricTree", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"4", ",", "2"}], "}"}], ",", 
   RowBox[{"DirectedEdges", "\[Rule]", "True"}]}], 
  "]"}]], "Input",ExpressionUUID->"8624bf18-4d06-41eb-bddc-818b8a958025"],

Cell[TextData[{
 Cell[BoxData[
 "IGSymmetricTree"],ExpressionUUID->"c9759348-084b-4c5e-b19b-9406c4cee792"],
 " is guaranteed to label vertices in breadth-first order. Deeper layers have \
higher integer labels."
}], "Text",ExpressionUUID->"16acf47a-a632-4f7a-a0dc-f8e130897e85"],

Cell[BoxData[
 RowBox[{"IGSymmetricTree", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"3", ",", "3"}], "}"}], ",", 
   RowBox[{"GraphStyle", "->", "\"\<DiagramBlue\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"bb0cdeb3-94c0-4586-8c12-5e1c0f13421b"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGBetheLattice", \
"Subsubsection",ExpressionUUID->"77ab1095-5d68-4cfc-8710-c546839b1011"],

Cell[BoxData[
 RowBox[{"?", 
  "IGBetheLattice"}]], \
"Input",ExpressionUUID->"c607d641-1465-446c-bd21-058d0f7fd540"],

Cell[TextData[{
 "A Bethe lattice, also called a regular tree, is an infinite tree in which \
all vertices have the same degree. ",
 Cell[BoxData[
  RowBox[{"IGBetheLattice", "[", 
   RowBox[{"n", ",", "k"}], "]"}]],ExpressionUUID->
  "54586bd2-2694-4259-b5a0-87d8b60a5705"],
 " computes the first ",
 Cell[BoxData["n"],ExpressionUUID->"57dd6f4f-748d-41b3-b2fd-b60d1b0c5853"],
 " layers of such a tree. Each non-leaf vertex will have degree ",
 Cell[BoxData["k"],ExpressionUUID->"f01ca67a-2895-495f-af57-15e5eeafb77a"],
 ". The default degree is 3."
}], "Text",ExpressionUUID->"ff997561-82f1-4717-bd07-9c6b7bfbe3fa"],

Cell[TextData[{
 Cell[BoxData[
 "IGBetheLattice"],ExpressionUUID->"7efaff89-e057-465e-8e05-398646f47e1e"],
 " differs from ",
 Cell[BoxData[
 "CompleteKaryTree"],ExpressionUUID->"b1dc01df-aef7-4c5c-aefd-9c9f5351224e"],
 " in that the degree of the root will be the same as the degree of other \
non-lead nodes."
}], "Text",ExpressionUUID->"52d19f2e-89e3-4f5a-bbf2-6eb41f90e82f"],

Cell[BoxData[
 RowBox[{"IGBetheLattice", "[", 
  RowBox[{"5", ",", 
   RowBox[{"GraphStyle", "\[Rule]", "\"\<Prototype\>\""}], ",", 
   RowBox[{"VertexSize", "\[Rule]", "Large"}]}], 
  "]"}]], "Input",ExpressionUUID->"781fbd78-9688-4211-9cec-f3f98db4e786"],

Cell["\<\
Generate a tree where non-leaf nodes have total degree 5, and use directed \
edges.\
\>", "Text",ExpressionUUID->"b9064008-8ede-4c97-b5a9-0432dbd15465"],

Cell[BoxData[
 RowBox[{"IGBetheLattice", "[", 
  RowBox[{"5", ",", "4", ",", 
   RowBox[{"DirectedEdges", "\[Rule]", "True"}]}], 
  "]"}]], "Input",ExpressionUUID->"913c85c1-d7a7-4151-9802-624d57ec38ee"],

Cell["\<\
Colour vertices based on their distance from the root (i.e. the \
\[OpenCurlyDoubleQuote]layer\[CloseCurlyDoubleQuote] they are part of).\
\>", "Text",ExpressionUUID->"8bd88a50-8949-4870-ad7a-1cdf50db621d"],

Cell[BoxData[
 RowBox[{"IGVertexMap", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"ColorData", "[", "68", "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"VertexStyle", "\[Rule]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"First", "@", 
       RowBox[{"IGDistanceMatrix", "[", 
        RowBox[{"#", ",", 
         RowBox[{"{", "1", "}"}]}], "]"}]}], "&"}], ")"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"IGBetheLattice", "[", 
    RowBox[{"5", ",", 
     RowBox[{"GraphStyle", "\[Rule]", "\"\<BasicBlack\>\""}], ",", 
     RowBox[{"VertexSize", "\[Rule]", "0.4"}]}], "]"}]}], 
  "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"fc084187-5f9d-4e2f-b6d7-523c1ae3c73b"],

Cell["Visualize the nested line graph of a degree-4 regular tree.", \
"Text",ExpressionUUID->"2a0c133e-c5c5-43c7-a914-7c1664651c59"],

Cell[BoxData[
 RowBox[{"Graph3D", "@", 
  RowBox[{"Nest", "[", 
   RowBox[{"LineGraph", ",", 
    RowBox[{"IGBetheLattice", "[", 
     RowBox[{"5", ",", "4"}], "]"}], ",", "2"}], 
   "]"}]}]], "Input",ExpressionUUID->"1a1b1019-6ac8-4a4f-810c-9858b6db11ca"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGFromPrufer", \
"Subsubsection",ExpressionUUID->"e8f80960-2d8b-4a43-ac7d-3a3407362dd8"],

Cell[BoxData[
 RowBox[{"?", 
  "IGFromPrufer"}]], \
"Input",ExpressionUUID->"9f8eabbf-7339-4cdc-b9db-0b1f1b158634"],

Cell[TextData[{
 "A Pr\[UDoubleDot]fer sequence is a unique representation of an ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "fe354d7d-a34f-4374-9c0e-063da8541414"],
 "-vertex labelled tree as ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "-", "2"}], TraditionalForm]],ExpressionUUID->
  "f8aa41c2-6573-4548-97d6-be12f09cf32c"],
 " integers between ",
 Cell[BoxData[
  FormBox["1", TraditionalForm]],ExpressionUUID->
  "42632eb9-3b08-490e-b3c5-c691f6f8842f"],
 " and ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "6355e2ae-58b5-4d63-8bc2-181eafecf685"],
 "."
}], "Text",ExpressionUUID->"0c829958-21af-414c-99e0-5faee346d766"],

Cell[BoxData[
 RowBox[{"IGFromPrufer", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "2", ",", "2"}], "}"}], ",", 
   RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"2a841c78-b5e8-4cf7-8da9-4427bf30c543"],

Cell[TextData[{
 "Use ",
 Cell[BoxData[
 "IGToPrufer"],ExpressionUUID->"82878ab9-e8b5-4c8d-9228-341e6c5e7965"],
 " to convert a tree back to its Pr\[UDoubleDot]fer sequence."
}], "Text",ExpressionUUID->"7dec34fa-2974-46a3-bbee-a41cdc77f542"],

Cell[BoxData[
 RowBox[{"IGToPrufer", "[", "%", 
  "]"}]], "Input",ExpressionUUID->"7f328a9c-c927-49a2-81a1-d38b4737d389"],

Cell["Generate all labelled trees on 4 nodes:", \
"Text",ExpressionUUID->"507845f5-2738-4ed2-9276-95920c339eec"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IGFromPrufer", "[", 
    RowBox[{"#", ",", 
     RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}], "&"}], "/@", 
  RowBox[{"Tuples", "[", 
   RowBox[{
    RowBox[{"Range", "[", "4", "]"}], ",", 
    RowBox[{"{", "2", "}"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"51393f87-253f-44ef-ba0d-130cedf27577"],

Cell["Of these, only two are non-isomorphic.", \
"Text",ExpressionUUID->"ba665fdf-9e8e-4c40-8bde-cf67973ce05d"],

Cell[BoxData[
 RowBox[{"DeleteDuplicates", "[", 
  RowBox[{"CanonicalGraph", "/@", "%"}], 
  "]"}]], "Input",ExpressionUUID->"63926f38-f9bf-4eea-a59a-821a0091f939"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGExpressionTree", \
"Subsubsection",ExpressionUUID->"47f97ce3-cbbc-420b-a285-58c7afad986e"],

Cell[BoxData[
 RowBox[{"?", 
  "IGExpressionTree"}]], \
"Input",ExpressionUUID->"4f275949-4b0a-435a-95d5-3fa9afcf8219"],

Cell[TextData[{
 Cell[BoxData[
 "IGExpressionTree"],ExpressionUUID->"d1c7679b-ef7d-40c0-87cd-5a81056dba9f"],
 " constructs the tree graph corresponding to an arbitrary ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " expression. The vertices of the tree will be the positions of the \
corresponding subexpressions."
}], "Text",ExpressionUUID->"63f10348-c091-456e-8ba9-31d4d7f01429"],

Cell[TextData[{
 Cell[BoxData[
 "IGExpressionTree"],ExpressionUUID->"02437527-77dc-4a58-bc13-b4f8bc7e26ad"],
 " takes all standard ",
 Cell[BoxData["Graph"],ExpressionUUID->"e6b95323-24d3-45a1-9c4d-dbf6426b8840"],
 " options. The ",
 Cell[BoxData[
 "VertexLabels"],ExpressionUUID->"6ed89874-65a2-4914-983b-07e55a6dee8e"],
 " option takes the following special values:"
}], "Text",ExpressionUUID->"a6eac6f6-8469-4bef-b3f9-202b8e28423c"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"VertexLabels", "\[Rule]", "\"\<Head\>\""}]],ExpressionUUID->
  "447813a3-4189-42d1-be33-8a37e2d4af70"],
 " labels branch vertices with the ",
 Cell[BoxData[
 "Head"],ExpressionUUID->"cfe0e9f7-d497-43b8-bb92-8a3992e6e02b"],
 " of the corresponding subexpression and leaf vertices with the \
corresponding atomic expression."
}], "Item",ExpressionUUID->"4b4692f7-678c-489f-8a92-dde367560049"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"VertexLabels", "\[Rule]", "\"\<Subexpression\>\""}]],
  ExpressionUUID->"6f834030-f90e-47d2-9616-f0d5ef1f23ec"],
 " labels vertices with the corresponding subexpression."
}], "Item",ExpressionUUID->"150d4f60-2657-4ccd-9466-45a98037682d"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]],ExpressionUUID->
  "5488e94b-41db-415b-9702-360c6168770e"],
 " labels vertices with their name, i.e. the position of the corresponding \
subexpression."
}], "Item",ExpressionUUID->"25599789-6241-4a9a-bdeb-aeea99da4d5b"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"VertexLabels", "\[Rule]", "None"}]],ExpressionUUID->
  "61b1f0ef-c479-46a1-9e71-8fba334f4581"],
 " uses no labels."
}], "Item",ExpressionUUID->"be07085a-0365-43d9-9458-7d99562305cf"],

Cell[TextData[{
 Cell[BoxData[
 "IGExpressionTree"],ExpressionUUID->"6cfb5bb0-4fc4-4e62-a7f6-2dbaf8d4934b"],
 " constructs a graph corresponding to the structure of a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " expression. "
}], "Text",ExpressionUUID->"d9aba7f8-9c34-41a8-84a9-bad94e63cab2"],

Cell[BoxData[
 RowBox[{"tree", "=", 
  RowBox[{"IGExpressionTree", "[", 
   RowBox[{"expr", "=", 
    RowBox[{"1", "+", 
     RowBox[{"x", "^", "2"}]}]}], 
   "]"}]}]], "Input",ExpressionUUID->"4b597dd9-d1d9-4994-b28d-2b1c967be520"],

Cell[TextData[{
 "The expression tree is similar to what ",
 Cell[BoxData[
 "TreeForm"],ExpressionUUID->"c058406c-515b-48e6-a22f-8580fb1ae13b"],
 " displays, but unlike ",
 Cell[BoxData[
 "TreeForm"],ExpressionUUID->"ccbd59d6-aa9b-44ec-9044-29db9f7fefc9"],
 "\[CloseCurlyQuote]s output, it is a ",
 Cell[BoxData["Graph"],ExpressionUUID->"f82461a4-ef82-4b01-ab7e-9eb7fd523236"],
 " object that works with all graph functions."
}], "Text",ExpressionUUID->"9679a793-0e40-47b7-832c-b075e6504af2"],

Cell[BoxData[
 RowBox[{"TreeForm", "[", "expr", 
  "]"}]], "Input",ExpressionUUID->"b28a699d-8d39-403b-b8f6-cbd68ad988a7"],

Cell["\<\
The vertex names are the position specifications of the corresponding \
subexpressions.\
\>", "Text",ExpressionUUID->"87548249-8e38-4444-b79f-73f108b927b2"],

Cell[BoxData[
 RowBox[{"VertexList", "[", "tree", 
  "]"}]], "Input",ExpressionUUID->"13a75c93-7263-484f-bb8e-68047c3338da"],

Cell[BoxData[
 RowBox[{"Extract", "[", 
  RowBox[{"expr", ",", "%"}], 
  "]"}]], "Input",ExpressionUUID->"cea69cee-85bc-43e7-8af1-f1b559a7402f"],

Cell["\<\
Place the vertex labels in the centre and construct an undirected graph.\
\>", "Text",ExpressionUUID->"b3d6be35-c60e-43b8-bea9-35d41af31eb7"],

Cell[BoxData[
 RowBox[{"IGExpressionTree", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"x", "^", "2"}], "+", 
    RowBox[{"y", "^", "2"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"GraphStyle", "\[Rule]", "\"\<DiagramGold\>\""}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"VertexLabels", "\[Rule]", 
    RowBox[{"Placed", "[", 
     RowBox[{"\"\<Head\>\"", ",", "Center"}], "]"}]}], ",", 
   RowBox[{"VertexSize", "\[Rule]", "Large"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"bc9c03bc-cbfc-4893-8611-d81f5a0d1d8a"],

Cell["Create an undirected graph, labelled with subexpressions.", \
"Text",ExpressionUUID->"805aba48-9f14-4957-b40d-84f526156ee4"],

Cell[BoxData[
 RowBox[{"IGExpressionTree", "[", 
  RowBox[{
   RowBox[{"Normal", "[", 
    RowBox[{
     RowBox[{"Sin", "[", "x", "]"}], "+", 
     RowBox[{
      RowBox[{"O", "[", "x", "]"}], "^", "5"}]}], "]"}], ",", 
   RowBox[{"DirectedEdges", "\[Rule]", "False"}], ",", "\[IndentingNewLine]", 
   
   RowBox[{"VertexLabels", "\[Rule]", "\"\<Subexpression\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"0c30a87f-31c1-478a-81e4-1921d68c0240"],

Cell["\<\
Certain trees are easier to construct through their corresponding nested \
expression.\
\>", "Text",ExpressionUUID->"5f6767d5-5553-461a-b6cc-a52977cb8ec9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IGExpressionTree", "[", 
    RowBox[{"#", ",", 
     RowBox[{"VertexLabels", "\[Rule]", "\"\<Index\>\""}]}], "]"}], "&"}], "/@", 
  RowBox[{"Groupings", "[", 
   RowBox[{"5", ",", "3"}], 
   "]"}]}]], "Input",ExpressionUUID->"0b2a634d-f6c7-4b43-998d-bce2e9cf6244"],

Cell[TextData[{
 "An equivalent of ",
 Cell[BoxData[
 "IGSymmetricTree"],ExpressionUUID->"4a07bbba-d94e-4b41-90f8-151dcba1c795"],
 " can be easily implemented using ",
 Cell[BoxData[
 "IGExpressionTree"],ExpressionUUID->"86d714ef-51cc-417b-af58-9082bc5a2232"],
 "."
}], "Text",ExpressionUUID->"6830fb1f-8dc0-4915-bd16-a68e6792887d"],

Cell[BoxData[
 RowBox[{"IGExpressionTree", "[", 
  RowBox[{
   RowBox[{"ConstantArray", "[", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4", ",", "5"}], "}"}]}], "]"}], ",", 
   RowBox[{"VertexLabels", "\[Rule]", "None"}], ",", 
   RowBox[{"GraphLayout", "\[Rule]", "\"\<RadialEmbedding\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"2b3bd0c6-272e-4daf-9593-fac387d73616"],

Cell["Define a tree through a substitution system.", \
"Text",ExpressionUUID->"f372d436-082c-480d-9801-9ddd6e44d2a9"],

Cell[BoxData[
 RowBox[{"IGExpressionTree", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Nest", "[", 
    RowBox[{
     RowBox[{"ReplaceAll", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"0", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}]}], ",", 
        RowBox[{"1", "\[Rule]", 
         RowBox[{"{", "0", "}"}]}]}], "}"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", "3"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"VertexLabels", "\[Rule]", "None"}], ",", 
   RowBox[{"GraphStyle", "\[Rule]", "\"\<VibrantColor\>\""}]}], 
  "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"c0db6eef-8d89-4ee8-a878-963f019c9acd"],

Cell[TextData[{
 "To format each node so that it fits a label, it is necessary to set an \
explicit ",
 Cell[BoxData[
 "VertexShapeFunction"],ExpressionUUID->
  "d4854218-cf12-46a5-99d6-304fd3046338"],
 "."
}], "Text",ExpressionUUID->"4452665c-802c-4acf-a949-cfbe12c5cc21"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IGExpressionTree", "[", 
    RowBox[{
     RowBox[{"First", "@", 
      RowBox[{"Roots", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"x", "^", "2"}], "+", 
          RowBox[{"a", " ", "x"}], "+", "1"}], "==", "0"}], ",", "x"}], 
       "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"VertexLabels", "\[Rule]", "\"\<Subexpression\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"ImageSize", "\[Rule]", "280"}]}], "\[IndentingNewLine]", "]"}], 
   "//", "\[IndentingNewLine]", 
   RowBox[{"IGVertexMap", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"e", ",", 
       RowBox[{
        RowBox[{"Inset", "[", 
         RowBox[{
          RowBox[{"Panel", "[", "e", "]"}], ",", "#1"}], "]"}], "&"}]}], 
      "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"VertexShapeFunction", "\[Rule]", 
      RowBox[{"IGVertexProp", "[", "VertexLabels", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], "//", 
  RowBox[{
   RowBox[{"RemoveProperty", "[", 
    RowBox[{"#", ",", "VertexLabels"}], "]"}], 
   "&"}]}]], "Input",ExpressionUUID->"5069a01c-414a-42f9-88ad-87f238e88ae8"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGCompleteGraph", \
"Subsubsection",ExpressionUUID->"dc384a6b-349a-412c-bb98-bd306dbff6dc"],

Cell[BoxData[
 RowBox[{"?", 
  "IGCompleteGraph"}]], \
"Input",ExpressionUUID->"7b5291c3-e0c3-436f-94e8-cf220a1a6ed3"],

Cell["The available options are:", \
"Text",ExpressionUUID->"f7472edf-a98e-40e6-a21b-f6584632abfa"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "True"}]],ExpressionUUID->
  "5ab86c10-135e-40b1-a26f-c83fc89070b6"],
 " creates a directed graph."
}], "Item",ExpressionUUID->"6d1c1a58-3758-4d90-9f70-eab76564e067"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"SelfLoops", "\[Rule]", "True"}]],ExpressionUUID->
  "243dcc99-7547-45d6-af22-e3c52937aa37"],
 " includes self-loops."
}], "Item",ExpressionUUID->"b25bfb9b-a0b6-4e58-bd77-2eb68b772358"],

Cell["Create an undirected complete graph with loops.", \
"Text",ExpressionUUID->"089f8544-4470-4f4a-bd44-d04c8e46ea9a"],

Cell[BoxData[
 RowBox[{"IGCompleteGraph", "[", 
  RowBox[{"5", ",", 
   RowBox[{"SelfLoops", "\[Rule]", "True"}]}], 
  "]"}]], "Input",ExpressionUUID->"49ec547a-517b-40c5-8ec4-f03a8cd90015"],

Cell["Create a directed complete graph with loops.", \
"Text",ExpressionUUID->"52dd2845-209a-4cd1-8326-c794bce7e7c7"],

Cell[BoxData[
 RowBox[{"IGCompleteGraph", "[", 
  RowBox[{"6", ",", 
   RowBox[{"SelfLoops", "\[Rule]", "True"}], ",", 
   RowBox[{"DirectedEdges", "\[Rule]", "True"}]}], 
  "]"}]], "Input",ExpressionUUID->"74dc0a52-31cf-4175-8e51-455e74afcb40"],

Cell["\<\
Create a list of complete graphs starting with the null graph.\
\>", "Text",ExpressionUUID->"78d840a6-18e5-40a5-a1d8-d2575ae7adad"],

Cell[BoxData[
 RowBox[{"IGCompleteGraph", "/@", 
  RowBox[{"Range", "[", 
   RowBox[{"0", ",", "3"}], 
   "]"}]}]], "Input",ExpressionUUID->"57fc0505-b7d8-48b0-8438-0b9af51f8865"],

Cell["Create a complete graph on the given vertices.", \
"Text",ExpressionUUID->"fb53e5ea-ab1b-4bc1-a371-8c52d27ce152"],

Cell[BoxData[
 RowBox[{"IGCompleteGraph", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\"", ",", "\"\<d\>\""}], 
    "}"}], ",", 
   RowBox[{"GraphStyle", "\[Rule]", "\"\<DiagramBlue\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"e4abeddc-3767-49d5-89dd-f574055979d0"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGCompleteAcyclicGraph", \
"Subsubsection",ExpressionUUID->"b140eeca-4717-4d1f-a350-d33a2acd2bc3"],

Cell[BoxData[
 RowBox[{"?", 
  "IGCompleteAcyclicGraph"}]], \
"Input",ExpressionUUID->"56d39c8f-3c51-47fa-8363-e6028886dc73"],

Cell["Create a complete acyclic directed graph on 5 vertices.", \
"Text",ExpressionUUID->"bad32956-2d9f-463f-9a3f-4b40b7431a69"],

Cell[BoxData[
 RowBox[{"IGCompleteAcyclicGraph", "[", "5", 
  "]"}]], "Input",ExpressionUUID->"fb876ed2-8239-4061-9252-62e768d8e2a5"],

Cell["\<\
Create a complete acyclic graph on the given vertices. The directed edges \
always run from vertices that appear earlier in the list to those that appear \
later.\
\>", "Text",ExpressionUUID->"cd72ae20-53c0-4f52-82e0-7c2bf6427aff"],

Cell[BoxData[
 RowBox[{"IGCompleteAcyclicGraph", "[", 
  RowBox[{
   RowBox[{"CharacterRange", "[", 
    RowBox[{"\"\<a\>\"", ",", "\"\<f\>\""}], "]"}], ",", 
   RowBox[{"GraphStyle", "\[Rule]", "\"\<DiagramGold\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"9336662e-2a58-468a-90fa-b5bff700ee8e"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGKautzGraph", \
"Subsubsection",ExpressionUUID->"40de5fb0-3b65-49c0-8e8d-f49aa544e3b4"],

Cell[BoxData[
 RowBox[{"?", 
  "IGKautzGraph"}]], \
"Input",ExpressionUUID->"8463d590-cfe6-4f03-bec7-ba7a373a42e0"],

Cell[TextData[{
 "The vertices of the Kautz graph ",
 Cell[BoxData[
  FormBox[
   SubsuperscriptBox["K", "m", "n"], TraditionalForm]],ExpressionUUID->
  "e1552909-5d12-4b4f-833a-9fd4dbcd57e2"],
 " are strings of length ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "+", "1"}], TraditionalForm]],ExpressionUUID->
  "96537821-e499-4544-94c7-c85da3fe1b2c"],
 ", composed of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"m", "+", "1"}], TraditionalForm]],ExpressionUUID->
  "bcf6f21c-b754-4a96-93cb-2d66e1f60fcd"],
 " distinct symbols, with the restriction that two adjacent symbols in the \
string may not be the same. A vertex ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["s", "1"], 
    SubscriptBox["s", "2"], 
    SubscriptBox["\[Ellipsis]s", "n"], 
    SubscriptBox["s", 
     RowBox[{"n", "+", "1"}]]}], TraditionalForm]],ExpressionUUID->
  "0f7c28ff-6a84-4179-bf7e-2e2cd137dbfb"],
 " connects to all other vertices of the form ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["s", "2"], 
    SubscriptBox["\[Ellipsis]s", 
     RowBox[{"n", "+", "1"}]], "x"}], TraditionalForm]],ExpressionUUID->
  "ad336e81-ed8f-48d4-afd4-77e51e2a0cc2"],
 ", where ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "152a256f-4fd2-42ac-9562-da0790a5aea3"],
 " can be any symbol distinct from ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["s", 
    RowBox[{"n", "+", "1"}]], TraditionalForm]],ExpressionUUID->
  "8481b2fa-ddc9-41fe-8136-0cb93130ade7"],
 "."
}], "Text",ExpressionUUID->"4afa4a64-3f91-405a-81b4-505558d2d350"],

Cell[TextData[{
 "The Kautz graph ",
 Cell[BoxData[
  FormBox[
   SubsuperscriptBox["K", "m", "n"], TraditionalForm]],ExpressionUUID->
  "4e214108-2bf7-4b66-9817-0dbcb9caec71"],
 " has ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"m", "+", "1"}], ")"}], " ", 
    SuperscriptBox["m", "n"]}], TraditionalForm]],ExpressionUUID->
  "f1e2d41f-2cd8-4e0c-817b-4c7619d44ae5"],
 " vertices, with each vertex having in-degree and out-degree ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "9114a08c-ea5e-4757-be49-94a1aca08544"],
 ". Therefore, it has ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"m", "+", "1"}], ")"}], " ", 
    SuperscriptBox["m", 
     RowBox[{"n", "+", "1"}]]}], TraditionalForm]],ExpressionUUID->
  "b3c5627c-9b93-41a4-8b1d-12ce93ff4a5b"],
 " edges."
}], "Text",ExpressionUUID->"8c3a6ea4-c846-44fd-aab0-44257f77d0a0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"VertexCount", "@", 
   RowBox[{"IGKautzGraph", "[", 
    RowBox[{"3", ",", "2"}], "]"}]}], "\[Equal]", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"3", "+", "1"}], ")"}], "*", 
   RowBox[{
   "3", "^", 
    "2"}]}]}]], \
"Input",ExpressionUUID->"c80c0399-7fb6-41dc-8e28-231ef319e002"],

Cell[BoxData[
 RowBox[{"VertexOutDegree", "@", 
  RowBox[{"IGKautzGraph", "[", 
   RowBox[{"3", ",", "2"}], 
   "]"}]}]], "Input",ExpressionUUID->"b65e530d-1b36-4ed8-b431-2684d485c2f5"],

Cell[TextData[{
 "The line graph of Kautz graph ",
 Cell[BoxData[
  FormBox[
   SubsuperscriptBox["K", "m", "n"], TraditionalForm]],ExpressionUUID->
  "dd192bf3-77a5-4aed-a14c-3975ec5286d0"],
 " is ",
 Cell[BoxData[
  FormBox[
   SubsuperscriptBox["K", "m", 
    RowBox[{"n", "+", "1"}]], TraditionalForm]],ExpressionUUID->
  "ccc04663-360d-4c18-b372-1f22d79c1d43"],
 "."
}], "Text",ExpressionUUID->"91f3bb0d-bd4b-45fc-8ed1-152ba0f479f2"],

Cell[BoxData[
 RowBox[{"IGIsomorphicQ", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"LineGraph", "@", 
    RowBox[{"IGKautzGraph", "[", 
     RowBox[{"2", ",", "2"}], "]"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"IGKautzGraph", "[", 
    RowBox[{"2", ",", "3"}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"8f27095b-c6e9-48fd-a769-5dba936b7dbc"],

Cell[TextData[{
 "Visualize the Kautz graph ",
 Cell[BoxData[
  FormBox[
   SubsuperscriptBox["K", "2", "3"], TraditionalForm]],ExpressionUUID->
  "7df81b0d-f0d9-4526-a8dc-2e3266e833c7"],
 " on 3 characters with string length 4 in three dimensions."
}], "Text",ExpressionUUID->"5633ed6b-768a-4abf-a389-f6e6fa631b52"],

Cell[BoxData[
 RowBox[{"Graph3D", "@", 
  RowBox[{"IGKautzGraph", "[", 
   RowBox[{"2", ",", "3"}], 
   "]"}]}]], "Input",ExpressionUUID->"da8cfbf2-03c1-4ca7-a0a7-7c1aa8253be5"],

Cell["\<\
Label the vertices of the Kautz graph on 3 characters with string length 2.\
\>", "Text",ExpressionUUID->"0c6c52ec-6ba4-4d80-9905-4f9271a48b87"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"labels", "=", 
   RowBox[{"StringJoin", "/@", 
    RowBox[{"DeleteCases", "[", 
     RowBox[{
      RowBox[{"Tuples", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<A\>\"", ",", "\"\<B\>\"", ",", "\"\<C\>\""}], "}"}], 
        ",", 
        RowBox[{"{", "2", "}"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"c_", ",", "c_"}], "}"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"IGKautzGraph", "[", 
  RowBox[{"2", ",", "1", ",", "\[IndentingNewLine]", 
   RowBox[{"VertexLabels", "\[Rule]", 
    RowBox[{"Thread", "[", 
     RowBox[{
      RowBox[{"Range", "[", "6", "]"}], "\[Rule]", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Placed", "[", 
          RowBox[{"#", ",", "Center"}], "]"}], "&"}], ")"}], "/@", 
       "labels"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"VertexSize", "\[Rule]", "Large"}], ",", 
   RowBox[{"VertexShapeFunction", "\[Rule]", "\"\<Capsule\>\""}], ",", 
   RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<CoolColor\>\""}], ",", 
   RowBox[{"VertexLabelStyle", "\[Rule]", "White"}]}], "\[IndentingNewLine]", 
  "]"}]}], "Input",ExpressionUUID->"7851f285-8166-4553-a7a7-1ef883fbe201"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGDeBruijnGraph", \
"Subsubsection",ExpressionUUID->"e89d1023-cb96-461e-ad06-001701de27ac"],

Cell[BoxData[
 RowBox[{"?", 
  "IGDeBruijnGraph"}]], \
"Input",ExpressionUUID->"ff31574a-416f-469b-ac68-cf0fc531070f"],

Cell[BoxData[
 RowBox[{"IGDeBruijnGraph", "[", 
  RowBox[{"3", ",", "2", ",", 
   RowBox[{"GraphStyle", "\[Rule]", "\"\<BackgroundBlue\>\""}], ",", 
   RowBox[{"EdgeStyle", "\[Rule]", "Thick"}]}], 
  "]"}]], "Input",ExpressionUUID->"f39a8d53-96ea-4400-b4c5-7206726cba2b"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGRealizeDegreeSequence", \
"Subsubsection",ExpressionUUID->"25b5c6c1-7f8c-4ca8-99dc-4c486552214b"],

Cell[BoxData[
 RowBox[{"?", 
  "IGRealizeDegreeSequence"}]], \
"Input",ExpressionUUID->"bfed629e-340f-46ad-8f59-312bddc1b7e2"],

Cell[TextData[{
 "This function constructs an undirected graph with the given degree \
sequence, or a directed graph with the given in- and out-degree sequences. \
For constructing simple graphs, it uses the Havel\[Dash]Hakimi algorithm \
(undirected case) or Kleitman\[Dash]Wang algorithm (directed case). These \
algorithms work by selecting a \[OpenCurlyDoubleQuote]hub\
\[CloseCurlyDoubleQuote] vertex, and connecting up all its free (out-)degrees \
to other vertices with the largest degrees. In the directed case, the \
\[OpenCurlyDoubleQuote]largest\[CloseCurlyDoubleQuote] degrees are determined \
by lexicographic ordering of (in, out)-degree pairs. For constructing a \
loop-free multigraph, a similar algorithm is used, but the hub is connected \
to only one other vertex in each step, instead of to as many as its degree. \
If self-loops are allowed as well, the same algorithm is used, and if a \
loop-free result cannot be created, an appropriate number of self-loops will \
be added to the very last hub.  The order in which hub vertices are selected \
is controlled by the ",
 Cell[BoxData[
 "Method"],ExpressionUUID->"d8ae2dd4-39f2-45cb-8eee-39cbe6524a20"],
 " option."
}], "Text",ExpressionUUID->"9edcf92b-e973-4744-a67d-32b460794f2a"],

Cell[TextData[{
 "To randomly sample multiple realizations of a degree sequence, use ",
 Cell[BoxData[
 "IGDegreeSequenceGame"],ExpressionUUID->
  "e0ede99b-a02a-499a-a8e0-c1436a84df47"],
 ", or first create a single graph with ",
 Cell[BoxData[
 "IGRealizeDegreeSequence"],ExpressionUUID->
  "54ac5c40-84ff-40d7-b41b-9e12beb98df2"],
 ", then randomly rewire it using ",
 Cell[BoxData[
 "IGRewire"],ExpressionUUID->"34be2cca-f3f5-45fa-a7e8-5df7ccf56993"],
 "."
}], "Text",ExpressionUUID->"8bf52b0b-dbdc-4fd2-8f40-c0fc84a75c2a"],

Cell["The available options are:", \
"Text",ExpressionUUID->"6076a326-f286-47bf-b72e-93456e875343"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"SelfLoops", "\[Rule]", "True"}]],ExpressionUUID->
  "6b7eb5b1-344e-4679-b6cb-37388a8c3df3"],
 " allows creating self-loops (disallowed by default). "
}], "Item",ExpressionUUID->"f9589fed-d6f5-4b9a-adbc-ae3ed02bc4b5"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"MultiEdges", "\[Rule]", "True"}]],ExpressionUUID->
  "b5d38ecf-03f4-40fc-8369-79084e8f564e"],
 " allows creating multi-edges (disallowed by default)."
}], "Item",ExpressionUUID->"6e208afb-f763-4cb7-901c-a51e00ee5307"],

Cell[TextData[{
 "The ",
 Cell[BoxData[
 "Method"],ExpressionUUID->"31fc988c-55a5-4376-9e28-a105f6100ac5"],
 " option controls the order in which hub vertices are chosen."
}], "Item",ExpressionUUID->"187a0cf5-d334-4750-95ad-95c61f18b751"],

Cell[TextData[{
 "Available ",
 Cell[BoxData[
 "Method"],ExpressionUUID->"561ae5f2-fac5-4623-a8e5-a926a9b95cb4"],
 " option values:"
}], "Text",ExpressionUUID->"f3a1c74d-b675-4b5c-a289-c0c26f7c52c1"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<SmallestFirst\>\""],ExpressionUUID->
  "e505b7db-3abd-4a05-9112-108b1d6a1ee5"],
 " will choose a smallest-degree vertex in each step of the algorithm (this \
is the default). This results in a disassortative network. In the undirected \
case, this method is guaranteed to construct a connected graph, if one \
exists, both when constructing simple graphs or multigraphs. See ",
 ButtonBox["Horv\[AAcute]t and Modes (2020)",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://arxiv.org/abs/2009.03747"], None},
  ButtonNote->"https://arxiv.org/abs/2009.03747"],
 ", as well as ",
 ButtonBox["http://szhorvat.net/pelican/hh-connected-graphs.html",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://szhorvat.net/pelican/hh-connected-graphs.html"], None},
  ButtonNote->"http://szhorvat.net/pelican/hh-connected-graphs.html"],
 " for the proof. In the directed case, it tends to construct \
weakly-connected graphs, but this is not guaranteed."
}], "Item",ExpressionUUID->"00ba75fc-f85c-492d-86ab-d55826fb5569"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<LargestFirst\>\""],ExpressionUUID->
  "c6ef93a0-66a8-473d-974b-780c94099775"],
 " will choose a largest-degree vertex. This results in an assortative \
network. This method tends to construct disconnected graphs. This is the most \
common variant of the Havel\[Dash]Hakimi algorithm implemented in other \
packages."
}], "Item",ExpressionUUID->"c020d0d6-ec6c-4aea-a33c-62bbd42cad2b"],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
 "\"\<Index\>\""],ExpressionUUID->"3f3402ad-d337-44ca-8660-c41c4b3499b4"],
 " will choose vertices in the order of their indices."
}], "Item",ExpressionUUID->"6ea4cfd7-d703-48b7-ae63-4cf6ceb69d3a"],

Cell[BoxData[
 RowBox[{"degseq", "=", 
  RowBox[{"VertexDegree", "@", 
   RowBox[{"IGGiantComponent", "@", 
    RowBox[{"RandomGraph", "[", 
     RowBox[{"{", 
      RowBox[{"50", ",", "50"}], "}"}], 
     "]"}]}]}]}]], \
"Input",ExpressionUUID->"091d9d01-ec35-485a-b8c5-59efaabc5c68"]
}, Open  ]],

Cell[TextData[{
 "The default ",
 Cell[BoxData[
  RowBox[{"Method", "\[Rule]", "\"\<SmallestFirst\>\""}]],ExpressionUUID->
  "264c2cf7-8cd0-4818-975b-e8334d5bb35e"],
 " tends to create highly disassortative graphs. The result is guaranteed to \
be connected if the input degree sequence was potentially connected."
}], "Text",ExpressionUUID->"8752b012-a64b-49da-9534-f0c72fdd7bda"],

Cell[BoxData[
 RowBox[{"IGRealizeDegreeSequence", "[", "degseq", 
  "]"}]], "Input",ExpressionUUID->"e9538039-aa3e-4336-9e5b-2a18c83a63e0"],

Cell[BoxData[
 RowBox[{"N", "@", 
  RowBox[{
  "GraphAssortativity", "[", "%", 
   "]"}]}]], "Input",ExpressionUUID->"5afae51d-6ad8-44b2-ab3d-7eb962466ef1"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"Method", "\[Rule]", "\"\<LargestFirst\>\""}]],ExpressionUUID->
  "a52051ad-653a-44a4-8618-03082b012b93"],
 " tends to create highly assortative disconnected graphs."
}], "Text",ExpressionUUID->"947ca2a2-4863-4745-930e-785108b46a5a"],

Cell[BoxData[
 RowBox[{"IGRealizeDegreeSequence", "[", 
  RowBox[{"degseq", ",", 
   RowBox[{"Method", "\[Rule]", "\"\<LargestFirst\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"f5ce25bf-0681-442d-b1c6-6eb43b41f18b"],

Cell[BoxData[
 RowBox[{"N", "@", 
  RowBox[{
  "GraphAssortativity", "[", "%", 
   "]"}]}]], "Input",ExpressionUUID->"2ce81367-2beb-48c1-9829-07cc38c474e2"],

Cell["Allow parallel edges.", \
"Text",ExpressionUUID->"2f62a164-8cfd-442e-a791-f011d883a3a4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IGRealizeDegreeSequence", "[", 
    RowBox[{"degseq", ",", 
     RowBox[{"MultiEdges", "\[Rule]", "True"}], ",", 
     RowBox[{"Method", "\[Rule]", "#"}]}], "]"}], "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{
   "\"\<SmallestFirst\>\"", ",", "\"\<LargestFirst\>\"", ",", 
    "\"\<Index\>\""}], 
   "}"}]}]], "Input",ExpressionUUID->"b87f4cf2-11ed-4961-b49f-8c71de6ecda6"],

Cell["Create a directed graph.", \
"Text",ExpressionUUID->"a6748ef4-a8af-40f3-8065-9b7855f1496f"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"IGBarabasiAlbertGame", "[", 
   RowBox[{"50", ",", "1"}], 
   "]"}]}]], "Input",ExpressionUUID->"ac47e6e8-23a0-4c26-b9c6-6275f2d25906"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"indegseq", "=", 
   RowBox[{"VertexInDegree", "[", "g", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"outdegseq", "=", 
   RowBox[{"VertexOutDegree", "[", "g", "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"2e48dcf6-e898-48af-b7a0-721be263deb1"],

Cell[BoxData[
 RowBox[{"IGRealizeDegreeSequence", "[", 
  RowBox[{"outdegseq", ",", "indegseq"}], 
  "]"}]], "Input",ExpressionUUID->"8ed2449b-d42b-41c7-9c03-9eec262909a4"],

Cell["\<\
Verify that the degrees sequences of the result match the input to the \
function.\
\>", "Text",ExpressionUUID->"e9b3ce50-2a2a-4403-926c-d4ce0511bfeb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"VertexOutDegree", "[", "%", "]"}], "\[Equal]", "outdegseq"}], 
   ",", 
   RowBox[{
    RowBox[{"VertexInDegree", "[", "%", "]"}], "\[Equal]", "indegseq"}]}], 
  "}"}]], "Input",ExpressionUUID->"2f8f296d-7c89-4918-8d52-994cc9017b15"],

Cell[CellGroupData[{

Cell["References", \
"Subsubsubsection",ExpressionUUID->"fa6dcbee-5e5c-4c53-ae39-949f2f4de970"],

Cell[TextData[{
 "S. L. Hakimi, On Realizability of a Set of Integers as Degrees of the \
Vertices of a Linear Graph, Journal of the Society for Industrial and Applied \
Mathematics 10, 3 (1962). ",
 ButtonBox["http://eudml.org/doc/19050",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://eudml.org/doc/19050"], None},
  ButtonNote->"http://eudml.org/doc/19050"]
}], "Item",ExpressionUUID->"ebe741ee-cb20-465f-8d45-e94edf140eab"],

Cell[TextData[{
 "V. Havel, Pozn\[AAcute]mka O Existenci Kone\[CHacek]n\[YAcute]ch Graf\
\[URing] (A Remark on the Existence of Finite Graphs), \[CapitalCHacek]asopis \
Pro P\[EHacek]stov\[AAcute]n\[IAcute] Matematiky 80, 4 (1955). ",
 ButtonBox["https://www.jstor.org/stable/2098746",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.jstor.org/stable/2098746"], None},
  ButtonNote->"https://www.jstor.org/stable/2098746"]
}], "Item",ExpressionUUID->"09a98dae-e155-4ed0-8354-d5a74fbe9be9"],

Cell[TextData[{
 "D. J. Kleitman and D. L. Wang, Algorithms for Constructing Graphs and \
Digraphs with Given Valences and Factors, Discrete Mathematics 6, 1 (1973). \
",
 ButtonBox["https://doi.org/10.1016/0012-365X(73)90037-X",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://doi.org/10.1016/0012-365X(73)90037-X"], None},
  ButtonNote->"https://doi.org/10.1016/0012-365X(73)90037-X"]
}], "Item",ExpressionUUID->"a0de9746-0598-4f80-ae2e-14abc6d7c04e"],

Cell[TextData[{
 "Sz. Horv\[AAcute]t and C. D. Modes, Connectivity matters: Construction and \
exact random sampling of connected graphs (2020). ",
 ButtonBox["https://arxiv.org/abs/2009.03747",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://arxiv.org/abs/2009.03747"], None},
  ButtonNote->"https://arxiv.org/abs/2009.03747"]
}], "Item",ExpressionUUID->"65209874-32e8-4a93-9521-c0000211db15"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["IGGraphAtlas", \
"Subsubsection",ExpressionUUID->"b996425a-d956-4371-b9ef-ccad86d9c81f"],

Cell[BoxData[
 RowBox[{"?", 
  "IGGraphAtlas"}]], \
"Input",ExpressionUUID->"1f48e6d0-d238-497b-bffd-69e85af6d681"],

Cell[TextData[{
 "This function is provided for convenience for those who have the book ",
 StyleBox["An Atlas of Graphs",
  FontSlant->"Italic"],
 " by Ronald C. Read and Robin J. Wilson, and for those who wish to replicate \
results obtained with other packages that include this database. For all \
other purposes, use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s built-in ",
 ButtonBox["GraphData",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/GraphData"],
 " function."
}], "Text",ExpressionUUID->"eefffee1-92de-4c47-9393-f702753f767f"],

Cell["Retrieve graph number 789:", \
"Text",ExpressionUUID->"21a1a3af-ef85-48ca-82ac-cb9ca94680ca"],

Cell[BoxData[
 RowBox[{"IGGraphAtlas", "[", "789", 
  "]"}]], "Input",ExpressionUUID->"8bbdac1d-a427-4aa7-a8a9-5050f5dd0423"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGFamousGraph", \
"Subsubsection",ExpressionUUID->"8a315b83-37c9-4f5b-a6d1-ea0aec3965b3"],

Cell[BoxData[
 RowBox[{"?", 
  "IGFamousGraph"}]], \
"Input",ExpressionUUID->"efba156c-ffa8-4803-b1ff-771151c90fe3"],

Cell[TextData[{
 "This function returns various \[OpenCurlyDoubleQuote]named\
\[CloseCurlyDoubleQuote] graphs from the igraph C library\[CloseCurlyQuote]s \
built-in database. It is included in IGraph/M for compatibility with other \
igraph interfaces. It is recommended to use Mathematica\[CloseCurlyQuote]s \
built-in ",
 Cell[BoxData[
 "GraphData"],ExpressionUUID->"db0d60b0-c419-44d0-9588-5b6fb99852d1"],
 " function instead. See the documentation of the igraph C library for the \
list of supported graph names."
}], "Text",ExpressionUUID->"bb76a4f9-7dbe-4aa7-8b3e-e845477d1e24"],

Cell["Create Krackhardt\[CloseCurlyQuote]s kite graph:", \
"Text",ExpressionUUID->"6105b90f-b43e-46e3-a677-7dc3db00fe9c"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{
  "IGFamousGraph", "[", "\"\<Krackhardt_Kite\>\"", 
   "]"}]}]], "Input",ExpressionUUID->"bd9580de-4d60-421f-8b32-4b48ad5940ff"],

Cell["\<\
Krackhardt\[CloseCurlyQuote]s kite was devised to illustrate the difference \
between various centrality measures:\
\>", "Text",ExpressionUUID->"afbc1c36-9328-4466-b234-035ef11300fc"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"#", "[", "g", "]"}], "&"}], "/@", 
  RowBox[{"{", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"IGVertexMap", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"0.1", "#"}], "&"}], ",", 
      RowBox[{"VertexSize", "->", "IGBetweenness"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"IGVertexMap", "[", 
     RowBox[{
      RowBox[{"#", "&"}], ",", 
      RowBox[{"VertexSize", "->", "IGCloseness"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"IGVertexMap", "[", 
     RowBox[{
      RowBox[{"#", "&"}], ",", 
      RowBox[{"VertexSize", "->", "IGHarmonicCentrality"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"IGVertexMap", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"0.1", "#"}], "&"}], ",", 
      RowBox[{"VertexSize", "->", "VertexDegree"}]}], "]"}]}], 
   "\[IndentingNewLine]", 
   "}"}]}]], "Input",ExpressionUUID->"0821072d-1a9d-4ce9-a92d-e5014a5860f5"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGFromNauty", \
"Subsubsection",ExpressionUUID->"622a662c-ca64-4eec-90a9-81d7a5b53b3e"],

Cell[BoxData[
 RowBox[{"?", 
  "IGFromNauty"}]], \
"Input",ExpressionUUID->"0d599931-f0e9-44ed-8bfd-7011299baea5"],

Cell[TextData[{
 Cell[BoxData[
 "IGFromNauty"],ExpressionUUID->"e1face73-07a1-458e-8fed-19fa06da06a5"],
 " converts a Graph6, Digraph6 or Sparse6 string to a graph. These formats \
originate with the ",
 ButtonBox["nauty suite of programs",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://pallini.di.uniroma1.it/"], None},
  ButtonNote->"http://pallini.di.uniroma1.it/"],
 " and are supported by many other graph theory software."
}], "Text",ExpressionUUID->"62080ad3-9a6e-4c30-b322-c6af206880c4"],

Cell["Interpret a Graph6 string.", \
"Text",ExpressionUUID->"1e244de8-e4f6-4b45-a63b-cc527af5ff69"],

Cell[BoxData[
 RowBox[{"IGFromNauty", "[", "\"\<Gr`HOk\>\"", 
  "]"}]], "Input",ExpressionUUID->"b3fd0c2c-ef86-407e-828d-e4be5e5d4fb7"],

Cell[TextData[{
 "Interpret a Sparse6 string. These start with a ",
 StyleBox[":", "Program"],
 " character."
}], "Text",ExpressionUUID->"568372a6-806d-45b4-9ee9-10e8e1e729a3"],

Cell[BoxData[
 RowBox[{"IGFromNauty", "[", "\"\<:I`ESgTlVF\>\"", 
  "]"}]], "Input",ExpressionUUID->"05091e15-eee4-406b-be6f-75ddbdebdac7"],

Cell[TextData[{
 "Interpret a Digraph6 string. These start with a ",
 StyleBox["&", "Program"],
 " character."
}], "Text",ExpressionUUID->"330cfbb6-5ac0-4cfe-a536-ec3b86ebf5df"],

Cell[BoxData[
 RowBox[{"IGFromNauty", "[", "\"\<&FKB?oMB_W?\>\"", 
  "]"}]], "Input",ExpressionUUID->"b1296202-0d26-461a-b441-f7bea1918f17"],

Cell[TextData[{
 Cell[BoxData[
 "IGFromNauty"],ExpressionUUID->"dd9eb8b6-c433-4457-a5cb-db68332a655f"],
 " does not support headers or whitespace in the string. To handle these, or \
to interpret a multiline string, use ",
 Cell[BoxData[
  RowBox[{"IGImportString", "[", 
   RowBox[{"\[Ellipsis]", ",", "\"\<Nauty\>\""}], "]"}]],ExpressionUUID->
  "e820e16d-42ce-4952-92e1-1130db79fadf"],
 "."
}], "Text",ExpressionUUID->"57556b94-641b-4e5e-bbb0-51275ee1b0d3"],

Cell[BoxData[
 RowBox[{"IGFromNauty", "[", "\"\<>>graph6<<DYw\>\"", 
  "]"}]], "Input",ExpressionUUID->"8ea26930-f505-4a32-91c5-b335f22f788e"],

Cell[BoxData[
 RowBox[{"IGImportString", "[", "\[IndentingNewLine]", 
  RowBox[{"\"\<>>graph6<<DYw\nDhs\nDxo\nDVW\n\>\"", ",", "\"\<Nauty\>\""}], 
  "]"}]], "Input",ExpressionUUID->"106a4385-a734-4362-b3bf-6a0d85a840fa"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Random graph generators", \
"Subsection",ExpressionUUID->"b89dc32a-e174-42d1-95f1-9235e92851b0"],

Cell[TextData[{
 "These graph creation functions use igraph\[CloseCurlyQuote]s random graph \
generator, which can be seeded using ",
 Cell[BoxData[
 "IGSeedRandom"],ExpressionUUID->"1a30f1a0-ae60-47b6-ad44-8a67eb3e5b59"],
 "."
}], "Text",ExpressionUUID->"2fcf1a18-d21b-4d78-a44e-51124f73875d"],

Cell[BoxData[
 RowBox[{"?", 
  "IG*Game*"}]], \
"Input",ExpressionUUID->"3a8f3f3a-7f1d-403f-8980-f78ccd984e79"],

Cell[CellGroupData[{

Cell["Basic random graphs", \
"Subsubsection",ExpressionUUID->"3cd179b5-21fc-4841-8bee-c5499eef3d54"],

Cell[BoxData[
 RowBox[{"?", 
  "IGErdosRenyiGameGNM"}]], \
"Input",ExpressionUUID->"301ab7d5-f9f1-4d97-805f-0591aafab893"],

Cell[BoxData[
 RowBox[{"?", 
  "IGErdosRenyiGameGNP"}]], \
"Input",ExpressionUUID->"f6055a5e-e172-4352-9749-3d8eecf8fe7b"],

Cell[TextData[{
 Cell[BoxData[
 "IGErdosRenyiGameGNM"],ExpressionUUID->
  "29ebe8d0-2277-447d-979d-040715eaee9b"],
 " uniformly samples graphs with ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "55bf9aa9-5ff1-4e56-807e-747c697eed48"],
 " vertices and ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "a3c694a6-8d64-4553-b18e-2b89398c33be"],
 " edges. This random graph model is known as the Erd\[ODoubleAcute]s\[Dash]R\
\[EAcute]nyi ",
 Cell[BoxData[
  FormBox[
   RowBox[{"G", "(", 
    RowBox[{"n", ",", "m"}], ")"}], TraditionalForm]],ExpressionUUID->
  "ed957a1b-72a1-41dd-a743-3f523609a238"],
 " model."
}], "Text",ExpressionUUID->"20c575c0-c00d-4d2e-866b-e36966f4766b"],

Cell[TextData[{
 "In ",
 Cell[BoxData[
 "IGErdosRenyiGameGNP"],ExpressionUUID->
  "06dd8d3b-9145-4aa2-b0fd-740ea52bec23"],
 ", each edge is present with the same and independent probability. This \
model is known as the Erd\[ODoubleAcute]s\[Dash]R\[EAcute]nyi ",
 Cell[BoxData[
  FormBox[
   RowBox[{"G", "(", 
    RowBox[{"n", ",", "p"}], ")"}], TraditionalForm]],ExpressionUUID->
  "893f4192-35f5-423d-8cc4-ccab3944a775"],
 " model or Gilbert model."
}], "Text",ExpressionUUID->"2fe81b64-761c-4c10-b03a-5d6450f555d8"],

Cell["The available options are:", \
"Text",ExpressionUUID->"5da19086-ef82-4351-ac17-eb14d73ed59e"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "True"}]],ExpressionUUID->
  "d7561a24-d72c-4b56-9a53-9101f6fda37c"],
 " produces a directed graph."
}], "Item",ExpressionUUID->"9864a365-e7b7-430f-a474-e3d4235aebf0"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"SelfLoops", "\[Rule]", "True"}]],ExpressionUUID->
  "3df7dbfc-717b-4136-b9f8-15c82639b303"],
 " allows self-loops."
}], "Item",ExpressionUUID->"2c20d4ae-367f-415a-9b0f-58c0370fa93b"],

Cell["Create a random graph with 10 vertices and 20 edges.", \
"Text",ExpressionUUID->"17b2a5d1-2fce-4fab-bdcf-a8c32fcbd016"],

Cell[BoxData[
 RowBox[{"IGErdosRenyiGameGNM", "[", 
  RowBox[{"10", ",", "20", ",", 
   RowBox[{"GraphStyle", "\[Rule]", "\"\<VintageDiagram\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"56e83fd5-1ff2-40f8-b637-06a388ff8912"],

Cell["Create a directed graph and allow self-loops.", \
"Text",ExpressionUUID->"332a4024-5b1f-43f3-8fdb-848923cfb639"],

Cell[BoxData[
 RowBox[{"IGErdosRenyiGameGNM", "[", 
  RowBox[{"10", ",", "35", ",", 
   RowBox[{"DirectedEdges", "\[Rule]", "True"}], ",", 
   RowBox[{"SelfLoops", "\[Rule]", "True"}]}], 
  "]"}]], "Input",ExpressionUUID->"073ab247-7a7a-4af1-9d19-dc59dee4148d"],

Cell["Insert each edge with a probability of 20%.", \
"Text",ExpressionUUID->"2ad1a0eb-cab2-460c-8468-6df1c5a2952e"],

Cell[BoxData[
 RowBox[{"IGErdosRenyiGameGNP", "[", 
  RowBox[{"20", ",", "0.2", ",", 
   RowBox[{"GraphStyle", "\[Rule]", "\"\<RoyalColor\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"3fe625a0-d8fb-49b9-9e05-7854fa11fc38"],

Cell[TextData[{
 "The ",
 Cell[BoxData[
  FormBox[
   RowBox[{"G", "(", 
    RowBox[{"n", ",", "p"}], ")"}], TraditionalForm]],ExpressionUUID->
  "cfeb86fe-8100-4507-9c1e-33dcb1793383"],
 " model produces connected graphs with high probability for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"p", ">", 
    RowBox[{
     RowBox[{"ln", "(", "n", ")"}], "/", "n"}]}], TraditionalForm]],
  ExpressionUUID->"29157083-97dc-4a2d-ab8f-b22204283247"],
 "."
}], "Text",ExpressionUUID->"ddc4b4ad-350f-4947-8d7b-5bfc4100dd44"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"n", "=", "300"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"p", ",", 
       RowBox[{"Mean", "@", 
        RowBox[{"Boole", "@", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"ConnectedGraphQ", "@", 
            RowBox[{"IGErdosRenyiGameGNP", "[", 
             RowBox[{"n", ",", "p"}], "]"}]}], ",", 
           RowBox[{"{", "50", "}"}]}], "]"}]}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"p", ",", "0", ",", "0.05", ",", "0.0005"}], "}"}]}], 
    "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"GridLines", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Log", "[", "n", "]"}], "/", "n"}], "}"}], ",", "None"}], 
     "}"}]}]}], "\[IndentingNewLine]", 
  "]"}]}], "Input",ExpressionUUID->"46d8993b-98c7-4cad-b227-163c9ba44365"]
}, Closed]],

Cell[CellGroupData[{

Cell["Random bipartite graphs", \
"Subsubsection",ExpressionUUID->"5738267e-767d-4b8d-a5ef-4eaee1c49bed"],

Cell[BoxData[
 RowBox[{"?", 
  "IGBipartiteGameGNM"}]], \
"Input",ExpressionUUID->"4ff04c21-3164-4284-ab04-9c3fceb54a6c"],

Cell[BoxData[
 RowBox[{"?", 
  "IGBipartiteGameGNP"}]], \
"Input",ExpressionUUID->"8df9c5db-0a64-4a41-b40f-e25c6a9cc0d5"],

Cell[TextData[{
 Cell[BoxData[
 "IGBipartiteGameGNM"],ExpressionUUID->"7af44769-d4c4-432d-aa6f-e7818532dc48"],
 " and ",
 Cell[BoxData[
 "IGBipartiteGameGNP"],ExpressionUUID->"552dd235-f91b-4cd8-a57b-e2086836d993"],
 " are equivalent to ",
 Cell[BoxData[
 "IGErdosRenyiGNM"],ExpressionUUID->"3aad1efa-3dfe-4dfa-befe-e9ceefa6fea6"],
 " and ",
 Cell[BoxData[
 "IGErdosRenyiGNP"],ExpressionUUID->"8afd349d-a952-48d9-8c0a-723527a33fbc"],
 ", but they generate bipartite graphs."
}], "Text",ExpressionUUID->"43bd3c8d-4107-4a4f-af41-017c93b2810b"],

Cell["The available options are:", \
"Text",ExpressionUUID->"04e06f78-d2f8-4279-8f43-d14ff34d4236"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "True"}]],ExpressionUUID->
  "c36b7d4c-a91d-4f84-ba95-c983a7bdfc73"],
 " creates a directed graph."
}], "Item",ExpressionUUID->"66403fc0-5b25-4f41-8ec6-d636229213b5"],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<Bidirectional\>\"", "\[Rule]", "True"}]],ExpressionUUID->
  "4574c74a-d275-4a26-b47d-af55808be9fa"],
 " allows directed edges to run in either direction between the two \
partitions. The default is ",
 Cell[BoxData["False"],ExpressionUUID->"7a4d40ab-0533-4a39-906b-30fcfec73e78"],
 ", which means that edges will run only from the first partition to the \
second. This option is ignored for undirected graphs."
}], "Item",ExpressionUUID->"8cdc65a6-0a6d-473a-873d-d7397adbf8d6"],

Cell[BoxData[
 RowBox[{"IGBipartiteGameGNP", "[", 
  RowBox[{"5", ",", "5", ",", "0.5", ",", 
   RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"d020e58c-271b-4629-b0c6-e0b638b75a02"]
}, Open  ]],

Cell["\<\
Create a bipartite directed graph with edges running either uni-directionally \
or bidirectionally between the two partitions.\
\>", "Text",ExpressionUUID->"c50d6530-5f1c-4a0e-9021-62380c789838"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IGLayoutBipartite", "@", 
    RowBox[{"IGBipartiteGameGNM", "[", 
     RowBox[{"10", ",", "10", ",", "30", ",", 
      RowBox[{"DirectedEdges", "\[Rule]", "True"}], ",", 
      RowBox[{"\"\<Bidirectional\>\"", "\[Rule]", "#"}]}], "]"}]}], "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{"False", ",", "True"}], 
   "}"}]}]], "Input",ExpressionUUID->"42c87ac4-2ff0-473d-b80d-fff956f0180b"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGTreeGame", \
"Subsubsection",ExpressionUUID->"407d50f6-e00e-417a-bc18-0e4a26047b4d"],

Cell[BoxData[
 RowBox[{"?", 
  "IGTreeGame"}]], \
"Input",ExpressionUUID->"7c996e8a-4ce9-4df2-b9d3-9802e8ee4c09"],

Cell[TextData[{
 Cell[BoxData[
 "IGTreeGame"],ExpressionUUID->"5b06f708-5fae-4871-97ac-69d096c26169"],
 " samples uniformly from the set of labelled trees. "
}], "Text",ExpressionUUID->"736e1079-5e7f-4890-abc0-2d672ad8c038"],

Cell["Available options:", \
"Text",ExpressionUUID->"10eec25f-a929-4b91-956c-ea5dafb4a164"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "True"}]],ExpressionUUID->
  "9d946b22-643c-4e65-981f-e52b4894a1f0"],
 " will create a directed tree, with edges oriented away from the root."
}], "Item",ExpressionUUID->"c1b3da5e-a966-4da7-bb98-dcdf068a7d52"],

Cell[TextData[{
 Cell[BoxData[
 "Method"],ExpressionUUID->"665b02e4-e899-44f0-a5aa-55a3610201e5"],
 " can be used to choose the tree generation algorithm. All methods sample \
labelled trees uniformly."
}], "Item",ExpressionUUID->"da93f530-3370-4fb1-8641-3274834ddec8"],

Cell[TextData[{
 "Available ",
 Cell[BoxData[
 "Method"],ExpressionUUID->"fe49fd85-e3fd-41e2-9247-a378c1b8b668"],
 " options:"
}], "Text",ExpressionUUID->"aeb8c127-2db6-4d75-88da-f11d73248709"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<PruferCode\>\""],ExpressionUUID->"8bb9565a-95a5-4e31-9790-738cd82919de"],
 ", works by generating a random Pr\[UDoubleDot]fer sequence, then \
constructing a tree from it. It does not currently support directed trees."
}], "Item",ExpressionUUID->"87e9d1c8-44d5-4db6-8116-43bf7d05d994"],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
 "\"\<LoopErasedRandomWalk\>\""],ExpressionUUID->
  "22ac55f8-917b-49ea-865f-34a8691abea8"],
 ", uses a loop-erased random walk to uniformly sample the spanning trees of \
the complete graph."
}], "Item",ExpressionUUID->"6abd7ce3-1c0e-4163-bec2-f01cc4723274"],

Cell[BoxData[
 RowBox[{"IGTreeGame", "[", 
  RowBox[{"250", ",", 
   RowBox[{"GraphLayout", "\[Rule]", "\"\<LayeredEmbedding\>\""}], ",", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<PastelColor\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"cc3a6fd8-2bdd-4583-83a3-eb6055e988b9"]
}, Open  ]],

Cell["\<\
There are several distinct labellings of isomorphic trees. All of these are \
generated with equal probability.\
\>", "Text",ExpressionUUID->"4dd39e5b-72a7-4b25-a4f7-964103651883"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"IGTreeGame", "[", 
     RowBox[{"3", ",", 
      RowBox[{"VertexLabels", "\[Rule]", "Automatic"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", "100", "}"}]}], "\[IndentingNewLine]", "]"}], "//", 
  RowBox[{
  "DeleteDuplicatesBy", "[", "AdjacencyMatrix", 
   "]"}]}]], "Input",ExpressionUUID->"7c799f1f-0b02-479e-885c-1be5eb9970fe"],

Cell["Generate directed trees.", \
"Text",ExpressionUUID->"9e761686-d159-41e5-ae0f-9a953650a63a"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"IGTreeGame", "[", 
    RowBox[{"6", ",", 
     RowBox[{"DirectedEdges", "\[Rule]", "True"}], ",", 
     RowBox[{"GraphLayout", "\[Rule]", "\"\<LayeredDigraphEmbedding\>\""}]}], 
    "]"}], ",", 
   RowBox[{"{", "5", "}"}]}], 
  "]"}]], "Input",ExpressionUUID->"aa2a872b-f3b0-40e6-87e9-62ddd86183db"],

Cell["\<\
Generate a random sparse connected graph by first creating a tree, then \
adding cycle edges. Note that this method does not sample connected graphs \
uniformly.\
\>", "Text",ExpressionUUID->"49a267cc-3cdf-49d6-b8bf-d5ed20b899a6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"randomConnected", "[", 
   RowBox[{"nodeCount_", ",", "edgeCount_"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "tree", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"tree", "=", 
      RowBox[{"IGTreeGame", "[", "nodeCount", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"EdgeAdd", "[", 
      RowBox[{"tree", ",", 
       RowBox[{"RandomSample", "[", 
        RowBox[{
         RowBox[{"EdgeList", "@", 
          RowBox[{"GraphComplement", "[", "tree", "]"}]}], ",", 
         RowBox[{"edgeCount", "-", "nodeCount", "+", "1"}]}], "]"}]}], 
      "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",ExpressionUUID->"b950b9f5-e747-4bb9-9598-6fdf7e084732"],

Cell[BoxData[
 RowBox[{"randomConnected", "[", 
  RowBox[{"100", ",", "120"}], 
  "]"}]], "Input",ExpressionUUID->"fd77b295-abc0-458e-83a1-43b399cffd0e"],

Cell["\<\
Colour the nodes of a random tree by their inverse average distance to other \
nodes.\
\>", "Text",ExpressionUUID->"13a02763-bcad-4dd2-aa32-7d785ba8542a"],

Cell[BoxData[
 RowBox[{"IGVertexMap", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"ColorData", "[", "\"\<SolarColors\>\"", "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"VertexStyle", "\[Rule]", 
    RowBox[{"Rescale", "@*", "IGCloseness"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"IGTreeGame", "[", 
    RowBox[{"1000", ",", 
     RowBox[{"Background", "\[Rule]", "Black"}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
     RowBox[{"EdgeStyle", "\[Rule]", "LightGray"}]}], "]"}]}], 
  "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"5d9e4d6d-885b-4b33-975c-6a938e0b8d5f"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGDegreeSequenceGame", \
"Subsubsection",ExpressionUUID->"b69d5f7e-3b84-4e09-9cde-1a42b04b0b55"],

Cell[BoxData[
 RowBox[{"?", 
  "IGDegreeSequenceGame"}]], \
"Input",ExpressionUUID->"725163d3-882f-4b0f-90cd-758548815609"],

Cell[TextData[{
 Cell[BoxData[
 "IGDegreeSequenceGame"],ExpressionUUID->
  "5338f2b8-6741-4279-b828-e4209c5ca4ec"],
 " implements various random sampling methods for graphs with a given degree \
sequence. To quickly construct a single realization of a degree sequence, use \
",
 Cell[BoxData[
 "IGRealizeDegreeSequence"],ExpressionUUID->
  "d7bbbfd1-1d2c-48e9-856b-ac7b1920ff6a"],
 "."
}], "Text",ExpressionUUID->"cf515cf6-27af-49e9-98ee-bc0fde531d14"],

Cell[TextData[{
 Cell[BoxData[
 "IGDegreeSequenceGame"],ExpressionUUID->
  "e4c230ef-7b10-4342-8b67-e94eded7d9a2"],
 " takes the following values for its ",
 Cell[BoxData[
 "Method"],ExpressionUUID->"b31606cb-b8a0-4a2c-bd84-5c43636324a2"],
 " option:"
}], "Text",ExpressionUUID->"910439a8-4a4e-4bec-98d6-6c2884494e0c"],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
 "\"\<ConfigurationModel\>\""],ExpressionUUID->
  "c05263f2-a314-4ed0-839c-453ccdef353e"],
 " implements the configuration model: it connects up vertex stubs randomly. \
It may generate both self-loops and multi-edges. Undirected graphs are \
generated with probability proportional to ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["\[Product]", 
       RowBox[{"i", "<", "j"}]], 
      RowBox[{
       RowBox[{
        SubscriptBox["A", 
         RowBox[{"i", "\[InvisibleComma]", "j"}]], "!"}], 
       RowBox[{
        SubscriptBox["\[Product]", "i"], 
        RowBox[{
         SubscriptBox["A", 
          RowBox[{"i", "\[InvisibleComma]", "i"}]], "!!"}]}]}]}], ")"}], 
    RowBox[{"-", "1"}]], TraditionalForm]],ExpressionUUID->
  "47375ce0-ddcf-4547-8e61-4b637bef43f0"],
 ", where ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "70a7a89a-cbff-4d47-926d-6bda6e84dc02"],
 " is the adjacency matrix, having ",
 StyleBox["twice",
  FontSlant->"Italic"],
 " the number of loops for each vertex on the diagonal. Directed ones are \
generated with probability proportional to ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["\[Product]", 
       RowBox[{"i", ",", "j"}]], 
      RowBox[{
       SubscriptBox["A", 
        RowBox[{"i", "\[InvisibleComma]", "j"}]], "!"}]}], ")"}], 
    RowBox[{"-", "1"}]], TraditionalForm]],ExpressionUUID->
  "bdf42d9a-148e-49ef-b10e-6d7dff774bd9"],
 "."
}], "Item",ExpressionUUID->"083e4e06-c0c4-4830-85ad-25039338e505"],

Cell["\<\
All simple graphs are generated with the same probability, but the \
probability of multigraphs and graphs with self-loops differs from that of \
simple graphs and depends on their specific structure.\
\>", "ItemParagraph",ExpressionUUID->"45a0d414-575e-43f3-8d96-f8718cf83eb8"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
 "\"\<ConfigurationModelSimple\>\""],ExpressionUUID->
  "883cfee5-2f50-4a1d-8c86-7ca9ae7ee570"],
 " also implements the configuration model, but it rejects non-simple graphs. \
It samples uniformly from the set of all simple graphs with the given degree \
sequence. This method can be very slow for dense graphs."
}], "Item",ExpressionUUID->"d89aa3b8-1d8d-4496-99b6-0613ff27057b"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<FastSimple\>\""],ExpressionUUID->"9a1a42cd-4301-4a76-80dc-e2ab9b3a5b36"],
 " is a fast generation algorithm that avoids self-loops and multi-edges. \
This method can generate any simple graph with the given degree sequence, but \
it does not sample them uniformly."
}], "Item",ExpressionUUID->"11da02b4-c05a-4164-97b9-22e2ceb96f09"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<VigerLatapy\>\""],ExpressionUUID->
  "dbf4f4c2-8fc6-4a77-9f13-8a35e1ae5b1d"],
 " can sample undirected, connected simple graphs uniformly and uses \
Monte-Carlo methods to randomize the graphs. This generator should be \
favoured if undirected and connected graphs are to be generated and execution \
time is not a concern. igraph uses the original implementation of Fabien \
Viger; see ",
 ButtonBox["https://www-complexnetworks.lip6.fr/~latapy/FV/generation.html",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www-complexnetworks.lip6.fr/~latapy/FV/generation.html"], 
    None},
  ButtonNote->
   "https://www-complexnetworks.lip6.fr/~latapy/FV/generation.html"],
 " and the corresponding paper at ",
 ButtonBox["https://arxiv.org/abs/cs/0502085",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://arxiv.org/abs/cs/0502085"], None},
  ButtonNote->"https://arxiv.org/abs/cs/0502085"],
 "."
}], "Item",ExpressionUUID->"e53cd27e-ec60-45b6-b594-50fd2b2dce11"],

Cell[TextData[{
 "The default method is ",
 Cell[BoxData[
 "\"\<FastSimple\>\""],ExpressionUUID->"ae6ba49c-311c-4bc4-8559-a7c9f79f17ec"],
 ". Note that it does not sample uniformly."
}], "Text",ExpressionUUID->"a6c65f79-9f7d-4586-b7ca-454096050358"],

Cell[BoxData[
 RowBox[{
  RowBox[{"degseq", "=", 
   RowBox[{"VertexDegree", "@", 
    RowBox[{"RandomGraph", "[", 
     RowBox[{"{", 
      RowBox[{"50", ",", "100"}], "}"}], "]"}]}]}], 
  ";"}]], "Input",ExpressionUUID->"1a30c3e7-c184-4e3d-8766-0c68e0e94e87"],

Cell[BoxData[
 RowBox[{"IGDegreeSequenceGame", "[", 
  RowBox[{"degseq", ",", 
   RowBox[{"Method", "\[Rule]", "\"\<ConfigurationModel\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"6521b218-08ac-4e32-8d8e-f62e7cbe88e9"],

Cell[BoxData[
 RowBox[{"SimpleGraphQ", "[", "%", 
  "]"}]], "Input",ExpressionUUID->"3ddecef0-6ed4-4b9e-94f3-e4006990577f"],

Cell[BoxData[
 RowBox[{"IGDegreeSequenceGame", "[", 
  RowBox[{"degseq", ",", 
   RowBox[{"Method", "\[Rule]", "\"\<ConfigurationModelSimple\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"c555582b-e1be-4089-b8b7-e96d91850b76"],

Cell[BoxData[
 RowBox[{"SimpleGraphQ", "[", "%", 
  "]"}]], "Input",ExpressionUUID->"9292e63a-610f-4a90-971f-dbd7b63fab2b"],

Cell["\<\
The configuration model algorithm is too slow to construct even small dense \
graphs.\
\>", "Text",ExpressionUUID->"e1ef492a-442e-4151-a817-e13158a1b014"],

Cell[BoxData[
 RowBox[{"ds", "=", 
  RowBox[{"VertexDegree", "@", 
   RowBox[{"RandomGraph", "[", 
    RowBox[{"{", 
     RowBox[{"10", ",", 
      RowBox[{
       RowBox[{"Binomial", "[", 
        RowBox[{"10", ",", "2"}], "]"}], "-", "5"}]}], "}"}], 
    "]"}]}]}]], \
"Input",ExpressionUUID->"7a020e27-0083-49b5-809e-d03e3a1c2538"],

Cell[BoxData[
 RowBox[{"TimeConstrained", "[", 
  RowBox[{
   RowBox[{"IGDegreeSequenceGame", "[", 
    RowBox[{"ds", ",", 
     RowBox[{"Method", "\[Rule]", "\"\<ConfigurationModelSimple\>\""}]}], 
    "]"}], ",", "1"}], 
  "]"}]], "Input",ExpressionUUID->"52b0cb89-873a-4cf8-aa19-71cda3cbe026"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "The", " ", "TimeConstrained", " ", "above", " ", "makes", " ", "an", " ", 
    "unpredictable", " ", "number", " ", "of", " ", "calls", " ", "to", " ", 
    "the", " ", 
    RowBox[{"RNG", ".", " ", "We"}], " ", "restore", " ", "consistency", " ", 
    "with", " ", "an", " ", "explicit", " ", 
    RowBox[{"seed", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"SeedRandom", "[", "137", "]"}], ";"}], " ", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"$Line", "-=", "1"}], ";"}]}]}]], "Input",
 CellTags->
  "DeleteCell",ExpressionUUID->"ed1c76e5-06e1-4ff0-a645-de778e482ce3"],

Cell["\<\
Graphs that are almost complete can be sampled by generating the complement \
first.\
\>", "Text",ExpressionUUID->"6514086b-d601-4b03-a0ca-0bdece9e2d86"],

Cell[BoxData[
 RowBox[{"GraphComplement", "@", 
  RowBox[{"IGDegreeSequenceGame", "[", 
   RowBox[{
    RowBox[{"9", "-", "ds"}], ",", 
    RowBox[{"Method", "\[Rule]", "\"\<ConfigurationModelSimple\>\""}]}], 
   "]"}]}]], "Input",ExpressionUUID->"90c9be25-003d-4b33-8633-b167fb1b2e59"],

Cell[BoxData[
 RowBox[{"ds", "==", 
  RowBox[{
  "VertexDegree", "[", "%", 
   "]"}]}]], "Input",ExpressionUUID->"f74f9ef1-f29a-433a-9c03-02dc0095f57f"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGKRegularGame", \
"Subsubsection",ExpressionUUID->"1d956ba9-3874-458b-bb93-a7b21e25419e"],

Cell[BoxData[
 RowBox[{"?", 
  "IGKRegularGame"}]], \
"Input",ExpressionUUID->"56fd3bc8-5f5a-4a1b-bb83-b9a1606ee326"],

Cell[TextData[{
 "In a ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "e46b5f1d-c140-4005-8ca7-2523e757357d"],
 "-regular graph all vertices have degree ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "f2de07b9-2312-49c3-9581-cb0e790b5977"],
 ". The current implementation is able to generate any ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "4bbc1f15-fec5-488a-8b9d-f7152d86eb16"],
 "-regular graph, but it does not sample them with precisely the same \
probability."
}], "Text",ExpressionUUID->"785e3193-163a-402d-a79d-fc45349db7da"],

Cell["The available options are:", \
"Text",ExpressionUUID->"40bbb75b-df8b-418a-8527-b94e521adf3c"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "True"}]],ExpressionUUID->
  "309b7ed5-cfa4-46f4-8974-d1390a986290"],
 " creates a directed graph."
}], "Item",ExpressionUUID->"6bc5a75c-bbcf-4c9f-9b95-ad2ea63730b9"],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"MultiEdges", "\[Rule]", "True"}]],ExpressionUUID->
  "4dd049df-28de-4582-9faa-72d9fc573a78"],
 " allows the creation of parallel edges."
}], "Item",ExpressionUUID->"1ec5c395-dde7-4a5b-a925-b1baa5e3407f"],

Cell[BoxData[
 RowBox[{"IGKRegularGame", "[", 
  RowBox[{"10", ",", "3"}], 
  "]"}]], "Input",ExpressionUUID->"f21e01b7-3c6e-4c39-ab56-ae02d7a20c23"]
}, Open  ]],

Cell["Not all parameters are valid:", \
"Text",ExpressionUUID->"8a6e9b76-71b3-4ab5-9d1c-ffdc96aca1cc"],

Cell[BoxData[
 RowBox[{"IGKRegularGame", "[", 
  RowBox[{"5", ",", "3"}], 
  "]"}]], "Input",ExpressionUUID->"a03c64c3-a50d-4258-8913-8dc8a71288b8"],

Cell["There are no graphs with 5 vertices each having degree 3.", \
"Text",ExpressionUUID->"760b660f-c0fc-41e0-b97a-917471ba1c40"],

Cell[BoxData[
 RowBox[{"IGGraphicalQ", "[", 
  RowBox[{"{", 
   RowBox[{"3", ",", "3", ",", "3", ",", "3", ",", "3"}], "}"}], 
  "]"}]], "Input",ExpressionUUID->"0fe2423a-6758-4982-992c-19726f45c0a5"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGGrowingGame", \
"Subsubsection",ExpressionUUID->"f2ab97cd-f283-4b4f-91e8-21d943f25935"],

Cell[BoxData[
 RowBox[{"?", 
  "IGGrowingGame"}]], \
"Input",ExpressionUUID->"63068fde-c440-47ea-bd1c-e12ef829092c"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGGrowingGame", "[", 
   RowBox[{"n", ",", "k"}], "]"}]],ExpressionUUID->
  "83d059bc-0cef-4833-8ecd-41d60742b161"],
 " creates a random graph by successively adding vertices to the graph until \
the vertex count ",
 Cell[BoxData["n"],ExpressionUUID->"06d08434-7ec5-4805-b684-2988b743c11d"],
 " is reached. At each step, ",
 Cell[BoxData["k"],ExpressionUUID->"5c689478-00c6-4b7e-8c45-6e5ddb7b4085"],
 " new edges are added as well."
}], "Text",ExpressionUUID->"7f3188b6-17ca-48ee-a849-87ef7d8465fb"],

Cell["The available options are:", \
"Text",ExpressionUUID->"06ccf31f-b4ce-4c3c-aa7f-f7eab022794a"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "True"}]],ExpressionUUID->
  "ef374800-0520-4043-a4f2-c98f781c7a38"],
 " creates a directed graph."
}], "Item",ExpressionUUID->"319424e6-db37-4edc-9bd7-28a2ec3fe8cb"],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<Citation\>\"", "\[Rule]", "True"}]],ExpressionUUID->
  "c9214a0f-3c4b-48d7-889e-5678239057c9"],
 " connects newly added edges to the newly added vertex."
}], "Item",ExpressionUUID->"25849582-3ab5-477a-8b62-292779208aa1"],

Cell[BoxData[
 RowBox[{"IGGrowingGame", "[", 
  RowBox[{"50", ",", "2"}], 
  "]"}]], "Input",ExpressionUUID->"f297d0af-6480-400b-90c5-a0e03b285085"]
}, Open  ]],

Cell[TextData[{
 "With ",
 Cell[BoxData[
  RowBox[{"\"\<Citation\>\"", "\[Rule]", "True"}]],ExpressionUUID->
  "3335f982-c733-48a8-9624-8bbd337eb66a"],
 ", the newly added edges are connected to the newly added vertices."
}], "Text",ExpressionUUID->"12187071-690a-4305-a965-710a650e7d92"],

Cell[BoxData[
 RowBox[{"IGGrowingGame", "[", 
  RowBox[{"50", ",", "1", ",", 
   RowBox[{"\"\<Citation\>\"", "\[Rule]", "True"}]}], 
  "]"}]], "Input",ExpressionUUID->"7fe3203f-1216-4319-9cbf-06b952295f34"],

Cell[TextData[{
 "Note that while this model can be used to generate random trees, it will \
not sample them uniformly. If uniform sampling is desired, use ",
 Cell[BoxData[
 "IGTreeGame"],ExpressionUUID->"20195f79-b27e-4bdb-9175-358dfb7b32f9"],
 " instead."
}], "Text",ExpressionUUID->"5bfabc51-2c00-4263-93a6-998b10c97008"],

Cell["Create a directed citation graph.", \
"Text",ExpressionUUID->"b6ca3525-af9a-4708-9344-9fc39299d1ff"],

Cell[BoxData[
 RowBox[{"IGGrowingGame", "[", 
  RowBox[{"20", ",", "2", ",", 
   RowBox[{"DirectedEdges", "\[Rule]", "True"}], ",", 
   RowBox[{"\"\<Citation\>\"", "\[Rule]", "True"}], ",", 
   RowBox[{"GraphStyle", "\[Rule]", "\"\<Web\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"6ca5415d-5e76-4172-b57e-b8f56402e0cb"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGBarabasiAlbertGame", \
"Subsubsection",ExpressionUUID->"7e5fe4ab-fe10-447a-9897-2658851a5cde"],

Cell[BoxData[
 RowBox[{"?", 
  "IGBarabasiAlbertGame"}]], \
"Input",ExpressionUUID->"fa37a6de-b6b0-4fea-97a4-b6ab611e166c"],

Cell[TextData[{
 Cell[BoxData[
 "IGBarabasiAlbertGame"],ExpressionUUID->
  "4078d2c6-bf8b-49fb-8bb7-c618d47371eb"],
 " implements a preferential attachment model. It generates a graph by \
sequentially adding new vertices with the specified number of edges (",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "0ae1884a-3760-45b6-8d1c-2ecd70995e8f"],
 "). The edges will connect to existing vertices with probability ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["d", "\[Beta]"], "+", "A"}], TraditionalForm]],
  ExpressionUUID->"e1469500-764f-46bd-9638-6444265f0d58"],
 ", where ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],ExpressionUUID->
  "71b4a3fa-d5b5-4476-997f-3a1d3736c1bd"],
 " is the in-degree of the existing vertex. The default parameters are ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Beta]", "=", "1"}], TraditionalForm]],ExpressionUUID->
  "372117c2-7561-4e30-937b-28252dbe89e8"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "=", "1"}], TraditionalForm]],ExpressionUUID->
  "b729a481-3431-457d-aeec-2f7a66d30ed8"],
 "."
}], "Text",ExpressionUUID->"fa90f8c1-8109-4e3c-b6c0-f61da92138e0"],

Cell["The available options are:", \
"Text",ExpressionUUID->"16d23d45-39b6-46e0-8fe4-1bc9fe709ed6"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "False"}]],ExpressionUUID->
  "49c4d5a3-affe-4f5c-99d8-35f9d5c5c417"],
 " creates an undirected graph."
}], "Item",ExpressionUUID->"b70dd1d9-30fe-43e4-8b34-ada755e3d8e0"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<TotalDegreeAttraction\>\"", "\[Rule]", "True"}]],
  ExpressionUUID->"4ef8a113-b41f-4d01-913a-35ef3aa96344"],
 " computes the attachment probability based on the the total degree of \
existing vertices (i.e. the sum of in- and out-degrees), not their in-degree. \
Always assumed to be ",
 Cell[BoxData[
 "True"],ExpressionUUID->"79f82ae1-003f-4edb-80da-d469062279eb"],
 " when using ",
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "True"}]],ExpressionUUID->
  "624eabce-c4ab-44a1-8391-7a9c620b19b8"],
 "."
}], "Item",ExpressionUUID->"b26fa31a-30f1-4b43-9d94-5fc52d940fa1"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<StartingGraph\>\"", "\[Rule]", "g"}]],ExpressionUUID->
  "aee91a8c-f5c4-4bf6-afe0-d495b389eaec"],
 " will use graph ",
 Cell[BoxData["g"],ExpressionUUID->"e14bce75-df64-4e6c-b77f-c08fbd51cabc"],
 " as the starting point for building the preferential attachment graph. The \
vertex names of ",
 Cell[BoxData["g"],ExpressionUUID->"926c378a-562d-4fb5-ba27-c9f15f259040"],
 " are ignored; the result always uses positive integers as vertex names."
}], "Item",ExpressionUUID->"6d115659-e01d-4c9e-a843-790fd77b53f5"],

Cell[TextData[{
 "Available ",
 Cell[BoxData[
 "Method"],ExpressionUUID->"9230c53a-edd4-497e-963d-06ee79d68e66"],
 " option values:"
}], "Text",ExpressionUUID->"693e460b-a67f-44f7-8d8b-8b474f9600fb"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<Bag\>\""],ExpressionUUID->"00ac7cee-1729-49bc-bb62-92a2e9661c6c"],
 " works by putting the IDs of the vertices into a bag exactly as many times \
as their (in-)degree, plus once more. Then the required number of cited \
vertices are drawn from the bag, with replacement. This method might generate \
multi-edges. It only works if ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Beta]", "=", "1"}], TraditionalForm]],ExpressionUUID->
  "a827d13b-779a-45eb-a343-762d1699c162"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "=", "1"}], TraditionalForm]],ExpressionUUID->
  "6c14d240-5afc-41e2-8cea-eec503c9bf24"],
 "."
}], "Item",ExpressionUUID->"f3b84f0a-d4db-4839-a02c-3ae0cbafce5d"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<PSumTree\>\""],ExpressionUUID->"d6a29c08-23fa-424d-ad7a-7fa12075cc19"],
 " uses a partial prefix-sum tree to generate the graph. It does not generate \
multi-edges and works for any ",
 Cell[BoxData[
  FormBox["\[Beta]", TraditionalForm]],ExpressionUUID->
  "6cfb3cef-7a38-4d57-a140-be9a0dd83ec9"],
 " and ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "b924b07d-e65a-437e-a23d-e5aef21c9a8b"],
 " values."
}], "Item",ExpressionUUID->"f3757cfc-234a-4210-836f-0360343d1259"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<PSumTreeMultiple\>\""],ExpressionUUID->
  "adb8bb68-cd2e-4485-b4fd-4e515f4e246b"],
 " works like ",
 Cell[BoxData[
 "\"\<PSumTree\>\""],ExpressionUUID->"f0184989-e548-456c-a497-621585538a13"],
 " but allows multi-edges."
}], "Item",ExpressionUUID->"70379514-1ab5-44f5-bf88-0fa52fbed671"],

Cell[TextData[{
 "The built-in ",
 Cell[BoxData[
 "BarabasiAlbertGraphDistribution"],ExpressionUUID->
  "1f60e307-3f45-4126-9ac5-6109a3a3c72b"],
 " is equivalent to using ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "=", "0"}], TraditionalForm]],ExpressionUUID->
  "c5c016ec-00d1-4dac-84ba-8ba48bc03a73"],
 " and ",
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "False"}]],ExpressionUUID->
  "a57c8dd0-3d3d-4a25-8d05-e5945f9b6b57"],
 " in ",
 Cell[BoxData[
 "IGBarabasiAlbertGame"],ExpressionUUID->
  "ad387680-e143-4dd4-a179-b1714875af4e"],
 ", while the built-in ",
 Cell[BoxData[
 "PriceGraphDistribution"],ExpressionUUID->
  "cdb44e2b-c2c3-412c-87e9-308b7169e901"],
 " is equivalent ",
 Cell[BoxData[
  RowBox[{"DirectedEdges", "->", "True"}]],ExpressionUUID->
  "182ef871-067f-4389-859b-38b41db5ed20"],
 "."
}], "Text",ExpressionUUID->"4b2eabad-034e-4257-a1c7-7f7dd278d48d"],

Cell[BoxData[
 RowBox[{"IGBarabasiAlbertGame", "[", 
  RowBox[{"100", ",", "1"}], 
  "]"}]], "Input",ExpressionUUID->"3b2245d0-bdbd-4b79-98bc-5c09555fdc9f"],

Cell[TextData[{
 "Use attachment probability proportional to ",
 Cell[BoxData[
  RowBox[{
   SuperscriptBox["degree", "1.5"], "+", "1"}]],ExpressionUUID->
  "88f631cd-406f-4afa-b033-f8e5748f921d"],
 "."
}], "Text",ExpressionUUID->"126130f5-93a7-4b2a-ba1e-4417e1a07a59"],

Cell[BoxData[
 RowBox[{"IGBarabasiAlbertGame", "[", 
  RowBox[{"100", ",", "2", ",", 
   RowBox[{"{", 
    RowBox[{"1.5", ",", "1"}], "}"}]}], 
  "]"}]], "Input",ExpressionUUID->"b3a638d9-fa60-4830-87cf-2ba63ee641cd"],

Cell[TextData[{
 "The ",
 Cell[BoxData[
 "\"\<Bag\>\""],ExpressionUUID->"201e2398-7322-4933-bec2-7be2d3cd4c32"],
 " method may generate parallel edges:"
}], "Text",ExpressionUUID->"c98a7d5c-6e8b-4263-88e9-f640613ce99c"],

Cell[BoxData[
 RowBox[{"IGBarabasiAlbertGame", "[", 
  RowBox[{"100", ",", "2", ",", 
   RowBox[{"Method", "\[Rule]", "\"\<Bag\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"11fe9a2a-c76b-43fc-bdaa-2d7432443e10"],

Cell[BoxData[
 RowBox[{"MultigraphQ", "[", "%", 
  "]"}]], "Input",ExpressionUUID->"f899dddd-0135-4671-a227-dec1b9261bb7"],

Cell[TextData[{
 "Create a graph with the given out-degree sequence. The ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]],ExpressionUUID->
  "b9b34ab3-d7b9-4899-a985-81944748c35f"],
 " entry in the degree sequence list must be no greater than ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "f4b478bb-84c8-49f4-a926-0e7c79f5521c"],
 "."
}], "Text",ExpressionUUID->"6fdf7e9b-4a04-412f-968a-25b5748620c4"],

Cell[BoxData[
 RowBox[{"IGBarabasiAlbertGame", "[", 
  RowBox[{"12", ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "2", ",", "3", ",", "2", ",", "1", ",", "3", ",", "4", ",", "5",
      ",", "1", ",", "5", ",", "2"}], "}"}], ",", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<Minimal\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"ca7f092a-a9fa-41b1-bebe-84095820d313"],

Cell[BoxData[
 RowBox[{"VertexOutDegree", "[", "%", 
  "]"}]], "Input",ExpressionUUID->"657cc855-c546-4dd1-b032-0cfc8a2a706d"],

Cell["\<\
Create a preferential attachment graph using a 4-node complete graph as the \
starting point.\
\>", "Text",ExpressionUUID->"d41f1500-c331-42d4-8677-31709e6e2236"],

Cell[BoxData[
 RowBox[{"IGBarabasiAlbertGame", "[", 
  RowBox[{"10", ",", "1", ",", 
   RowBox[{"\"\<StartingGraph\>\"", "\[Rule]", 
    RowBox[{"CompleteGraph", "[", "4", "]"}]}]}], 
  "]"}]], "Input",ExpressionUUID->"6903b163-0c91-483e-bb6a-4e4cd6efa7c5"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGWattsStrogatzGame", \
"Subsubsection",ExpressionUUID->"3116cd63-c7f2-4bba-aa72-389e03e95129"],

Cell[BoxData[
 RowBox[{"?", 
  "IGWattsStrogatzGame"}]], \
"Input",ExpressionUUID->"07429fd1-8e96-4fad-a67b-1e880ac91937"],

Cell[TextData[{
 "The two-argument form produces results equivalent to that of the built-in \
",
 Cell[BoxData[
 "WattsStrogatzGraphDistribution"],ExpressionUUID->
  "093d4419-bc19-432e-8804-8f07a4fd15cb"],
 "."
}], "Text",ExpressionUUID->"be4ce83e-c6bc-4f15-915a-39d173669790"],

Cell[BoxData[
 RowBox[{"IGWattsStrogatzGame", "[", 
  RowBox[{"30", ",", "0.05", ",", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<Web\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"c9e1f1f6-f2ce-4aba-bc4d-479c02625433"],

Cell[TextData[{
 "The extended form allows for multi-dimensional lattices. Create a graph by \
randomly rewiring a two-dimensional toroidal lattice of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"10", "\[Times]", "10"}], TraditionalForm]],ExpressionUUID->
  "09cd2e09-a55a-4cb5-b203-6f812c02497b"],
 " nodes:"
}], "Text",ExpressionUUID->"cc766858-c973-436c-8dea-26f2ca9989ac"],

Cell[BoxData[
 RowBox[{"Graph3D", "@", 
  RowBox[{"IGWattsStrogatzGame", "[", 
   RowBox[{"10", ",", "0.01", ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1"}], "}"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"dea22010-d155-45f9-a3bc-0d66e85dcc64"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGStaticFitnessGame", \
"Subsubsection",ExpressionUUID->"37a18be8-e010-4c29-bb55-4fab9fb3dc4b"],

Cell[BoxData[
 RowBox[{"?", 
  "IGStaticFitnessGame"}]], \
"Input",ExpressionUUID->"bf531ddc-61c5-4367-8a88-e8955b3e4a6d"],

Cell[TextData[{
 Cell[BoxData[
 "IGStaticFitnessGame"],ExpressionUUID->
  "4b44f71f-e9e3-4aae-b405-b9ba9cf1d104"],
 " generates a random graph by connecting vertices based on their fitness \
score. The algorithm starts with ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "cf5ceaba-fe27-4fb7-acfc-f95a2d5b8974"],
 " vertices and no edges. Two vertices are selected with probabilities \
proportional to their fitness scores (for directed graphs, a starting vertex \
is selected based on its out-fitness and an end vertex based on its \
in-fitness).  If they are not yet connected, an edge is inserted between \
them. The procedure is repeated until the number of edges reaches ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "a76c1392-3a3b-4da8-8aa2-75bc56895965"],
 "."
}], "Text",ExpressionUUID->"ff0aa66a-6567-4415-b0d0-c517b900216a"],

Cell["\<\
The expected degree of each vertex is proportional to its fitness score. This \
is exactly true when self-loops and multi-edges are allowed, and \
approximately true otherwise.\
\>", "Text",ExpressionUUID->"5f9e50c5-ca91-453c-ae73-08a39905acb3"],

Cell[TextData[{
 Cell[BoxData[
 "IGStaticFitnessGame"],ExpressionUUID->
  "1af8e54f-7ab8-4508-a7fa-8b8233b54de4"],
 " approximates the Chung\[Dash]Lu model in which each edge ",
 Cell[BoxData[
  RowBox[{"i", "\[UndirectedEdge]", "j"}]],ExpressionUUID->
  "799585f7-6a7e-4922-a262-fd501040006e"],
 " is present independently, with probability"
}], "Text",ExpressionUUID->"62c3a68c-b362-4645-ae7f-bab3ec86bff6"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    SubscriptBox["p", 
     RowBox[{"i", "\[InvisibleComma]", "j"}]], "=", 
    TagBox[GridBox[{
       {"\[Piecewise]", GridBox[{
          {
           FractionBox[
            RowBox[{
             SubscriptBox["f", "i"], 
             SubscriptBox["f", "j"]}], 
            RowBox[{"2", "m"}]], 
           RowBox[{
            RowBox[{"if", " ", "i"}], "\[NotEqual]", "j"}]},
          {
           FractionBox[
            RowBox[{
             SubscriptBox["f", "i"], 
             SubscriptBox["f", "j"]}], 
            RowBox[{"4", "m"}]], 
           RowBox[{
            RowBox[{"if", " ", "i"}], "=", "j"}]}
         },
         AllowedDimensions->{2, Automatic},
         Editable->True,
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{1.}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.84]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}},
         Selectable->True]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{
       "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.35]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}],
     "Piecewise",
     DeleteWithContents->True,
     Editable->False,
     SelectWithContents->True,
     Selectable->False,
     StripWrapperBoxes->True]}], ","}], 
  TraditionalForm]], \
"DisplayFormula",ExpressionUUID->"e04dea0d-f741-4e43-84bf-517c210210f0"],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{"m", "=", 
    RowBox[{
     FractionBox["1", "2"], 
     RowBox[{
      SubscriptBox["\[Sum]", "k"], 
      SubscriptBox["f", "k"]}]}]}], TraditionalForm]],ExpressionUUID->
  "8a444d12-0fbd-4659-b7b0-c86768a6d17f"],
 "."
}], "Text",ExpressionUUID->"d6fe71a9-a89b-4a33-9942-ddcfd181827f"],

Cell[TextData[{
 "Unlike the Chung\[Dash]Lu algorithm, which would require ",
 Cell[BoxData[
  FormBox[
   RowBox[{"O", "(", 
    SuperscriptBox["m", "2"], ")"}], TraditionalForm]],ExpressionUUID->
  "20d4d4f8-e96b-41c8-ab5c-9e4b8fd076b9"],
 " computation steps, ",
 Cell[BoxData[
 "IGStaticFitnessGame"],ExpressionUUID->
  "439510ab-dfc1-4b53-93d3-a8ac92b0ef84"],
 " runs in ",
 Cell[BoxData[
  FormBox[
   RowBox[{"O", "(", "m", ")"}], TraditionalForm]],ExpressionUUID->
  "9119f1d0-f013-4c61-a5a1-f353f9344e83"],
 " time."
}], "Text",ExpressionUUID->"8939ed8c-75d6-48ea-ad49-41114232b0cd"],

Cell["The available options are:", \
"Text",ExpressionUUID->"6365a0e1-fba3-444a-80b7-23bd7bdeb67d"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"SelfLoops", "\[Rule]", "True"}]],ExpressionUUID->
  "ab928b5c-13ca-4a1f-af14-ed9c3c820af0"],
 " allows the creation of self-loops."
}], "Item",ExpressionUUID->"8a53b0a8-3a34-4cf3-81b0-1d9c6af27a06"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"MultiEdges", "\[Rule]", "True"}]],ExpressionUUID->
  "0bac0963-c90f-4b75-a278-1c95abdee203"],
 " allows the creation of parallel edges."
}], "Item",ExpressionUUID->"b4055413-d59c-4e2f-9d27-043ab919cb17"],

Cell["\<\
Create an undirected graph with four high-degree nodes and 40 low-degree ones.\
\>", "Text",ExpressionUUID->"bf2ab2ec-5d26-4ccd-a94c-912b3d7e7a84"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"weights", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"10", ",", "10", ",", "10", ",", "10"}], "}"}], ",", 
     RowBox[{"ConstantArray", "[", 
      RowBox[{"1", ",", "40"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"IGStaticFitnessGame", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Total", "[", "weights", "]"}], "/", "2"}], ",", "weights"}], 
  "]"}]}], "Input",ExpressionUUID->"bafeddfb-99fe-4900-9d6a-91ed9fc82cec"],

Cell[BoxData[
 RowBox[{"VertexDegree", "[", "%", 
  "]"}]], "Input",ExpressionUUID->"d84b0a5b-c416-43c0-ae34-2354aa7cd9e3"],

Cell["Create a directed graph.", \
"Text",ExpressionUUID->"76e882cd-99e2-4612-9efc-2e05d6333b9c"],

Cell[BoxData[
 RowBox[{"IGStaticFitnessGame", "[", 
  RowBox[{"30", ",", 
   RowBox[{"Range", "[", "10", "]"}], ",", 
   RowBox[{"Range", "[", 
    RowBox[{"10", ",", "1", ",", 
     RowBox[{"-", "1"}]}], "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"751a8b4e-195b-46f5-b0a0-23b3cb404800"],

Cell["\<\
When self-loops and multi-edges are allowed, the expected degree of each \
vertex is proportional to its fitness score.\
\>", "Text",ExpressionUUID->"7fc2b2a5-f35c-4b14-bb2e-d56afcc34211"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"degrees", "=", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3", ",", "2", ",", "2", ",", "2", ",", "1", ",", "1"}],
     "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"VertexDegree", "@", 
      RowBox[{"IGStaticFitnessGame", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"Total", "[", "degrees", "]"}], "/", "2"}], ",", "degrees", 
        ",", "\[IndentingNewLine]", 
        RowBox[{"SelfLoops", "\[Rule]", "True"}], ",", 
        RowBox[{"MultiEdges", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
       "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", "1000", "}"}]}], "\[IndentingNewLine]", "]"}], "//", "N"}], 
  "//", "Mean"}]}], \
"Input",ExpressionUUID->"ecdf41ce-23db-4442-b857-332e5c2ffe77"],

Cell["\<\
When generating simple graphs, this holds only approximately.\
\>", "Text",ExpressionUUID->"28521753-07a6-4a4c-8392-ba6c4795150b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"degrees", "=", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3", ",", "2", ",", "2", ",", "2", ",", "1", ",", "1"}],
     "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"VertexDegree", "@", 
      RowBox[{"IGStaticFitnessGame", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"Total", "[", "degrees", "]"}], "/", "2"}], ",", "degrees"}],
        "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", "1000", "}"}]}], "\[IndentingNewLine]", "]"}], "//", "N"}], 
  "//", "Mean"}]}], \
"Input",ExpressionUUID->"e8f4be5b-da6e-492a-9b76-50461f6c8eca"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGStaticPowerLawGame", \
"Subsubsection",ExpressionUUID->"d79d824f-0639-4b09-8bd4-d4b591651d64"],

Cell[BoxData[
 RowBox[{"?", 
  "IGStaticPowerLawGame"}]], \
"Input",ExpressionUUID->"93a34807-8ff6-49d7-9e68-0d99fb822fc7"],

Cell[TextData[{
 Cell[BoxData[
 "IGStaticPowerLawGame"],ExpressionUUID->
  "c0a258bb-345d-408c-952b-4ea0008003ab"],
 " generates a directed or undirected random graph where the degrees of \
vertices follow power-law distributions with prescribed exponents. For \
directed graphs, the exponents of the in- and out-degree distributions may be \
specified separately."
}], "Text",ExpressionUUID->"ef87fa4a-7f50-4242-9ce8-f1a5575268ed"],

Cell[TextData[{
 "This function is equivalent to ",
 Cell[BoxData[
 "IGStaticFitnessGame"],ExpressionUUID->
  "a0aa6587-024f-4af3-892e-35c19f9cca95"],
 " with a fitness vector ",
 Cell[BoxData[
  FormBox["f", TraditionalForm]],ExpressionUUID->
  "ec938f75-972f-4092-a919-21a9711ad2c3"],
 " where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["f", "i"], "=", 
    SuperscriptBox["i", 
     RowBox[{"-", "\[Alpha]"}]]}], TraditionalForm]],ExpressionUUID->
  "fe62cb71-4e27-4325-8203-91dd4a047eab"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Alpha]", "=", 
    FractionBox["1", 
     RowBox[{"exponent", "-", "1"}]]}], TraditionalForm]],ExpressionUUID->
  "f04d3826-eae4-43f4-a302-ef76851e6ead"],
 "."
}], "Text",ExpressionUUID->"74bf74a7-ca01-433d-826f-a107e1ab31b4"],

Cell[TextData[{
 "Note that significant finite size effects may be observed for exponents \
smaller than 3 in the original formulation of the game. This function removes \
the finite size effects by default by assuming that the fitness of vertex ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "1064a76a-1108-4a36-8347-a6f94fda3ff6"],
 " is ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"i", "+", 
      SubscriptBox["i", "0"]}], ")"}], 
    RowBox[{"-", "\[Alpha]"}]], TraditionalForm]],ExpressionUUID->
  "ec81b276-df77-4c00-b2d2-131645e511aa"],
 ", where ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["i", "0"], TraditionalForm]],ExpressionUUID->
  "2ae9672d-2060-475b-98b3-bd99a25ad4f1"],
 " is a constant chosen appropriately to ensure that the maximum degree is \
less than the square root of the number of edges times the average degree; \
see the paper of Chung and Lu, and Cho et al. for more details."
}], "Text",ExpressionUUID->"6ec6b7d7-2b2b-4011-af1a-8d5cf37c7a41"],

Cell["The available options are:", \
"Text",ExpressionUUID->"1ada5d10-f7e0-458b-b1cb-d4d7287c240a"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"SelfLoops", "\[Rule]", "True"}]],ExpressionUUID->
  "82e5332f-fc55-4757-9cd5-c980d5da9c2f"],
 " allows the creation of self-loops."
}], "Item",ExpressionUUID->"38b7e755-3b6f-4f66-a991-6e7176f3902d"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"MultiEdges", "\[Rule]", "True"}]],ExpressionUUID->
  "dd3a1159-12bf-4599-83e2-4c39998a9070"],
 " allows the creation of parallel edges."
}], "Item",ExpressionUUID->"7b951afb-8717-47a7-aff8-83ad5a372a39"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<FiniteSizeCorrection\>\"", "\[Rule]", "False"}]],
  ExpressionUUID->"5e5b5d6f-357e-4960-8a6b-84a7e85a5e42"],
 " disables finite size correction, which is used by default."
}], "Item",ExpressionUUID->"a6d9489d-7b89-4032-8a20-93eab0cd330d"],

Cell["\<\
Create a graph with a power-law degree distribution of exponent 2.5.\
\>", "Text",ExpressionUUID->"0bc720ff-cb49-4e19-9c19-fe6d536c6ded"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"IGStaticPowerLawGame", "[", 
    RowBox[{"100000", ",", "200000", ",", "2.5"}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"d2bdeb2f-94ec-4700-9160-aa237efb6acc"],

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{
   RowBox[{"VertexDegree", "[", "g", "]"}], ",", "\"\<Log\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<Log\>\"", ",", "\"\<PDF\>\""}], "}"}]}], 
  "]"}]], "Input",ExpressionUUID->"e99ef1ed-58cb-47c7-8aff-6264811703ea"],

Cell["\<\
Create a directed graph with power-law in- and out-degree distributions.\
\>", "Text",ExpressionUUID->"9432dbaa-d177-4437-9efd-46ca57013bf0"],

Cell[BoxData[
 RowBox[{"IGStaticPowerLawGame", "[", 
  RowBox[{"50", ",", "150", ",", "3", ",", "3"}], 
  "]"}]], "Input",ExpressionUUID->"b427ad36-e783-46c9-9ff4-47a25bdf4074"],

Cell[CellGroupData[{

Cell["References", \
"Subsubsubsection",ExpressionUUID->"97cfb8f2-bb15-4f87-8651-acc6502da89b"],

Cell["\<\
Goh K-I, Kahng B, Kim D: Universal behaviour of load distribution in \
scale-free networks. Phys Rev Lett 87(27):278701, 2001.\
\>", "Item",ExpressionUUID->"7b5856a3-a213-4c0c-98e2-4f30b9fec1d4"],

Cell["\<\
Chung F and Lu L: Connected components in a random graph with given degree \
sequences. Annals of Combinatorics 6, 125-145, 2002.\
\>", "Item",ExpressionUUID->"7c5d9bef-fbed-41fc-b0d5-e709c7c9434f"],

Cell["\<\
Cho YS, Kim JS, Park J, Kahng B, Kim D: Percolation transitions in scale-free \
networks under the Achlioptas process. Phys. Rev. Lett. 103:135702, 2009.\
\>", "Item",ExpressionUUID->"59d6f99c-3442-42b3-92a6-f302582ce9c2"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["IGStochasticBlockModelGame", \
"Subsubsection",ExpressionUUID->"add73d6e-3c24-46f1-92ef-fc1eb183d47f"],

Cell[BoxData[
 RowBox[{"?", 
  "IGStochasticBlockModelGame"}]], \
"Input",ExpressionUUID->"aca4560f-1e97-4de8-9f15-4b714673039c"],

Cell[TextData[{
 "The ",
 Cell[BoxData[
 "ratesMatrix"],ExpressionUUID->"af92228c-40bf-4a43-beed-b9f67e7c56b0"],
 " argument gives the connection probability between and within blocks \
(groups of vertices). The ",
 Cell[BoxData[
 "blockSizes"],ExpressionUUID->"187c63ab-0fa9-429b-9492-f645f572017e"],
 " argument gives the size of each block (vertex group)."
}], "Text",ExpressionUUID->"ad500921-cd6c-4738-9a31-27f1326907ff"],

Cell["The available options are:", \
"Text",ExpressionUUID->"99fe4e87-5df9-43a4-a48a-5e55e721e2ae"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "True"}]],ExpressionUUID->
  "9f752ce2-fb83-4372-9e0d-cdf00260f13b"],
 " creates a directed graph."
}], "Item",ExpressionUUID->"14f78eeb-d3ee-43d3-a6c4-0162609cfcaf"],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"SelfLoops", "\[Rule]", "True"}]],ExpressionUUID->
  "6fc50f27-b700-47ca-b85d-b16828466792"],
 " allows the creation of self-loops."
}], "Item",ExpressionUUID->"90efc1be-9415-4369-940a-9ed7e7bd6a40"],

Cell[BoxData[
 RowBox[{"IGStochasticBlockModelGame", "[", 
  RowBox[{
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0.9", "0.1", "0.2"},
       {"0.1", "1", "0.05"},
       {"0.2", "0.05", "0.9"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "7", ",", "8"}], "}"}]}], 
  "]"}]], "Input",ExpressionUUID->"4e056b36-c683-4853-a036-23e7451874e9"],

Cell[BoxData[
 RowBox[{"IGAdjacencyMatrixPlot", "[", "%", 
  "]"}]], "Input",ExpressionUUID->"56d13552-d053-416f-b401-062eb4faedbc"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["IGForestFireGame", \
"Subsubsection",ExpressionUUID->"7f5c6a47-c9cf-45b0-a68e-88f94a442e06"],

Cell[BoxData[
 RowBox[{"?", 
  "IGForestFireGame"}]], \
"Input",ExpressionUUID->"1ea5f895-ac67-4fb7-812d-ae9dce7cdae1"],

Cell[TextData[{
 "The forest fire model is a growing graph model. In every time step, a new \
vertex is added to the graph. The new vertex chooses the specified number of \
ambassadors (default: 1) and starts a simulated forest fire at their \
locations. The fire spreads through the directed edges. The spreading \
probability along an edge is given by ",
 Cell[BoxData[
 "pForward"],ExpressionUUID->"3fbd858b-f52f-47b9-a748-6f37021fd59a"],
 ". The fire may also spread backwards on an edge with probability ",
 Cell[BoxData[
  RowBox[{"pForward", " ", "*", " ", "rBackward"}]],ExpressionUUID->
  "883f7483-4936-48ee-be4f-7818281e5467"],
 ". When the fire has ended, the newly added vertex connects to all the \
vertices that were burned in the fire."
}], "Text",ExpressionUUID->"83a76e26-f015-487f-a6e3-919c85a6834b"],

Cell["\<\
The forest fire model intends to reproduce the following network \
characteristics, observed in real networks:\
\>", "Text",ExpressionUUID->"ede63e85-8656-4d20-bc27-062823f8c079"],

Cell["Heavy-tailed in-degree and out-degree distributions.", \
"Item",ExpressionUUID->"11c597fa-68de-427f-8ad6-587d3b5c8bc8"],

Cell["Community structure.", \
"Item",ExpressionUUID->"3be99288-53a3-4c55-b2c9-1840738f0b5a"],

Cell["\<\
Densification power-law. The network is densifying in time, according to a \
power-law rule.\
\>", "Item",ExpressionUUID->"03b92ebd-715e-424d-9aa1-4454f47de677"],

Cell["\<\
Shrinking diameter. The diameter of the network decreases in time.\
\>", "Item",ExpressionUUID->"9091d007-3b74-44aa-9286-af1274b5dd1d"],

Cell["The available options are:", \
"Text",ExpressionUUID->"43470389-d819-440e-818a-faa9d4082de5"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "False"}]],ExpressionUUID->
  "a02e5746-d9e9-4e72-8da0-ffb65354f9d5"],
 " generates an undirected graph."
}], "Item",ExpressionUUID->"cc298c49-015a-4009-b1c2-dcc929158769"],

Cell["Generate a graph with only forward burning.", \
"Text",ExpressionUUID->"a778ead3-e558-4eb4-9a1c-61cd11a0a652"],

Cell[BoxData[
 RowBox[{"IGForestFireGame", "[", 
  RowBox[{"30", ",", "0.2", ",", "0", ",", "\[IndentingNewLine]", 
   RowBox[{"GraphLayout", "\[Rule]", "\"\<SpringEmbedding\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"e94c7d01-df88-400a-8981-57380b75aab4"],

Cell["\<\
Generate a graph from the forest fire model, and visualize its community \
structure.\
\>", "Text",ExpressionUUID->"e1385d96-bdf6-4f3b-90e7-cd15090c84ff"],

Cell[BoxData[
 RowBox[{"IGForestFireGame", "[", 
  RowBox[{"100", ",", "0.2", ",", "1", ",", "2", ",", " ", 
   RowBox[{"DirectedEdges", "\[Rule]", "False"}], ",", 
   RowBox[{"GraphLayout", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<EdgeLayout\>\"", "\[Rule]", "\"\<HierarchicalEdgeBundling\>\""}], 
     "}"}]}]}], 
  "]"}]], "Input",ExpressionUUID->"ad816d80-3088-413c-9865-6ba090f38ac8"],

Cell["\<\
Plot the cumulative in-degree distribution for different backward to forward \
burning probability ratios.\
\>", "Text",ExpressionUUID->"7ee747a7-b0af-4188-9ab9-3440c8e1a420"],

Cell[BoxData[
 RowBox[{"Table", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Histogram", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"VertexInDegree", "@", 
      RowBox[{"IGForestFireGame", "[", 
       RowBox[{"2000", ",", "0.4", ",", "r", ",", "2", ",", 
        RowBox[{"DirectedEdges", "\[Rule]", "True"}]}], "]"}]}], ",", 
     "\[IndentingNewLine]", "\"\<Log\>\"", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Log\>\"", ",", "\"\<SurvivalCount\>\""}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"PlotLabel", "\[Rule]", 
      RowBox[{"Row", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<r=\>\"", ",", "r"}], "}"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"r", ",", "0", ",", "0.8", ",", "0.2"}], "}"}]}], 
  "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"30901aab-5206-498f-bd04-09deaed32802"],

Cell[CellGroupData[{

Cell["References", \
"Subsubsubsection",ExpressionUUID->"2b80bbb8-f407-48d1-86cd-c9374c22f9e3"],

Cell[TextData[{
 "Jure Leskovec, Jon Kleinberg and Christos Faloutsos. Graph evolution: \
Densification and shrinking diameters.\n",
 StyleBox["ACM Transactions on Knowledge Discovery from Data (TKDD)",
  FontSlant->"Italic"],
 ", 2007. ",
 ButtonBox["https://doi.org/10.1145/1217299.1217301",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://doi.org/10.1145/1217299.1217301"], None},
  ButtonNote->"https://doi.org/10.1145/1217299.1217301"]
}], "Item",ExpressionUUID->"62736fca-66eb-4da8-b202-a08dafd4df3f"],

Cell[TextData[{
 "Jure Leskovec, Jon Kleinberg and Christos Faloutsos. Graphs over time: \
densification laws, shrinking diameters and possible explanations. ",
 StyleBox["KDD '05: Proceeding of the eleventh ACM SIGKDD international \
conference on Knowledge discovery in data mining",
  FontSlant->"Italic"],
 ", 177\[Dash]187, 2005."
}], "Item",ExpressionUUID->"32bc169f-7135-44cc-ae73-a0f85f7e90a9"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["IGCallawayTraitsGame", \
"Subsubsection",ExpressionUUID->"bf479b16-a841-4f5c-8d67-8b16992a74e6"],

Cell[BoxData[
 RowBox[{"?", 
  "IGCallawayTraitsGame"}]], \
"Input",ExpressionUUID->"e22d1d87-c5ee-43cc-b6e3-229b4c38ecb4"],

Cell["\<\
This function simulates a growing random graph according to the following \
algorithm:\
\>", "Text",ExpressionUUID->"5f9a63f6-1ad3-49e5-a6f0-735233970108"],

Cell[TextData[{
 "At each time step, a new vertex is added. Its type is randomly selected \
according to the type weights. Then ",
 Cell[BoxData["k"],ExpressionUUID->"0f571551-e08e-49c7-b5c7-d29d06d84533"],
 " existing pairs of vertices are selected randomly, and each pair attempts \
to connect. The probability of success for given types of vertices is given \
by the preference matrix."
}], "Text",ExpressionUUID->"ffeecc36-8b4b-47b2-b73c-6baa0427dbdd"],

Cell["This algorithm may create self-loops and multi-edges.", \
"Text",ExpressionUUID->"9d5d5435-c52b-4b16-a463-92c8f3176dff"],

Cell["The available options are:", \
"Text",ExpressionUUID->"c741b1f1-ff9c-4d32-a8f0-459838ab6394"],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "True"}]],ExpressionUUID->
  "b742ed41-056b-4c77-a00d-9c05f9a720ef"],
 " creates a directed graph."
}], "Item",ExpressionUUID->"40f8fa65-ed5f-4302-b1a4-918a1b4780e2"],

Cell[BoxData[
 RowBox[{"IGCallawayTraitsGame", "[", 
  RowBox[{"20", ",", "2", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"(", GridBox[{
      {"1", "0.5", "0.3"},
      {"0.5", "0.7", "0.2"},
      {"0.3", "0.2", "0.1"}
     }], ")"}]}], 
  "]"}]], "Input",ExpressionUUID->"7417ba1b-7569-46d0-9a08-9678615d1bea"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["IGEstablishmentGame", \
"Subsubsection",ExpressionUUID->"79960340-d2fd-4c0f-8810-b00da4e4689f"],

Cell[BoxData[
 RowBox[{"?", 
  "IGEstablishmentGame"}]], \
"Input",ExpressionUUID->"5a6d466c-99a8-410c-a41c-737a88fe88e0"],

Cell["\<\
This function simulates a growing random graph according to the following \
algorithm:\
\>", "Text",ExpressionUUID->"ae5201db-bf03-4c4d-8a26-aa5a5e57ce4b"],

Cell[TextData[{
 "At each time step, a new vertex is added. Its type is randomly selected \
according to the type weights. It attempts to connect to ",
 Cell[BoxData["k"],ExpressionUUID->"335700c2-5355-466a-9292-26a27736a4a6"],
 " distinct existing vertices. The probability of success for given types of \
vertices is given by the preference matrix."
}], "Text",ExpressionUUID->"a7ce2da8-ba7a-40b1-94b1-285e130e2b9f"],

Cell["The available options are:", \
"Text",ExpressionUUID->"ea017bf4-9f40-4c61-98a5-a3364d525f16"],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "True"}]],ExpressionUUID->
  "1d84d8ad-aed8-4c38-96c1-5f190d45eba8"],
 " creates a directed graph."
}], "Item",ExpressionUUID->"cefe91bf-854b-47a3-b201-79382eab0239"],

Cell[BoxData[
 RowBox[{"IGEstablishmentGame", "[", 
  RowBox[{"100", ",", "10", ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"(", GridBox[{
      {"1", "0.5", "0.3"},
      {"0.5", "0.7", "0.2"},
      {"0.3", "0.2", "0.1"}
     }], ")"}]}], 
  "]"}]], "Input",ExpressionUUID->"4cc0b97e-c5b1-4644-b274-bc81a2809a5c"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["IGGeometricGame", \
"Subsubsection",ExpressionUUID->"b0e78ed0-9c69-4826-b109-ff221c90b4c3"],

Cell[BoxData[
 RowBox[{"?", 
  "IGGeometricGame"}]], \
"Input",ExpressionUUID->"6d7cb1d6-e9b4-4955-b4f2-91eeaf328df9"],

Cell["Available options:", \
"Text",ExpressionUUID->"ad49fd1a-87f6-4253-ac09-7185816b4d4b"],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<Periodic\>\"", "\[Rule]", "True"}]],ExpressionUUID->
  "46015dc9-f983-49d7-98f2-67d392327a4a"],
 " assumes a toroidal topology"
}], "Item",ExpressionUUID->"b750f35a-1785-4f98-8a52-92e64b97974a"],

Cell[BoxData[
 RowBox[{"IGGeometricGame", "[", 
  RowBox[{"50", ",", "0.2"}], 
  "]"}]], "Input",ExpressionUUID->"233f5e4d-747d-43ef-b389-b891bb709161"]
}, Open  ]],

Cell["\<\
Use a toroidal topology and draw \[OpenCurlyDoubleQuote]wraparound\
\[CloseCurlyDoubleQuote] edges with dashed lines.\
\>", "Text",ExpressionUUID->"26ac8964-4b4e-4ca0-b9cb-7ada022901dd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGGeometricGame", "[", 
   RowBox[{"50", ",", "0.2", ",", 
    RowBox[{"\"\<Periodic\>\"", "\[Rule]", "True"}]}], "]"}], "//", 
  "\[IndentingNewLine]", 
  RowBox[{"IGEdgeMap", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"EuclideanDistance", "@@", "#"}], ">", "0.2"}], ",", "Dashed",
        ",", "None"}], "]"}], "&"}], ",", 
    RowBox[{"EdgeStyle", "\[Rule]", 
     RowBox[{"IGEdgeVertexProp", "[", "VertexCoordinates", "]"}]}]}], 
   "\[IndentingNewLine]", 
   "]"}]}]], "Input",ExpressionUUID->"125ecf2a-c81b-4ed9-bf30-196346cb6ff7"]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Graph modification", \
"Section",ExpressionUUID->"d8a9e753-efbc-43c2-9602-da7c5e32592e"],

Cell[CellGroupData[{

Cell["IGRewire", \
"Subsubsection",ExpressionUUID->"16028fd2-8ba3-49f6-9355-3a0dd0fffe06"],

Cell[BoxData[
 RowBox[{"?", 
  "IGRewire"}]], \
"Input",ExpressionUUID->"f2abb397-a086-4177-8aac-5b9b661af922"],

Cell[TextData[{
 Cell[BoxData[
 "IGRewire"],ExpressionUUID->"f0869098-41df-4edc-88ce-d6495526f151"],
 " will try to rewire the edges of the graph the given number of times  by \
switching random pairs of edges as below, thus preserving the graph\
\[CloseCurlyQuote]s degree sequence."
}], "Text",ExpressionUUID->"fa6d1af2-ce82-48e2-a3aa-e19d5f3fddb7"],

Cell[TextData[{
 Cell[BoxData[
  GraphicsBox[{
    {RGBColor[0.254906, 0.411802, 0.882397], Thickness[Large], Opacity[1], 
     LineBox[{{-0.707106781186548, 
      0.7071067811865483}, {-0.7071067811865471, -0.7071067811865467}}], 
     LineBox[{{0.7071067811865479, -0.7071067811865485}, {0.7071067811865472, 
      0.7071067811865466}}]}, 
    {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], EdgeForm[
     None], FaceForm[RGBColor[
     0.254906, 0.411802, 0.882397]], {
      DiskBox[{-0.707106781186548, 0.7071067811865483}, 0.282842712474619], 
      InsetBox[
       StyleBox["\<\"A\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[1],
        FrontFaceColor->GrayLevel[1],
        BackFaceColor->GrayLevel[1],
        GraphicsColor->GrayLevel[1],
        FontColor->GrayLevel[1]], {-0.707106781186548, 0.7071067811865483},
       BaseStyle->"Graphics"]}, {
      DiskBox[{-0.7071067811865471, -0.7071067811865467}, 0.282842712474619], 
      InsetBox[
       StyleBox["\<\"B\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[1],
        FrontFaceColor->GrayLevel[1],
        BackFaceColor->GrayLevel[1],
        GraphicsColor->GrayLevel[1],
        FontColor->GrayLevel[1]], {-0.7071067811865471, -0.7071067811865467},
       BaseStyle->"Graphics"]}, {
      DiskBox[{0.7071067811865479, -0.7071067811865485}, 0.282842712474619], 
      InsetBox[
       StyleBox["\<\"D\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[1],
        FrontFaceColor->GrayLevel[1],
        BackFaceColor->GrayLevel[1],
        GraphicsColor->GrayLevel[1],
        FontColor->GrayLevel[1]], {0.7071067811865479, -0.7071067811865485},
       BaseStyle->"Graphics"]}, {
      DiskBox[{0.7071067811865472, 0.7071067811865466}, 0.282842712474619], 
      InsetBox[
       StyleBox["\<\"C\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[1],
        FrontFaceColor->GrayLevel[1],
        BackFaceColor->GrayLevel[1],
        GraphicsColor->GrayLevel[1],
        FontColor->GrayLevel[1]], {0.7071067811865472, 0.7071067811865466},
       BaseStyle->"Graphics"]}}},
   FormatType->TraditionalForm,
   FrameTicks->None,
   ImageSize->60]], "Output",
  GeneratedCell->False,
  CellAutoOverwrite->False,
  CellChangeTimes->{{3.732283774267033*^9, 3.73228378235226*^9}},
  ExpressionUUID->"f3fdb02b-c101-4a6d-babf-cf5d464c2679"],
 "  \[LongRightArrow]  ",
 Cell[BoxData[
  GraphicsBox[{
    {RGBColor[0.254906, 0.411802, 0.882397], Thickness[Large], Opacity[1], 
     LineBox[{{-0.707106781186548, 0.7071067811865483}, {0.7071067811865472, 
      0.7071067811865466}}], 
     LineBox[{{-0.7071067811865471, -0.7071067811865467}, {
      0.7071067811865479, -0.7071067811865485}}]}, 
    {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], EdgeForm[
     None], FaceForm[RGBColor[
     0.254906, 0.411802, 0.882397]], {
      DiskBox[{-0.707106781186548, 0.7071067811865483}, 0.282842712474619], 
      InsetBox[
       StyleBox["\<\"A\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[1],
        FrontFaceColor->GrayLevel[1],
        BackFaceColor->GrayLevel[1],
        GraphicsColor->GrayLevel[1],
        FontColor->GrayLevel[1]], {-0.707106781186548, 0.7071067811865483},
       BaseStyle->"Graphics"]}, {
      DiskBox[{-0.7071067811865471, -0.7071067811865467}, 0.282842712474619], 
      InsetBox[
       StyleBox["\<\"B\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[1],
        FrontFaceColor->GrayLevel[1],
        BackFaceColor->GrayLevel[1],
        GraphicsColor->GrayLevel[1],
        FontColor->GrayLevel[1]], {-0.7071067811865471, -0.7071067811865467},
       BaseStyle->"Graphics"]}, {
      DiskBox[{0.7071067811865479, -0.7071067811865485}, 0.282842712474619], 
      InsetBox[
       StyleBox["\<\"D\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[1],
        FrontFaceColor->GrayLevel[1],
        BackFaceColor->GrayLevel[1],
        GraphicsColor->GrayLevel[1],
        FontColor->GrayLevel[1]], {0.7071067811865479, -0.7071067811865485},
       BaseStyle->"Graphics"]}, {
      DiskBox[{0.7071067811865472, 0.7071067811865466}, 0.282842712474619], 
      InsetBox[
       StyleBox["\<\"C\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[1],
        FrontFaceColor->GrayLevel[1],
        BackFaceColor->GrayLevel[1],
        GraphicsColor->GrayLevel[1],
        FontColor->GrayLevel[1]], {0.7071067811865472, 0.7071067811865466},
       BaseStyle->"Graphics"]}}},
   FormatType->TraditionalForm,
   FrameTicks->None,
   ImageSize->60]],
  CellChangeTimes->{3.732283792247754*^9},ExpressionUUID->
  "d07f5df7-5aea-48fb-9fe8-1090650fcc1b"],
 "        or        ",
 Cell[BoxData[
  GraphicsBox[{
    {RGBColor[0.254906, 0.411802, 0.882397], Thickness[Large], Opacity[1], 
     LineBox[{{-0.707106781186548, 
      0.7071067811865483}, {-0.7071067811865471, -0.7071067811865467}}], 
     LineBox[{{0.7071067811865479, -0.7071067811865485}, {0.7071067811865472, 
      0.7071067811865466}}]}, 
    {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], EdgeForm[
     None], FaceForm[RGBColor[
     0.254906, 0.411802, 0.882397]], {
      DiskBox[{-0.707106781186548, 0.7071067811865483}, 0.282842712474619], 
      InsetBox[
       StyleBox["\<\"A\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[1],
        FrontFaceColor->GrayLevel[1],
        BackFaceColor->GrayLevel[1],
        GraphicsColor->GrayLevel[1],
        FontColor->GrayLevel[1]], {-0.707106781186548, 0.7071067811865483},
       BaseStyle->"Graphics"]}, {
      DiskBox[{-0.7071067811865471, -0.7071067811865467}, 0.282842712474619], 
      InsetBox[
       StyleBox["\<\"B\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[1],
        FrontFaceColor->GrayLevel[1],
        BackFaceColor->GrayLevel[1],
        GraphicsColor->GrayLevel[1],
        FontColor->GrayLevel[1]], {-0.7071067811865471, -0.7071067811865467},
       BaseStyle->"Graphics"]}, {
      DiskBox[{0.7071067811865479, -0.7071067811865485}, 0.282842712474619], 
      InsetBox[
       StyleBox["\<\"D\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[1],
        FrontFaceColor->GrayLevel[1],
        BackFaceColor->GrayLevel[1],
        GraphicsColor->GrayLevel[1],
        FontColor->GrayLevel[1]], {0.7071067811865479, -0.7071067811865485},
       BaseStyle->"Graphics"]}, {
      DiskBox[{0.7071067811865472, 0.7071067811865466}, 0.282842712474619], 
      InsetBox[
       StyleBox["\<\"C\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[1],
        FrontFaceColor->GrayLevel[1],
        BackFaceColor->GrayLevel[1],
        GraphicsColor->GrayLevel[1],
        FontColor->GrayLevel[1]], {0.7071067811865472, 0.7071067811865466},
       BaseStyle->"Graphics"]}}},
   FormatType->TraditionalForm,
   FrameTicks->None,
   ImageSize->60]], "Output",
  GeneratedCell->False,
  CellAutoOverwrite->False,
  CellChangeTimes->{{3.732283774267033*^9, 3.73228378235226*^9}},
  ExpressionUUID->"08ede9e6-afe3-45b3-b728-0deeac3d4afe"],
 "  \[LongRightArrow]  ",
 Cell[BoxData[
  GraphicsBox[{
    {RGBColor[0.254906, 0.411802, 0.882397], Thickness[Large], Opacity[1], 
     LineBox[{{-0.707106781186548, 0.7071067811865483}, {
      0.7071067811865479, -0.7071067811865485}}], 
     LineBox[{{-0.7071067811865471, -0.7071067811865467}, {0.7071067811865472,
       0.7071067811865466}}]}, 
    {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], EdgeForm[
     None], FaceForm[RGBColor[
     0.254906, 0.411802, 0.882397]], {
      DiskBox[{-0.707106781186548, 0.7071067811865483}, 0.282842712474619], 
      InsetBox[
       StyleBox["\<\"A\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[1],
        FrontFaceColor->GrayLevel[1],
        BackFaceColor->GrayLevel[1],
        GraphicsColor->GrayLevel[1],
        FontColor->GrayLevel[1]], {-0.707106781186548, 0.7071067811865483},
       BaseStyle->"Graphics"]}, {
      DiskBox[{-0.7071067811865471, -0.7071067811865467}, 0.282842712474619], 
      InsetBox[
       StyleBox["\<\"B\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[1],
        FrontFaceColor->GrayLevel[1],
        BackFaceColor->GrayLevel[1],
        GraphicsColor->GrayLevel[1],
        FontColor->GrayLevel[1]], {-0.7071067811865471, -0.7071067811865467},
       BaseStyle->"Graphics"]}, {
      DiskBox[{0.7071067811865479, -0.7071067811865485}, 0.282842712474619], 
      InsetBox[
       StyleBox["\<\"D\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[1],
        FrontFaceColor->GrayLevel[1],
        BackFaceColor->GrayLevel[1],
        GraphicsColor->GrayLevel[1],
        FontColor->GrayLevel[1]], {0.7071067811865479, -0.7071067811865485},
       BaseStyle->"Graphics"]}, {
      DiskBox[{0.7071067811865472, 0.7071067811865466}, 0.282842712474619], 
      InsetBox[
       StyleBox["\<\"C\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[1],
        FrontFaceColor->GrayLevel[1],
        BackFaceColor->GrayLevel[1],
        GraphicsColor->GrayLevel[1],
        FontColor->GrayLevel[1]], {0.7071067811865472, 0.7071067811865466},
       BaseStyle->"Graphics"]}}},
   FormatType->TraditionalForm,
   FrameTicks->None,
   ImageSize->60]],
  CellChangeTimes->{3.732283792247754*^9},ExpressionUUID->
  "be0c8932-8928-4a9c-8fee-46cc4a701f72"]
}], "Text",ExpressionUUID->"64cdbff3-0676-4e5d-9ad2-21dfb154da85"],

Cell[TextData[{
 "The switches succeed only if they would not create multi-edges. The \
parameter ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "5ea1de86-ff76-41f2-97f7-28a2fac57ff1"],
 " specifies the number of switch attempts, not the number of successful \
switches."
}], "Text",ExpressionUUID->"fa39e15e-19a7-4ba6-8272-1610c6c7bb47"],

Cell["\<\
For directed graphs, the switches are such that they preserve both the in- \
and out-degree sequence.\
\>", "Text",ExpressionUUID->"6f497364-17ad-484c-b146-5652aa0d94ad"],

Cell["The vertex ordering of the graph is retained.", \
"Text",ExpressionUUID->"4b831733-4702-4497-9aee-32dd8fdb20d6"],

Cell[TextData[{
 StyleBox["Warning:",
  FontWeight->"Bold"],
 " Most graph properties, such as edge weights, will be lost."
}], "Text",ExpressionUUID->"42a7dbdd-972c-4193-a21c-85ac2e879330"],

Cell["The available options are:", \
"Text",ExpressionUUID->"4b511953-0a20-4d25-98b5-c6bb525cf8ba"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"SelfLoops", "\[Rule]", "True"}]],ExpressionUUID->
  "fd69ebcd-280f-4d88-9909-c123d984dff2"],
 " allows the creation of self-loops."
}], "Item",ExpressionUUID->"9d4498ba-08ed-49b5-86e4-68e29515828a"],

Cell["\<\
Generate a random network with scale-free degree distribution:\
\>", "Text",ExpressionUUID->"6c319f4d-d8fa-46df-a36d-95ded967128c"],

Cell[BoxData[
 RowBox[{"IGRewire", "[", 
  RowBox[{
   RowBox[{"IGBarabasiAlbertGame", "[", 
    RowBox[{"200", ",", "2", ",", 
     RowBox[{"DirectedEdges", "\[Rule]", "False"}]}], "]"}], ",", "10000"}], 
  "]"}]], "Input",ExpressionUUID->"1f89116e-528f-4a65-99db-296f4c874a39"],

Cell[TextData[{
 "Use ",
 Cell[BoxData[
  RowBox[{"SelfLoops", "\[Rule]", "True"}]],ExpressionUUID->
  "f30084c4-febf-47d7-861a-f312e6af80c1"],
 " to allow creating loops."
}], "Text",ExpressionUUID->"5bafbd1d-62cf-4c65-816e-c53d435b0c81"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"IGRewire", "[", 
    RowBox[{
     RowBox[{"PathGraph", "@", 
      RowBox[{"Range", "[", "4", "]"}]}], ",", "100", ",", 
     RowBox[{"SelfLoops", "\[Rule]", "True"}]}], "]"}], ",", 
   RowBox[{"{", "5", "}"}]}], 
  "]"}]], "Input",ExpressionUUID->"69f4a9a7-e998-42d3-ae2c-b44ef93a9087"],

Cell[TextData[{
 Cell[BoxData[
 "IGRewrire"],ExpressionUUID->"8699732c-3ec9-4158-91d8-1c04e45546f4"],
 " never creates any multi-edges. Multigraphs are allowed as input, but a \
warning is given."
}], "Text",ExpressionUUID->"42f37d7a-4d68-496b-90f8-5616696f9c61"],

Cell[BoxData[
 RowBox[{"IGRewire", "[", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4}, {Null, {{1, 2}, {1, 2}, {3, 4}, {3, 4}}}, {
        GraphLayout -> "CircularEmbedding", PerformanceGoal -> "Quality", 
         VertexLabels -> {None}, VertexShapeFunction -> {"Name"}}]], 
      Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         BezierCurveBox[{
           DynamicLocation[
           "VertexID$1", Automatic, 
            Center], {-0.3355592528168865, -0.3355592528168676}, 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         BezierCurveBox[{
           DynamicLocation[
           "VertexID$1", Automatic, 
            Center], {-0.6644407471831181, -0.6644407471831277}, 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         BezierCurveBox[{
           DynamicLocation["VertexID$3", Automatic, Center], {
           0.33555925281688204`, 0.3355592528168704}, 
           DynamicLocation["VertexID$4", Automatic, Center]}], 
         BezierCurveBox[{
           DynamicLocation["VertexID$3", Automatic, Center], {
           0.6644407471831173, 0.6644407471831685}, 
           DynamicLocation["VertexID$4", Automatic, Center]}]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["1", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {-1., 1.0106430996148606`*^-15}, BaseStyle -> 
           "Graphics"], "DynamicName", BoxID -> "VertexID$1"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["2", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {6.049014748177263*^-16, -1.}, BaseStyle -> 
           "Graphics"], "DynamicName", BoxID -> "VertexID$2"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["3", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {1., -1.133107779529596*^-15}, BaseStyle -> 
           "Graphics"], "DynamicName", BoxID -> "VertexID$3"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["4", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {-7.044813998280222*^-16, 1.}, BaseStyle -> 
           "Graphics"], "DynamicName", BoxID -> 
          "VertexID$4"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        
        ImageSizeCache->{{7.105427357601002*^-15, 
         87.984375}, {-50.99999999999999, 45.98437500000001}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{88.984375, Automatic}], ",", "10", ",", 
   RowBox[{"VertexShapeFunction", "\[Rule]", "\"\<Name\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"bec2ec60-b511-4aac-967a-b85c9d307fca"],

Cell["\<\
Uniformly sample simple labelled graphs with a given degree sequence by first \
creating a single realization, then rewiring it a sufficient amount of times.\
\
\>", "Text",ExpressionUUID->"603294b6-41c8-40ef-abba-c11c91f08f3f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"degseq", "=", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3", ",", "2", ",", "2", ",", "1", ",", "1"}], "}"}]}], 
  ";"}]], "Input",ExpressionUUID->"f5c87dd3-cb11-41d1-b39e-67f96d01b2c9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"IGRewire", "[", 
       RowBox[{
        RowBox[{"IGRealizeDegreeSequence", "[", "degseq", "]"}], ",", "100"}],
        "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", "1000", "}"}]}], "\[IndentingNewLine]", "]"}], "//", 
    RowBox[{"CountsBy", "[", "AdjacencyMatrix", "]"}]}], "//", "KeySort"}], "//", 
  RowBox[{"KeyMap", "[", 
   RowBox[{
    RowBox[{"AdjacencyGraph", "[", 
     RowBox[{"#", ",", 
      RowBox[{"VertexShapeFunction", "\[Rule]", "\"\<Name\>\""}]}], "]"}], 
    "&"}], "]"}]}]], \
"Input",ExpressionUUID->"b55257cb-1b64-4b31-bcb0-0d3d46ede2f4"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGRewireEdges", \
"Subsubsection",ExpressionUUID->"5be1e2b4-bc25-4d2b-9e53-80446018d6f9"],

Cell[BoxData[
 RowBox[{"?", 
  "IGRewireEdges"}]], \
"Input",ExpressionUUID->"bad93f4a-6135-4ac8-aebc-34a2db38bf4a"],

Cell[TextData[{
 Cell[BoxData[
 "IGRewireEdges"],ExpressionUUID->"1ff60616-09b4-4a8c-9d25-46179e240a0e"],
 " randomly rewires each edge of the graph with the given probability. The \
vertex ordering is retained."
}], "Text",ExpressionUUID->"82cad61e-3230-4267-9d45-034e909805ac"],

Cell[TextData[{
 "For directed graphs, it can optionally rewire only the starting point or \
endpoint of directed edges, thus preserving the out- or in-degree sequence. \
In this case, the ",
 Cell[BoxData[
 "MultiEdges"],ExpressionUUID->"5740e3fa-279c-4347-ab3b-3914498573e9"],
 " option is ignored and multi-edges may be created."
}], "Text",ExpressionUUID->"c25906d5-aed0-467f-aa86-3c3d01677d10"],

Cell[TextData[{
 StyleBox["Warning:",
  FontWeight->"Bold"],
 " Most graph properties, such as edge weights, will be lost."
}], "Text",ExpressionUUID->"6012e444-5a68-45b8-8350-a05242b04017"],

Cell["The available options are:", \
"Text",ExpressionUUID->"3b4879dc-0b59-4243-95dc-c954dcf57ff6"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"SelfLoops", "\[Rule]", "True"}]],ExpressionUUID->
  "99c230b2-817e-4ac6-b738-bf43b7e8dae7"],
 " allows the creation of self-loops."
}], "Item",ExpressionUUID->"1fac8189-02e3-4f66-89d4-f98006fa6725"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"MultiEdges", "\[Rule]", "True"}]],ExpressionUUID->
  "3aee6336-5504-4df8-a471-b1c4c5e94dc3"],
 " allows the creation of multi-edges."
}], "Item",ExpressionUUID->"a9124eac-016d-40f7-8972-159eb70c8bb2"],

Cell["\<\
Create a random graph with 10 vertices and 20 edges, while allowing for \
multi-edges:\
\>", "Text",ExpressionUUID->"5597900e-ad59-4dbf-a337-86f584ff1feb"],

Cell[BoxData[
 RowBox[{"IGRewireEdges", "[", 
  RowBox[{
   RowBox[{"RandomGraph", "[", 
    RowBox[{"{", 
     RowBox[{"10", ",", "20"}], "}"}], "]"}], ",", "1", ",", 
   RowBox[{"MultiEdges", "\[Rule]", "True"}]}], 
  "]"}]], "Input",ExpressionUUID->"4cba0a7b-7704-4340-b10e-45c348e75e18"],

Cell[BoxData[
 RowBox[{"EdgeCount", "[", "%", 
  "]"}]], "Input",ExpressionUUID->"5e12ba9f-129b-4bf9-90da-ab3e101054ca"],

Cell["\<\
Rewire the endpoint of each edge, preserving the out-degree sequence.\
\>", "Text",ExpressionUUID->"f08b1091-83c8-482d-9163-b4714574fc9d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"RandomGraph", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"10", ",", "30"}], "}"}], ",", 
     RowBox[{"DirectedEdges", "\[Rule]", "True"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{"{", 
  RowBox[{
   RowBox[{"VertexInDegree", "[", "g", "]"}], ",", 
   RowBox[{"VertexOutDegree", "[", "g", "]"}]}], 
  "}"}]}], "Input",ExpressionUUID->"2efbf471-e8f9-4c22-baaa-639b61c79500"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"rg", "=", 
   RowBox[{"IGRewireEdges", "[", 
    RowBox[{"g", ",", "1", ",", "\"\<Out\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"{", 
  RowBox[{
   RowBox[{"VertexInDegree", "[", "rg", "]"}], ",", 
   RowBox[{"VertexOutDegree", "[", "rg", "]"}]}], 
  "}"}]}], "Input",ExpressionUUID->"88a90db6-19a9-4a4b-aff7-de7d007c4f65"],

Cell["Note that multi-edges were created.", \
"Text",ExpressionUUID->"8e9ebeb8-9d84-44b9-a567-a41659695072"],

Cell[BoxData[
 RowBox[{"MultigraphQ", "[", "rg", 
  "]"}]], "Input",ExpressionUUID->"8054cca6-57b5-4988-9a00-6dc4b0f8abe0"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGVertexContract", \
"Subsubsection",ExpressionUUID->"33701803-3094-4b54-ae0a-0b02fdc04735"],

Cell[BoxData[
 RowBox[{"?", 
  "IGVertexContract"}]], \
"Input",ExpressionUUID->"6dd5a994-9c1b-48e5-b053-32f09ff0db27"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGVertexContract", "[", 
   RowBox[{"g", ",", " ", 
    RowBox[{"{", 
     RowBox[{"set1", ",", " ", "set2", ",", " ", "\[Ellipsis]"}], "}"}]}], 
   "]"}]],ExpressionUUID->"52470ce2-9ba7-43c8-ae81-ed0ac2fb2960"],
 " will simultaneously contract multiple vertex sets into single vertices."
}], "Text",ExpressionUUID->"c15ff830-c504-4db1-b405-7f8073a4a29b"],

Cell[TextData[{
 "The name of a contracted vertex will be the same as the first element of \
the corresponding set. Vertex ordering is not retained. Edge ordering is \
retained only when using ",
 StyleBox["both",
  FontSlant->"Italic"],
 " ",
 Cell[BoxData[
  RowBox[{"SelfLoops", "\[Rule]", "True"}]],ExpressionUUID->
  "f6845132-0fc4-4240-8b97-7b16b007217b"],
 " and ",
 Cell[BoxData[
  RowBox[{"MultiEdges", "\[Rule]", "True"}]],ExpressionUUID->
  "cde5644f-7099-4db4-86a1-3987f611f99d"],
 "."
}], "Text",ExpressionUUID->"8aa9b7e2-4d02-4214-9ca8-95a729bc9bb6"],

Cell[TextData[{
 StyleBox["Warning:",
  FontWeight->"Bold"],
 " Most graph properties, such as edge weights, will be lost."
}], "Text",ExpressionUUID->"86f8835c-79b5-4fd7-b7e4-4b1b8e4b4183"],

Cell["The available options are:", \
"Text",ExpressionUUID->"d92d38b8-5916-47e4-8aa7-e24cf298a697"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"SelfLoops", "\[Rule]", "True"}]],ExpressionUUID->
  "1ef01eee-5a20-489d-b2b3-39b501ac9136"],
 " keeps any self-loops created during contraction."
}], "Item",ExpressionUUID->"ae3f5d7a-d216-4134-974b-f88474c07af8"],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"MultiEdges", "\[Rule]", "True"}]],ExpressionUUID->
  "729a5ba9-dff1-44eb-a97e-8c1608eb2fbf"],
 " keeps any parallel edges created during contraction."
}], "Item",ExpressionUUID->"e7a46974-dd64-497f-92fc-a54a62860d12"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4, 5}, {
        Null, {{1, 2}, {2, 3}, {3, 1}, {1, 4}, {4, 5}, {5, 1}}}, {
        GraphLayout -> {"Dimension" -> 2}, 
         ImageSize -> {155.1796875, Automatic}, VertexLabels -> {
           Placed["Name", Center]}, VertexShapeFunction -> {None}, 
         VertexSize -> {Large}}]]}, 
      TagBox[GraphicsGroupBox[{
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
          {Arrowheads[0.], 
           ArrowBox[{{1.008561941716892, 0.40195891948078455`}, {
            2.0165474817978133`, 0.}}, 0.16049605784358253`]}, 
          {Arrowheads[0.], 
           ArrowBox[{{1.008561941716892, 0.40195891948078455`}, {
            2.01740198110203, 0.8031084746249071}}, 0.16049605784358253`]}, 
          {Arrowheads[0.], 
           ArrowBox[{{1.008561941716892, 0.40195891948078455`}, {0., 
            0.8028039324489454}}, 0.16049605784358253`]}, 
          {Arrowheads[0.], 
           ArrowBox[{{1.008561941716892, 0.40195891948078455`}, {
            0.0008060506593086103, 0.0003240480495921849}}, 
            0.16049605784358253`]}, 
          {Arrowheads[0.], 
           ArrowBox[{{2.0165474817978133`, 0.}, {2.01740198110203, 
            0.8031084746249071}}, 0.16049605784358253`]}, 
          {Arrowheads[0.], 
           ArrowBox[{{0., 0.8028039324489454}, {0.0008060506593086103, 
            0.0003240480495921849}}, 0.16049605784358253`]}}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], {
           
           StyleBox[
            DiskBox[{1.008561941716892, 0.40195891948078455}, 
             0.16049605784358253],
            StripOnInput->False,
            ShowContents->False], 
           InsetBox["1", {1.008561941716892, 0.40195891948078455},
            BaseStyle->"Graphics"]}, {
           StyleBox[DiskBox[{2.0165474817978133, 0.}, 0.16049605784358253],
            StripOnInput->False,
            ShowContents->False], InsetBox["2", {2.0165474817978133, 0.},
            BaseStyle->"Graphics"]}, {
           
           StyleBox[
            DiskBox[{2.01740198110203, 0.8031084746249071}, 
             0.16049605784358253],
            StripOnInput->False,
            ShowContents->False], 
           InsetBox["3", {2.01740198110203, 0.8031084746249071},
            BaseStyle->"Graphics"]}, {
           StyleBox[DiskBox[{0., 0.8028039324489454}, 0.16049605784358253],
            StripOnInput->False,
            ShowContents->False], InsetBox["4", {0., 0.8028039324489454},
            BaseStyle->"Graphics"]}, {
           
           StyleBox[
            DiskBox[{0.0008060506593086103, 0.0003240480495921849}, 
             0.16049605784358253],
            StripOnInput->False,
            ShowContents->False], 
           InsetBox["5", {0.0008060506593086103, 0.0003240480495921849},
            BaseStyle->"Graphics"]}}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{155.1796875, Automatic}]}], 
  ";"}]], "Input",ExpressionUUID->"55289f14-5807-430b-8cd9-30dd9d606971"],

Cell[BoxData[
 RowBox[{"IGVertexContract", "[", 
  RowBox[{"g", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5"}], "}"}]}], "}"}], ",", 
   RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"14fb4e2e-a489-4d73-850a-1838fcb685cd"],

Cell[BoxData[
 RowBox[{"IGVertexContract", "[", 
  RowBox[{"g", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5"}], "}"}]}], "}"}], ",", 
   RowBox[{"SelfLoops", "\[Rule]", "True"}]}], 
  "]"}]], "Input",ExpressionUUID->"7a5f9dd4-7e64-4dca-b5f7-d1f0a8425073"],

Cell[BoxData[
 RowBox[{"IGVertexContract", "[", 
  RowBox[{"g", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5"}], "}"}]}], "}"}], ",", 
   RowBox[{"SelfLoops", "\[Rule]", "True"}], ",", 
   RowBox[{"MultiEdges", "\[Rule]", "True"}]}], 
  "]"}]], "Input",ExpressionUUID->"b40759ad-953f-4b3a-b111-d5d49a2650d4"],

Cell[BoxData[
 RowBox[{"IGVertexContract", "[", 
  RowBox[{"g", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5"}], "}"}]}], "}"}], ",", 
   RowBox[{"MultiEdges", "\[Rule]", "True"}]}], 
  "]"}]], "Input",ExpressionUUID->"328c2827-c9f9-45f5-b76a-782f0b4ee492"]
}, Open  ]],

Cell[TextData[{
 "When using both ",
 Cell[BoxData[
  RowBox[{"SelfLoops", "\[Rule]", "True"}]],ExpressionUUID->
  "81175107-4261-4c8c-87a1-9285e5db743b"],
 " and ",
 Cell[BoxData[
  RowBox[{"MultiEdges", "\[Rule]", "True"}]],ExpressionUUID->
  "08aa6aed-21ca-443d-8bbd-e23ec5af600b"],
 ", the edge ordering is maintained relative to the input graph. This allows \
easily transferring edge weights, and combining them if necessary."
}], "Text",ExpressionUUID->"50b0e79d-f9bb-48e5-b61e-613e30c1b41f"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"IGShorthand", "[", 
   RowBox[{"\"\<a-b-c-d-a,a-c\>\"", ",", "\[IndentingNewLine]", 
    RowBox[{"EdgeWeight", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]}], ",", 
    RowBox[{"EdgeLabels", "\[Rule]", "\"\<EdgeWeight\>\""}]}], 
   "]"}]}]], "Input",ExpressionUUID->"580f02bc-71bf-4167-9d5b-02d5d62be0b6"],

Cell[BoxData[
 RowBox[{"IGWeightedSimpleGraph", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"IGVertexContract", "[", 
    RowBox[{"g", ",", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"\"\<a\>\"", ",", "\"\<b\>\""}], "}"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"SelfLoops", "\[Rule]", "True"}], ",", 
     RowBox[{"MultiEdges", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
     RowBox[{"EdgeWeight", "\[Rule]", 
      RowBox[{
       RowBox[{"IGEdgeProp", "[", "EdgeWeight", "]"}], "[", "g", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"EdgeLabels", "\[Rule]", "\"\<EdgeWeight\>\""}], ",", 
   RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], 
  "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"3ec1b751-c8de-4d92-86a2-7cd7633b45fe"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGConnectNeighborhood", \
"Subsubsection",ExpressionUUID->"1b9534c4-b08b-49ac-85b6-cae07b5d79c7"],

Cell[BoxData[
 RowBox[{"?", 
  "IGConnectNeighborhood"}]], \
"Input",ExpressionUUID->"178b34a0-1d3d-402b-b381-57c24d59f026"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGConnectNeighborhood", "[", 
   RowBox[{"g", ",", "k"}], "]"}]],ExpressionUUID->
  "65491835-6602-4dcd-8418-d24e1b8d17a3"],
 " connects each vertex in ",
 Cell[BoxData["g"],ExpressionUUID->"6dc554e3-792d-4476-a57e-b43e9ae43fda"],
 " to its order ",
 Cell[BoxData["k"],ExpressionUUID->"ec3083e1-f3e5-4515-a3ea-6ecf6620f876"],
 " neighbourhood. This operation is also known as the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]],ExpressionUUID->
  "92b84da6-f397-479e-acd7-5b36f9e442bb"],
 " power of the graph."
}], "Text",ExpressionUUID->"9ab01d07-f015-4502-a820-46a57f3aa518"],

Cell[TextData[{
 Cell[BoxData[
 "IGConnectNeighborhood"],ExpressionUUID->
  "1e0f70aa-4c5b-4b14-a8da-b8141bda38e5"],
 " differs from the built-in ",
 Cell[BoxData[
 "GraphPower"],ExpressionUUID->"dcd4b1e0-39be-4141-8fec-b9b95f3ff97d"],
 " in that it preserves parallel edges and self-loops."
}], "Text",ExpressionUUID->"8738eb89-9011-4cdb-86a8-2917b1f7b24c"],

Cell[TextData[{
 StyleBox["Warning:",
  FontWeight->"Bold"],
 " Most graph properties, such as edge weights, will be lost."
}], "Text",ExpressionUUID->"1daa29ec-b7c1-426b-b326-ecad55b164c1"],

Cell["Connect each vertex to its second order neighbourhood:", \
"Text",ExpressionUUID->"58f6c43b-92fa-4fb1-8669-1f5ccd1386a4"],

Cell[BoxData[
 RowBox[{"IGConnectNeighborhood", "[", 
  RowBox[{"CycleGraph", "[", "15", "]"}], 
  "]"}]], "Input",ExpressionUUID->"17bce4e2-65b7-47c2-b1d8-53ac496654cb"],

Cell["Connect each vertex to its third order neighbourhood:", \
"Text",ExpressionUUID->"73423f10-0329-4d34-b8fa-3a1fae75deb5"],

Cell[BoxData[
 RowBox[{"IGConnectNeighborhood", "[", 
  RowBox[{
   RowBox[{"GridGraph", "[", 
    RowBox[{"{", 
     RowBox[{"10", ",", "10"}], "}"}], "]"}], ",", "3"}], 
  "]"}]], "Input",ExpressionUUID->"04e1a534-b254-4898-9b16-5f1d2587b5d7"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGMycielskian", \
"Subsubsection",ExpressionUUID->"9b711641-c4e8-4314-be15-998661330e54"],

Cell[BoxData[
 RowBox[{"?", 
  "IGMycielskian"}]], \
"Input",ExpressionUUID->"8428fef7-832a-4824-bbdf-ef8fbb55814a"],

Cell[TextData[{
 Cell[BoxData[
 "IGMycielskian"],ExpressionUUID->"79819e5e-ed63-44e7-b07f-4c96c29a5be7"],
 " applies ",
 ButtonBox["the Mycielski construction",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Mycielskian"], None},
  ButtonNote->"https://en.wikipedia.org/wiki/Mycielskian"],
 " to an undirected graph on ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "\[GreaterEqual]", "2"}], TraditionalForm]],ExpressionUUID->
  "e75f6ae4-af99-4c14-864e-686d7b324e24"],
 " vertices to obtain a larger graph (the ",
 StyleBox["Mycielskian",
  FontSlant->"Italic"],
 ") on ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"2", " ", "n"}], "+", "1"}], TraditionalForm]],ExpressionUUID->
  "0f1adb8f-2984-4fea-b03c-172fa6022fb0"],
 " vertices. If the graph has less than 2 vertices, then instead of applying \
the standard Mycielski construction, ",
 Cell[BoxData[
 "IGMycielskian"],ExpressionUUID->"53b6365a-a6dc-40a8-9040-93c282ff197e"],
 " simply adds one vertex and one edge."
}], "Text",ExpressionUUID->"bf067707-befe-4f3c-b396-6da4cac09561"],

Cell[TextData[{
 "If the original graph has chromatic number ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "685f70ac-cacb-4f27-9281-ff2c57027cc0"],
 ", its Mycielskian has chromatic number ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", "+", "1"}], TraditionalForm]],ExpressionUUID->
  "f2df1d42-1a20-4075-84f0-11fa0d2d16d0"],
 ". The Mycielski construction preserves the triangle-free property of the \
graph."
}], "Text",ExpressionUUID->"3830b004-2531-44e3-9d30-5ebd6614564a"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{
  "CycleGraph", "[", "4", 
   "]"}]}]], "Input",ExpressionUUID->"3b53f84d-0f30-4d22-8ceb-e725b9ee2df2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"IGChromaticNumber", "[", "g", "]"}], ",", 
   RowBox[{"IGTriangleFreeQ", "[", "g", "]"}]}], 
  "}"}]], "Input",ExpressionUUID->"d9e9b4cb-2559-47f2-b68d-6902c23dc284"],

Cell[BoxData[
 RowBox[{"mg", "=", 
  RowBox[{
  "IGMycielskian", "[", "g", 
   "]"}]}]], "Input",ExpressionUUID->"4d0a1e29-c4ee-4d48-80d3-be4d0a1d7dd8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"IGChromaticNumber", "[", "mg", "]"}], ",", 
   RowBox[{"IGTriangleFreeQ", "[", "mg", "]"}]}], 
  "}"}]], "Input",ExpressionUUID->"2a5245fc-965c-43ec-a89e-a155a4d6f3a2"],

Cell["\<\
Construct triangle-free graphs with successively larger chromatic numbers.\
\>", "Text",ExpressionUUID->"18dd4fe5-55bb-45a4-b5cb-e6a190805be5"],

Cell[BoxData[
 RowBox[{"NestList", "[", 
  RowBox[{"IGMycielskian", ",", 
   RowBox[{"IGEmptyGraph", "[", "]"}], ",", "5"}], 
  "]"}]], "Input",ExpressionUUID->"d5aade86-1a48-4c02-8962-1b01728607ac"],

Cell[BoxData[
 RowBox[{"IGChromaticNumber", "/@", 
  "%"}]], "Input",ExpressionUUID->"fc0853ee-2d48-4d56-8678-5c3491268565"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGSmoothen", \
"Subsubsection",ExpressionUUID->"74ce0c3b-801e-4ca0-95d5-73fdd3ab254d"],

Cell[BoxData[
 RowBox[{"?", 
  "IGSmoothen"}]], \
"Input",ExpressionUUID->"63554e5f-035f-4913-9cb8-2024f8994ee9"],

Cell[TextData[{
 Cell[BoxData[
 "IGSmoothen"],ExpressionUUID->"373becea-db5e-459c-8263-35dc076ad86a"],
 " suppresses all degree-2 vertices, thus obtaining the smallest \
topologically equivalent (i.e. homeomorphic) graph. See also ",
 Cell[BoxData[
 "IGHomeomorphicQ"],ExpressionUUID->"c3e3477a-0d29-437d-abac-c5d6cbcaf293"],
 "."
}], "Text",ExpressionUUID->"6b8883cf-7d9f-4bbe-a655-c29e3947cdac"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[GridBox[{
     {
      GraphicsBox[
       NamespaceBox[{
         {GrayLevel[0], Thickness[Large], Opacity[0.7], 
          LineBox[{{
            DynamicLocation["VertexID$1", Automatic, Center], DynamicLocation[
             "VertexID$2", Automatic, Center]}, {
            DynamicLocation["VertexID$2", Automatic, Center], DynamicLocation[
             "VertexID$3", Automatic, Center]}}]}, 
         {RGBColor[1, 0.6666666666666666, 
           NCache[
            Rational[1, 3], 0.3333333333333333]], EdgeForm[GrayLevel[0]], 
          TagBox[{
            TagBox[DiskBox[{0., 3.6739403974420594*^-16}, 0.1],
             "DynamicName",
             BoxID -> "VertexID$1"], 
            InsetBox["1", DynamicLocation["VertexID$1", None, Center],
             BaseStyle->"Graphics"]},
           "DynamicName",
           BoxID -> "VertexLabelID$1"], 
          TagBox[{
            TagBox[
             {RGBColor[1, 
               Rational[1, 3], 
               Rational[1, 3]], DiskBox[{1., 2.4492935982947064*^-16}, 0.1]},
             "DynamicName",
             BoxID -> "VertexID$2"], 
            InsetBox["2", DynamicLocation["VertexID$2", None, Center],
             BaseStyle->"Graphics"]},
           "DynamicName",
           BoxID -> "VertexLabelID$2"], 
          TagBox[{
            TagBox[DiskBox[{2., 0.}, 0.1],
             "DynamicName",
             BoxID -> "VertexID$3"], 
            InsetBox["3", DynamicLocation["VertexID$3", None, Center],
             BaseStyle->"Graphics"]},
           "DynamicName",
           BoxID -> "VertexLabelID$3"]}}],
       FormatType->TraditionalForm,
       FrameTicks->None,
       ImageSize->200]},
     {
      FormBox[
       GraphicsBox[
        {AbsoluteThickness[1], Arrowheads[0.06666], 
         ArrowBox[{{0, 0}, {0, -0.25}}]},
        ImageSize->180],
       TraditionalForm]},
     {
      GraphicsBox[
       NamespaceBox[{
         {GrayLevel[0], Thickness[Large], Opacity[0.7], 
          LineBox[{
           DynamicLocation["VertexID$1", Automatic, Center], DynamicLocation[
            "VertexID$2", Automatic, Center]}]}, 
         {RGBColor[1, 0.6666666666666666, 
           NCache[
            Rational[1, 3], 0.3333333333333333]], EdgeForm[GrayLevel[0]], 
          TagBox[{
            TagBox[DiskBox[{0., 3.6739403974420594*^-16}, 0.1],
             "DynamicName",
             BoxID -> "VertexID$1"], 
            InsetBox["1", DynamicLocation["VertexID$1", None, Center],
             BaseStyle->"Graphics"]},
           "DynamicName",
           BoxID -> "VertexLabelID$1"], 
          TagBox[{
            TagBox[DiskBox[{2., 0.}, 0.1],
             "DynamicName",
             BoxID -> "VertexID$2"], 
            InsetBox["3", DynamicLocation["VertexID$2", None, Center],
             BaseStyle->"Graphics"]},
           "DynamicName",
           BoxID -> "VertexLabelID$2"]}}],
       FormatType->TraditionalForm,
       FrameTicks->None,
       ImageSize->200]}
    }], TraditionalForm]],ExpressionUUID->
  "113940a6-b71a-4165-8c98-cacfad5374e8"],
 Cell[BoxData[
  TemplateBox[{40},
   "Spacer1"]],
  CellChangeTimes->{{3.7945448830572863`*^9, 3.794544900368698*^9}},
  ExpressionUUID->"00800b13-c42c-4be9-bb93-c4dfe9664827"],
 Cell[BoxData[
  TagBox[GridBox[{
     {
      GraphicsBox[
       NamespaceBox[{
         {GrayLevel[0], Thickness[Large], Opacity[0.7], Arrowheads[0.05], 
          ArrowBox[{{
            DynamicLocation["VertexID$1", Automatic, Center], DynamicLocation[
             "VertexID$2", Automatic, Center]}, {
            DynamicLocation["VertexID$2", Automatic, Center], DynamicLocation[
             "VertexID$3", Automatic, Center]}}]}, 
         {RGBColor[1, 0.6666666666666666, 
           NCache[
            Rational[1, 3], 0.3333333333333333]], EdgeForm[GrayLevel[0]], 
          TagBox[{
            TagBox[DiskBox[{0., 3.6739403974420594*^-16}, 0.1],
             "DynamicName",
             BoxID -> "VertexID$1"], 
            InsetBox["1", DynamicLocation["VertexID$1", None, Center],
             BaseStyle->"Graphics"]},
           "DynamicName",
           BoxID -> "VertexLabelID$1"], 
          TagBox[{
            TagBox[
             {RGBColor[1, 
               Rational[1, 3], 
               Rational[1, 3]], DiskBox[{1., 2.4492935982947064*^-16}, 0.1]},
             "DynamicName",
             BoxID -> "VertexID$2"], 
            InsetBox["2", DynamicLocation["VertexID$2", None, Center],
             BaseStyle->"Graphics"]},
           "DynamicName",
           BoxID -> "VertexLabelID$2"], 
          TagBox[{
            TagBox[DiskBox[{2., 0.}, 0.1],
             "DynamicName",
             BoxID -> "VertexID$3"], 
            InsetBox["3", DynamicLocation["VertexID$3", None, Center],
             BaseStyle->"Graphics"]},
           "DynamicName",
           BoxID -> "VertexLabelID$3"]}}],
       FormatType->TraditionalForm,
       FrameTicks->None,
       ImageSize->200]},
     {
      GraphicsBox[
       {AbsoluteThickness[1], Arrowheads[0.06666], 
        ArrowBox[{{0, 0}, {0, -0.25}}]},
       ImageSize->180]},
     {
      GraphicsBox[
       NamespaceBox[{
         {GrayLevel[0], Thickness[Large], Opacity[0.7], Arrowheads[0.05], 
          ArrowBox[{
           DynamicLocation["VertexID$1", Automatic, Center], DynamicLocation[
            "VertexID$2", Automatic, Center]}]}, 
         {RGBColor[1, 0.6666666666666666, 
           NCache[
            Rational[1, 3], 0.3333333333333333]], EdgeForm[GrayLevel[0]], 
          TagBox[{
            TagBox[DiskBox[{0., 3.6739403974420594*^-16}, 0.1],
             "DynamicName",
             BoxID -> "VertexID$1"], 
            InsetBox["1", DynamicLocation["VertexID$1", None, Center],
             BaseStyle->"Graphics"]},
           "DynamicName",
           BoxID -> "VertexLabelID$1"], 
          TagBox[{
            TagBox[DiskBox[{2., 0.}, 0.1],
             "DynamicName",
             BoxID -> "VertexID$2"], 
            InsetBox["3", DynamicLocation["VertexID$2", None, Center],
             BaseStyle->"Graphics"]},
           "DynamicName",
           BoxID -> "VertexLabelID$2"]}}],
       FormatType->TraditionalForm,
       FrameTicks->None,
       ImageSize->200]}
    },
    AutoDelete->False,
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Grid"]],
  CellChangeTimes->{{3.7945447639598017`*^9, 3.794544844817363*^9}},
  ExpressionUUID->"87e4f390-176b-46c0-a62c-be226f0edb3a"]
}], "Text",ExpressionUUID->"084adcf8-63e9-404f-b46b-821a0685bf31"],

Cell["\<\
The vertex names are preserved, and the weights of merged edges are summed \
up. All other graph properties are discarded. In directed graphs, only those \
vertices are smoothened which have one incoming and one outgoing edge.\
\>", "Text",ExpressionUUID->"ab559f94-6d3d-4de8-973f-8a0866b4fb58"],

Cell["Available options:", \
"Text",ExpressionUUID->"ad31bee0-3a68-42e1-b9d6-7a71c75cb403"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "False"}]],ExpressionUUID->
  "a8efe536-87b7-42ee-834b-3a3278018ea8"],
 " ignores edge directions in the input graph."
}], "Item",ExpressionUUID->"0ab61d6c-ef15-4896-9a5d-01a8233293b6"],

Cell["\<\
The smallest topological equivalent of a path graph consists of two connected \
vertices.\
\>", "Text",ExpressionUUID->"8a499e05-4c27-4ad8-a99d-e57375a4264f"],

Cell[BoxData[
 RowBox[{"IGSmoothen", "[", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4, 5}, {Null, {{1, 2}, {2, 3}, {3, 4}, {4, 5}}}, {
        FormatType -> TraditionalForm, GraphLayout -> {"Dimension" -> 2}, 
         ImageSize -> {243.40234375, Automatic}, PerformanceGoal -> "Quality",
          VertexShapeFunction -> {"Name"}, VertexSize -> {Medium}}]], 
      Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         LineBox[{{
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$2", Automatic, Center]}, {
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}, {
            DynamicLocation["VertexID$3", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}, {
            DynamicLocation["VertexID$4", Automatic, Center], 
            DynamicLocation["VertexID$5", Automatic, Center]}}]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["1", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0., 7.347880794884119*^-16}, Automatic, {0.2,
            0.2}, BaseStyle -> "Graphics"], "DynamicName", BoxID -> 
          "VertexID$1"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["2", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {1., 6.123233995736766*^-16}, Automatic, {0.2,
            0.2}, BaseStyle -> "Graphics"], "DynamicName", BoxID -> 
          "VertexID$2"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["3", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {2., 4.898587196589413*^-16}, Automatic, {0.2,
            0.2}, BaseStyle -> "Graphics"], "DynamicName", BoxID -> 
          "VertexID$3"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["4", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {3., 2.4492935982947064`*^-16}, Automatic, {
           0.2, 0.2}, BaseStyle -> "Graphics"], "DynamicName", BoxID -> 
          "VertexID$4"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["5", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {4., 0.}, Automatic, {0.2, 0.2}, BaseStyle -> 
           "Graphics"], "DynamicName", BoxID -> 
          "VertexID$5"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        
        ImageSizeCache->{{8.881784197001252*^-16, 242.40234375}, {-9., 
         2.542968750000046}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{243.40234375, Automatic}], ",", 
   RowBox[{"VertexLabels", "\[Rule]", "Automatic"}]}], 
  "]"}]], "Input",ExpressionUUID->"9de65de0-287a-457d-99b5-31fd59e95e79"],

Cell["\<\
The result may contain self-loops. The smallest topological equivalent of a \
cycle graph is a single vertex with a self-loop.\
\>", "Text",ExpressionUUID->"b6464ef9-e058-4842-9b96-2ba79cecebb1"],

Cell[BoxData[
 RowBox[{"IGSmoothen", "[", 
  RowBox[{"CycleGraph", "[", "10", "]"}], 
  "]"}]], "Input",ExpressionUUID->"03ad629c-d3f6-4c5f-8085-74d8c04dfe9f"],

Cell["The result may also contain multi-edges.", \
"Text",ExpressionUUID->"b9b44509-42d8-475d-be0a-d816a2ea1730"],

Cell[BoxData[
 RowBox[{"IGSmoothen", "[", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4, 5, 6, 7, 8}, {
        Null, {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {2, 6}, {6, 7}, {5, 7}, {5, 
         8}}}, {PerformanceGoal -> "Quality", VertexLabels -> {None}, 
         VertexShapeFunction -> {"Name"}}]], Typeset`boxes, 
      Typeset`boxes$s2d = GraphicsGroupBox[{{
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         LineBox[{{
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$2", Automatic, Center]}, {
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}, {
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$6", Automatic, Center]}, {
            DynamicLocation["VertexID$3", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}, {
            DynamicLocation["VertexID$4", Automatic, Center], 
            DynamicLocation["VertexID$5", Automatic, Center]}, {
            DynamicLocation["VertexID$5", Automatic, Center], 
            DynamicLocation["VertexID$7", Automatic, Center]}, {
            DynamicLocation["VertexID$5", Automatic, Center], 
            DynamicLocation["VertexID$8", Automatic, Center]}, {
            DynamicLocation["VertexID$6", Automatic, Center], 
            DynamicLocation["VertexID$7", Automatic, Center]}}]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["1", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0., 0.6627181511725552}, BaseStyle -> 
           "Graphics"], "DynamicName", BoxID -> "VertexID$1"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["2", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0.9641829639791448, 0.663003844334007}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$2"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["3", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {1.72475622995653, 1.3264692192443732`}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$3"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["4", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {2.7419269157661503`, 1.326334922097312}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$4"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["5", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {3.502246535118303, 0.663084949065074}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$5"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["6", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {1.725390098300637, 0.}, BaseStyle -> 
           "Graphics"], "DynamicName", BoxID -> "VertexID$6"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["7", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {2.7426547650378774`, 
           0.00018035036484909117`}, BaseStyle -> "Graphics"], "DynamicName", 
          BoxID -> "VertexID$7"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["8", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {4.465994667745367, 0.6630658107423155}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> 
          "VertexID$8"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        
        ImageSizeCache->{{8.881784197001252*^-16, 142.54296875}, {-32., 
         26.367303670092085`}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{143.54296875, Automatic}], ",", 
   RowBox[{"VertexLabels", "\[Rule]", "Automatic"}]}], 
  "]"}]], "Input",ExpressionUUID->"fd9b2afa-b30c-4aa7-8573-b32f7e28b90e"],

Cell["\<\
If the input is directed, only those vertices are smoothed which have one \
incoming and one outgoing edge.\
\>", "Text",ExpressionUUID->"74377fb8-5800-47a6-943f-2020f1405c6c"],

Cell[BoxData[
 RowBox[{"IGSmoothen", "[", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4, 5, 6, 7, 
        8}, {{{1, 2}, {2, 3}, {3, 4}, {6, 5}, {5, 4}, {1, 7}, {6, 7}, {7, 
         8}, {8, 4}}, Null}, {EdgeStyle -> {
           Arrowheads[Small]}, FormatType -> TraditionalForm, 
         GraphLayout -> {
          "Dimension" -> 2, "VertexLayout" -> "CircularEmbedding"}, 
         ImageSize -> {90.44921875, Automatic}, PerformanceGoal -> "Quality", 
         VertexCoordinates -> {{1., 0.}, {0.6234898018587336, 
          0.7818314824680297}, {-0.22252093395631434`, 
          0.9749279121818236}, {-0.900968867902419, 
          0.43388373911755823`}, {-0.9009688679024191, -0.433883739117558}, \
{-0.2225209339563146, -0.9749279121818235}, {
          0.6234898018587334, -0.7818314824680299}, {-0.13909697313962913`, \
-0.17374654968223086`}}, VertexLabels -> {None}, 
         VertexShapeFunction -> {"Name"}}]], Typeset`boxes, 
      Typeset`boxes$s2d = GraphicsGroupBox[{{
         Arrowheads[Medium], 
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         Arrowheads[Small], 
         ArrowBox[{{
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$2", Automatic, Center]}, {
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$7", Automatic, Center]}, {
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}, {
            DynamicLocation["VertexID$3", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}, {
            DynamicLocation["VertexID$5", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}, {
            DynamicLocation["VertexID$6", Automatic, Center], 
            DynamicLocation["VertexID$5", Automatic, Center]}, {
            DynamicLocation["VertexID$6", Automatic, Center], 
            DynamicLocation["VertexID$7", Automatic, Center]}, {
            DynamicLocation["VertexID$7", Automatic, Center], 
            DynamicLocation["VertexID$8", Automatic, Center]}, {
            DynamicLocation["VertexID$8", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}}]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["1", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {1., 0.}, BaseStyle -> "Graphics"], 
          "DynamicName", BoxID -> "VertexID$1"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["2", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0.6234898018587336, 0.7818314824680297}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$2"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["3", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {-0.22252093395631434`, 0.9749279121818236}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$3"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["4", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {-0.900968867902419, 0.43388373911755823`}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$4"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["5", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {-0.9009688679024191, -0.433883739117558}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$5"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["6", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {-0.2225209339563146, -0.9749279121818235}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$6"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["7", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0.6234898018587334, -0.7818314824680299}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$7"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["8", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {-0.13909697313962913`, \
-0.17374654968223086`}, BaseStyle -> "Graphics"], "DynamicName", BoxID -> 
          "VertexID$8"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        
        ImageSizeCache->{{-7.105427357601002*^-15, 
         71.80078125}, {-43.99999999999999, 38.39010349154328}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{72.80078125, Automatic}], ",", 
   RowBox[{"VertexShapeFunction", "\[Rule]", "\"\<Name\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"d7a31ba6-3ce4-40f3-8e5c-ca56ca3a88ef"],

Cell[TextData[{
 "Use ",
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "False"}]],ExpressionUUID->
  "332f7c55-943c-4ab8-84c7-b196db2bd296"],
 " to treat the input graph as undirected."
}], "Text",ExpressionUUID->"bbe95fe0-11de-4a1b-98c5-7df2dab0e101"],

Cell[BoxData[
 RowBox[{"IGSmoothen", "[", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4, 5, 6, 7, 
        8}, {{{1, 2}, {2, 3}, {3, 4}, {6, 5}, {5, 4}, {1, 7}, {6, 7}, {7, 
         8}, {8, 4}}, Null}, {EdgeStyle -> {
           Arrowheads[Small]}, FormatType -> TraditionalForm, 
         GraphLayout -> {
          "Dimension" -> 2, "VertexLayout" -> "CircularEmbedding"}, 
         ImageSize -> {90.44921875, Automatic}, PerformanceGoal -> "Quality", 
         VertexCoordinates -> {{1., 0.}, {0.6234898018587336, 
          0.7818314824680297}, {-0.22252093395631434`, 
          0.9749279121818236}, {-0.900968867902419, 
          0.43388373911755823`}, {-0.9009688679024191, -0.433883739117558}, \
{-0.2225209339563146, -0.9749279121818235}, {
          0.6234898018587334, -0.7818314824680299}, {-0.13909697313962913`, \
-0.17374654968223086`}}, VertexLabels -> {None}, 
         VertexShapeFunction -> {"Name"}}]], Typeset`boxes, 
      Typeset`boxes$s2d = GraphicsGroupBox[{{
         Arrowheads[Medium], 
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         Arrowheads[Small], 
         ArrowBox[{{
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$2", Automatic, Center]}, {
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$7", Automatic, Center]}, {
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}, {
            DynamicLocation["VertexID$3", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}, {
            DynamicLocation["VertexID$5", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}, {
            DynamicLocation["VertexID$6", Automatic, Center], 
            DynamicLocation["VertexID$5", Automatic, Center]}, {
            DynamicLocation["VertexID$6", Automatic, Center], 
            DynamicLocation["VertexID$7", Automatic, Center]}, {
            DynamicLocation["VertexID$7", Automatic, Center], 
            DynamicLocation["VertexID$8", Automatic, Center]}, {
            DynamicLocation["VertexID$8", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}}]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["1", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {1., 0.}, BaseStyle -> "Graphics"], 
          "DynamicName", BoxID -> "VertexID$1"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["2", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0.6234898018587336, 0.7818314824680297}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$2"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["3", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {-0.22252093395631434`, 0.9749279121818236}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$3"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["4", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {-0.900968867902419, 0.43388373911755823`}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$4"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["5", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {-0.9009688679024191, -0.433883739117558}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$5"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["6", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {-0.2225209339563146, -0.9749279121818235}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$6"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["7", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0.6234898018587334, -0.7818314824680299}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$7"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["8", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {-0.13909697313962913`, \
-0.17374654968223086`}, BaseStyle -> "Graphics"], "DynamicName", BoxID -> 
          "VertexID$8"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        
        ImageSizeCache->{{-7.105427357601002*^-15, 
         71.80078125}, {-43.99999999999999, 38.39010349154328}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{72.80078125, Automatic}], ",", 
   RowBox[{"DirectedEdges", "\[Rule]", "False"}], ",", 
   RowBox[{"VertexShapeFunction", "\[Rule]", "\"\<Name\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"9838f87f-bf5e-4d45-8d9a-e00e24c447d2"],

Cell["\<\
The result is always a weighted graph. When contracting edges, their weights \
are added up. If the input graph was not weighted, all of its edge weights \
are considered to be 1. Thus, the graph distance of any two vertices in the \
result is always the same as it was in the input graph.\
\>", "Text",ExpressionUUID->"2b2a30ab-76c9-442f-88bf-47ca74fbc64f"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"IGGiantComponent", "@", 
   RowBox[{"RandomGraph", "[", 
    RowBox[{"{", 
     RowBox[{"100", ",", "100"}], "}"}], 
    "]"}]}]}]], \
"Input",ExpressionUUID->"46d2394e-9ca2-4d94-bb30-e051725a3800"],

Cell[BoxData[
 RowBox[{"tm", "=", 
  RowBox[{
  "IGSmoothen", "[", "g", 
   "]"}]}]], "Input",ExpressionUUID->"2b8bec13-03cc-43a4-86dd-c070a2f5f1cf"],

Cell[BoxData[
 RowBox[{"IGEdgeWeightedQ", "[", "tm", 
  "]"}]], "Input",ExpressionUUID->"77bc15d7-fe23-4c6c-a86f-fa21c150ab34"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGDistanceMatrix", "[", 
   RowBox[{"g", ",", 
    RowBox[{"VertexList", "[", "tm", "]"}], ",", 
    RowBox[{"VertexList", "[", "tm", "]"}]}], "]"}], "\[Equal]", 
  RowBox[{
  "IGDistanceMatrix", "[", "tm", 
   "]"}]}]], "Input",ExpressionUUID->"deb12b21-6282-4f9a-a125-9811f727dc41"],

Cell["\<\
The result does not contain any degree-2 vertices, except possibly isolated \
vertices with self-loops.\
\>", "Text",ExpressionUUID->"2b3044f5-2a97-4556-9cde-dadc91957fd6"],

Cell[BoxData[
 RowBox[{"Union", "@", 
  RowBox[{
  "VertexDegree", "[", "tm", 
   "]"}]}]], "Input",ExpressionUUID->"c15e3206-a935-4f61-8612-a8764d09078e"],

Cell["\<\
The vertex coordinates, as well as any other graph properties are discarded.\
\>", "Text",ExpressionUUID->"86bd2673-8161-4913-9194-9be1eb925098"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"IGMeshGraph", "@", 
   RowBox[{"IGLatticeMesh", "[", 
    RowBox[{"\"\<Hexagonal\>\"", ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "3"}], "}"}]}], 
    "]"}]}]}]], \
"Input",ExpressionUUID->"22fbe42f-4f7f-490f-84c7-b69e4fcf3f41"],

Cell[BoxData[
 RowBox[{"IGSmoothen", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"959e64a4-74b2-4229-99af-6738d40c709c"],

Cell["\<\
Vertex coordinates can be transferred to the new graph as follows:\
\>", "Text",ExpressionUUID->"95e73305-b7b2-4485-be5f-b9680f9e5ca9"],

Cell[BoxData[
 RowBox[{"IGSmoothen", "[", 
  RowBox[{"g", ",", "\[IndentingNewLine]", 
   RowBox[{"VertexCoordinates", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"v_", "\[RuleDelayed]", 
      RowBox[{"PropertyValue", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"g", ",", "v"}], "}"}], ",", "VertexCoordinates"}], "]"}]}], 
     "}"}]}]}], 
  "]"}]], "Input",ExpressionUUID->"0707cfa7-fe53-48be-9193-14abfc41181a"],

Cell[TextData[{
 "An alternative and faster method uses ",
 Cell[BoxData[
 "IGVertexMap"],ExpressionUUID->"ec2eea55-a334-44b4-a467-4de7bbea2b62"],
 " and ",
 Cell[BoxData[
 "IGVertexAssociate"],ExpressionUUID->
  "713ec09b-5376-45b6-a75a-91e4ae67f995"],
 ":"
}], "Text",ExpressionUUID->"556c0a0e-63b3-41e2-a4b9-dbde3218117f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGSmoothen", "[", "g", "]"}], "//", 
  RowBox[{"IGVertexMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"IGVertexAssociate", "[", "GraphEmbedding", "]"}], "[", "g", 
     "]"}], ",", 
    RowBox[{"VertexCoordinates", "\[Rule]", "VertexList"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"9c737058-4e6f-46e8-8392-f1031609bec9"],

Cell["\<\
Create a tree in which every non-leaf node has a degree of at least 3.\
\>", "Text",ExpressionUUID->"aad08543-1679-46ef-999a-4bdddef16709"],

Cell[BoxData[
 RowBox[{"IGSmoothen", "[", 
  RowBox[{
   RowBox[{"IGTreeGame", "[", "100", "]"}], ",", 
   RowBox[{"GraphLayout", "\[Rule]", "\"\<RadialEmbedding\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"ffe232ab-01c9-4266-9aea-95190f338e48"],

Cell["\<\
Let us compute the effective resistance of a resistor network by repeated \
smoothing (merger of resistors in series) and simplification (merger of \
resistors in parallel). Resistances are stored as edge weights. A \
zero-resistance input and output terminal is added to prevent the premature \
smoothing of these points.\
\>", "Text",ExpressionUUID->"f6fdedcf-fcb0-4ca6-92ae-479968491bc5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"resistorGrid", "=", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4, 5, 6, 7, 8, 9}, {
        Null, {{1, 9}, {1, 2}, {1, 5}, {2, 3}, {3, 4}, {4, 6}, {4, 7}, {4, 
         8}, {5, 6}, {5, 7}}}, {
        EdgeLabels -> {UndirectedEdge[1, 5] -> Placed[
             Framed[
              Style[
               Row[{"R", " = ", 2}], FontSize -> 8], Background -> 
              GrayLevel[1], ContentPadding -> False], Center, Rotate[#, 
              Mod[3.141592653589793, Pi, (-Pi)/2]]& ], UndirectedEdge[1, 9] -> 
           Placed[
             Framed[
              Style[
               Row[{"R", " = ", 0}], FontSize -> 8], Background -> 
              GrayLevel[1], ContentPadding -> False], Center, Rotate[#, 
              Mod[0., Pi, (-Pi)/2]]& ], UndirectedEdge[4, 7] -> Placed[
             Framed[
              Style[
               Row[{"R", " = ", 2}], FontSize -> 8], Background -> 
              GrayLevel[1], ContentPadding -> False], Center, Rotate[#, 
              Mod[-0.5191461142465229, Pi, (-Pi)/2]]& ], UndirectedEdge[3, 4] -> 
           Placed[
             Framed[
              Style[
               Row[{"R", " = ", 5}], FontSize -> 8], Background -> 
              GrayLevel[1], ContentPadding -> False], Center, Rotate[#, 
              Mod[-2.0344439357957027`, Pi, (-Pi)/2]]& ], 
           UndirectedEdge[5, 6] -> Placed[
             Framed[
              Style[
               Row[{"R", " = ", 2}], FontSize -> 8], Background -> 
              GrayLevel[1], ContentPadding -> False], Center, Rotate[#, 
              Mod[2.62244653934327, Pi, (-Pi)/2]]& ], UndirectedEdge[4, 8] -> 
           Placed[
             Framed[
              Style[
               Row[{"R", " = ", 0}], FontSize -> 8], Background -> 
              GrayLevel[1], ContentPadding -> False], Center, Rotate[#, 
              Mod[3.141592653589793, Pi, (-Pi)/2]]& ], UndirectedEdge[1, 2] -> 
           Placed[
             Framed[
              Style[
               Row[{"R", " = ", 3}], FontSize -> 8], Background -> 
              GrayLevel[1], ContentPadding -> False], Center, Rotate[#, 
              Mod[2.0344439357957027`, Pi, (-Pi)/2]]& ], UndirectedEdge[4, 6] -> 
           Placed[
             Framed[
              Style[
               Row[{"R", " = ", 4}], FontSize -> 8], Background -> 
              GrayLevel[1], ContentPadding -> False], Center, Rotate[#, 
              Mod[0.5191461142465229, Pi, (-Pi)/2]]& ], UndirectedEdge[5, 7] -> 
           Placed[
             Framed[
              Style[
               Row[{"R", " = ", 1}], FontSize -> 8], Background -> 
              GrayLevel[1], ContentPadding -> False], Center, Rotate[#, 
              Mod[-2.62244653934327, Pi, (-Pi)/2]]& ], UndirectedEdge[2, 3] -> 
           Placed[
             Framed[
              Style[
               Row[{"R", " = ", 4}], FontSize -> 8], Background -> 
              GrayLevel[1], ContentPadding -> False], Center, Rotate[#, 
              Mod[3.141592653589793, Pi, (-Pi)/2]]& ]}, 
         EdgeWeight -> {0, 3, 2, 4, 5, 4, 2, 0, 2, 1}, GraphStyle -> 
         "BasicBlack", PlotRangePadding -> 0.15, 
         VertexCoordinates -> {{1.2, 3.}, {1.8, 1.8}, {3.6, 1.8}, {4.2, 3.}, {
          2.1, 3.}, {3.15, 2.4}, {3.15, 3.6}, {5.1000000000000005`, 3.}, {0.3,
           3.}}, VertexSize -> {{"Scaled", 0.015}}}]], Typeset`boxes, 
      Typeset`boxes$s2d = GraphicsGroupBox[{{
         Directive[
          GrayLevel[0], 
          Opacity[0.7]], {
          TagBox[
           LineBox[{
             DynamicLocation["VertexID$1", Automatic, Center], 
             DynamicLocation["VertexID$2", Automatic, Center]}], 
           "DynamicName", BoxID -> "EdgeLabelID$1"], 
          InsetBox[
           FormBox[
            RotationBox[
             FrameBox[
              StyleBox[
               TemplateBox[{"\"R\"", "\" = \"", "3"}, "RowDefault"], FontSize -> 
               8, StripOnInput -> False], Background -> GrayLevel[1], 
              ContentPadding -> False, StripOnInput -> False], 
             BoxRotation -> -1.1071487177940904`], TraditionalForm], 
           DynamicLocation["EdgeLabelID$1", Center], 
           ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
          TagBox[
           LineBox[{
             DynamicLocation["VertexID$1", Automatic, Center], 
             DynamicLocation["VertexID$5", Automatic, Center]}], 
           "DynamicName", BoxID -> "EdgeLabelID$2"], 
          InsetBox[
           FormBox[
            RotationBox[
             FrameBox[
              StyleBox[
               TemplateBox[{"\"R\"", "\" = \"", "2"}, "RowDefault"], FontSize -> 
               8, StripOnInput -> False], Background -> GrayLevel[1], 
              ContentPadding -> False, StripOnInput -> False], BoxRotation -> 
             0.], TraditionalForm], 
           DynamicLocation["EdgeLabelID$2", Center], 
           ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
          TagBox[
           LineBox[{
             DynamicLocation["VertexID$1", Automatic, Center], 
             DynamicLocation["VertexID$9", Automatic, Center]}], 
           "DynamicName", BoxID -> "EdgeLabelID$3"], 
          InsetBox[
           FormBox[
            RotationBox[
             FrameBox[
              StyleBox[
               TemplateBox[{"\"R\"", "\" = \"", "0"}, "RowDefault"], FontSize -> 
               8, StripOnInput -> False], Background -> GrayLevel[1], 
              ContentPadding -> False, StripOnInput -> False], BoxRotation -> 
             0.], TraditionalForm], 
           DynamicLocation["EdgeLabelID$3", Center], 
           ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
          TagBox[
           LineBox[{
             DynamicLocation["VertexID$2", Automatic, Center], 
             DynamicLocation["VertexID$3", Automatic, Center]}], 
           "DynamicName", BoxID -> "EdgeLabelID$4"], 
          InsetBox[
           FormBox[
            RotationBox[
             FrameBox[
              StyleBox[
               TemplateBox[{"\"R\"", "\" = \"", "4"}, "RowDefault"], FontSize -> 
               8, StripOnInput -> False], Background -> GrayLevel[1], 
              ContentPadding -> False, StripOnInput -> False], BoxRotation -> 
             0.], TraditionalForm], 
           DynamicLocation["EdgeLabelID$4", Center], 
           ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
          TagBox[
           LineBox[{
             DynamicLocation["VertexID$3", Automatic, Center], 
             DynamicLocation["VertexID$4", Automatic, Center]}], 
           "DynamicName", BoxID -> "EdgeLabelID$5"], 
          InsetBox[
           FormBox[
            RotationBox[
             FrameBox[
              StyleBox[
               TemplateBox[{"\"R\"", "\" = \"", "5"}, "RowDefault"], FontSize -> 
               8, StripOnInput -> False], Background -> GrayLevel[1], 
              ContentPadding -> False, StripOnInput -> False], BoxRotation -> 
             1.1071487177940904`], TraditionalForm], 
           DynamicLocation["EdgeLabelID$5", Center], 
           ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
          TagBox[
           LineBox[{
             DynamicLocation["VertexID$4", Automatic, Center], 
             DynamicLocation["VertexID$6", Automatic, Center]}], 
           "DynamicName", BoxID -> "EdgeLabelID$6"], 
          InsetBox[
           FormBox[
            RotationBox[
             FrameBox[
              StyleBox[
               TemplateBox[{"\"R\"", "\" = \"", "4"}, "RowDefault"], FontSize -> 
               8, StripOnInput -> False], Background -> GrayLevel[1], 
              ContentPadding -> False, StripOnInput -> False], BoxRotation -> 
             0.5191461142465229], TraditionalForm], 
           DynamicLocation["EdgeLabelID$6", Center], 
           ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
          TagBox[
           LineBox[{
             DynamicLocation["VertexID$4", Automatic, Center], 
             DynamicLocation["VertexID$7", Automatic, Center]}], 
           "DynamicName", BoxID -> "EdgeLabelID$7"], 
          InsetBox[
           FormBox[
            RotationBox[
             FrameBox[
              StyleBox[
               TemplateBox[{"\"R\"", "\" = \"", "2"}, "RowDefault"], FontSize -> 
               8, StripOnInput -> False], Background -> GrayLevel[1], 
              ContentPadding -> False, StripOnInput -> False], 
             BoxRotation -> -0.5191461142465229], TraditionalForm], 
           DynamicLocation["EdgeLabelID$7", Center], 
           ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
          TagBox[
           LineBox[{
             DynamicLocation["VertexID$4", Automatic, Center], 
             DynamicLocation["VertexID$8", Automatic, Center]}], 
           "DynamicName", BoxID -> "EdgeLabelID$8"], 
          InsetBox[
           FormBox[
            RotationBox[
             FrameBox[
              StyleBox[
               TemplateBox[{"\"R\"", "\" = \"", "0"}, "RowDefault"], FontSize -> 
               8, StripOnInput -> False], Background -> GrayLevel[1], 
              ContentPadding -> False, StripOnInput -> False], BoxRotation -> 
             0.], TraditionalForm], 
           DynamicLocation["EdgeLabelID$8", Center], 
           ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
          TagBox[
           LineBox[{
             DynamicLocation["VertexID$5", Automatic, Center], 
             DynamicLocation["VertexID$6", Automatic, Center]}], 
           "DynamicName", BoxID -> "EdgeLabelID$9"], 
          InsetBox[
           FormBox[
            RotationBox[
             FrameBox[
              StyleBox[
               TemplateBox[{"\"R\"", "\" = \"", "2"}, "RowDefault"], FontSize -> 
               8, StripOnInput -> False], Background -> GrayLevel[1], 
              ContentPadding -> False, StripOnInput -> False], 
             BoxRotation -> -0.519146114246523], TraditionalForm], 
           DynamicLocation["EdgeLabelID$9", Center], 
           ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
          TagBox[
           LineBox[{
             DynamicLocation["VertexID$5", Automatic, Center], 
             DynamicLocation["VertexID$7", Automatic, Center]}], 
           "DynamicName", BoxID -> "EdgeLabelID$10"], 
          InsetBox[
           FormBox[
            RotationBox[
             FrameBox[
              StyleBox[
               TemplateBox[{"\"R\"", "\" = \"", "1"}, "RowDefault"], FontSize -> 
               8, StripOnInput -> False], Background -> GrayLevel[1], 
              ContentPadding -> False, StripOnInput -> False], BoxRotation -> 
             0.519146114246523], TraditionalForm], 
           DynamicLocation["EdgeLabelID$10", Center], 
           ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}}, {
         GrayLevel[0], 
         TagBox[
          DiskBox[{1.2, 3.}, 0.038448016853928894`], "DynamicName", BoxID -> 
          "VertexID$1"], 
         TagBox[
          DiskBox[{1.8, 1.8}, 0.038448016853928894`], "DynamicName", BoxID -> 
          "VertexID$2"], 
         TagBox[
          DiskBox[{3.6, 1.8}, 0.038448016853928894`], "DynamicName", BoxID -> 
          "VertexID$3"], 
         TagBox[
          DiskBox[{4.2, 3.}, 0.038448016853928894`], "DynamicName", BoxID -> 
          "VertexID$4"], 
         TagBox[
          DiskBox[{2.1, 3.}, 0.038448016853928894`], "DynamicName", BoxID -> 
          "VertexID$5"], 
         TagBox[
          DiskBox[{3.15, 2.4}, 0.038448016853928894`], "DynamicName", BoxID -> 
          "VertexID$6"], 
         TagBox[
          DiskBox[{3.15, 3.6}, 0.038448016853928894`], "DynamicName", BoxID -> 
          "VertexID$7"], 
         TagBox[
          DiskBox[{5.1000000000000005`, 3.}, 0.038448016853928894`], 
          "DynamicName", BoxID -> "VertexID$8"], 
         TagBox[
          DiskBox[{0.3, 3.}, 0.038448016853928894`], "DynamicName", BoxID -> 
          "VertexID$9"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        
        ImageSizeCache->{{8.515798609067184, 
         334.19513889093275`}, {-66.4842013909328, 66.54963362661194}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{343.7109375, Automatic},
    PlotRangePadding->0.15]}], 
  ";"}]], "Input",ExpressionUUID->"07fdac49-7330-493d-93be-16167d277788"],

Cell["Merge resistors in series ...", \
"Text",ExpressionUUID->"94c9ed42-bedb-4a2a-9152-9354fbc7e5e0"],

Cell[BoxData[
 RowBox[{"reducedGrid", "=", 
  RowBox[{
  "IGSmoothen", "[", "resistorGrid", 
   "]"}]}]], "Input",ExpressionUUID->"29f1c4d6-04c0-4d86-80ce-5cf56111f15d"],

Cell["\<\
... then merge resistors in parallel and check the resulting edge weights.\
\>", "Text",ExpressionUUID->"8b8ffe73-8dd8-4c2a-883c-bdfd8675d4e6"],

Cell[BoxData[
 RowBox[{"reducedGrid", "=", 
  RowBox[{"IGWeightedSimpleGraph", "[", 
   RowBox[{"reducedGrid", ",", " ", 
    RowBox[{
     RowBox[{"1", "/", 
      RowBox[{"Total", "[", 
       RowBox[{"1", "/", 
        RowBox[{"{", "##", "}"}]}], "]"}]}], "&"}], ",", 
    RowBox[{"EdgeLabels", "\[Rule]", "\"\<EdgeWeight\>\""}]}], 
   "]"}]}]], "Input",ExpressionUUID->"9afe5c7f-f362-4b95-98b9-fadfaf1ae164"],

Cell["Repeat until a single resistor remains.", \
"Text",ExpressionUUID->"e877d52e-54b8-4d62-a03f-ea23edcceca9"],

Cell[BoxData[
 RowBox[{"reducedGrid", "=", 
  RowBox[{
  "IGSmoothen", "[", "reducedGrid", 
   "]"}]}]], "Input",ExpressionUUID->"63668af7-cbeb-469b-b597-ccd09462fe2d"],

Cell[BoxData[
 RowBox[{"reducedGrid", "=", 
  RowBox[{"IGWeightedSimpleGraph", "[", 
   RowBox[{"reducedGrid", ",", " ", 
    RowBox[{
     RowBox[{"1", "/", 
      RowBox[{"Total", "[", 
       RowBox[{"1", "/", 
        RowBox[{"{", "##", "}"}]}], "]"}]}], "&"}], ",", 
    RowBox[{"EdgeLabels", "\[Rule]", "\"\<EdgeWeight\>\""}]}], 
   "]"}]}]], "Input",ExpressionUUID->"0b02f393-32ea-40a8-ba98-9fd0136acf62"],

Cell[BoxData[
 RowBox[{"reducedGrid", "=", 
  RowBox[{"IGSmoothen", "[", 
   RowBox[{"reducedGrid", ",", 
    RowBox[{"EdgeLabels", "\[Rule]", "\"\<EdgeWeight\>\""}]}], 
   "]"}]}]], "Input",ExpressionUUID->"f0e11cf0-051b-4bd6-9250-bf3d9f9fd09a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGEdgeProp", "[", "EdgeWeight", "]"}], "[", "reducedGrid", 
  "]"}]], "Input",ExpressionUUID->"51dbf519-7fbf-4529-b621-53b5b7d7d59f"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Structural properties", \
"Section",ExpressionUUID->"af3e25be-f2de-4698-8207-9cc2dc25a9ef"],

Cell[CellGroupData[{

Cell["Centrality measures", \
"Subsection",ExpressionUUID->"0f4a0259-3293-4e88-bca2-429f98fa938a"],

Cell["\<\
Centralities are various measures that quantify the \
\[OpenCurlyDoubleQuote]importance\[CloseCurlyDoubleQuote] of vertices or \
edges in graphs.\
\>", "Text",ExpressionUUID->"84f2f5ce-931d-4903-84d8-b0c6411689d3"],

Cell[CellGroupData[{

Cell["Betweenness", \
"Subsubsection",ExpressionUUID->"bfa32272-83a6-4792-83af-238f3beb748d"],

Cell[BoxData[
 RowBox[{"?", 
  "IGBetweenness"}]], \
"Input",ExpressionUUID->"1feff9eb-d769-4394-b36f-375db595587b"],

Cell[BoxData[
 RowBox[{"?", 
  "IGBetweennessCutoff"}]], \
"Input",ExpressionUUID->"3c3e6a9c-87cf-43d9-9b35-13ee7356068d"],

Cell[BoxData[
 RowBox[{"?", 
  "IGEdgeBetweenness"}]], \
"Input",ExpressionUUID->"689adbfc-083a-47f3-a928-7829ccf4b9d3"],

Cell[BoxData[
 RowBox[{"?", 
  "IGEdgeBetweennessCutoff"}]], \
"Input",ExpressionUUID->"450b29cf-4e30-4f30-aeec-163e719ea128"],

Cell[TextData[{
 "The betweenness of a vertex or edge is, roughly speaking, the number of \
shortest paths passing through it. More formally, the betweenness of vertex \
",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "e67b8ee7-9f9b-4b20-8c49-89f34f1173c0"],
 " is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["b", "i"], "=", 
    RowBox[{
     UnderscriptBox["\[Sum]", 
      RowBox[{"i", "\[NotEqual]", "s", "\[NotEqual]", "t"}]], 
     FractionBox[
      SubsuperscriptBox["g", 
       RowBox[{"s", "\[InvisibleComma]", "t"}], 
       RowBox[{"(", "i", ")"}]], 
      SubscriptBox["g", 
       RowBox[{"s", "\[InvisibleComma]", "t"}]]]}]}], TraditionalForm]],
  ExpressionUUID->"0cf7fb31-8496-44ed-8012-6b1a7295d3ba"],
 ", where ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["g", 
    RowBox[{"s", "\[InvisibleComma]", "t"}]], TraditionalForm]],
  ExpressionUUID->"0436d80b-fd18-4ff5-808b-55a7939b30be"],
 " is the total number of shortest paths (geodesics) between vertices ",
 Cell[BoxData[
  FormBox["s", TraditionalForm]],ExpressionUUID->
  "99d8c460-025b-440d-b5b3-1eb1bc2c7d17"],
 " and ",
 Cell[BoxData[
  FormBox["t", TraditionalForm]],ExpressionUUID->
  "c0a99c39-75b4-4636-afc7-53baa4b668bb"],
 ", and ",
 Cell[BoxData[
  FormBox[
   SubsuperscriptBox["g", 
    RowBox[{"s", "\[InvisibleComma]", "t"}], 
    RowBox[{"(", "i", ")"}]], TraditionalForm]],ExpressionUUID->
  "d21203d3-02eb-4238-8b92-7f44e991aa35"],
 " is the number of shortest paths between vertices ",
 Cell[BoxData[
  FormBox["s", TraditionalForm]],ExpressionUUID->
  "cc9f366b-ec56-4e40-a216-0f7611c824ff"],
 " and ",
 Cell[BoxData[
  FormBox["t", TraditionalForm]],ExpressionUUID->
  "c97c4ee8-6ea3-4fe1-ad69-f918ec34ff3d"],
 " that pass through ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "9b2a7d2f-06ce-4300-bcd7-ad977197081d"],
 "."
}], "Text",ExpressionUUID->"94496d14-0c21-464f-b430-adbf0516352e"],

Cell["\<\
Weighted graphs and multigraphs are supported by all betweenness functions in \
IGraph/M.\
\>", "Text",ExpressionUUID->"006a0b44-6aca-4f39-a078-cf950f46812b"],

Cell[TextData[{
 "Note that as of Mathematica 12.2, the built-in ",
 Cell[BoxData[
 "BetweennessCentrality"],ExpressionUUID->
  "c5a8c8a2-f85e-48b4-8e1b-f3eaa1a7117a"],
 " function ignores weighted and multi-edges, which causes it to yield \
different results from ",
 Cell[BoxData[
 "IGBetweenness"],ExpressionUUID->"9922334c-ef0a-47fb-97cb-b3a7d500194e"],
 "."
}], "Text",ExpressionUUID->"c4471b39-700e-42da-ad1d-bab45bd64ed3"],

Cell["Available options:", \
"Text",ExpressionUUID->"e62911ad-3469-4c7b-bd6c-9baaaadf2ee2"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"Normalized", "\[Rule]", "True"}]],ExpressionUUID->
  "6005bee3-881e-40e9-b37f-33127d1c17e4"],
 " will compute the normalized betweenness by dividing the result by the \
number of (ordered or unordered) vertex pairs used in the shortest path \
calculation. Thus the normalization factor is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"V", "-", "1"}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{"V", "-", "2"}], ")"}]}], TraditionalForm]],ExpressionUUID->
  "18571ed6-d47e-4b45-bb69-5cc723a65afa"],
 " for directed graphs and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox["1", "2"], " ", 
    RowBox[{"(", 
     RowBox[{"V", "-", "1"}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{"V", "-", "2"}], ")"}]}], TraditionalForm]],ExpressionUUID->
  "e0640446-ded6-4267-a025-01cf13e6890d"],
 " for undirected graphs. The normalized value lies between 0 and 1."
}], "Item",ExpressionUUID->"243537e8-8708-4ab6-b610-faaf3ed537aa"],

Cell["\<\
Visualize the vertex and edge betweenness of a weighted geometrical graph, \
where weights represent Euclidean distances.\
\>", "Text",ExpressionUUID->"44b23002-042f-4bd7-b075-e8fecf80d8c1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pts", "=", 
   RowBox[{"RandomPoint", "[", 
    RowBox[{
     RowBox[{"Disk", "[", "]"}], ",", "100"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"IGMeshGraph", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"DelaunayMesh", "[", "pts", "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"EdgeStyle", "\[Rule]", "Thick"}], ",", 
    RowBox[{"VertexStyle", "\[Rule]", 
     RowBox[{"EdgeForm", "[", "None", "]"}]}]}], "\[IndentingNewLine]", "]"}],
   "//", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"IGVertexMap", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"ColorData", "[", "\"\<SolarColors\>\"", "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"VertexStyle", "\[Rule]", 
      RowBox[{"Rescale", "@*", "IGBetweenness"}]}]}], "\[IndentingNewLine]", 
    "]"}], "/*", "\[IndentingNewLine]", 
   RowBox[{"IGEdgeMap", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"ColorData", "[", "\"\<SolarColors\>\"", "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"EdgeStyle", "\[Rule]", 
      RowBox[{"Rescale", "@*", "IGEdgeBetweenness"}]}]}], 
    "\[IndentingNewLine]", 
    "]"}]}]}]}], \
"Input",ExpressionUUID->"89940651-a6d8-4f85-a8d1-e891c04860c4"],

Cell["Compute the betweenness of a subset of vertices.", \
"Text",ExpressionUUID->"94e1f613-63aa-4d2f-bff9-c3006edb4a77"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<NetworkGraph\>\"", ",", "\"\<DolphinSocialNetwork\>\""}], 
     "}"}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"114a6147-8a0f-4273-8c7f-70abd733cbf2"],

Cell[BoxData[
 RowBox[{"Take", "[", 
  RowBox[{
   RowBox[{"VertexList", "[", "g", "]"}], ",", "5"}], 
  "]"}]], "Input",ExpressionUUID->"f98fa894-ff68-4cdf-b000-7a5d69f68aef"],

Cell[BoxData[
 RowBox[{"IGBetweenness", "[", 
  RowBox[{"g", ",", "%"}], 
  "]"}]], "Input",ExpressionUUID->"3d601f0c-905b-4672-be0e-14df311089ac"],

Cell["\<\
Visualize the betweenness of a periodic grid with slightly randomized edge \
weights.\
\>", "Text",ExpressionUUID->"edf960be-bfc5-4b64-b48f-079a4009e505"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"n", "=", "40"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"IGSquareLattice", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n", ",", "n"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"\"\<Periodic\>\"", "\[Rule]", "True"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"VertexCoordinates", "\[Rule]", 
     RowBox[{"Tuples", "[", 
      RowBox[{
       RowBox[{"Range", "[", "n", "]"}], ",", 
       RowBox[{"{", "2", "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"EdgeWeight", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"_", "\[RuleDelayed]", 
       RowBox[{"RandomReal", "[", 
        RowBox[{"{", 
         RowBox[{".99", ",", "1.01"}], "}"}], "]"}]}], "}"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"GraphStyle", "\[Rule]", "\"\<BasicBlack\>\""}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"EdgeShapeFunction", "\[Rule]", "None"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"VertexSize", "\[Rule]", "1"}]}], "\[IndentingNewLine]", "]"}], "//", 
  RowBox[{"IGVertexMap", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ColorData", "[", "\"\<BlueGreenYellow\>\"", "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"VertexStyle", "\[Rule]", 
     RowBox[{"Rescale", "@*", "IGBetweenness"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",ExpressionUUID->"bb707168-8739-4e3b-8ff3-bf243fd0ac5c"],

Cell[CellGroupData[{

Cell["Possible issues", \
"Subsubsubsection",ExpressionUUID->"739a1af5-888a-442d-ade4-80d293a31373"],

Cell["\<\
Betweenness computation involves comparing the lengths of paths, and deciding \
which specific path is the shortest, and which paths have equal lengths. When \
non-integer edge weights are used, the path length computation is subject to \
roundoff errors, which may cause the path length comparison to fail. igraph \
mitigates this by comparing the lengths using tolerances, however, there is \
still a small risk that roundoff errors may affect the result. To avoid this \
potential problem entirely, use integer weights. For example, if the weights \
are rational, multiply them by the least common multiple of their \
denominators.\
\>", "Text",ExpressionUUID->"405cf1b3-0ba7-4d6e-86ce-5e4d96351d44"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Closeness", \
"Subsubsection",ExpressionUUID->"be1f7f11-1b68-4bb3-934f-3f2072761c88"],

Cell[BoxData[
 RowBox[{"?", 
  "IGCloseness"}]], \
"Input",ExpressionUUID->"918045c5-505e-4800-883a-2dd2f77c4d44"],

Cell[BoxData[
 RowBox[{"?", 
  "IGClosenessCutoff"}]], \
"Input",ExpressionUUID->"67f144a3-d2ef-4989-a1ac-7357c576152f"],

Cell[BoxData[
 RowBox[{"?", 
  "IGNeighborhoodCloseness"}]], \
"Input",ExpressionUUID->"31e8e7f8-da14-4e5f-8b00-9de2b926d64f"],

Cell["\<\
The normalized closeness centrality of a vertex is the inverse average \
shortest path length to other vertices.\
\>", "Text",ExpressionUUID->"61a4163f-7dd5-4a80-8725-00bc4cf4aac3"],

Cell["Weighted graphs are supported.", \
"Text",ExpressionUUID->"65d67dfd-90ab-4719-baf0-10e31491a24c"],

Cell["Available options:", \
"Text",ExpressionUUID->"cfd348a8-60b9-4da0-8f51-d1100fcd7e3e"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"Normalized", "\[Rule]", "False"}]],ExpressionUUID->
  "e3ece11a-9b94-4159-ad1d-4986b461aef7"],
 " will compute the non-normalized closeness, i.e. the inverse of the sum of \
shortest path lengths to all other vertices."
}], "Item",ExpressionUUID->"a65bd670-ca50-4684-8556-f9588330dc51"],

Cell[TextData[{
 "There is no standard definition of closeness centrality for disconnected \
graphs. When the graph is disconnected, IGraph/M will only consider the \
distances to reachable vertices. In the undirected case, this effectively \
computes the closeness separately for each connected component. Use ",
 Cell[BoxData[
 "IGNeighborhoodCloseness"],ExpressionUUID->
  "43abb244-ad53-4d34-a435-39cef134642a"],
 " to obtain both the closeness values, as well as how many vertices were \
reachable from each vertex. This information allows for computing various \
generalizations of closeness centrality for disconnected graphs."
}], "Text",ExpressionUUID->"aac3465f-1aaf-40fa-930c-760f00ecd079"],

Cell["\<\
Visualize the closeness of nodes in a weighted geometrical graph where \
weights correspond to Euclidean distances.\
\>", "Text",ExpressionUUID->"b23800aa-61aa-492f-a162-bd54870fc85f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pts", "=", 
   RowBox[{"RandomPoint", "[", 
    RowBox[{
     RowBox[{"Polygon", "@", 
      RowBox[{"CirclePoints", "[", "3", "]"}]}], ",", "75"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"IGVertexMap", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"ColorData", "[", "\"\<Rainbow\>\"", "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"VertexStyle", "\[Rule]", 
    RowBox[{"Rescale", "@*", "IGCloseness"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"IGMeshGraph", "[", 
    RowBox[{
     RowBox[{"DelaunayMesh", "[", "pts", "]"}], ",", 
     RowBox[{"GraphStyle", "\[Rule]", "\"\<BasicBlack\>\""}]}], "]"}]}], 
  "\[IndentingNewLine]", 
  "]"}]}], "Input",ExpressionUUID->"61707bb2-8ff0-40bb-9a82-03912b41b6ce"],

Cell[TextData[{
 "For isolated vertices, ",
 Cell[BoxData[
 "Indeterminate"],ExpressionUUID->"54ac1072-5568-499a-986e-774fc1e32396"],
 " is returned."
}], "Text",ExpressionUUID->"71497272-b0c1-4e64-a1e2-593c5a5b44a1"],

Cell[BoxData[
 RowBox[{"IGCloseness", "@", 
  RowBox[{
  "IGShorthand", "[", "\"\<1,2-3\>\"", 
   "]"}]}]], "Input",ExpressionUUID->"09fab602-5cc1-47f9-97c3-bde923552c88"]
}, Closed]],

Cell[CellGroupData[{

Cell["Harmonic centrality", \
"Subsubsection",ExpressionUUID->"9e979bd2-04a7-445b-ac49-22840a1f4b57"],

Cell[BoxData[
 RowBox[{"?", 
  "IGHarmonicCentrality"}]], \
"Input",ExpressionUUID->"b2eee112-29df-48af-a41c-d5f93fb220af"],

Cell[BoxData[
 RowBox[{"?", 
  "IGHarmonicCentralityCutoff"}]], \
"Input",ExpressionUUID->"cef0ff98-c7fa-4888-9a99-acc433b46781"],

Cell["\<\
The harmonic centrality of a vertex is the average inverse shortest path \
length to all other vertices. The inverse shortest path length to unreachable \
vertices is considered to be zero.\
\>", "Text",ExpressionUUID->"1cb26a3e-3e27-420f-9032-56f5ac34249b"],

Cell["Available options:", \
"Text",ExpressionUUID->"f744aa49-3233-40ac-b55b-3bd1d0fb8abc"],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"Normalized", "\[Rule]", "False"}]],ExpressionUUID->
  "e7973c38-c3a7-4ceb-89e5-534e26e4d25b"],
 " computes the non-normalized harmonic centrality, i.e. the sum of inverse \
shortest path length to all other vertices."
}], "Item",ExpressionUUID->"599f51b2-a5f3-46db-bddf-c6325d225b68"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"30", ",", "40"}], "}"}], ",", 
    RowBox[{"VertexSize", "\[Rule]", "Large"}]}], "]"}], "//", 
  RowBox[{"IGVertexMap", "[", 
   RowBox[{
    RowBox[{"ColorData", "[", "\"\<Rainbow\>\"", "]"}], ",", 
    RowBox[{"VertexStyle", "\[Rule]", 
     RowBox[{"IGHarmonicCentrality", "/*", "Rescale"}]}]}], 
   "]"}]}]], "Input",ExpressionUUID->"e0e2c8b2-0932-4f19-9244-5f94c37285c4"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["PageRank", \
"Subsubsection",ExpressionUUID->"6381cff6-c54e-4a27-926b-13a9be4fa880"],

Cell[BoxData[
 RowBox[{"?", 
  "IGPageRank"}]], \
"Input",ExpressionUUID->"51d5db20-5921-4871-a5f0-5712261777ba"],

Cell[BoxData[
 RowBox[{"?", 
  "IGPersonalizedPageRank"}]], \
"Input",ExpressionUUID->"afd66a71-c881-4986-94f2-db3525c13a5a"],

Cell[TextData[{
 "The PageRank centrality of a vertex is the fraction of time a random walker \
would spend on that vertex. The walker jumps from vertex to vertex randomly, \
following outward edges with probabilities proportional to their weights. \
Additionally, after each step, with a probability ",
 Cell[BoxData[
  FormBox[
   RowBox[{"1", "-", "d"}], TraditionalForm]],ExpressionUUID->
  "bcb37d5d-7bd0-4e7f-b0ef-513db1f550ac"],
 " the walk is restarted from a random vertex. ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],ExpressionUUID->
  "c49cda1f-ae05-4776-9f64-db57008c3e64"],
 " is called the damping factor. If the walker is stuck in a sink vertex \
(i.e. a vertex with no outgoing edges), the walk is also restarted."
}], "Text",ExpressionUUID->"fa06e721-a856-4439-9fdf-8fcbee8c079f"],

Cell[TextData[{
 "In the standard version of PageRank, when the walk is restarted, the \
starting vertex is chosen uniformly. In the personalized version, it is \
chosen with probabilities proportional to the values in the ",
 Cell[BoxData["reset"],ExpressionUUID->"5b1fa8ee-4640-4529-8bc6-a980c6040c79"],
 " parameter."
}], "Text",ExpressionUUID->"93137aa7-b5e0-4b15-a2f9-0a078cdc43c8"],

Cell["\<\
Weighted graphs and multigraphs are supported, and self-loops are taken into \
consideration.\
\>", "Text",ExpressionUUID->"0f2ff807-300b-4204-977a-1584131f57db"],

Cell[TextData[{
 "Note that as of Mathematica 12.2, the built-in ",
 Cell[BoxData[
 "PageRankCentrality"],ExpressionUUID->"8a57955e-c9ab-4cca-a188-018bef64e5f5"],
 " function ignores self-loops."
}], "Text",ExpressionUUID->"21fce639-0166-4db9-832c-025a600994ed"],

Cell["The default damping factor is 0.85.", \
"Text",ExpressionUUID->"125cb2e1-1311-4c1e-a143-1510c03d237b"],

Cell[TextData[{
 "The following ",
 Cell[BoxData[
 "Method"],ExpressionUUID->"b8f13b66-21cf-4ef2-8c04-5fba3c5cc310"],
 " options are available:"
}], "Text",ExpressionUUID->"3ae2acca-0567-48f8-a234-7f83bafc8fd6"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<Arnoldi\>\""],ExpressionUUID->"eccae3e3-c4fc-452f-8db0-b2b8b88980df"],
 " uses ARPACK, and solves PageRank as an eigenvalue problem."
}], "Item",ExpressionUUID->"448699d5-2f9b-4869-9aa9-0e8d13665cc9"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<PRPACK\>\""],ExpressionUUID->"e34bb625-4bb1-4312-a86b-bfc24662bb47"],
 " uses ",
 ButtonBox["PRPACK",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/DavidKurokawa/prpack/"], None},
  ButtonNote->"https://github.com/DavidKurokawa/prpack/"],
 " and uses the algebraic method. It is the default method, and usually much \
faster than ",
 Cell[BoxData[
 "\"\<Arnoldi\>\""],ExpressionUUID->"07834784-2b0d-4181-a676-b6b6f83f71ed"],
 "."
}], "Item",ExpressionUUID->"7bd6f5fe-f0b6-4904-b20e-6056889f6ae8"],

Cell["\<\
Plot the logarithmic histogram of PageRank scores of the network of webpage \
in the nd.edu domain.\
\>", "Text",ExpressionUUID->"d77d3ce7-df8b-40c7-869f-06db2f4806ce"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ndWeb", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<NetworkGraph\>\"", ",", "\"\<WorldWideWeb\>\""}], "}"}], 
    "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"e581ad0d-b4f6-402d-a05e-c04d1eb55f30"],

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{
   RowBox[{"IGPageRank", "[", "ndWeb", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"\"\<Log\>\"", ",", "Automatic"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\"\<Log\>\"", ",", "\"\<PDF\>\""}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Frame", "\[Rule]", "True"}], ",", 
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<PageRank\>\"", ",", "\"\<PDF\>\""}], "}"}]}]}], 
  "]"}]], "Input",ExpressionUUID->"907d4b75-cedf-4c7a-9ff1-d2828fa35b83"],

Cell["\<\
The personalization weights may be given as a vector of the same length as \
the vertex list \[Ellipsis]\
\>", "Text",ExpressionUUID->"ae1282ca-8ade-4f41-a08e-9f46fb47f320"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"RandomGraph", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"10", ",", "20"}], "}"}], ",", 
     RowBox[{"DirectedEdges", "\[Rule]", "True"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{"IGPersonalizedPageRank", "[", 
  RowBox[{"g", ",", 
   RowBox[{"RandomReal", "[", 
    RowBox[{"1", ",", 
     RowBox[{"VertexCount", "[", "g", "]"}]}], "]"}]}], 
  "]"}]}], "Input",ExpressionUUID->"3c51406b-47e4-4c8a-911d-1e003cdfb1eb"],

Cell["\<\
\[Ellipsis] or as an association from vertex names to weights, in which case \
the weight of non-included vertices is taken to be zero.\
\>", "Text",ExpressionUUID->"7792cfff-3d34-40b3-b5ce-9bdf013fd0d0"],

Cell[BoxData[
 RowBox[{"IGPersonalizedPageRank", "[", 
  RowBox[{"g", ",", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "1.5"}], ",", 
     RowBox[{"3", "\[Rule]", "0.5"}]}], "|>"}]}], 
  "]"}]], "Input",ExpressionUUID->"991cdf9b-246d-41b8-b2aa-3ec0126b28c5"],

Cell["\<\
Personalize PageRank by always restarting the walk from one of two vertices \
(29 or 74) on a grid graph:\
\>", "Text",ExpressionUUID->"c5cf4345-b5b0-4351-bc9d-b68c9a248d78"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"IGSquareLattice", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"10", ",", "10"}], "}"}], ",", 
     RowBox[{"VertexSize", "\[Rule]", "Large"}]}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"e5bfe76a-004b-4683-8716-7dfbcbb8af7e"],

Cell[BoxData[
 RowBox[{"g", "//", 
  RowBox[{"IGVertexMap", "[", 
   RowBox[{
    RowBox[{"ColorData", "[", "\"\<Rainbow\>\"", "]"}], ",", 
    RowBox[{"VertexStyle", "\[Rule]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"IGPersonalizedPageRank", "[", 
         RowBox[{"#", ",", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"29", "\[Rule]", "1"}], ",", 
            RowBox[{"74", "\[Rule]", "1"}]}], "|>"}], ",", "0.99"}], "]"}], 
        "&"}], "/*", "Rescale"}], ")"}]}]}], 
   "]"}]}]], "Input",ExpressionUUID->"f2799d41-787e-4bb7-a005-692615db5e89"]
}, Closed]],

Cell[CellGroupData[{

Cell["LinkRank", \
"Subsubsection",ExpressionUUID->"52191dec-0e60-4637-891d-d05fd8692231"],

Cell[BoxData[
 RowBox[{"?", 
  "IGLinkRank"}]], \
"Input",ExpressionUUID->"977b4de3-3864-4390-9118-f563fbb4110c"],

Cell[BoxData[
 RowBox[{"?", 
  "IGPersonalizedLinkRank"}]], \
"Input",ExpressionUUID->"3c9dd87c-fff7-4bc1-a14d-ba2d2d16687b"],

Cell["\<\
LinkRank is the equivalent of PageRank for edges. The LinkRank of an edge is \
the relative frequency of traversing that edge by a random walker. For a \
detailed description of the random walk process, see the PageRank section.\
\>", "Text",ExpressionUUID->"ac45baaa-e451-4cd8-a598-0dee5ec2d3c8"],

Cell["\<\
The LinkRank of edges can be computed from the PageRank by simply dividing \
the PageRank of each vertex between its outgoing edges, proportionally with \
their edge weights. The LinkRank scores of the out-edges of a vertex add up \
to the PageRank of that vertex. The LinkRank scores of all edges in the graph \
add up to 1.\
\>", "Text",ExpressionUUID->"c9a21cf2-04c1-44c1-b33a-c0dad9f180c1"],

Cell["\<\
Weighted graphs and multigraphs are supported, and self-loops are taken into \
consideration.\
\>", "Text",ExpressionUUID->"4d4c8cec-a0b6-42e9-8758-e09af253d981"],

Cell[TextData[{
 "The available ",
 Cell[BoxData[
 "Method"],ExpressionUUID->"8af89a26-8ae1-4e14-803c-60b163d37d55"],
 " options are the same as for ",
 Cell[BoxData[
 "IGPageRank"],ExpressionUUID->"dfffe571-8cfe-4884-bdda-569433db2cd5"],
 "."
}], "Text",ExpressionUUID->"5ef71f41-dcad-4520-b37f-d95dc4478973"],

Cell["\<\
Visualize both the LinkRank and PageRank of a random directed graph.\
\>", "Text",ExpressionUUID->"7d81f606-1053-4e46-8bdb-06b3b94b0cd7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"maxNorm", "=", 
    RowBox[{
     RowBox[{"#", "/", 
      RowBox[{"Max", "[", "#", "]"}]}], "&"}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"g", "=", 
    RowBox[{"RandomGraph", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"15", ",", "30"}], "}"}], ",", 
      RowBox[{"DirectedEdges", "\[Rule]", "True"}], ",", 
      RowBox[{"EdgeStyle", "\[Rule]", "Thick"}], ",", 
      RowBox[{"VertexSize", "\[Rule]", "Large"}], ",", 
      RowBox[{"GraphStyle", "\[Rule]", "\"\<BasicBlack\>\""}]}], "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"g", "//", 
   RowBox[{"IGEdgeMap", "[", 
    RowBox[{
     RowBox[{"ColorData", "[", "\"\<Rainbow\>\"", "]"}], ",", 
     RowBox[{"EdgeStyle", "\[Rule]", 
      RowBox[{"IGLinkRank", "/*", "maxNorm"}]}]}], "]"}]}], "//", 
  RowBox[{"IGVertexMap", "[", 
   RowBox[{
    RowBox[{"ColorData", "[", "\"\<Rainbow\>\"", "]"}], ",", 
    RowBox[{"VertexStyle", "\[Rule]", 
     RowBox[{"IGPageRank", "/*", "maxNorm"}]}]}], 
   "]"}]}]}], "Input",ExpressionUUID->"f384eabb-ad59-4fcf-a2ad-982ee9a508fc"],

Cell["\<\
Visualize the personalized version of LinkRank and PageRank, always starting \
the random walk from vertex 1.\
\>", "Text",ExpressionUUID->"5b4798cc-5660-4ae4-9b77-879673881e00"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pers", "=", 
   RowBox[{"<|", 
    RowBox[{"1", "\[Rule]", "1"}], "|>"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Graph", "[", 
    RowBox[{"g", ",", 
     RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}], "//", 
   RowBox[{"IGEdgeMap", "[", 
    RowBox[{
     RowBox[{"ColorData", "[", "\"\<Rainbow\>\"", "]"}], ",", 
     RowBox[{"EdgeStyle", "\[Rule]", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"IGPersonalizedLinkRank", "[", 
          RowBox[{"#", ",", "pers"}], "]"}], "&"}], ")"}], "/*", 
       "maxNorm"}]}]}], "]"}]}], "//", 
  RowBox[{"IGVertexMap", "[", 
   RowBox[{
    RowBox[{"ColorData", "[", "\"\<Rainbow\>\"", "]"}], ",", 
    RowBox[{"VertexStyle", "\[Rule]", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"IGPersonalizedPageRank", "[", 
         RowBox[{"#", ",", "pers"}], "]"}], "&"}], ")"}], "/*", 
      "maxNorm"}]}]}], 
   "]"}]}]}], "Input",ExpressionUUID->"cf85d602-78f3-45bc-9b3a-ca0fcafb32ff"]
}, Closed]],

Cell[CellGroupData[{

Cell["Eigenvector centrality", \
"Subsubsection",ExpressionUUID->"21338977-9e5f-4365-99cf-05ec647b7111"],

Cell[BoxData[
 RowBox[{"?", 
  "IGEigenvectorCentrality"}]], \
"Input",ExpressionUUID->"b232d0a7-b812-41a4-b84b-95f0c26bd575"],

Cell["\<\
Eigenvector centrality is based on the idea that the importance (centrality) \
of a vertices should be affected not only by how many other vertices point to \
it, but also by the importance of its neighbours. The eigenvector centrality \
of a vertex is proportional to the sum of centralities of its neighbours. \
Mathematically, the eigenvector centrality is the leading eigenvector of the \
adjacency matrix.\
\>", "Text",ExpressionUUID->"8db81000-389b-44bb-b592-9b7b99b720c0"],

Cell["\<\
Eigenvector centrality is meaningful for connected graphs only. Disconnected \
graphs should be decomposed into their components, and the eigenvector \
centrality computed separately for each. The vertex centrality scores will be \
comparable only within components, not between separate components.\
\>", "Text",ExpressionUUID->"71cef1bc-9237-4590-b867-3fdc33cd2421"],

Cell[TextData[{
 "In undirected graphs, the diagonal of the adjacency matrix is assumed to \
contain ",
 StyleBox["twice",
  FontSlant->"Italic"],
 " the number of self-loops on each vertex. This makes the undirected result \
consistent with the directed one when each undirected edge is replaced by \
reciprocal directed ones."
}], "Text",ExpressionUUID->"6a2c98c6-236d-41cb-9dae-a5277c94f7e7"],

Cell[TextData[{
 "For directed graphs, the left eigenvector of the adjacency matrix is \
calculated. In other words, the centrality of a vertex is proportional to the \
sum of centralities of vertices pointing ",
 StyleBox["to",
  FontSlant->"Italic"],
 " it. "
}], "Text",ExpressionUUID->"801e4080-8697-460d-b230-7265d656bef8"],

Cell["Weighted and directed graphs are supported.", \
"Text",ExpressionUUID->"014eb6bc-107d-409f-a180-72150f3fde29"],

Cell["The available options are:", \
"Text",ExpressionUUID->"d24951c0-b2f7-436a-8348-22384e767886"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"Normaized", "\[Rule]", "True"}]],ExpressionUUID->
  "5d504ba7-691e-4826-923e-db015d7a4e04"],
 " will scale the result so that the maximum centrality is 1. The default is ",
 Cell[BoxData[
 "True"],ExpressionUUID->"4f8fa286-e1f6-4b65-9516-e9971558ed63"],
 "."
}], "Item",ExpressionUUID->"2727de48-4d6e-4240-9233-0c708fb7c20e"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "False"}]],ExpressionUUID->
  "6b6ce274-ae36-4181-a964-37a4c1ce0e12"],
 " ignores edge directions."
}], "Item",ExpressionUUID->"015fcb8c-27cf-4e1a-af4f-e14b9d0d0e50"]
}, Closed]],

Cell[CellGroupData[{

Cell["Kleinberg\[CloseCurlyQuote]s hub and authority scores", \
"Subsubsection",ExpressionUUID->"858073d6-3c87-4e76-a08e-b5b305de5446"],

Cell[BoxData[
 RowBox[{"?", 
  "IGHubScore"}]], \
"Input",ExpressionUUID->"df922010-fdc7-4de9-8bb7-a1006c2966cf"],

Cell[BoxData[
 RowBox[{"?", 
  "IGAuthorityScore"}]], \
"Input",ExpressionUUID->"ff0a0a67-cc20-4d46-8c74-736c307de164"],

Cell["Weighted graphs are supported.", \
"Text",ExpressionUUID->"544dd1d4-cd7f-4ef6-bcab-9c6ff8a26d3e"],

Cell["The available options are:", \
"Text",ExpressionUUID->"c533ff98-d07e-4a82-be41-a3f79ef7d354"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"Normalized", "\[Rule]", "True"}]],ExpressionUUID->
  "e9808803-639d-47ea-8a19-0624c98a1dd4"],
 " scales the result so that the maximum centrality is 1. The default is ",
 Cell[BoxData[
 "True"],ExpressionUUID->"dc4e059c-37b0-4fb8-8a44-a5a5c3538e87"],
 "."
}], "Item",ExpressionUUID->"a3b30af7-2fe2-4e14-8a29-bc8bac651852"]
}, Closed]],

Cell[CellGroupData[{

Cell["Burt\[CloseCurlyQuote]s constraint score", \
"Subsubsection",ExpressionUUID->"5e704430-84b8-4e4a-8cb1-0820aaaece63"],

Cell[BoxData[
 RowBox[{"?", 
  "IGConstraintScore"}]], \
"Input",ExpressionUUID->"0238acee-1a6a-4ea1-9937-30a8b91401d3"],

Cell["Weighted graphs are supported.", \
"Text",ExpressionUUID->"daa3101d-25bf-4d9b-a9cf-46f7a8301f10"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Centralization", \
"Subsection",ExpressionUUID->"da1d468f-92c6-47fc-a697-196ee61d95d0"],

Cell[BoxData[
 RowBox[{"?", 
  "IG*Centralization"}]], \
"Input",ExpressionUUID->"cd0d4f3a-2dad-4a32-be5a-17d4443d7a24"],

Cell[TextData[{
 StyleBox["Centralization ",
  FontSlant->"Italic"],
 "is computed from centrality values in a way equivalent to ",
 Cell[BoxData[
  RowBox[{"Total", "[", 
   RowBox[{
    RowBox[{"Max", "[", "centralities", "]"}], "-", "centralities"}], "]"}]],
  ExpressionUUID->"d5c7f039-59f0-479a-acea-fe0a527214f7"],
 ". With the (default) option ",
 Cell[BoxData[
  RowBox[{"Normalized", "\[Rule]", "True"}]],ExpressionUUID->
  "49a0892b-6fac-4833-b393-bad2260716c8"],
 ", the result is normalized by dividing by the highest possible \
centralization score of any graph of the same directedness on the same number \
of vertices."
}], "Text",ExpressionUUID->"211d33bc-9971-4727-a7f6-88a163c8c646"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"IGBarabasiAlbertGame", "[", 
    RowBox[{"100", ",", "2", ",", 
     RowBox[{"DirectedEdges", "\[Rule]", "False"}]}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"ac33ff9c-1bff-48c7-b69e-533b222c086f"],

Cell[BoxData[
 RowBox[{"IGBetweennessCentralization", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"af6ad541-1aa7-4423-a999-1fdb6b65912e"],

Cell[BoxData[
 RowBox[{"IGClosenessCentralization", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"bd172159-e568-412a-909f-fd4079b3cc9d"],

Cell[BoxData[
 RowBox[{"IGDegreeCentralization", "[", 
  RowBox[{"g", ",", 
   RowBox[{"SelfLoops", "\[Rule]", "False"}]}], 
  "]"}]], "Input",ExpressionUUID->"42ba5f1b-0237-4f17-83e9-3b93e3f2b21d"],

Cell[BoxData[
 RowBox[{"IGEigenvectorCentralization", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"217fae85-80ed-40a4-8549-22bb873b5e1c"],

Cell[TextData[{
 "For most centrality types, the highest centralization is achieved by the ",
 Cell[BoxData[
 "StarGraph"],ExpressionUUID->"ad258442-b2e4-435d-b6a7-52acfac64ea4"],
 "."
}], "Text",ExpressionUUID->"6b1f9672-61f1-4e5c-b938-c05d3e67f5ad"],

Cell[BoxData[
 RowBox[{"IGBetweennessCentralization", "@", 
  RowBox[{
  "StarGraph", "[", "5", 
   "]"}]}]], "Input",ExpressionUUID->"cd84d9bc-0e63-479f-b12c-7b173ea28469"],

Cell[TextData[{
 "In the case of the degree centralization, the highest possible \
centralization score depends on whether self-loops are allowed. This is \
controlled by the ",
 Cell[BoxData[
 "SelfLoops"],ExpressionUUID->"d4695f26-a152-4eb1-a207-c77431ad5958"],
 " option of ",
 Cell[BoxData[
 "IGDegreeCentralization"],ExpressionUUID->
  "f200e566-1963-42e6-9422-a553718cbbcb"],
 ". The default is ",
 Cell[BoxData[
  RowBox[{"SelfLoops", "\[Rule]", "True"}]],ExpressionUUID->
  "43ac6202-349c-4627-808f-b9ae1822d748"],
 "."
}], "Text",ExpressionUUID->"ae7d83e9-1611-4c0f-ac38-70f7e8dc4368"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"IGDegreeCentralization", "[", 
    GraphicsBox[
     NamespaceBox["NetworkGraphics",
      DynamicModuleBox[{Typeset`graph = HoldComplete[
        Graph[{1, 2, 3, 4, 5, 6}, {Null, 
          SparseArray[
          Automatic, {6, 6}, 0, {
           1, {{0, 5, 6, 7, 8, 9, 10}, {{2}, {3}, {4}, {5}, {6}, {1}, {1}, {
             1}, {1}, {1}}}, Pattern}]}, {
         GraphLayout -> "StarEmbedding", VertexSize -> {Medium}}]]}, 
       TagBox[
        GraphicsGroupBox[
         GraphicsComplexBox[{{0., 
          0.}, {-0.5877852522924727, -0.8090169943749468}, {
          0.5877852522924737, -0.8090169943749481}, {0.9510565162951533, 
          0.30901699437494634`}, {-7.044813998280222*^-16, 
          1.}, {-0.9510565162951538, 0.30901699437494945`}}, {
           {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
            LineBox[{{1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}}]}, 
           {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
            DiskBox[1, 0.09999999999999992], DiskBox[2, 0.09999999999999992], 
            DiskBox[3, 0.09999999999999992], DiskBox[4, 0.09999999999999992], 
            DiskBox[5, 0.09999999999999992], 
            DiskBox[6, 0.09999999999999992]}}]],
        MouseAppearanceTag["NetworkGraphics"]],
       AllowKernelInitialization->False]],
     DefaultBaseStyle->{
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
     FormatType->TraditionalForm,
     FrameTicks->None], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"IGDegreeCentralization", "[", 
    RowBox[{
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{1, 2, 3, 4, 5, 6}, {Null, 
           SparseArray[
           Automatic, {6, 6}, 0, {
            1, {{0, 5, 6, 7, 8, 9, 10}, {{2}, {3}, {4}, {5}, {6}, {1}, {1}, {
              1}, {1}, {1}}}, Pattern}]}, {
          GraphLayout -> "StarEmbedding", VertexSize -> {Medium}}]]}, 
        TagBox[
         GraphicsGroupBox[
          GraphicsComplexBox[{{0., 
           0.}, {-0.5877852522924727, -0.8090169943749468}, {
           0.5877852522924737, -0.8090169943749481}, {0.9510565162951533, 
           0.30901699437494634`}, {-7.044813998280222*^-16, 
           1.}, {-0.9510565162951538, 0.30901699437494945`}}, {
            {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
             LineBox[{{1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}}]}, 
            {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
             DiskBox[1, 0.09999999999999992], DiskBox[2, 0.09999999999999992],
              DiskBox[3, 0.09999999999999992], 
             DiskBox[4, 0.09999999999999992], DiskBox[5, 0.09999999999999992],
              DiskBox[6, 0.09999999999999992]}}]],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->{
       "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
        Hue[0.8, 1., 0.6]},
      FormatType->TraditionalForm,
      FrameTicks->None], ",", 
     RowBox[{"SelfLoops", "\[Rule]", "False"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"IGDegreeCentralization", "[", 
    GraphicsBox[
     NamespaceBox["NetworkGraphics",
      DynamicModuleBox[{Typeset`graph = HoldComplete[
        Graph[{1, 2, 3, 4, 5, 6}, {
         Null, SparseArray[
          Automatic, {6, 6}, 0, {
           1, {{0, 6, 6, 6, 6, 6, 6}, {{2}, {3}, {4}, {5}, {6}, {1}}}, {1, 1, 
            1, 1, 1, 1}}]}, {
         GraphLayout -> "StarEmbedding", VertexSize -> {Medium}}]]}, 
       TagBox[GraphicsGroupBox[GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGCQBWIQjQ6iokpZlM8/2r/oy/TZ5Y9f7k+G8O3XQfl/Q1yE
+fLf2du81Dd/f+yyfW3sjTUbE0/ugej+YM8YCpbfXwKVf1ChpPHsxcn95Tb1
HwKnn97feOlB+9cbZ/Yr7Hm0LFLv3P6UP/JMP6Qv7D9h75wTLXZh//+y2SsX
fr64X8q8vUPrwIX9QsknHQ49urz/1fRH2tP4Lu6/d3J64/nrV/dL8F5Wvf7v
wv4nV4uzOQ9e33+oOMO5ZuKF/Tm8LTbSvTf3H2XObzg15fx+56We83Zo394f
8OK0h33i2f0ZVx1LDPvu7GfruD3Hd86p/SrJwgLfl9/dHxQRcFMo/vh+JrD7
7+13Arv/8P6Id+u+Zty5tz9n0ftj317s369Zue+3+pt7++3Ztx0+KLJjf4RE
csSeuff2fwj7l2YfsWE/i6K8zdvPd/ez3VSYZPh54X4fe9/F+77c2X/j/4Qm
ubuN+yvqpU9Yrby9X2JWSOV15V77BN4/agqyt/b/WdGU/vXRAvvVQVx/y+Ju
7J8zo33S4v/L7YMcvNiEaq/tF/kuc7Ahbo39RO7rf/91XtnP4bKX99X1tfZX
riV/fT3t0n4OqDwAsSn4lw==
          "], {
           {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
            {Arrowheads[0.], ArrowBox[{1, 2}, 0.09999999999999992]}, 
            {Arrowheads[0.], ArrowBox[{1, 3}, 0.09999999999999992]}, 
            {Arrowheads[0.], ArrowBox[{1, 4}, 0.09999999999999992]}, 
            {Arrowheads[0.], ArrowBox[{1, 5}, 0.09999999999999992]}, 
            {Arrowheads[0.], ArrowBox[{1, 6}, 0.09999999999999992]}, 
            {Arrowheads[0.], 
             ArrowBox[BezierCurveBox[{1, 10, 13, 15, 21, 23, 26, 1},
              SplineDegree->7], 0.09999999999999992]}}, 
           {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
            DiskBox[1, 0.09999999999999992], DiskBox[2, 0.09999999999999992], 
            DiskBox[3, 0.09999999999999992], DiskBox[4, 0.09999999999999992], 
            DiskBox[5, 0.09999999999999992], 
            DiskBox[6, 0.09999999999999992]}}]],
        MouseAppearanceTag["NetworkGraphics"]],
       AllowKernelInitialization->False]],
     DefaultBaseStyle->{
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
     FormatType->TraditionalForm,
     FrameTicks->None], "]"}]}], 
  "}"}]], "Input",ExpressionUUID->"c6b449ba-8cf5-4be6-be9b-36e414b31108"]
}, Closed]],

Cell[CellGroupData[{

Cell["Topological sorting and acyclic graphs", \
"Subsection",ExpressionUUID->"b56375b9-c85e-4773-8f28-ddd8373776e9"],

Cell[CellGroupData[{

Cell["IGDirectedAcyclicGraphQ", \
"Subsubsection",ExpressionUUID->"dabacc66-d92e-4a6a-916f-263ae00861bb"],

Cell[BoxData[
 RowBox[{"?", 
  "IGDirectedAcyclicGraphQ"}]], \
"Input",ExpressionUUID->"d328596a-35cd-43ce-81b6-b2fd9aaf7c8f"],

Cell[TextData[{
 Cell[BoxData[
 "IGDirectedAcyclicGraphQ"],ExpressionUUID->
  "0e283477-3789-443e-9e06-c557baef1693"],
 " tests if a graph is directed and has no directed cycles."
}], "Text",ExpressionUUID->"d098ea91-0e4f-4a7f-9ef6-8f63337d6117"],

Cell[BoxData[
 RowBox[{"IGDirectedAcyclicGraphQ", "/@", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"IGShorthand", "[", "\"\<1->2->3->1\>\"", "]"}], ",", 
    RowBox[{"IGShorthand", "[", "\"\<1->2->3<-1\>\"", "]"}]}], 
   "}"}]}]], "Input",ExpressionUUID->"9e29be26-35cf-4ab3-b22e-944c8e2ee86f"],

Cell[TextData[{
 Cell[BoxData[
 "IGDirectedAcyclicGraphQ"],ExpressionUUID->
  "e895b90d-09cc-44ec-93a9-9f6bccb822d3"],
 " returns ",
 Cell[BoxData[
 "True"],ExpressionUUID->"3e22edbd-417b-40cc-b9a6-e86ad8247898"],
 " for graphs with no edges."
}], "Text",ExpressionUUID->"6a3cdd09-1294-4926-8ee3-bdd2cacb9f66"],

Cell[BoxData[
 RowBox[{"IGDirectedAcyclicGraphQ", "[", 
  RowBox[{"IGEmptyGraph", "[", "3", "]"}], 
  "]"}]], "Input",ExpressionUUID->"95e87ab9-5ca9-44ea-8826-777216f8eb93"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGTopologicalOrdering", \
"Subsubsection",ExpressionUUID->"e1794c67-547b-4333-be62-163418c3ea7d"],

Cell[BoxData[
 RowBox[{"?", 
  "IGTopologicalOrdering"}]], \
"Input",ExpressionUUID->"8e504321-872a-4350-8ec8-6aebf1269e37"],

Cell[TextData[{
 Cell[BoxData[
 "IGTopologicalOrdering"],ExpressionUUID->
  "256df562-3ef1-452d-ab55-663450d58ef4"],
 " is to the built-in ",
 Cell[BoxData[
 "TopologicalSort"],ExpressionUUID->"d7b8102d-400f-4ce1-94be-0f5e818e1049"],
 " as ",
 Cell[BoxData[
 "Ordering"],ExpressionUUID->"0159b21b-7cae-47a3-ba57-ecc4c01a6721"],
 " is to ",
 Cell[BoxData[
 "Sort"],ExpressionUUID->"2fc7c732-6e6a-44ec-be9a-c6e74556f370"],
 ": it returns the permutation which sorts vertices in topological order. \
When vertices are ordered topologically, all directed edges point from \
earlier vertices to later ones."
}], "Text",ExpressionUUID->"090f10d8-3046-4ae4-9252-87d6ff35c0c1"],

Cell["\<\
Graphs must be acyclic for topological sorting to be possible.\
\>", "Text",ExpressionUUID->"1d4150b8-eba8-466c-9a5b-5442147a0c96"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{
        "A", "B", "C", "D", "E", "F", "G", "H", "I", "J"}, {{{9, 6}, {9, 4}, {
         9, 10}, {9, 7}, {9, 1}, {5, 6}, {5, 4}, {5, 7}, {6, 10}, {4, 2}, {4, 
         3}, {4, 1}, {8, 3}, {8, 1}, {2, 10}, {10, 7}}, Null}, {
        EdgeStyle -> {
           Directive[
            AbsoluteThickness[1], 
            Opacity[1], 
            Arrowheads[{{0.06, 0.9}}], 
            RGBColor[0.254906, 0.411802, 0.882397]]}, 
         GraphLayout -> {"Dimension" -> 2}, PerformanceGoal -> "Quality", 
         VertexLabels -> {
           Placed["Name", Center]}, VertexSize -> {0.5}, VertexStyle -> {
           GrayLevel[1]}}]], Typeset`boxes, Typeset`boxes$s2d = 
      GraphicsGroupBox[{{
         Arrowheads[Medium], 
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         Directive[
          AbsoluteThickness[1], 
          Opacity[1], 
          Arrowheads[{{0.06, 0.9}}], 
          RGBColor[0.254906, 0.411802, 0.882397]], 
         ArrowBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$10", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$4", Automatic, Center], 
           DynamicLocation["VertexID$1", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$4", Automatic, Center], 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$4", Automatic, Center], 
           DynamicLocation["VertexID$3", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$5", Automatic, Center], 
           DynamicLocation["VertexID$4", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$5", Automatic, Center], 
           DynamicLocation["VertexID$6", Automatic, Center]}], 
         ArrowBox[
          BezierCurveBox[{
            DynamicLocation["VertexID$5", Automatic, Center], {
            5.240426130869211, 3.759573869130789}, {5.320110273927587, 
            3.679889726072413}, {5.407625461122391, 3.5923745388776087`}, {
            5.502971692453626, 3.4970283075463744`}, {5.606148967921289, 
            3.3938510320787114`}, {5.717157287525381, 3.282842712474619}, {
            5.776519338291658, 3.218542390103402}, {5.828897618379552, 
            3.151349295200695}, {5.874292127789059, 3.0812634277664976`}, {
            5.9127028665201795`, 3.0082847878008083`}, {5.944129834572915, 
            2.932413375303628}, {5.968573031947265, 2.8536491902749574`}, {
            5.986032458643229, 2.771992232714796}, {5.9965081146608075`, 
            2.6874425026231434`}, {6., 2.4000000000000004`}, {
            5.999999999999999, 2.311111111111112}, {6., 2.222222222222222}, {
            6.000000000000001, 2.1333333333333337`}, {6., 
            2.0444444444444447`}, {6., 1.9555555555555557`}, {6., 
            1.8666666666666667`}, {6., 1.777777777777778}, {6., 
            1.688888888888889}, {6., 1.4}, {5.995583075599999, 
            1.3138409205160493`}, {5.982332302400002, 1.2331414598419759`}, {
            5.960247680400005, 1.15790161797778}, {5.929329209600007, 
            1.08812139492346}, {5.8895768900000105`, 1.0238007906790176`}, {
            5.840990721600015, 0.9649398052444519}, {5.78357070440002, 
            0.9115384386197634}, {5.717316838400027, 0.8635966908049516}, {
            5.642229123600034, 0.8211145618000169}, {5.376576097659286, 
            0.6882880488296428}, {5.131718852548169, 0.5658594262740843}, {
            4.907657388266682, 0.4538286941333409}, {4.704391704814826, 
            0.3521958524074126}, {4.521921802192599, 0.2609609010962996}, 
            DynamicLocation["VertexID$7", Automatic, Center]}]], 
         ArrowBox[
          BezierCurveBox[{
            DynamicLocation["VertexID$6", Automatic, Center], {5., 
            2.7827160493827163`}, {5., 2.7160493827160495`}, {5., 
            2.644444444444445}, {5., 2.567901234567902}, {5., 
            2.48641975308642}, {5., 2.4000000000000004`}, {4.996508114660807, 
            2.312557497376857}, {4.986032458643228, 2.2280077672852037`}, {
            4.968573031947265, 2.1463508097250426`}, {4.944129834572915, 
            2.0675866246963714`}, {4.9127028665201795`, 
            1.9917152121991917`}, {4.874292127789058, 1.9187365722335028`}, {
            4.828897618379552, 1.8486507047993048`}, {4.77651933829166, 
            1.7814576098965975`}, {4.7171572875253815`, 1.717157287525381}, {
            4.606148967921289, 1.6061489679212886`}, {4.5029716924536265`, 
            1.5029716924536258`}, {4.407625461122393, 1.407625461122392}, {
            4.320110273927588, 1.3201102739275867`}, {4.240426130869212, 
            1.240426130869211}, 
            DynamicLocation["VertexID$10", Automatic, Center]}]], 
         ArrowBox[{
           DynamicLocation["VertexID$8", Automatic, Center], 
           DynamicLocation["VertexID$1", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$8", Automatic, Center], 
           DynamicLocation["VertexID$3", Automatic, Center]}], 
         ArrowBox[
          BezierCurveBox[{
            DynamicLocation["VertexID$9", Automatic, Center], {
            2.186068803796584, 3.728689601265528}, {1.8948991725988287`, 
            3.631633057532943}, {1.5686548085423138`, 3.5228849361807715`}, {
            1.207335711627038, 3.4024452372090126`}, {0.8109418818530023, 
            3.270313960617668}, {0.3794733192202055, 3.1264911064067356`}, {
            0.29983077074189074`, 3.0950053186423583`}, {0.22955793384926013`,
             3.0567662248633343`}, {0.1686548085423136, 
            3.0117738250696604`}, {0.11712139482105109`, 2.960028119261338}, {
            0.07495769268547268, 2.9015291074383676`}, {0.0421637021355784, 
            2.836276789600748}, {0.01873942317136817, 2.7642711657484806`}, {
            0.004684855792842047, 2.6855122358815646`}, {0., 
            2.5999999999999996`}, {0., 2.5135802469135795`}, {0., 
            2.432098765432099}, {0., 2.355555555555556}, {0., 
            2.283950617283951}, {0., 2.2172839506172837`}, 
            DynamicLocation["VertexID$1", Automatic, Center]}]], 
         ArrowBox[{
           DynamicLocation["VertexID$9", Automatic, Center], 
           DynamicLocation["VertexID$4", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$9", Automatic, Center], 
           DynamicLocation["VertexID$6", Automatic, Center]}], 
         ArrowBox[
          BezierCurveBox[{
            DynamicLocation["VertexID$9", Automatic, Center], {
            2.7827160493827163`, 3.782716049382716}, {2.7160493827160495`, 
            3.716049382716049}, {2.644444444444445, 3.644444444444445}, {
            2.567901234567902, 3.567901234567901}, {2.48641975308642, 
            3.4864197530864196`}, {2.4000000000000004`, 3.4}, {
            2.311111111111112, 3.3111111111111104`}, {2.222222222222222, 
            3.2222222222222223`}, {2.1333333333333337`, 3.133333333333334}, {
            2.0444444444444447`, 3.0444444444444443`}, {1.9555555555555557`, 
            2.9555555555555557`}, {1.8666666666666667`, 
            2.8666666666666667`}, {1.777777777777778, 2.7777777777777777`}, {
            1.688888888888889, 2.688888888888889}, {1.282842712474619, 
            2.282842712474619}, {1.223480661708341, 2.2185423901034023`}, {
            1.1711023816204484`, 2.151349295200695}, {1.125707872210942, 
            2.0812634277664976`}, {1.0872971334798207`, 
            2.0082847878008083`}, {1.0558701654270852`, 
            1.9324133753036286`}, {1.0314269680527355`, 1.853649190274958}, {
            1.0139675413567713`, 1.771992232714796}, {1.003491885339193, 
            1.6874425026231437`}, {1., 1.4}, {1.004684855792842, 
            1.314487764118435}, {1.0187394231713682`, 1.2357288342515191`}, {
            1.0421637021355785`, 1.1637232103992519`}, {1.0749576926854727`, 
            1.0984708925616327`}, {1.117121394821051, 1.039971880738662}, {
            1.1686548085423136`, 0.9882261749303399}, {1.2295579338492602`, 
            0.9432337751366664}, {1.2998307707418908`, 0.9049946813576415}, {
            1.3794733192202056`, 0.8735088935932649}, {1.8109418818530019`, 
            0.7296860393823327}, {2.2073357116270382`, 0.5975547627909874}, {
            2.5686548085423135`, 0.47711506381922897`}, {2.894899172598829, 
            0.36836694246705703`}, {3.186068803796584, 0.27131039873447205`}, 
            
            DynamicLocation["VertexID$7", Automatic, Center]}]], 
         ArrowBox[
          BezierCurveBox[{
            DynamicLocation["VertexID$9", Automatic, Center], {3., 
            3.782716049382716}, {3., 3.716049382716049}, {3., 
            3.644444444444445}, {3., 3.567901234567901}, {3., 
            3.4864197530864196`}, {3., 3.4}, {2.9999999999999996`, 
            3.3111111111111104`}, {3., 3.2222222222222223`}, {
            3.0000000000000004`, 3.133333333333334}, {3., 
            3.0444444444444443`}, {3., 2.9555555555555557`}, {3., 
            2.8666666666666667`}, {3., 2.7777777777777777`}, {3., 
            2.688888888888889}, {3., 2.4000000000000004`}, {3.003491885339192,
             2.312557497376857}, {3.0139675413567715`, 2.2280077672852037`}, {
            3.0314269680527355`, 2.1463508097250426`}, {3.055870165427085, 
            2.0675866246963714`}, {3.0872971334798205`, 
            1.9917152121991917`}, {3.125707872210942, 1.9187365722335028`}, {
            3.1711023816204484`, 1.8486507047993048`}, {3.223480661708341, 
            1.7814576098965975`}, {3.282842712474619, 1.717157287525381}, {
            3.393851032078711, 1.6061489679212886`}, {3.497028307546374, 
            1.5029716924536258`}, {3.5923745388776087`, 1.407625461122392}, {
            3.679889726072413, 1.3201102739275867`}, {3.7595738691307887`, 
            1.240426130869211}, 
            DynamicLocation["VertexID$10", Automatic, Center]}]], 
         ArrowBox[{
           DynamicLocation["VertexID$10", Automatic, Center], 
           DynamicLocation["VertexID$7", Automatic, Center]}]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         GrayLevel[1], 
         TagBox[{
           TagBox[
            DiskBox[{0., 2.}, 0.25], "DynamicName", BoxID -> "VertexID$1"], 
           InsetBox[
            FormBox["\"A\"", TraditionalForm], 
            DynamicLocation["VertexID$1", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$1"], 
         TagBox[{
           TagBox[
            DiskBox[{4., 2.}, 0.25], "DynamicName", BoxID -> "VertexID$2"], 
           InsetBox[
            FormBox["\"B\"", TraditionalForm], 
            DynamicLocation["VertexID$2", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$2"], 
         TagBox[{
           TagBox[
            DiskBox[{2., 2.}, 0.25], "DynamicName", BoxID -> "VertexID$3"], 
           InsetBox[
            FormBox["\"C\"", TraditionalForm], 
            DynamicLocation["VertexID$3", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$3"], 
         TagBox[{
           TagBox[
            DiskBox[{4., 3.}, 0.25], "DynamicName", BoxID -> "VertexID$4"], 
           InsetBox[
            FormBox["\"D\"", TraditionalForm], 
            DynamicLocation["VertexID$4", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$4"], 
         TagBox[{
           TagBox[
            DiskBox[{5., 4.}, 0.25], "DynamicName", BoxID -> "VertexID$5"], 
           InsetBox[
            FormBox["\"E\"", TraditionalForm], 
            DynamicLocation["VertexID$5", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$5"], 
         TagBox[{
           TagBox[
            DiskBox[{5., 3.}, 0.25], "DynamicName", BoxID -> "VertexID$6"], 
           InsetBox[
            FormBox["\"F\"", TraditionalForm], 
            DynamicLocation["VertexID$6", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$6"], 
         TagBox[{
           TagBox[
            DiskBox[{4., 0.}, 0.25], "DynamicName", BoxID -> "VertexID$7"], 
           InsetBox[
            FormBox["\"G\"", TraditionalForm], 
            DynamicLocation["VertexID$7", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$7"], 
         TagBox[{
           TagBox[
            DiskBox[{1., 3.}, 0.25], "DynamicName", BoxID -> "VertexID$8"], 
           InsetBox[
            FormBox["\"H\"", TraditionalForm], 
            DynamicLocation["VertexID$8", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$8"], 
         TagBox[{
           TagBox[
            DiskBox[{3., 4.}, 0.25], "DynamicName", BoxID -> "VertexID$9"], 
           InsetBox[
            FormBox["\"I\"", TraditionalForm], 
            DynamicLocation["VertexID$9", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$9"], 
         TagBox[{
           TagBox[
            DiskBox[{4., 1.}, 0.25], "DynamicName", BoxID -> "VertexID$10"], 
           InsetBox[
            FormBox["\"J\"", TraditionalForm], 
            DynamicLocation["VertexID$10", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> 
          "VertexLabelID$10"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        
        ImageSizeCache->{{1.688193309010094, 
         244.6868066909899}, {-91.50890669098992, 85.26410669098989}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{247.375, Automatic}]}], 
  ";"}]], "Input",ExpressionUUID->"0e5fa97d-c507-4d46-887d-94ef25a530f5"],

Cell[BoxData[
 RowBox[{"IGDirectedAcyclicGraphQ", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"942de255-80a3-4822-ac85-bca2ebe556c3"],

Cell[BoxData[
 RowBox[{"p", "=", 
  RowBox[{
  "IGTopologicalOrdering", "[", "g", 
   "]"}]}]], "Input",ExpressionUUID->"27958a7b-33b1-42e5-b647-999df27ca2f9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"VertexList", "[", "g", "]"}], "\[LeftDoubleBracket]", "p", 
  "\[RightDoubleBracket]"}]], \
"Input",ExpressionUUID->"1a741503-7abe-47c4-b145-e0fab63a2831"],

Cell["\<\
If the vertices are laid out from left to right in topological order, all \
edges will point from left to right.\
\>", "Text",ExpressionUUID->"a0abb2ee-fbc9-4b8f-8d2b-0d6efdec1f52"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Graph", "[", 
   RowBox[{"g", ",", "\[IndentingNewLine]", 
    RowBox[{"EdgeShapeFunction", "\[Rule]", 
     RowBox[{"GraphElementData", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<CurvedEdge\>\"", ",", 
        RowBox[{"\"\<Curvature\>\"", "\[Rule]", "1.5"}]}], "}"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], "//", 
  RowBox[{"IGVertexMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"#", ",", "0"}], "}"}], "&"}], ",", 
    RowBox[{"VertexCoordinates", "\[Rule]", 
     RowBox[{"IGTopologicalOrdering", "/*", "Ordering"}]}]}], 
   "]"}]}]], "Input",ExpressionUUID->"c1e44654-5a5e-4e35-865b-80e64e414264"],

Cell[TextData[{
 "When the graph contains cycles, ",
 Cell[BoxData[
 "$Failed"],ExpressionUUID->"493be1e0-0f55-46ad-8628-29354951cf3e"],
 " is returned."
}], "Text",ExpressionUUID->"71c88083-f559-4613-888b-ff19b90ace7d"],

Cell[BoxData[
 RowBox[{"IGTopologicalOrdering", "[", 
  RowBox[{"IGShorthand", "[", "\"\<1->2->3->4->5, 5->3, 5->6\>\"", "]"}], 
  "]"}]], "Input",ExpressionUUID->"7012bcbf-da7f-4cec-8f74-cc0c3f659e96"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGFeedbackArcSet", \
"Subsubsection",ExpressionUUID->"fa51ca24-56e2-4950-ba9b-a91b8318b8fd"],

Cell[BoxData[
 RowBox[{"?", 
  "IGFeedbackArcSet"}]], \
"Input",ExpressionUUID->"dc77c9ae-1804-48a3-9623-a254827623fc"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGFeedbackArcSet", "[", "]"}]],ExpressionUUID->
  "60f55667-64cc-4910-bd0a-32b98e3732d3"],
 " returns a set of directed edges (also called ",
 StyleBox["arcs",
  FontSlant->"Italic"],
 ") the removal of which makes the graph acyclic. "
}], "Text",ExpressionUUID->"c44fd843-b9b1-4eb9-a667-0c2087bbdfcd"],

Cell[TextData[{
 "With ",
 Cell[BoxData[
  RowBox[{"Method", "\[Rule]", "\"\<IntegerProgramming\>\""}]],ExpressionUUID->
  "963a007c-9da4-400a-8317-a15b075114bb"],
 ", it finds an exact minimal feedback arc set through integer programming \
using the triangle inequality formulation. With ",
 Cell[BoxData[
  RowBox[{"Method", "\[Rule]", "\"\<EadesLinSmyth\>\""}]],ExpressionUUID->
  "55aa3869-5fe4-4d43-9683-328027c723f4"],
 ", it finds a feedback arc set (not necessarily minimal) using the fast \
\[OpenCurlyDoubleQuote]GR\[CloseCurlyDoubleQuote] heuristic of Eades, Lin and \
Smyth (1993)."
}], "Text",ExpressionUUID->"e736b259-03b9-4d4b-b53b-6577ce81d5c9"],

Cell["The following directed graph is not acyclic.", \
"Text",ExpressionUUID->"28dcb640-1748-46ae-9ffc-94fcb118c61a"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"RandomGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10", ",", "20"}], "}"}], ",", 
    RowBox[{"DirectedEdges", "\[Rule]", "True"}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], 
   "]"}]}]], "Input",ExpressionUUID->"9fe137f7-35e4-42af-914b-7c97aff33ed1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"AcyclicGraphQ", "[", "%", "]"}], ",", 
   RowBox[{"IGDirectedAcyclicGraphQ", "[", "%", "]"}]}], 
  "}"}]], "Input",ExpressionUUID->"0d4b23f7-fa9c-432a-a008-ed2c25230238"],

Cell["Find a set of edges whose removal breaks all cycles.", \
"Text",ExpressionUUID->"131de7fe-ea65-49b3-9a33-005667eb7b24"],

Cell[BoxData[
 RowBox[{"IGFeedbackArcSet", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"05729f6c-e12f-4a86-8015-038f61b2e368"],

Cell[BoxData[
 RowBox[{"ag", "=", 
  RowBox[{"EdgeDelete", "[", 
   RowBox[{"g", ",", "%"}], 
   "]"}]}]], "Input",ExpressionUUID->"e364e0cc-0ded-465a-8925-894c71969f9b"],

Cell[BoxData[
 RowBox[{"IGDirectedAcyclicGraphQ", "[", "ag", 
  "]"}]], "Input",ExpressionUUID->"7ad253fd-36ee-4c47-8bcb-866f61cd8ee6"],

Cell[TextData[{
 "Vertices of a directed acyclic graph can be sorted topologically. ",
 Cell[BoxData[
 "IGTopologicalOrdering"],ExpressionUUID->
  "90f529e0-be3c-4836-91a7-6b1a7b314f28"],
 " returns a permutation that sorts them this way, and thus makes the graph\
\[CloseCurlyQuote]s adjacency matrix upper triangular."
}], "Text",ExpressionUUID->"224957a3-64d1-4019-afc5-b04664c58e35"],

Cell[BoxData[
 RowBox[{"perm", "=", 
  RowBox[{
  "IGTopologicalOrdering", "[", "ag", 
   "]"}]}]], "Input",ExpressionUUID->"846ddd5c-59a4-4630-ba9b-a544335e4bee"],

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"am", "=", 
     RowBox[{"AdjacencyMatrix", "[", "ag", "]"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"ArrayPlot", "/@", 
    RowBox[{"{", 
     RowBox[{"am", ",", 
      RowBox[{"am", "[", 
       RowBox[{"[", 
        RowBox[{"perm", ",", "perm"}], "]"}], "]"}]}], "}"}]}]}], 
  "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"de29d4b1-c062-41c0-a5b0-6c13e2e52e5e"],

Cell[CellGroupData[{

Cell["References", \
"Subsubsubsection",ExpressionUUID->"64c0ce46-4e79-4135-84ef-45061de545fb"],

Cell[TextData[{
 "P. Eades, X. Lin, and W. F. Smyth, A fast and effective heuristic for the \
feedback arc set problem, ",
 StyleBox["Inf. Process. Lett.",
  FontSlant->"Italic"],
 " ",
 StyleBox["47",
  FontWeight->"Bold"],
 ", 319 (1993). ",
 ButtonBox["https://doi.org/10.1016/0020-0190(93)90079-O",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://doi.org/10.1016/0020-0190(93)90079-O"], None},
  ButtonNote->"https://doi.org/10.1016/0020-0190(93)90079-O"]
}], "Item",ExpressionUUID->"dee6fa16-c98d-41d6-9d82-36cc783aca06"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Chordal graphs", \
"Subsection",ExpressionUUID->"9a99d4cb-d46e-42fa-b022-d58b172824b7"],

Cell["\<\
Chordal graphs are graphs that do not contain induced cycles with more than \
three vertices.\
\>", "Text",ExpressionUUID->"a2f7f3e5-112c-4e27-9c0f-bbbad0496aec"],

Cell[CellGroupData[{

Cell["IGChordalQ", \
"Subsubsection",ExpressionUUID->"08ade6c0-3d52-43f9-95da-023cee8599fb"],

Cell[BoxData[
 RowBox[{"?", 
  "IGChordalQ"}]], \
"Input",ExpressionUUID->"dfef33c8-8c08-4e56-ae36-4bca3f95ded5"],

Cell["\<\
A graph is chordal if each of its cycles of four or more nodes has a chord, \
i.e. an edge joining two non-adjacent vertices in the cycle. Equivalently, \
all chordless cycles in a chordal graph have at most 3 vertices.\
\>", "Text",ExpressionUUID->"9d84c193-5c4f-48b4-8a80-1fd91cc58fb6"],

Cell[TextData[{
 "Chordal graphs are also called ",
 StyleBox["rigid circuit graphs",
  FontSlant->"Italic"],
 " or ",
 StyleBox["triangulated graphs",
  FontSlant->"Italic"],
 "."
}], "Text",ExpressionUUID->"e49e3d0f-97dc-473e-8a22-5da9b5c27df7"],

Cell["\<\
Grid graphs are not chordal because they have chordless 4 cycles.\
\>", "Text",ExpressionUUID->"949138fc-3542-42ea-b80a-95f7f8bf2336"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"GridGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "3"}], "}"}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], 
   "]"}]}]], "Input",ExpressionUUID->"92130ca0-a943-4c8c-9a4e-2e1adff964a7"],

Cell[BoxData[
 RowBox[{"IGChordalQ", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"cd9c0c93-9e38-4166-8eb5-ab67a04607b8"],

Cell["Adding chords to the 4 cycles makes them chordal.", \
"Text",ExpressionUUID->"fb926fe9-eb04-40fa-a68a-0f9581413dd7"],

Cell[BoxData[
 RowBox[{"EdgeAdd", "[", 
  RowBox[{"g", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[UndirectedEdge]", "4"}], ",", 
     RowBox[{"4", "\[UndirectedEdge]", "5"}]}], "}"}]}], 
  "]"}]], "Input",ExpressionUUID->"f9ec2660-9e61-4153-8626-2b785ae64fac"],

Cell[BoxData[
 RowBox[{"IGChordalQ", "[", "%", 
  "]"}]], "Input",ExpressionUUID->"eed84c0d-cbc2-4777-a163-23d5a6c1a3e5"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGChordalCompletion", \
"Subsubsection",ExpressionUUID->"b1cb2ef6-2b64-49ba-8ed1-e581e8a7d314"],

Cell[BoxData[
 RowBox[{"?", 
  "IGChordalCompletion"}]], \
"Input",ExpressionUUID->"c73e9139-648a-4060-adf2-1ed29feac1d2"],

Cell[TextData[{
 Cell[BoxData[
 "IGChordalCompletion"],ExpressionUUID->
  "302f12b1-9449-4adb-82c2-86f7e7bcdab8"],
 " computes a set of edges that, when added to a graph, make it chordal. The \
edge set returned is not usually minimal, i.e. some of the edges may not be \
necessary to create a chordal graph."
}], "Text",ExpressionUUID->"d97f2524-e6d4-40ac-b069-aeb2c5106124"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{
  "CycleGraph", "[", "5", 
   "]"}]}]], "Input",ExpressionUUID->"e7f86def-860b-44f6-aa44-3088e16eda9d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"completion", "=", 
   RowBox[{"IGChordalCompletion", "[", "g", "]"}]}], ";"}], "\n", 
 RowBox[{"HighlightGraph", "[", 
  RowBox[{
   RowBox[{"EdgeAdd", "[", 
    RowBox[{"g", ",", "completion"}], "]"}], ",", "completion"}], 
  "]"}]}], "Input",ExpressionUUID->"1b55f973-01f6-4cb4-a206-ccec01a19222"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGMaximumCardinalitySearch", \
"Subsubsection",ExpressionUUID->"534230a0-b3a1-4b38-95b5-5492a35633ef"],

Cell[BoxData[
 RowBox[{"?", 
  "IGMaximumCardinalitySearch"}]], \
"Input",ExpressionUUID->"da63b45a-4474-4192-9804-810ff4a7ecd6"],

Cell[TextData[{
 "The maximum cardinality search algorithm visits the vertices of the graph \
in such an order so that every time the vertex with the most already visited \
neighbours is visited next. Ties are broken arbitrarily. Then vertices are \
assigned ranks ",
 Cell[BoxData[
  FormBox["\[Alpha]", TraditionalForm]],ExpressionUUID->
  "564ee5b5-807b-4dc4-a11b-01013fad6a07"],
 " in decreasing order from the vertex count of the graph to 1. ",
 Cell[BoxData[
 "IGMaximumCardinalitySearch"],ExpressionUUID->
  "1c4e13ce-c768-4243-9606-01e8eae5bdbe"],
 " returns these ranks."
}], "Text",ExpressionUUID->"81cddfa8-d15a-4b48-8c60-88bd57062f7b"],

Cell["The visiting order is animated below:", \
"Text",ExpressionUUID->"7ba09a75-d5ba-4806-8e26-033404341c41"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {Null, 
         SparseArray[
         Automatic, {10, 10}, 0, {
          1, {{0, 7, 10, 17, 20, 22, 25, 27, 30, 32, 34}, {{2}, {3}, {4}, {
            5}, {6}, {9}, {10}, {1}, {3}, {6}, {1}, {2}, {4}, {5}, {7}, {8}, {
            10}, {1}, {3}, {8}, {1}, {3}, {1}, {2}, {7}, {3}, {6}, {3}, {4}, {
            9}, {1}, {8}, {1}, {3}}}, Pattern}]}, {
        GraphLayout -> {"Dimension" -> 2}, GridLinesStyle -> Directive[
           GrayLevel[0.5, 0.4]], VertexSize -> {Large}}]]}, 
      TagBox[
       GraphicsGroupBox[
        GraphicsComplexBox[{{1.701679475037652, 0.8260879357521795}, {
         1.0129069790428793`, 0.0014765014337609905`}, {1.302137880167063, 
         0.82550322495179}, {1.9891395817563833`, 0.}, {1.9190652882622004`, 
         1.7282901125912526`}, {0.4543054799878108, 0.3626527729689047}, {0., 
         0.9265105414569058}, {2.550199662950018, 0.3612980310766506}, {
         3.004367978190639, 0.926728084419895}, {1.0848780974451706`, 
         1.7273098555045692`}}, {
          {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
           {Arrowheads[0.], ArrowBox[{1, 2}, 0.07990840454381602]}, 
           {Arrowheads[0.], ArrowBox[{1, 3}, 0.07990840454381602]}, 
           {Arrowheads[0.], ArrowBox[{1, 4}, 0.07990840454381602]}, 
           {Arrowheads[0.], ArrowBox[{1, 5}, 0.07990840454381602]}, 
           {Arrowheads[0.], ArrowBox[{1, 6}, 0.07990840454381602]}, 
           {Arrowheads[0.], ArrowBox[{1, 9}, 0.07990840454381602]}, 
           {Arrowheads[0.], ArrowBox[{1, 10}, 0.07990840454381602]}, 
           {Arrowheads[0.], ArrowBox[{2, 3}, 0.07990840454381602]}, 
           {Arrowheads[0.], ArrowBox[{2, 6}, 0.07990840454381602]}, 
           {Arrowheads[0.], ArrowBox[{3, 4}, 0.07990840454381602]}, 
           {Arrowheads[0.], ArrowBox[{3, 5}, 0.07990840454381602]}, 
           {Arrowheads[0.], ArrowBox[{3, 7}, 0.07990840454381602]}, 
           {Arrowheads[0.], ArrowBox[{3, 8}, 0.07990840454381602]}, 
           {Arrowheads[0.], ArrowBox[{3, 10}, 0.07990840454381602]}, 
           {Arrowheads[0.], ArrowBox[{4, 8}, 0.07990840454381602]}, 
           {Arrowheads[0.], ArrowBox[{6, 7}, 0.07990840454381602]}, 
           {Arrowheads[0.], ArrowBox[{8, 9}, 0.07990840454381602]}}, 
          {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
           DiskBox[1, 0.07990840454381602], DiskBox[2, 0.07990840454381602], 
           DiskBox[3, 0.07990840454381602], DiskBox[4, 0.07990840454381602], 
           DiskBox[5, 0.07990840454381602], DiskBox[6, 0.07990840454381602], 
           DiskBox[7, 0.07990840454381602], DiskBox[8, 0.07990840454381602], 
           DiskBox[9, 0.07990840454381602], 
           DiskBox[10, 0.07990840454381602]}}]],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]]]}], 
  ";"}]], "Input",ExpressionUUID->"0fce27a0-98e7-4fe3-8dce-831d5c66ec47"],

Cell[BoxData[
 RowBox[{"ranks", "=", 
  RowBox[{"AssociationThread", "[", 
   RowBox[{
    RowBox[{"VertexList", "[", "g", "]"}], ",", 
    RowBox[{"IGMaximumCardinalitySearch", "[", "g", "]"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"7e068c6a-b3a6-4dee-9499-81d7a96a289e"],

Cell[BoxData[{
 RowBox[{"verts", "=", 
  RowBox[{"Keys", "@", 
   RowBox[{"Reverse", "@", 
    RowBox[{"Sort", "[", "ranks", "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Table", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"HighlightGraph", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Graph", "[", 
       RowBox[{"g", ",", 
        RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Take", "[", 
       RowBox[{"verts", ",", "i"}], "]"}]}], "\[IndentingNewLine]", "]"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"i", ",", 
      RowBox[{"VertexCount", "[", "g", "]"}]}], "}"}]}], 
   "\[IndentingNewLine]", "]"}], "//", "ListAnimate"}]}], "Input",
 CellTags->
  "DeleteOutput",ExpressionUUID->"2de71771-339e-467f-96d8-744c5605e6ad"],

Cell[TextData[{
 "The rank ",
 Cell[BoxData[
  FormBox["\[Alpha]", TraditionalForm]],ExpressionUUID->
  "b190873d-4a18-434e-bdcc-516f3f3b557b"],
 " is useful for deciding the chordality of a graph. A graph is chordal if \
and only if any two neighbors of a vertex which are higher in rank than it \
are connected to each other."
}], "Text",ExpressionUUID->"93bb6757-dfdc-4654-a39f-1976cd85d914"],

Cell["Label the vertices of a graph with their ranks.", \
"Text",ExpressionUUID->"9e0d9996-386b-441b-9367-5aed939453d1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"IGShorthand", "[", "\"\<a-b-c-d-a-e-f-g-h-e-g\>\"", "]"}]}], 
  ";"}], "\n", 
 RowBox[{"IGVertexMap", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Row", "[", 
     RowBox[{"{", 
      RowBox[{"#1", ",", "\"\<: \>\"", ",", "#2"}], "}"}], "]"}], "&"}], ",", 
   
   RowBox[{"VertexLabels", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"VertexList", ",", "IGMaximumCardinalitySearch"}], "}"}]}], ",", 
   "g"}], "]"}]}], \
"Input",ExpressionUUID->"bc502c44-47c4-4a78-a842-cbc442c2f99b"],

Cell[TextData[{
 "Notice that vertex ",
 Cell[BoxData["b"],ExpressionUUID->"877928ab-2de2-45c3-97d0-7dbca4fed60d"],
 " has two higher-rank neighbours that are not connected to each other. This \
graph is not chordal. Use ",
 Cell[BoxData[
 "IGChordalCompletion"],ExpressionUUID->
  "3481087b-ac8f-4ca0-80f5-aa3d88dcd751"],
 " to determine which edges to add to it to make it chordal."
}], "Text",ExpressionUUID->"aec05f39-197d-435b-954e-a9d879477f09"],

Cell[BoxData[
 RowBox[{"IGChordalCompletion", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"28b82d4c-b1a6-4518-babb-d4be2fbe7fc4"],

Cell[CellGroupData[{

Cell["References", \
"Subsubsubsection",ExpressionUUID->"26ceb9ae-8bea-4704-b5e6-2b300787eeda"],

Cell["\<\
R. E. Tarjan, M. Yannakakis: Simple Linear-Time Algorithms to Test Chordality \
of Graphs, Test Acyclicity of Hypergraphs, and Selectively Reduce Acyclic \
Hypergraphs, SIAM J. Comput., 13(3), 566\[Dash]579 (1984). \
https://doi.org/10.1137/0213035\
\>", "Item",ExpressionUUID->"c8d979d0-0475-4fb1-b271-ae3cad2f647d"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Clustering coefficient", \
"Subsection",ExpressionUUID->"19fe885a-55e5-40c9-bf3b-d66753e85b6d"],

Cell[BoxData[
 RowBox[{"?", 
  "IG*ClusteringCoefficient"}]], \
"Input",ExpressionUUID->"10bf6724-a607-4f46-beb9-fad64ac86937"],

Cell[TextData[{
 "Clustering coefficients are measures of the degree to which vertices in a \
graph tend to cluster together. They are also referred to as ",
 StyleBox["transitivity",
  FontSlant->"Italic"],
 ", as they measure how often two vertices that are connected through a third \
one are also directly connected."
}], "Text",ExpressionUUID->"7b05b69e-89dd-479c-afdf-43c4f9d40cca"],

Cell["\<\
All clustering coefficient calculations in IGraph/M ignore edge directions.\
\>", "Text",ExpressionUUID->"bc5924ef-634b-49c2-9956-c1d3386dbb54"],

Cell[CellGroupData[{

Cell["IGGlobalClusteringCoefficient", \
"Subsubsection",ExpressionUUID->"c5ea1d2d-845a-4749-be7f-7c3cde79f294"],

Cell[BoxData[
 RowBox[{"?", 
  "IGGlobalClusteringCoefficient"}]], \
"Input",ExpressionUUID->"a3c71608-5f1d-40a5-80a6-a917a807816f"],

Cell["\<\
The clustering coefficient of an undirected graph is defined as\
\>", "Text",ExpressionUUID->"6b9fed23-3d61-4248-84d5-32ccb7cebe85"],

Cell[BoxData[
 FormBox[
  RowBox[{"C", "=", 
   FractionBox[Cell[
    "number of closed ordered triplets",ExpressionUUID->
     "0f13a2e0-f93b-4977-94e2-e07c66ca82d3"], Cell[
    "number of connected ordered triplets",ExpressionUUID->
     "66965eb9-a4a4-4b46-a969-525518022e81"]]}], 
  TraditionalForm]], \
"DisplayFormula",ExpressionUUID->"759ab140-c398-45d4-aaa5-d5f27287b178"],

Cell["The available options are:", \
"Text",ExpressionUUID->"9735df42-2798-4487-9ab2-bc7805914067"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<ExcludeIsolates\>\"", "\[Rule]", "True"}]],ExpressionUUID->
  "f422237e-dc7d-40b8-8e56-4580e2516cda"],
 " will cause ",
 Cell[BoxData[
 "Indeterminate"],ExpressionUUID->"ec5de922-e9d4-4402-b980-4f542fb05551"],
 " to be returned if the graph has no connected triplets. With the default ",
 Cell[BoxData[
  RowBox[{"\"\<ExcludeIsolates\>\"", "\[Rule]", "False"}]],ExpressionUUID->
  "b3d6e7f9-f113-44bc-9050-ea8b1d0b6210"],
 ", ",
 Cell[BoxData["0"],ExpressionUUID->"703eae8e-c180-47fb-a9cb-36638ce0e349"],
 " is returned."
}], "Item",ExpressionUUID->"da2c5267-a7a4-4cf5-a694-8b770472b984"],

Cell[TextData[{
 "The following graph has 10 connected ordered triplets, namely {3, 1, 2}, \
{2, 1, 3}, {1, 2, 3}, {3, 2, 1}, {2, 3, 1}, {2, 3, 4}, {1, 3, 4}, {1, 3, 2}, \
{4, 3, 2}, {4, 3, 1}. Out of these, only 6 are closed: {1, 3, 2}, {1, 2, 3}, \
{2, 1, 3}, {2, 3, 1}, {3, 2, 1}, {3, 1, 2}. Thus the clustering coefficient \
is ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"6", "/", "10"}], "=", "0.6"}]],ExpressionUUID->
  "1425feab-b2dc-435d-9926-82563a2f80bf"],
 "."
}], "Text",ExpressionUUID->"cf1cd489-bc37-4cc5-ac26-f62cbee18f2f"],

Cell[BoxData[
 RowBox[{"IGGlobalClusteringCoefficient", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3, 4}, {Null, {{1, 2}, {2, 3}, {1, 3}, {3, 4}}}, {
       PerformanceGoal -> "Quality", VertexShapeFunction -> {"Name"}}]], 
     Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
        Directive[
         Opacity[0.7], 
         Hue[0.6, 0.7, 0.5]], 
        LineBox[{{
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$2", Automatic, Center]}, {
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$3", Automatic, Center]}, {
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$3", Automatic, Center]}, {
           DynamicLocation["VertexID$3", Automatic, Center], 
           DynamicLocation["VertexID$4", Automatic, Center]}}]}, {
        Directive[
         Hue[0.6, 0.2, 0.8], 
         EdgeForm[
          Directive[
           GrayLevel[0], 
           Opacity[0.7]]]], 
        TagBox[
         InsetBox[
          BoxData[
           FormBox[
            PaneBox["1", Alignment -> Center, ImageMargins -> 2], 
            TraditionalForm]], {0.0001964751172666146, 0.}, BaseStyle -> 
          "Graphics"], "DynamicName", BoxID -> "VertexID$1"], 
        TagBox[
         InsetBox[
          BoxData[
           FormBox[
            PaneBox["2", Alignment -> Center, ImageMargins -> 2], 
            TraditionalForm]], {0., 0.8475386976306538}, BaseStyle -> 
          "Graphics"], "DynamicName", BoxID -> "VertexID$2"], 
        TagBox[
         InsetBox[
          BoxData[
           FormBox[
            PaneBox["3", Alignment -> Center, ImageMargins -> 2], 
            TraditionalForm]], {0.9164048379140673, 0.42386488156829044`}, 
          BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$3"], 
        TagBox[
         InsetBox[
          BoxData[
           FormBox[
            PaneBox["4", Alignment -> Center, ImageMargins -> 2], 
            TraditionalForm]], {2.031430211699506, 0.42382043094346533`}, 
          BaseStyle -> "Graphics"], "DynamicName", BoxID -> 
         "VertexID$4"]}}], $CellContext`flag}, 
     TagBox[
      DynamicBox[GraphComputation`NetworkGraphicsBox[
       3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
       CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
        SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
       ImageSizeCache->{{0., 104.08203125}, {-32., 26.252228197079965`}}],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False,
     UnsavedVariables:>{$CellContext`flag}]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None,
   ImageSize->{105.08203125, Automatic}], 
  "]"}]], "Input",ExpressionUUID->"b60b4444-bc00-4a1a-a401-d478372dde1c"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGLocalClusteringCoefficient", \
"Subsubsection",ExpressionUUID->"c8f3a2bc-2856-4d6b-ba45-6d96356f54c3"],

Cell[BoxData[
 RowBox[{"?", 
  "IGLocalClusteringCoefficient"}]], \
"Input",ExpressionUUID->"8d072345-cd45-488c-9076-c1f34cd090e3"],

Cell["The local clustering coefficient of a vertex is defined as", \
"Text",ExpressionUUID->"99e412af-25dd-431c-8a43-fd8c7ac97583"],

Cell[BoxData[
 FormBox[
  RowBox[{"C", "=", 
   FractionBox[Cell[
    "number of connected pairs of neighbours",ExpressionUUID->
     "cb9d0f71-ba46-48e8-94d5-f63085bd4859"], Cell[
    "total number of pairs of neighbours",ExpressionUUID->
     "ba6c89d4-5712-4621-a4a7-6a23f43aebfb"]]}], 
  TraditionalForm]], \
"DisplayFormula",ExpressionUUID->"3bf9765e-06c7-4b7a-bef9-1d205018985f"],

Cell["The available options are:", \
"Text",ExpressionUUID->"2e5b1bf6-f087-4db9-8095-fd18418c857c"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<ExcludeIsolates\>\"", "\[Rule]", "True"}]],ExpressionUUID->
  "328cc884-7829-4891-a5d9-374270d927d0"],
 " will cause ",
 Cell[BoxData[
 "Indeterminate"],ExpressionUUID->"5eb89b5e-6c3f-4e60-9743-1b287c70f078"],
 " to be returned for degree 0 and degree 1 vertices. With the default ",
 Cell[BoxData[
  RowBox[{"\"\<ExcludeIsolates\>\"", "\[Rule]", "False"}]],ExpressionUUID->
  "69ad2c98-06a8-4809-ae3d-f5b70865f482"],
 ", ",
 Cell[BoxData["0"],ExpressionUUID->"bf27afc7-39b6-45c0-af78-cd251975f5ff"],
 " is returned."
}], "Item",ExpressionUUID->"00886621-b2d9-462a-845c-dd70f2d3fcf5"],

Cell[TextData[{
 "The the following graph, vertex 4 has two neighbours which are \
disconnected, making its local clustering zero. However, vertex 5 has only \
one neighbour, thus computing the local clustering for it arguably does not \
make sense. Setting ",
 Cell[BoxData[
  RowBox[{"\"\<ExcludeIsolates\>\"", "\[Rule]", "True"}]],ExpressionUUID->
  "2ee66d7c-c73c-431f-ba99-c7317dde8e79"],
 " serves to distinguish these two cases by returning ",
 Cell[BoxData[
 "Indeterminate"],ExpressionUUID->"fc0674c7-04bc-40f8-993f-5a1119169b55"],
 " for vertex 5."
}], "Text",ExpressionUUID->"0bcaa150-6712-4942-be75-b9320211bd09"],

Cell[BoxData[
 RowBox[{"IGLocalClusteringCoefficient", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3, 4, 5}, {
       Null, {{1, 2}, {2, 3}, {3, 1}, {3, 4}, {4, 5}}}, {
       PerformanceGoal -> "Quality", VertexShapeFunction -> {"Name"}}]], 
     Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
        Directive[
         Opacity[0.7], 
         Hue[0.6, 0.7, 0.5]], 
        LineBox[{{
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$2", Automatic, Center]}, {
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$3", Automatic, Center]}, {
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$3", Automatic, Center]}, {
           DynamicLocation["VertexID$3", Automatic, Center], 
           DynamicLocation["VertexID$4", Automatic, Center]}, {
           DynamicLocation["VertexID$4", Automatic, Center], 
           DynamicLocation["VertexID$5", Automatic, Center]}}]}, {
        Directive[
         Hue[0.6, 0.2, 0.8], 
         EdgeForm[
          Directive[
           GrayLevel[0], 
           Opacity[0.7]]]], 
        TagBox[
         InsetBox[
          BoxData[
           FormBox[
            PaneBox["1", Alignment -> Center, ImageMargins -> 2], 
            TraditionalForm]], {0.000018059905420253486`, 0.7591262731536502},
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$1"], 
        TagBox[
         InsetBox[
          BoxData[
           FormBox[
            PaneBox["2", Alignment -> Center, ImageMargins -> 2], 
            TraditionalForm]], {0., 0.}, BaseStyle -> "Graphics"], 
         "DynamicName", BoxID -> "VertexID$2"], 
        TagBox[
         InsetBox[
          BoxData[
           FormBox[
            PaneBox["3", Alignment -> Center, ImageMargins -> 2], 
            TraditionalForm]], {0.901365268948038, 0.3795553311958491}, 
          BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$3"], 
        TagBox[
         InsetBox[
          BoxData[
           FormBox[
            PaneBox["4", Alignment -> Center, ImageMargins -> 2], 
            TraditionalForm]], {2.107286247680164, 0.3795568797024618}, 
          BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$4"], 
        TagBox[
         InsetBox[
          BoxData[
           FormBox[
            PaneBox["5", Alignment -> Center, ImageMargins -> 2], 
            TraditionalForm]], {3.1351283587958543`, 0.37956108373120173`}, 
          BaseStyle -> "Graphics"], "DynamicName", BoxID -> 
         "VertexID$5"]}}], $CellContext`flag}, 
     TagBox[
      DynamicBox[GraphComputation`NetworkGraphicsBox[
       3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
       CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
        SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
       ImageSizeCache->{{0., 134.28515625}, {-27., 22.09386432542079}}],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False,
     UnsavedVariables:>{$CellContext`flag}]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None,
   ImageSize->{135.28515625, Automatic}], 
  "]"}]], "Input",ExpressionUUID->"560244d4-8485-48c5-ac92-c26a880e6902"],

Cell[BoxData[
 RowBox[{"IGLocalClusteringCoefficient", "[", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4, 5}, {
        Null, {{1, 2}, {2, 3}, {3, 1}, {3, 4}, {4, 5}}}, {
        PerformanceGoal -> "Quality", VertexShapeFunction -> {"Name"}}]], 
      Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         LineBox[{{
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$2", Automatic, Center]}, {
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}, {
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}, {
            DynamicLocation["VertexID$3", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}, {
            DynamicLocation["VertexID$4", Automatic, Center], 
            DynamicLocation["VertexID$5", Automatic, Center]}}]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["1", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0.000018059905420253486`, 
           0.7591262731536502}, BaseStyle -> "Graphics"], "DynamicName", 
          BoxID -> "VertexID$1"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["2", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0., 0.}, BaseStyle -> "Graphics"], 
          "DynamicName", BoxID -> "VertexID$2"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["3", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0.901365268948038, 0.3795553311958491}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$3"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["4", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {2.107286247680164, 0.3795568797024618}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$4"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["5", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {3.1351283587958543`, 0.37956108373120173`}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> 
          "VertexID$5"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        
        ImageSizeCache->{{0., 134.28515625}, {-27., 22.09386432542079}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{135.28515625, Automatic}], ",", 
   RowBox[{"\"\<ExcludeIsolates\>\"", "\[Rule]", "True"}]}], 
  "]"}]], "Input",ExpressionUUID->"913e11f9-9fc4-4668-a9ae-7bfc5605bd0a"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGAverageLocalClusteringCoefficient", \
"Subsubsection",ExpressionUUID->"59e7d1e1-d10a-4a9c-8f01-cfd942440183"],

Cell[BoxData[
 RowBox[{"?", 
  "IGAverageLocalClusteringCoefficient"}]], \
"Input",ExpressionUUID->"3ea255ef-cbdb-4375-8c6c-60c85fb308f0"],

Cell["The available options are:", \
"Text",ExpressionUUID->"87c14d0b-bacd-4804-ab08-671df8e20d60"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<ExcludeIsolates\>\"", "\[Rule]", "True"}]],ExpressionUUID->
  "cb534163-51a1-4294-bd24-834486743b6b"],
 " will cause degree 0 and degree 1 vertices to be excluded from the \
calculation."
}], "Item",ExpressionUUID->"62604e98-0873-4d87-9000-f080b88c0aac"],

Cell[TextData[{
 "With ",
 Cell[BoxData[
  RowBox[{"\"\<ExcludeIsolates\>\"", "\[Rule]", "True"}]],ExpressionUUID->
  "07d160f5-8309-43fc-9186-7f9ad00f7b2d"],
 ", the local clustering coefficient of vertex 4 will be excluded from the \
calculation of the average."
}], "Text",ExpressionUUID->"f2cfee2c-faa4-431e-863e-7a9d36a7f079"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"IGAverageLocalClusteringCoefficient", "[", 
    GraphicsBox[
     NamespaceBox["NetworkGraphics",
      DynamicModuleBox[{Typeset`graph = HoldComplete[
        Graph[{1, 2, 3, 4}, {Null, {{1, 2}, {2, 3}, {1, 3}, {3, 4}}}, {
         PerformanceGoal -> "Quality", VertexShapeFunction -> {"Name"}}]], 
       Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
          Directive[
           Opacity[0.7], 
           Hue[0.6, 0.7, 0.5]], 
          LineBox[{{
             DynamicLocation["VertexID$1", Automatic, Center], 
             DynamicLocation["VertexID$2", Automatic, Center]}, {
             DynamicLocation["VertexID$1", Automatic, Center], 
             DynamicLocation["VertexID$3", Automatic, Center]}, {
             DynamicLocation["VertexID$2", Automatic, Center], 
             DynamicLocation["VertexID$3", Automatic, Center]}, {
             DynamicLocation["VertexID$3", Automatic, Center], 
             DynamicLocation["VertexID$4", Automatic, Center]}}]}, {
          Directive[
           Hue[0.6, 0.2, 0.8], 
           EdgeForm[
            Directive[
             GrayLevel[0], 
             Opacity[0.7]]]], 
          TagBox[
           InsetBox[
            BoxData[
             FormBox[
              PaneBox["1", Alignment -> Center, ImageMargins -> 2], 
              TraditionalForm]], {0.0001964751172666146, 0.}, BaseStyle -> 
            "Graphics"], "DynamicName", BoxID -> "VertexID$1"], 
          TagBox[
           InsetBox[
            BoxData[
             FormBox[
              PaneBox["2", Alignment -> Center, ImageMargins -> 2], 
              TraditionalForm]], {0., 0.8475386976306538}, BaseStyle -> 
            "Graphics"], "DynamicName", BoxID -> "VertexID$2"], 
          TagBox[
           InsetBox[
            BoxData[
             FormBox[
              PaneBox["3", Alignment -> Center, ImageMargins -> 2], 
              TraditionalForm]], {0.9164048379140673, 0.42386488156829044`}, 
            BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$3"], 
          TagBox[
           InsetBox[
            BoxData[
             FormBox[
              PaneBox["4", Alignment -> Center, ImageMargins -> 2], 
              TraditionalForm]], {2.031430211699506, 0.42382043094346533`}, 
            BaseStyle -> "Graphics"], "DynamicName", BoxID -> 
           "VertexID$4"]}}], $CellContext`flag}, 
       TagBox[
        DynamicBox[GraphComputation`NetworkGraphicsBox[
         3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
         CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
          SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
         ImageSizeCache->{{0., 104.08203125}, {-32., 26.252228197079965`}}],
        MouseAppearanceTag["NetworkGraphics"]],
       AllowKernelInitialization->False,
       UnsavedVariables:>{$CellContext`flag}]],
     DefaultBaseStyle->{
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
     FormatType->TraditionalForm,
     FrameTicks->None,
     ImageSize->{105.08203125, Automatic}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"IGAverageLocalClusteringCoefficient", "[", 
    RowBox[{
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{1, 2, 3, 4}, {Null, {{1, 2}, {2, 3}, {1, 3}, {3, 4}}}, {
          PerformanceGoal -> "Quality", VertexShapeFunction -> {"Name"}}]], 
        Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
           Directive[
            Opacity[0.7], 
            Hue[0.6, 0.7, 0.5]], 
           LineBox[{{
              DynamicLocation["VertexID$1", Automatic, Center], 
              DynamicLocation["VertexID$2", Automatic, Center]}, {
              DynamicLocation["VertexID$1", Automatic, Center], 
              DynamicLocation["VertexID$3", Automatic, Center]}, {
              DynamicLocation["VertexID$2", Automatic, Center], 
              DynamicLocation["VertexID$3", Automatic, Center]}, {
              DynamicLocation["VertexID$3", Automatic, Center], 
              DynamicLocation["VertexID$4", Automatic, Center]}}]}, {
           Directive[
            Hue[0.6, 0.2, 0.8], 
            EdgeForm[
             Directive[
              GrayLevel[0], 
              Opacity[0.7]]]], 
           TagBox[
            InsetBox[
             BoxData[
              FormBox[
               PaneBox["1", Alignment -> Center, ImageMargins -> 2], 
               TraditionalForm]], {0.0001964751172666146, 0.}, BaseStyle -> 
             "Graphics"], "DynamicName", BoxID -> "VertexID$1"], 
           TagBox[
            InsetBox[
             BoxData[
              FormBox[
               PaneBox["2", Alignment -> Center, ImageMargins -> 2], 
               TraditionalForm]], {0., 0.8475386976306538}, BaseStyle -> 
             "Graphics"], "DynamicName", BoxID -> "VertexID$2"], 
           TagBox[
            InsetBox[
             BoxData[
              FormBox[
               PaneBox["3", Alignment -> Center, ImageMargins -> 2], 
               TraditionalForm]], {0.9164048379140673, 0.42386488156829044`}, 
             BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$3"], 
           
           TagBox[
            InsetBox[
             BoxData[
              FormBox[
               PaneBox["4", Alignment -> Center, ImageMargins -> 2], 
               TraditionalForm]], {2.031430211699506, 0.42382043094346533`}, 
             BaseStyle -> "Graphics"], "DynamicName", BoxID -> 
            "VertexID$4"]}}], $CellContext`flag}, 
        TagBox[
         DynamicBox[GraphComputation`NetworkGraphicsBox[
          3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
          CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
           SynchronousUpdating -> False, 
           TrackedSymbols :> {$CellContext`flag}},
          ImageSizeCache->{{0., 104.08203125}, {-32., 26.252228197079965`}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False,
        UnsavedVariables:>{$CellContext`flag}]],
      DefaultBaseStyle->{
       "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
        Hue[0.8, 1., 0.6]},
      FormatType->TraditionalForm,
      FrameTicks->None,
      ImageSize->{105.08203125, Automatic}], ",", 
     RowBox[{"\"\<ExcludeIsolates\>\"", "\[Rule]", "True"}]}], "]"}]}], 
  "}"}]], "Input",ExpressionUUID->"e6c4a761-b3f9-4164-8a0c-4b0b981a016e"],

Cell[TextData[{
 "When the graph has no vertices with degree of at least 2, and ",
 Cell[BoxData[
  RowBox[{"\"\<ExcludeIsolates\>\"", "\[Rule]", "True"}]],ExpressionUUID->
  "b35120fb-a1bb-43bb-80c5-9825811d65d2"],
 " is set, the result will be ",
 Cell[BoxData[
 "Indeterminate"],ExpressionUUID->"344701f8-5e63-44a6-9aec-3110a37bee91"],
 "."
}], "Text",ExpressionUUID->"416e9606-aa03-4f0c-aad9-a281a48a1b37"],

Cell[BoxData[
 RowBox[{"IGAverageLocalClusteringCoefficient", "[", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 4, 3}, {Null, {{1, 2}, {3, 4}}}, {
        VertexSize -> {Large}}]]}, 
      TagBox[
       GraphicsGroupBox[
        GraphicsComplexBox[{{1.12501, -0.12501}, {
         0.12501000000000007`, -0.12501}, {1.12501, -0.37503000000000003`}, {
         0.12501000000000007`, -0.37503000000000003`}}, {
          {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[0.], 
           ArrowBox[{{1, 2}, {3, 4}}, 0.05000400000000001]}, 
          {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
           DiskBox[1, 0.05000400000000001], DiskBox[2, 0.05000400000000001], 
           DiskBox[3, 0.05000400000000001], 
           DiskBox[4, 0.05000400000000001]}}]],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{73.46875, Automatic}], ",", 
   RowBox[{"\"\<ExcludeIsolates\>\"", "\[Rule]", "True"}]}], 
  "]"}]], "Input",ExpressionUUID->"c58a6738-3b62-426f-8583-1ff42b058bda"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGWeightedClusteringCoefficient", \
"Subsubsection",ExpressionUUID->"8c2865c1-87f7-4b50-b7da-c6b056a3f2f6"],

Cell[BoxData[
 RowBox[{"?", 
  "IGWeightedClusteringCoefficient"}]], \
"Input",ExpressionUUID->"5a772696-20ee-4d85-a4f9-6f17bb8b9478"],

Cell[TextData[{
 Cell[BoxData[
 "IGWeightedClusteringCoefficient"],ExpressionUUID->
  "7dd99d60-3ddd-4f27-8cf8-9ce5f9129706"],
 " computes the ",
 StyleBox["weighted",
  FontSlant->"Italic"],
 " local clustering coefficient. This function expects a weighted graph as \
input."
}], "Text",ExpressionUUID->"bd7dae8b-0f6a-4cc1-a93c-53bdbb98c056"],

Cell["The available options are:", \
"Text",ExpressionUUID->"8aa1d99d-ceec-40d7-bf2d-7bd42dfb3f16"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<ExcludeIsolates\>\"", "\[Rule]", "True"}]],ExpressionUUID->
  "5433ae79-8d9d-450e-ad5d-87241b261ed2"],
 " will cause ",
 Cell[BoxData[
 "Indeterminate"],ExpressionUUID->"ca592cae-2a80-45ed-87e3-12f3fe00defd"],
 " to be returned for degree 0 and degree 1 vertices. With the default ",
 Cell[BoxData[
  RowBox[{"\"\<ExcludeIsolates\>\"", "\[Rule]", "False"}]],ExpressionUUID->
  "624526ec-bc4a-49a0-b0ea-855a80a3897d"],
 ", ",
 Cell[BoxData["0"],ExpressionUUID->"88e6e41a-ad1f-4aab-b8e2-1f3fee9964cc"],
 " is returned."
}], "Item",ExpressionUUID->"7f7e65d4-bbad-4dcb-ac57-c5f4c297d77d"],

Cell[CellGroupData[{

Cell["References", \
"Subsubsubsection",ExpressionUUID->"d2063362-1fe5-460f-8a7f-524732fa507e"],

Cell[TextData[{
 "A. Barrat, M. Barth\[EAcute]lemy, R. Pastor-Satorras, and A. Vespignani, \
The architecture of complex weighted networks, PNAS 101, 3747 (2004). ",
 ButtonBox["https://dx.doi.org/10.1073/pnas.0400087101",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://dx.doi.org/10.1073/pnas.0400087101"], None},
  ButtonNote->"https://dx.doi.org/10.1073/pnas.0400087101"]
}], "Item",ExpressionUUID->"6bfc634a-983a-4d4b-9e8e-aff5ec175156"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Neighbour degrees", \
"Subsection",ExpressionUUID->"c492668c-ef5e-4d3f-81a8-12f3aad61f21"],

Cell[CellGroupData[{

Cell["IGAverageNeighborDegree", \
"Subsubsection",ExpressionUUID->"b9dd4bd5-b581-4f79-b523-6919f710fe09"],

Cell[BoxData[
 RowBox[{"?", 
  "IGAverageNeighborDegree"}]], \
"Input",ExpressionUUID->"674d7bb1-1462-4d4f-9b97-9e18f3294858"],

Cell[TextData[{
 Cell[BoxData[
 "IGAverageNeighborDegree"],ExpressionUUID->
  "e01b76f4-c6fb-43f6-8e8a-9afcb77c8c55"],
 " computes the average of the degrees of each vertex\[CloseCurlyQuote]s \
neighbours. In weighted graphs, a weighted average is used:"
}], "Text",ExpressionUUID->"1578861c-595b-4f5c-af78-b73b80079839"],

Cell[BoxData[
 FormBox[
  RowBox[{
   SubscriptBox["k", 
    RowBox[{"nn", ",", "u"}]], "=", 
   RowBox[{
    FractionBox["1", 
     SubscriptBox["s", "u"]], 
    RowBox[{
     UnderscriptBox["\[Sum]", "v"], 
     RowBox[{
      SubscriptBox["w", 
       RowBox[{"u", "\[InvisibleComma]", "v"}]], 
      SubscriptBox["k", "v"]}]}]}]}], 
  TraditionalForm]], \
"DisplayFormula",ExpressionUUID->"b758692e-471b-444f-a2b2-e5e8b99419df"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", 
    RowBox[{"nn", ",", "u"}]], TraditionalForm]],ExpressionUUID->
  "c35f8b08-eede-49cc-a3db-03f01ee214ef"],
 " denotes the average neighbour degree of vertex ",
 Cell[BoxData[
  FormBox["u", TraditionalForm]],ExpressionUUID->
  "a62c2e1c-3e53-4124-ac45-4da75a4d3b27"],
 ", ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "v"], TraditionalForm]],ExpressionUUID->
  "b072ed33-9b8c-4c9a-ac83-bb4a117e1962"],
 " is the degree of vertex ",
 Cell[BoxData[
  FormBox["v", TraditionalForm]],ExpressionUUID->
  "cabf4c3f-c28a-40ef-90f9-217bc1aa90ad"],
 ", ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["w", 
    RowBox[{"u", "\[InvisibleComma]", "v"}]], TraditionalForm]],
  ExpressionUUID->"0e52f422-9c48-403a-96cf-0f13a66d7014"],
 " is the weighted adjacency matrix, and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["s", "u"], "=", 
    RowBox[{
     SubscriptBox["\[Sum]", "v"], 
     SubscriptBox["w", 
      RowBox[{"u", "\[InvisibleComma]", "v"}]]}]}], TraditionalForm]],
  ExpressionUUID->"ecb40c58-4ee8-4339-baa4-937048149b0e"],
 " is the strength of vertex ",
 Cell[BoxData[
  FormBox["u", TraditionalForm]],ExpressionUUID->
  "215cd628-65d1-4c5d-8f63-7065a01b087d"],
 "."
}], "Text",ExpressionUUID->"3d1ce50e-b70d-48e0-83cf-204f852e6ab0"],

Cell[TextData[{
 Cell[BoxData[
 "IGAverageNeighborDegree"],ExpressionUUID->
  "3e38dd93-d4ac-42a3-8dcf-644b036eb0e6"],
 " is similar to ",
 Cell[BoxData[
 "MeanNeighborDegree"],ExpressionUUID->"88fe9f84-7255-4d78-8501-d07f9250fd2a"],
 ", with a few differences: it can compute the measure for only a subset of \
vertices, the interpretation of degrees and neighbours can be controlled \
independently in directed graphs, and for vertices which have no neighbours \
it returns ",
 Cell[BoxData[
 "Indeterminate"],ExpressionUUID->"1744ed40-f084-46e9-b25c-5b961ed4835a"],
 " instead of ",
 Cell[BoxData["0"],ExpressionUUID->"2b1bfa21-4d39-4622-8fb2-046817258363"],
 "."
}], "Text",ExpressionUUID->"9ffbabda-dcf6-4f01-a7f2-d938c5470c74"],

Cell["Average neighbour degree in a star graph:", \
"Text",ExpressionUUID->"fcedfd44-d7b2-43c4-889c-cbffc5973667"],

Cell[BoxData[
 RowBox[{"IGAverageNeighborDegree", "[", 
  RowBox[{"StarGraph", "[", "4", "]"}], 
  "]"}]], "Input",ExpressionUUID->"024428f3-1901-41e8-9920-241a011d3dc2"],

Cell["Compute the result only for vertices 1 and 3:", \
"Text",ExpressionUUID->"b2aa0df8-9f97-470c-a1be-2951c0c149fa"],

Cell[BoxData[
 RowBox[{"IGAverageNeighborDegree", "[", 
  RowBox[{
   RowBox[{"StarGraph", "[", "4", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}]}], 
  "]"}]], "Input",ExpressionUUID->"16384a6c-1749-431d-b7da-fdecd0e9e484"],

Cell[TextData[{
 Cell[BoxData["All"],ExpressionUUID->"873e41cc-9344-4f70-9243-c9a72a630031"],
 " computes the result for all vertices (the default):"
}], "Text",ExpressionUUID->"03b80780-2a55-4f72-8d57-766256fe63d2"],

Cell[BoxData[
 RowBox[{"IGAverageNeighborDegree", "[", 
  RowBox[{
   RowBox[{"StarGraph", "[", "4", "]"}], ",", "All"}], 
  "]"}]], "Input",ExpressionUUID->"598484e9-f1c0-476a-a365-b31692994d25"],

Cell[TextData[{
 "When a vertex has no neighbours, ",
 Cell[BoxData[
 "Indeterminate"],ExpressionUUID->"10fbfe83-cdae-428c-8b8e-ddac6b72fb84"],
 " is returned:"
}], "Text",ExpressionUUID->"20cdcfe7-ec89-4aec-8bd2-7812ddcffaab"],

Cell[BoxData[
 RowBox[{"IGAverageNeighborDegree", "[", 
  RowBox[{"IGShorthand", "[", "\"\<1,2-3\>\"", "]"}], 
  "]"}]], "Input",ExpressionUUID->"732a43bc-b70a-4eb5-a7ff-cc660f704432"],

Cell["\<\
In directed graphs, the out-degrees of out-neighbours are considered by \
default.\
\>", "Text",ExpressionUUID->"ec913708-3f7d-4952-914d-efa046074504"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3}, {{{1, 2}, {2, 3}, {3, 2}, {1, 3}}, Null}, {
        PerformanceGoal -> "Quality", VertexLabels -> {None}, 
         VertexShapeFunction -> {"Name"}}]], Typeset`boxes, 
      Typeset`boxes$s2d = GraphicsGroupBox[{{
         Arrowheads[Medium], 
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         ArrowBox[{
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$3", Automatic, Center]}], 
         ArrowBox[
          BezierCurveBox[{
            DynamicLocation["VertexID$2", Automatic, Center], {
            0.4994130552513483, 0.7015802851869208}, 
            DynamicLocation["VertexID$3", Automatic, Center]}]], 
         ArrowBox[
          BezierCurveBox[{
            DynamicLocation["VertexID$3", Automatic, Center], {
            0.5005806119590293, 1.0304596968158395`}, 
            DynamicLocation["VertexID$2", Automatic, Center]}]]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["1", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0.4969222205531905, 0.}, BaseStyle -> 
           "Graphics"], "DynamicName", BoxID -> "VertexID$1"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["2", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0.9999936672103749, 0.8642449493409465}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$2"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["3", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0., 0.8677950326618153}, BaseStyle -> 
           "Graphics"], "DynamicName", BoxID -> 
          "VertexID$3"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        
        ImageSizeCache->{{-3.239306690989907, 
         153.6650879409899}, {-81.4307910659899, 79.25184666813644}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{151.42578125, Automatic}]}], 
  ";"}]], "Input",ExpressionUUID->"98474855-57ef-4de7-bfba-3d2af9b4f14e"],

Cell[BoxData[
 RowBox[{"IGAverageNeighborDegree", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"342fee98-5012-48f2-a5cf-34633859ae9e"],

Cell["Use in-degrees of in-neighbours instead:", \
"Text",ExpressionUUID->"a7557b3b-87dd-4be9-b908-2bb9fde5f2fb"],

Cell[BoxData[
 RowBox[{"IGAverageNeighborDegree", "[", 
  RowBox[{"g", ",", "All", ",", "\"\<In\>\""}], 
  "]"}]], "Input",ExpressionUUID->"f5652d03-07f1-4870-9c32-fc0ec771f841"],

Cell["Use the in-degrees of all neighbours:", \
"Text",ExpressionUUID->"5f1d2cad-6b04-456c-b3f6-7c79dbb972f7"],

Cell[BoxData[
 RowBox[{"IGAverageNeighborDegree", "[", 
  RowBox[{"g", ",", "All", ",", "\"\<In\>\"", ",", "\"\<All\>\""}], 
  "]"}]], "Input",ExpressionUUID->"34864a2a-30e6-4884-9aaf-8c0fec1b27ef"],

Cell["\<\
Compute a weighted neighbour degree average. The weights used in averaging \
are taken from the edge weights:\
\>", "Text",ExpressionUUID->"a400b74d-5b4d-4091-9256-697cb8c60d55"],

Cell[BoxData[
 RowBox[{"IGAverageNeighborDegree", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3, 4, 5, 6}, {
       Null, {{1, 2}, {1, 3}, {1, 4}, {2, 5}, {2, 6}}}, {EdgeLabels -> {
          Placed["EdgeWeight", {0.5, {0, 0}}]}, EdgeStyle -> {
          GrayLevel[0]}, EdgeWeight -> {3, 1, 1, 2, 2}, GraphLayout -> 
        "SpringElectricalEmbedding", PerformanceGoal -> "Quality", 
        VertexLabels -> {
          Placed["Name", Center]}, VertexShapeFunction -> {"Circle"}, 
        VertexSize -> {0.3}, VertexStyle -> {
          RGBColor[1, 1, 
           Rational[5, 9]]}}]], Typeset`boxes, Typeset`boxes$s2d = 
     GraphicsGroupBox[{{
        Directive[
         Opacity[0.7], 
         Hue[0.6, 0.7, 0.5]], 
        GrayLevel[0], {
         TagBox[
          LineBox[{
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$2", Automatic, Center]}], "DynamicName",
           BoxID -> "EdgeLabelID$1"], 
         InsetBox[
          FormBox["3", TraditionalForm], 
          Offset[{0, 2}, 
           DynamicLocation["EdgeLabelID$1", Automatic, 
            Scaled[0.5]]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
         TagBox[
          LineBox[{
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}], "DynamicName",
           BoxID -> "EdgeLabelID$2"], 
         InsetBox[
          FormBox["1", TraditionalForm], 
          Offset[{0, 2}, 
           DynamicLocation["EdgeLabelID$2", Automatic, 
            Scaled[0.5]]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
         TagBox[
          LineBox[{
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}], "DynamicName",
           BoxID -> "EdgeLabelID$3"], 
         InsetBox[
          FormBox["1", TraditionalForm], 
          Offset[{0, 2}, 
           DynamicLocation["EdgeLabelID$3", Automatic, 
            Scaled[0.5]]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
         TagBox[
          LineBox[{
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$5", Automatic, Center]}], "DynamicName",
           BoxID -> "EdgeLabelID$4"], 
         InsetBox[
          FormBox["2", TraditionalForm], 
          Offset[{0, 2}, 
           DynamicLocation["EdgeLabelID$4", Automatic, 
            Scaled[0.5]]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
         TagBox[
          LineBox[{
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$6", Automatic, Center]}], "DynamicName",
           BoxID -> "EdgeLabelID$5"], 
         InsetBox[
          FormBox["2", TraditionalForm], 
          Offset[{0, 2}, 
           DynamicLocation["EdgeLabelID$5", Automatic, 
            Scaled[0.5]]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}}, {
        Directive[
         Hue[0.6, 0.2, 0.8], 
         EdgeForm[
          Directive[
           GrayLevel[0], 
           Opacity[0.7]]]], 
        RGBColor[1, 1, 
         NCache[
          Rational[5, 9], 0.5555555555555556]], 
        TagBox[{
          TagBox[
           
           DiskBox[{0.6947332795640055, 0.6470130629455074}, {
            0.1421869442898585, 0.1421869442898585}], "DynamicName", BoxID -> 
           "VertexID$1"], 
          InsetBox[
           FormBox["1", TraditionalForm], 
           DynamicLocation["VertexID$1", None, Center], BaseStyle -> 
           "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$1"], 
        TagBox[{
          TagBox[
           
           DiskBox[{1.879421887793725, 0.6470298527326553}, {
            0.1421869442898585, 0.1421869442898585}], "DynamicName", BoxID -> 
           "VertexID$2"], 
          InsetBox[
           FormBox["2", TraditionalForm], 
           DynamicLocation["VertexID$2", None, Center], BaseStyle -> 
           "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$2"], 
        TagBox[{
          TagBox[
           
           DiskBox[{0.00003490150546237025, 1.2919418550786128`}, {
            0.1421869442898585, 0.1421869442898585}], "DynamicName", BoxID -> 
           "VertexID$3"], 
          InsetBox[
           FormBox["3", TraditionalForm], 
           DynamicLocation["VertexID$3", None, Center], BaseStyle -> 
           "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$3"], 
        TagBox[{
          TagBox[
           
           DiskBox[{0., 0.0020974098976375144`}, {0.1421869442898585, 
            0.1421869442898585}], "DynamicName", BoxID -> "VertexID$4"], 
          InsetBox[
           FormBox["4", TraditionalForm], 
           DynamicLocation["VertexID$4", None, Center], BaseStyle -> 
           "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$4"], 
        TagBox[{
          TagBox[
           
           DiskBox[{2.573092452998493, 1.293967025986178}, {
            0.1421869442898585, 0.1421869442898585}], "DynamicName", BoxID -> 
           "VertexID$5"], 
          InsetBox[
           FormBox["5", TraditionalForm], 
           DynamicLocation["VertexID$5", None, Center], BaseStyle -> 
           "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$5"], 
        TagBox[{
          TagBox[
           
           DiskBox[{2.5729989917075393`, 0.}, {0.1421869442898585, 
            0.1421869442898585}], "DynamicName", BoxID -> "VertexID$6"], 
          InsetBox[
           FormBox["6", TraditionalForm], 
           DynamicLocation["VertexID$6", None, Center], BaseStyle -> 
           "Graphics"]}, "DynamicName", BoxID -> 
         "VertexLabelID$6"]}}], $CellContext`flag}, 
     TagBox[
      DynamicBox[GraphComputation`NetworkGraphicsBox[
       3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
       CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
        SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
       ImageSizeCache->{{1.841562500000001, 140.23656250000002`}, {-41.2721, 
        36.066603350505595`}}],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False,
     UnsavedVariables:>{$CellContext`flag}]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None,
   ImageSize->{143.078125, Automatic}], 
  "]"}]], "Input",ExpressionUUID->"93f4bdc1-dd9a-4f32-ab66-d85f2c0389b0"],

Cell[CellGroupData[{

Cell["References", \
"Subsubsubsection",ExpressionUUID->"b52e388a-9c30-4b51-9e87-fb71e28b17a9"],

Cell[TextData[{
 "A. Barrat, M. Barth\[EAcute]lemy, R. Pastor-Satorras, and A. Vespignani, \
The architecture of complex weighted networks, PNAS 101, 3747 (2004). ",
 ButtonBox["https://dx.doi.org/10.1073/pnas.0400087101",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://dx.doi.org/10.1073/pnas.0400087101"], None},
  ButtonNote->"https://dx.doi.org/10.1073/pnas.0400087101"]
}], "Item",ExpressionUUID->"8cc3b49c-4159-401f-8b6f-c3061c9cf9a4"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["IGAverageDegreeConnectivity", \
"Subsubsection",ExpressionUUID->"864904b7-0c38-404c-83a8-72bb640f8e07"],

Cell[BoxData[
 RowBox[{"?", 
  "IGAverageDegreeConnectivity"}]], \
"Input",ExpressionUUID->"5b52a006-f9cd-4bcb-b60b-0def985baaf2"],

Cell[TextData[{
 Cell[BoxData[
 "IGAverageDegreeConnectivity"],ExpressionUUID->
  "e5dfbf1e-3204-49bb-bb7d-591df60eecc7"],
 " computes the average neighbour degree as a function of the vertex degree. \
The ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "d1ff2ad5-a56c-46aa-8de8-69ed9ad70608"],
 "th element of the result is the average of the ",
 Cell[BoxData[
 "IGAverageNeighborDegree"],ExpressionUUID->
  "8a571e6c-b2c5-42cd-bc37-4d5403bec721"],
 " result for all vertices of degree ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "cfda4b60-eb61-4b91-afd4-1c7dd2cd0763"],
 "."
}], "Text",ExpressionUUID->"72b28cf7-29d8-4bdf-8e0f-7338a30eb681"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"RandomGraph", "[", 
    RowBox[{"{", 
     RowBox[{"30", ",", "50"}], "}"}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"71943cf8-2125-4870-9792-e9167788bfb7"],

Cell[BoxData[
 RowBox[{"IGAverageDegreeConnectivity", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"12a921c9-5bad-4212-8402-da5e52d2d72a"],

Cell[TextData[{
 "An equivalent implementation of ",
 Cell[BoxData[
 "IGAverageDegreeConnectivity"],ExpressionUUID->
  "ecf08ad3-28e0-4f88-bbb7-70662ed0c709"],
 " is:"
}], "Text",ExpressionUUID->"647f952f-321a-44e4-8723-eceb6006e226"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Transpose", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"VertexDegree", "[", "g", "]"}], ",", 
      RowBox[{"IGAverageNeighborDegree", "[", "g", "]"}]}], "}"}], "]"}], "//",
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"GroupBy", "[", 
     RowBox[{"#", ",", 
      RowBox[{"First", "\[Rule]", "Last"}], ",", "Mean"}], "]"}], "&"}]}], "//",
   "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Lookup", "[", 
    RowBox[{"#", ",", 
     RowBox[{"Range", "@", 
      RowBox[{"Max", "@", 
       RowBox[{"VertexDegree", "[", "g", "]"}]}]}], ",", "Indeterminate"}], 
    "]"}], "&"}]}]], \
"Input",ExpressionUUID->"5207aa9b-9e88-473f-b05b-af14ce19c0b7"],

Cell["\<\
Compute the average degree connectivity curve for a scale free network:\
\>", "Text",ExpressionUUID->"7bfbeb7a-f816-486b-946c-38f9a68fbeec"],

Cell[BoxData[
 RowBox[{"ListPlot", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"IGAverageDegreeConnectivity", "@", 
    RowBox[{"IGStaticPowerLawGame", "[", 
     RowBox[{"1000", ",", "2000", ",", "2"}], "]"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<degree\>\"", ",", "\"\<average neighbour degree\>\""}], 
     "}"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<Detailed\>\""}]}], 
  "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"b575f99d-83b2-4167-91a9-250d61377d32"],

Cell[CellGroupData[{

Cell["References", \
"Subsubsubsection",ExpressionUUID->"13cee4d0-e4e1-4331-9717-732beffe980d"],

Cell[TextData[{
 "A. Barrat, M. Barth\[EAcute]lemy, R. Pastor-Satorras, and A. Vespignani, \
The architecture of complex weighted networks, PNAS 101, 3747 (2004). ",
 ButtonBox["https://dx.doi.org/10.1073/pnas.0400087101",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://dx.doi.org/10.1073/pnas.0400087101"], None},
  ButtonNote->"https://dx.doi.org/10.1073/pnas.0400087101"]
}], "Item",ExpressionUUID->"b247a3ee-acd6-49b8-95f2-68abe9d1319e"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Shortest paths", \
"Subsection",ExpressionUUID->"10dedaaf-7fbb-4f1f-94f1-0c16b328e498"],

Cell["\<\
The length of a path between two vertices is the number of edges the path \
consists of. Functions that use edge weights consider the path length to be \
the sum of edge weights along the path.\
\>", "Text",ExpressionUUID->"047b60c9-abe3-415e-98d0-b6df82b04226"],

Cell[CellGroupData[{

Cell["IGDistanceMatrix", \
"Subsubsection",ExpressionUUID->"b935e1a4-c500-4077-a09e-2c407f6d79c2"],

Cell[BoxData[
 RowBox[{"?", 
  "IGDistanceMatrix"}]], \
"Input",ExpressionUUID->"bf38bf87-18e1-4a79-be24-1d24f448f6a4"],

Cell[TextData[{
 Cell[BoxData[
 "IGDistanceMatrix"],ExpressionUUID->"897fcbc6-29d2-436b-94fb-f47581065efb"],
 " takes the following ",
 Cell[BoxData[
 "Method"],ExpressionUUID->"9420b132-7829-413a-98d3-dbd681885ced"],
 " options:"
}], "Text",ExpressionUUID->"160a6897-8736-4ab5-ad4a-935b67ccdd70"],

Cell[TextData[{
 Cell[BoxData[
 "Automatic"],ExpressionUUID->"397e8bf6-836f-4098-8f4c-bc71dc4554d1"],
 " selects a method automatically. As of IGraph/M 0.5, ",
 Cell[BoxData[
 "\"\<Unweighted\>\""],ExpressionUUID->"d02a8df2-d9e6-4fb9-b993-562bc14c18ab"],
 " is selected for unweighted graphs, ",
 Cell[BoxData[
 "\"\<Dijkstra\>\""],ExpressionUUID->"ac5bea27-66bc-4a67-a53e-5bd2f6eafcc4"],
 " for weighted graphs with only positive weights, and ",
 Cell[BoxData[
 "\"\<Johnson\>\""],ExpressionUUID->"07dd10f2-678c-484a-8252-a9d590345bad"],
 " otherwise."
}], "Item",ExpressionUUID->"5be53772-aab1-44e8-8279-cd43e81a323d"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<Unweighted\>\""],ExpressionUUID->"63ccc5fd-9974-464e-b4cc-3ae0a34c1a46"],
 " ignores weights"
}], "Item",ExpressionUUID->"813c2943-b0b0-480e-88a9-1e7fc228e26b"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<Dijkstra\>\""],ExpressionUUID->"1ac42e9d-7968-4707-94a1-71459f69213a"],
 " uses Dijkstra\[CloseCurlyQuote]s algorithm. All weights must be \
non-negative."
}], "Item",ExpressionUUID->"d2ef51e3-9f35-41a0-a443-ea28e826ace2"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<BellmanFord\>\""],ExpressionUUID->
  "2d4edffb-bdd1-416c-b3a4-10a773db2b52"],
 " uses the Bellman\[Dash]Ford algorithm. Negative weights are supported but \
all cycles must have a non-negative total weight."
}], "Item",ExpressionUUID->"7030249d-91d0-4076-8695-1d96537e44fc"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<Johnson\>\""],ExpressionUUID->"253f4ca9-88df-432c-86a7-9281691733c9"],
 " uses the Johnson algorithm. Negative weights are supported but all cycles \
must have a non-negative total weight."
}], "Item",ExpressionUUID->"3a5925b9-214b-478a-b269-2ba1f8d16b53"],

Cell[TextData[{
 "The igraph C core may override explicit method settings when appropriate. \
For example, if the graph is not weighted, it always uses ",
 Cell[BoxData[
 "\"\<Unweighted\>\""],ExpressionUUID->"eacbf9d6-b3fe-4ddb-87b7-7066f01fb9e3"],
 "."
}], "Text",ExpressionUUID->"2dc4892e-443b-4ff7-9be5-aae5db4acd97"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGDistanceCounts", \
"Subsubsection",ExpressionUUID->"0e91f636-9386-4272-b276-f28fe8386464"],

Cell[BoxData[
 RowBox[{"?", 
  "IGDistanceCounts"}]], \
"Input",ExpressionUUID->"65975675-a228-4972-b425-eb5468013ce7"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGDistanceCounts", "[", "graph", "]"}]],ExpressionUUID->
  "b62f489b-0057-4d1d-8345-dd6627de17b4"],
 " counts all-pair ",
 StyleBox["unweighted",
  FontSlant->"Italic"],
 " shortest path lengths in the graph.",
 "\n",
 Cell[BoxData[
  RowBox[{"IGDistanceCounts", "[", 
   RowBox[{"graph", ",", " ", 
    RowBox[{"{", 
     RowBox[{
      SubscriptBox["v", "1"], ",", 
      SubscriptBox["v", "2"], ",", "\[Ellipsis]"}], "}"}]}], "]"}]],
  ExpressionUUID->"a2342ca7-c0da-42eb-8ff9-3f32ae27e4d7"],
 " counts unweighted shortest path lengths for paths starting at the given \
vertices."
}], "Text",ExpressionUUID->"41c5ccbd-380a-413a-999c-83f87b6d6594"],

Cell[TextData[{
 "For weighted path lengths, or to restrict the computation to both certain \
start and end vertex sets, use ",
 Cell[BoxData[
  RowBox[{"IGDistanceHistogram", "[", "]"}]],ExpressionUUID->
  "73910394-edb1-4e17-a2af-f5485f4da6e3"],
 "."
}], "Text",ExpressionUUID->"37cd4097-2acd-413b-8be5-8d31cd4cb60d"],

Cell[TextData[{
 "Compute how the shortest path length distribution changes as we rewire a \
grid graph ",
 Cell[BoxData["k"],ExpressionUUID->"a86dc571-63e7-4bac-b184-4e4bc6840b47"],
 " times."
}], "Text",ExpressionUUID->"696ffba3-971a-4ff2-b66b-8371a5799130"],

Cell[BoxData[
 RowBox[{"Table", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"ListPlot", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Normalize", "[", 
      RowBox[{
       RowBox[{"IGDistanceCounts", "@", 
        RowBox[{"IGRewire", "[", 
         RowBox[{
          RowBox[{"GridGraph", "[", 
           RowBox[{"{", 
            RowBox[{"50", ",", "50"}], "}"}], "]"}], ",", "k"}], "]"}]}], ",",
        "Total"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Joined", "\[Rule]", "True"}], ",", 
     RowBox[{"Filling", "\[Rule]", "Bottom"}], ",", 
     RowBox[{"PlotLabel", "\[Rule]", 
      RowBox[{
       RowBox[{"StringTemplate", "[", "\"\<rewiring steps: ``\>\"", "]"}], 
       "[", "k", "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"k", ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "5", ",", "10", ",", "20", ",", "50", ",", "100"}], 
      "}"}]}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"28d267c0-cc2f-4741-b7ef-23c2372556bd"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGNeighborhoodSize", \
"Subsubsection",ExpressionUUID->"dcbccaed-5065-4614-ab80-0b93ea3a958e"],

Cell[BoxData[
 RowBox[{"?", 
  "IGNeighborhoodSize"}]], \
"Input",ExpressionUUID->"2c10b222-eb81-48ee-9756-309b93102fbd"],

Cell[TextData[{
 Cell[BoxData[
 "IGNeighborhoodSize"],ExpressionUUID->"64484e32-e1a1-429b-bd92-964c2183ac72"],
 " returns the number of vertices reachable within a certain distance range \
from a given vertex, or from multiple given vertices."
}], "Text",ExpressionUUID->"ddfdea25-8df2-4c74-b618-1d37543bba1b"],

Cell["\<\
Scale vertices proportionally to the number of their second order neighbours:\
\
\>", "Text",ExpressionUUID->"696c373f-0dee-4346-ad8e-ef658f7f22c0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"IGBarabasiAlbertGame", "[", 
    RowBox[{"50", ",", "2", ",", 
     RowBox[{"DirectedEdges", "\[Rule]", "False"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{"IGVertexMap", "[", 
  RowBox[{
   RowBox[{"#", "&"}], ",", 
   RowBox[{"VertexSize", "->", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Rescale", "@", 
       RowBox[{"IGNeighborhoodSize", "[", 
        RowBox[{"#", ",", "All", ",", 
         RowBox[{"{", "2", "}"}]}], "]"}]}], "&"}], ")"}]}], ",", "g"}], 
  "]"}]}], "Input",ExpressionUUID->"63bad253-74ed-4d32-a5ad-e2f958431364"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGDistanceHistogram", \
"Subsubsection",ExpressionUUID->"c38bad31-b75c-4c75-acf3-bf5a3ba2e3d1"],

Cell[BoxData[
 RowBox[{"?", 
  "IGDistanceHistogram"}]], \
"Input",ExpressionUUID->"ba2f1ca5-72d1-4735-b7d4-2cf94e1746b5"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGDistanceHistogram", "[", "]"}]],ExpressionUUID->
  "25cb93a0-d64e-4f01-87d0-18219c1c0bc5"],
 " computes the weighted shortest path length histogram between the specified \
start and end vertex sets. The start and end vertex sets do not need to be \
the same. Note that if the graph is undirected, path lengths between ",
 Cell[BoxData["s"],ExpressionUUID->"9422f920-1242-49c6-81f8-e1d3e9037938"],
 " and ",
 Cell[BoxData["t"],ExpressionUUID->"209b6f0b-27fe-4494-9dbb-685c4105b967"],
 " will be double counted (from ",
 Cell[BoxData[
  RowBox[{"s", "\[Rule]", "t"}]],ExpressionUUID->
  "518d6efe-5cff-40d5-b18d-1120291315db"],
 " and ",
 Cell[BoxData[
  RowBox[{"t", "\[Rule]", "s"}]],ExpressionUUID->
  "37addf7a-c0f6-4e28-b3e4-db3325b48bb0"],
 ") if ",
 Cell[BoxData["s"],ExpressionUUID->"c59e870c-c922-4207-b5d4-0353fd6a4273"],
 " and ",
 Cell[BoxData["t"],ExpressionUUID->"4482b13f-f2a0-4b1e-b2f1-5c4171477d5f"],
 " appear both in the starting and ending vertex sets."
}], "Text",ExpressionUUID->"b7bc7c96-c8cd-4265-bcef-4dd007b8e114"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGDistanceHistogram", "[", "]"}]],ExpressionUUID->
  "db65ce64-e22e-41be-bed9-5eba5943c54f"],
 " is useful when the result of ",
 Cell[BoxData[
  RowBox[{"IGDistanceMatrix", "[", "]"}]],ExpressionUUID->
  "f78d2073-6335-4992-8f3f-ee40d282f28f"],
 " (or ",
 Cell[BoxData[
  RowBox[{"GraphDistanceMatrix", "[", "]"}]],ExpressionUUID->
  "2774db91-8839-4ad6-8a88-c700129d7421"],
 ") does not fit in memory."
}], "Text",ExpressionUUID->"8a3c36fc-2234-4d6d-b389-4c66916df2be"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGAveragePathLength", \
"Subsubsection",ExpressionUUID->"4686218b-7e7d-4770-b2c8-95babae094d9"],

Cell[BoxData[
 RowBox[{"?", 
  "IGAveragePathLength"}]], \
"Input",ExpressionUUID->"07d80361-a18a-4795-8674-0732f9da9159"],

Cell[TextData[{
 Cell[BoxData[
 "IGAveragePathLength"],ExpressionUUID->
  "a3ab37ea-a689-41b4-8e34-1d626d4da266"],
 " computes the average pairwise distances between vertices."
}], "Text",ExpressionUUID->"5b7e4e87-55a4-45b1-a337-2483de1ba098"],

Cell["Available options:", \
"Text",ExpressionUUID->"b9776f71-833e-4d04-9d6b-0d2f61bb6855"],

Cell[TextData[{
 Cell[BoxData[
 "Method"],ExpressionUUID->"9812d560-5d99-4409-ba88-de77fe394635"],
 " can take the values ",
 Cell[BoxData[
 "\"\<Unweighted\>\""],ExpressionUUID->"94d39361-8181-49bb-a8af-935c89d1e55d"],
 ", ",
 Cell[BoxData[
 "\"\<Dijkstra\>\""],ExpressionUUID->"8550eba6-07dd-473b-a8fd-90d05f0f2d99"],
 ", ",
 Cell[BoxData[
 "\"\<BellmanFord\>\""],ExpressionUUID->
  "cab4abfa-caef-494b-ad6e-05f5bcccb12d"],
 ", ",
 Cell[BoxData[
 "\"\<Johnson\>\""],ExpressionUUID->"ba48e652-ba9d-49f0-abcf-ebccdf4d69fc"],
 " and ",
 Cell[BoxData[
 "Automatic"],ExpressionUUID->"c9636e0e-84e4-4082-85ce-e76bfd697c1c"],
 ". ",
 Cell[BoxData[
 "Automatic"],ExpressionUUID->"9e5dbb61-d591-4721-8bc7-9470fff3c462"],
 " uses ",
 Cell[BoxData[
 "\"\<Unweighted\>\""],ExpressionUUID->"96bac560-e196-4c96-b77c-710cc7f91263"],
 " if no edge weights are present, ",
 Cell[BoxData[
 "\"\<Dijkstra\>\""],ExpressionUUID->"74bd284a-c478-4656-973a-efc3a4657e83"],
 " if all weights are non-negative and ",
 Cell[BoxData[
 "\"\<Johnson\>\""],ExpressionUUID->"f3330def-8ae8-471b-9bbe-a4d12a9e1820"],
 " otherwise."
}], "Item",ExpressionUUID->"ce1a6de3-fbfa-4259-8da6-fbe8f312789d"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<ByComponents\>\""],ExpressionUUID->
  "075a347f-48f5-4eb9-8bda-2d0494fcce61"],
 " controls how unconnected graphs are handled. If ",
 Cell[BoxData["False"],ExpressionUUID->"80649934-b6fe-46dc-8476-68c4af25b977"],
 ", ",
 Cell[BoxData[
 "Infinity"],ExpressionUUID->"45d83f3e-bf73-440b-9bfc-f34c4ed54e56"],
 " is returned. If ",
 Cell[BoxData[
 "True"],ExpressionUUID->"077588b5-10e8-4152-b8cd-c1641e647ee3"],
 ", vertex pairs between which there is no path are excluded from the \
calculation."
}], "Item",ExpressionUUID->"416ca61e-824b-41ad-af54-174096c98fa9"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGGirth", \
"Subsubsection",ExpressionUUID->"a4f28778-090d-4fcb-9375-fe3a0169e54d"],

Cell[BoxData[
 RowBox[{"?", 
  "IGGirth"}]], \
"Input",ExpressionUUID->"d00b4c74-2925-4d40-99db-5d615923fa94"],

Cell[TextData[{
 Cell[BoxData[
 "IGGirth"],ExpressionUUID->"6e089b82-8295-4610-b8af-aa535873f067"],
 " computes the girth of a graph, i.e. the length of its shortest cycle. ",
 Cell[BoxData[
 "IGGirth"],ExpressionUUID->"5046805d-576c-4ce4-98b6-fa229f25485f"],
 " ignores multi-edges and self-loops. Edge directions and edge weights are \
also ignored."
}], "Text",ExpressionUUID->"7e4bc648-2d31-4e76-83a3-a271d4ea68a3"],

Cell[BoxData[
 RowBox[{"IGGirth", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3, 4, 5}, {
       Null, {{1, 2}, {2, 3}, {3, 1}, {2, 4}, {4, 5}, {5, 3}}}, {VertexLabels -> {
          Placed["Name", Center]}, VertexShapeFunction -> {None}, 
        VertexSize -> {Large}}]]}, 
     TagBox[GraphicsGroupBox[{
        {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
         {Arrowheads[0.], 
          ArrowBox[{{1.944934484934091, 0.4869131293713701}, {
           1.0809082023413574`, 0.035904784667003864`}}, 0.1803414155696349]}, 
         {Arrowheads[0.], 
          ArrowBox[{{1.944934484934091, 0.4869131293713701}, {
           1.0809613151982074`, 0.9376118609509367}}, 0.1803414155696349]}, 
         {Arrowheads[0.], 
          ArrowBox[{{1.0809082023413574`, 0.035904784667003864`}, {
           1.0809613151982074`, 0.9376118609509367}}, 0.1803414155696349]}, 
         {Arrowheads[0.], 
          ArrowBox[{{1.0809082023413574`, 0.035904784667003864`}, {
           0.00007263143566471619, 0.}}, 0.1803414155696349]}, 
         {Arrowheads[0.], 
          ArrowBox[{{1.0809613151982074`, 0.9376118609509367}, {0., 
           0.9737145167850567}}, 0.1803414155696349]}, 
         {Arrowheads[0.], 
          ArrowBox[{{0.00007263143566471619, 0.}, {0., 0.9737145167850567}}, 
           0.1803414155696349]}}, 
        {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], {
          
          StyleBox[
           DiskBox[{1.944934484934091, 0.4869131293713701}, 
            0.1803414155696349],
           StripOnInput->False,
           ShowContents->False], 
          InsetBox["1", {1.944934484934091, 0.4869131293713701},
           BaseStyle->"Graphics"]}, {
          
          StyleBox[
           DiskBox[{1.0809082023413574, 0.035904784667003864}, 
            0.1803414155696349],
           StripOnInput->False,
           ShowContents->False], 
          InsetBox["2", {1.0809082023413574, 0.035904784667003864},
           BaseStyle->"Graphics"]}, {
          
          StyleBox[
           DiskBox[{1.0809613151982074, 0.9376118609509367}, 
            0.1803414155696349],
           StripOnInput->False,
           ShowContents->False], 
          InsetBox["3", {1.0809613151982074, 0.9376118609509367},
           BaseStyle->"Graphics"]}, {
          StyleBox[DiskBox[{0.00007263143566471619, 0.}, 0.1803414155696349],
           StripOnInput->False,
           ShowContents->False], InsetBox["4", {0.00007263143566471619, 0.},
           BaseStyle->"Graphics"]}, {
          StyleBox[DiskBox[{0., 0.9737145167850567}, 0.1803414155696349],
           StripOnInput->False,
           ShowContents->False], InsetBox["5", {0., 0.9737145167850567},
           BaseStyle->"Graphics"]}}}],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None,
   ImageSize->{101.66796875, Automatic}], 
  "]"}]], "Input",ExpressionUUID->"7700fbe0-bec6-4640-9f79-ebe08f73d6aa"],

Cell[TextData[{
 "If the graph has no cycles, ",
 Cell[BoxData[
 "\[Infinity]"],ExpressionUUID->"a6590a73-a48d-4f78-b983-627d6b740fad"],
 " is returned."
}], "Text",ExpressionUUID->"07600359-d2b5-4647-ac69-a1da0c22d11a"],

Cell[BoxData[
 RowBox[{"IGGirth", "@", 
  RowBox[{
  "IGShorthand", "[", "\"\<1-2\>\"", 
   "]"}]}]], "Input",ExpressionUUID->"ea618da4-5d9d-42b4-8aca-af0a32215537"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGDiameter and IGFindDiameter", \
"Subsubsection",ExpressionUUID->"8e6cdc2f-d3af-4714-b3be-eb90d72d07d1"],

Cell[BoxData[
 RowBox[{"?", 
  "IGDiameter"}]], \
"Input",ExpressionUUID->"359e3abf-c245-4837-8178-c62f116e8445"],

Cell["\<\
The diameter of a graph is the length of the longest shortest path between \
any two vertices.\
\>", "Text",ExpressionUUID->"c765727c-97fd-49d1-9557-f1e5a15666a2"],

Cell["The available options are:", \
"Text",ExpressionUUID->"2f237fd3-df8e-4d6e-8d54-d8fa54cda059"],

Cell[TextData[{
 Cell[BoxData[
 "Method"],ExpressionUUID->"e8575fe2-5efa-41b1-9793-e9857616949f"],
 " can take the values ",
 Cell[BoxData[
 "\"\<Unweighted\>\""],ExpressionUUID->"71adc33e-ef57-4eb1-8a71-f2c3fb7da5e2"],
 ", ",
 Cell[BoxData[
 "\"\<Dijkstra\>\""],ExpressionUUID->"d81425f0-8415-42c7-8677-d2a21010532a"],
 " or ",
 Cell[BoxData[
 "Automatic"],ExpressionUUID->"d0ca7577-2f10-4249-8013-34887f3b1294"],
 ". ",
 Cell[BoxData[
 "\"\<Dijkstra\>\""],ExpressionUUID->"f4659918-f7b3-4a14-a648-aa030754e290"],
 " takes edge weights into account. ",
 Cell[BoxData[
 "Automatic"],ExpressionUUID->"64ef51e5-2fac-45e2-8998-eca2b926ace6"],
 " chooses based on whether the graph is weighted."
}], "Item",ExpressionUUID->"5c026d0d-9d08-497b-a456-cad1e2c600a5"],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
 "\"\<ByComponents\>\""],ExpressionUUID->
  "a0dedacd-6351-436f-a6fd-b269afe8308e"],
 " controls how unconnected graphs are handled. If ",
 Cell[BoxData["False"],ExpressionUUID->"5d1a8f18-6712-41d2-8084-a25706a91564"],
 ", ",
 Cell[BoxData[
 "Infinity"],ExpressionUUID->"e3d040a3-0ec3-47b5-9cb9-9cfa06ed4f20"],
 " is returned. If ",
 Cell[BoxData[
 "True"],ExpressionUUID->"5222b9b1-8092-4b25-bc53-6e4f4b971890"],
 ", the longest shortest path is returned. In the undirected case, this is \
the largest diameter of any connected component."
}], "Item",ExpressionUUID->"72ccc55c-8d0d-49c6-a3ec-9f33316a31d5"],

Cell[BoxData[
 RowBox[{"IGDiameter", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3, 4, 5}, {
       Null, {{1, 2}, {2, 3}, {3, 1}, {2, 4}, {4, 5}, {5, 3}}}, {VertexLabels -> {
          Placed["Name", Center]}, VertexShapeFunction -> {None}, 
        VertexSize -> {Large}}]]}, 
     TagBox[GraphicsGroupBox[{
        {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
         {Arrowheads[0.], 
          ArrowBox[{{1.944934484934091, 0.4869131293713701}, {
           1.0809082023413574`, 0.035904784667003864`}}, 0.1803414155696349]}, 
         {Arrowheads[0.], 
          ArrowBox[{{1.944934484934091, 0.4869131293713701}, {
           1.0809613151982074`, 0.9376118609509367}}, 0.1803414155696349]}, 
         {Arrowheads[0.], 
          ArrowBox[{{1.0809082023413574`, 0.035904784667003864`}, {
           1.0809613151982074`, 0.9376118609509367}}, 0.1803414155696349]}, 
         {Arrowheads[0.], 
          ArrowBox[{{1.0809082023413574`, 0.035904784667003864`}, {
           0.00007263143566471619, 0.}}, 0.1803414155696349]}, 
         {Arrowheads[0.], 
          ArrowBox[{{1.0809613151982074`, 0.9376118609509367}, {0., 
           0.9737145167850567}}, 0.1803414155696349]}, 
         {Arrowheads[0.], 
          ArrowBox[{{0.00007263143566471619, 0.}, {0., 0.9737145167850567}}, 
           0.1803414155696349]}}, 
        {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], {
          
          StyleBox[
           DiskBox[{1.944934484934091, 0.4869131293713701}, 
            0.1803414155696349],
           StripOnInput->False,
           ShowContents->False], 
          InsetBox["1", {1.944934484934091, 0.4869131293713701},
           BaseStyle->"Graphics"]}, {
          
          StyleBox[
           DiskBox[{1.0809082023413574, 0.035904784667003864}, 
            0.1803414155696349],
           StripOnInput->False,
           ShowContents->False], 
          InsetBox["2", {1.0809082023413574, 0.035904784667003864},
           BaseStyle->"Graphics"]}, {
          
          StyleBox[
           DiskBox[{1.0809613151982074, 0.9376118609509367}, 
            0.1803414155696349],
           StripOnInput->False,
           ShowContents->False], 
          InsetBox["3", {1.0809613151982074, 0.9376118609509367},
           BaseStyle->"Graphics"]}, {
          StyleBox[DiskBox[{0.00007263143566471619, 0.}, 0.1803414155696349],
           StripOnInput->False,
           ShowContents->False], InsetBox["4", {0.00007263143566471619, 0.},
           BaseStyle->"Graphics"]}, {
          StyleBox[DiskBox[{0., 0.9737145167850567}, 0.1803414155696349],
           StripOnInput->False,
           ShowContents->False], InsetBox["5", {0., 0.9737145167850567},
           BaseStyle->"Graphics"]}}}],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None,
   ImageSize->{101.66796875, Automatic}], 
  "]"}]], "Input",ExpressionUUID->"7992f9e2-8a1d-4b56-8f43-7ff804755b58"]
}, Open  ]],

Cell[TextData[{
 "For the null graph, ",
 Cell[BoxData[
 "Indeterminate"],ExpressionUUID->"d159fd08-a845-44d7-9f2c-b55fe8752423"],
 " is returned."
}], "Text",ExpressionUUID->"b25e819a-3fee-4b8a-bd59-ee028a020470"],

Cell[BoxData[
 RowBox[{"IGDiameter", "[", 
  RowBox[{"IGEmptyGraph", "[", "]"}], 
  "]"}]], "Input",ExpressionUUID->"15266397-969b-4872-9c6d-10710e432abd"],

Cell[BoxData[
 RowBox[{"?", 
  "IGFindDiameter"}]], \
"Input",ExpressionUUID->"609ce17c-112b-4070-8e1f-d1ac451e5107"],

Cell[BoxData[
 RowBox[{"IGFindDiameter", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3, 4, 5}, {
       Null, {{1, 2}, {2, 3}, {3, 1}, {2, 4}, {4, 5}, {5, 3}}}, {VertexLabels -> {
          Placed["Name", Center]}, VertexShapeFunction -> {None}, 
        VertexSize -> {Large}}]]}, 
     TagBox[GraphicsGroupBox[{
        {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
         {Arrowheads[0.], 
          ArrowBox[{{1.944934484934091, 0.4869131293713701}, {
           1.0809082023413574`, 0.035904784667003864`}}, 0.1803414155696349]}, 
         {Arrowheads[0.], 
          ArrowBox[{{1.944934484934091, 0.4869131293713701}, {
           1.0809613151982074`, 0.9376118609509367}}, 0.1803414155696349]}, 
         {Arrowheads[0.], 
          ArrowBox[{{1.0809082023413574`, 0.035904784667003864`}, {
           1.0809613151982074`, 0.9376118609509367}}, 0.1803414155696349]}, 
         {Arrowheads[0.], 
          ArrowBox[{{1.0809082023413574`, 0.035904784667003864`}, {
           0.00007263143566471619, 0.}}, 0.1803414155696349]}, 
         {Arrowheads[0.], 
          ArrowBox[{{1.0809613151982074`, 0.9376118609509367}, {0., 
           0.9737145167850567}}, 0.1803414155696349]}, 
         {Arrowheads[0.], 
          ArrowBox[{{0.00007263143566471619, 0.}, {0., 0.9737145167850567}}, 
           0.1803414155696349]}}, 
        {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], {
          
          StyleBox[
           DiskBox[{1.944934484934091, 0.4869131293713701}, 
            0.1803414155696349],
           StripOnInput->False,
           ShowContents->False], 
          InsetBox["1", {1.944934484934091, 0.4869131293713701},
           BaseStyle->"Graphics"]}, {
          
          StyleBox[
           DiskBox[{1.0809082023413574, 0.035904784667003864}, 
            0.1803414155696349],
           StripOnInput->False,
           ShowContents->False], 
          InsetBox["2", {1.0809082023413574, 0.035904784667003864},
           BaseStyle->"Graphics"]}, {
          
          StyleBox[
           DiskBox[{1.0809613151982074, 0.9376118609509367}, 
            0.1803414155696349],
           StripOnInput->False,
           ShowContents->False], 
          InsetBox["3", {1.0809613151982074, 0.9376118609509367},
           BaseStyle->"Graphics"]}, {
          StyleBox[DiskBox[{0.00007263143566471619, 0.}, 0.1803414155696349],
           StripOnInput->False,
           ShowContents->False], InsetBox["4", {0.00007263143566471619, 0.},
           BaseStyle->"Graphics"]}, {
          StyleBox[DiskBox[{0., 0.9737145167850567}, 0.1803414155696349],
           StripOnInput->False,
           ShowContents->False], InsetBox["5", {0., 0.9737145167850567},
           BaseStyle->"Graphics"]}}}],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None,
   ImageSize->{101.66796875, Automatic}], 
  "]"}]], "Input",ExpressionUUID->"fb5edda6-1396-4529-b024-0243f3f15ac1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{
    TemplateBox[{"\"dodecahedral graph\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Graph\"", ",", "\"DodecahedralGraph\""}], "]"}], 
      "\"Entity[\\\"Graph\\\", \\\"DodecahedralGraph\\\"]\"", "\"graph\""},
     "Entity"], "[", "\"\<Graph\>\"", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.70385392413232*^9, 
  3.703853924811719*^9}},ExpressionUUID->"c1db7b73-7e71-4d78-9aeb-\
5b4ade423194"],

Cell[BoxData[
 RowBox[{"HighlightGraph", "[", 
  RowBox[{"g", ",", 
   RowBox[{"PathGraph", "@", 
    RowBox[{"IGFindDiameter", "[", "g", "]"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"GraphHighlightStyle", "\[Rule]", "\"\<DehighlightFade\>\""}], ",", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<RoyalColor\>\""}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.703853913860821*^9, 3.7038539543811827`*^9}, {
  3.7038539870119467`*^9, 3.7038540680323544`*^9}, {3.703854120785037*^9, 
  3.703854161189163*^9}},ExpressionUUID->"5033ef36-a981-4a9a-a61c-\
f7668e6c9bbb"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGEccentricity", \
"Subsubsection",ExpressionUUID->"df3a682f-780b-4ec4-864e-b675bfc7eb4c"],

Cell[BoxData[
 RowBox[{"?", 
  "IGEccentricity"}]], \
"Input",ExpressionUUID->"7c95587f-bb56-48eb-a7eb-7de481add4c9"],

Cell[TextData[{
 "The eccentricity of a vertex is the longest shortest path to any other \
vertex. ",
 Cell[BoxData[
 "IGEccentricity"],ExpressionUUID->"b573ce16-fab8-45d5-ac9b-a7956293f0e4"],
 " computes the ",
 StyleBox["unweighted",
  FontSlant->"Italic"],
 " eccentricity of each vertex within the connected component where it is \
contained. "
}], "Text",ExpressionUUID->"27b683b9-8bef-47a4-b163-2d670c32cc27"],

Cell[BoxData[
 RowBox[{"IGEccentricity", "@", 
  RowBox[{
  "CycleGraph", "[", "8", 
   "]"}]}]], "Input",ExpressionUUID->"a07934e7-1800-4a8e-9aaf-01258b1dd926"],

Cell["Connected components are considered separately.", \
"Text",ExpressionUUID->"60d40d4a-c619-4e2f-9211-2cb8741764a0"],

Cell[BoxData[
 RowBox[{"IGEccentricity", "[", 
  RowBox[{"IGDisjointUnion", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"CycleGraph", "[", "3", "]"}], ",", 
     RowBox[{"CycleGraph", "[", "8", "]"}]}], "}"}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"a228ff73-f72c-4317-884a-f797c0f0e82f"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGRadius", \
"Subsubsection",ExpressionUUID->"36e4540e-7112-414a-95f0-63a91eb028da"],

Cell[BoxData[
 RowBox[{"?", 
  "IGRadius"}]], \
"Input",ExpressionUUID->"99e256e2-e5f3-4151-abaf-9630d1c82a59"],

Cell["\<\
The radius of a graph is the smallest eccentricity of any of its vertices, \
i.e. the eccentricity of the graph center.\
\>", "Text",ExpressionUUID->"f0b63ee0-641b-4665-901a-067ae645abd4"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGVoronoiCells", \
"Subsubsection",ExpressionUUID->"21b55363-eb69-4a99-9205-45043b84708a"],

Cell[BoxData[
 RowBox[{"?", 
  "IGVoronoiCells"}]], \
"Input",ExpressionUUID->"770dbd5d-2657-46d2-b686-deaeae448543"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGVoronoiCells", "[", 
   RowBox[{"graph", ",", " ", "centers"}], "]"}]],ExpressionUUID->
  "97850f51-32ec-4fe5-831a-d11e2b1d136e"],
 " partitions a graph\[CloseCurlyQuote]s vertices into groups based on which \
given centre vertex they are the closest to. Edge weights are considered for \
the distance calculations."
}], "Text",ExpressionUUID->"4dde33e5-6114-4d40-9cf9-04fc0d62ce60"],

Cell["Available options:", \
"Text",ExpressionUUID->"93b2ef00-5a57-4709-baca-9e898a2f1b4d"],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
 "\"\<Tiebreaker\>\""],ExpressionUUID->"2025f98c-8d17-4d9b-82ce-4c59053371fb"],
 " sets the function used to decide which cell a vertex should belong to if \
its distance to several different centres is equal. The default is to use the \
first qualifying cell. Possible useful settings are ",
 Cell[BoxData["First"],ExpressionUUID->"85219004-dd6a-4afa-8713-f02fd047fb87"],
 ", ",
 Cell[BoxData[
 "Last"],ExpressionUUID->"e0c0b1ce-4569-461a-879e-0568a9b3a436"],
 ", ",
 Cell[BoxData[
 "RandomChoice"],ExpressionUUID->"32d48fc7-b67c-4066-ad65-b40e9f0daa6a"],
 "."
}], "Item",ExpressionUUID->"03e1b8e8-882c-4ea7-8397-efed40ecb6a3"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"PathGraph", "[", 
   RowBox[{
    RowBox[{"Range", "[", "5", "]"}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}], ",", 
    RowBox[{"VertexSize", "\[Rule]", "Medium"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"9140a377-b7af-4549-8062-f373773769a9"],

Cell[BoxData[
 RowBox[{"IGVoronoiCells", "[", 
  RowBox[{"g", ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4"}], "}"}]}], 
  "]"}]], "Input",ExpressionUUID->"86621af2-6b57-4d78-803b-8ef2eca2a413"],

Cell[BoxData[
 RowBox[{"HighlightGraph", "[", 
  RowBox[{"g", ",", 
   RowBox[{"Values", "[", "%", "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"5deee6e1-e576-453d-ac7e-0313523b2755"]
}, Open  ]],

Cell["\<\
In the event of a tie, a vertex is added to the first qualifying cell. The \
tiebreaker function can be changed as below.\
\>", "Text",ExpressionUUID->"d0c6f6c7-681b-4246-9db1-a22391b0ea5c"],

Cell[BoxData[
 RowBox[{"IGVoronoiCells", "[", 
  RowBox[{"g", ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4"}], "}"}], ",", 
   RowBox[{"\"\<Tiebreaker\>\"", "\[Rule]", "Last"}]}], 
  "]"}]], "Input",ExpressionUUID->"1ea1c86d-6143-4fdd-bcb2-550783665cf9"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"IGVoronoiCells", "[", 
    RowBox[{"g", ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4"}], "}"}], ",", 
     RowBox[{"\"\<Tiebreaker\>\"", "\[Rule]", "RandomChoice"}]}], "]"}], ",", 
   
   RowBox[{"{", "5", "}"}]}], 
  "]"}]], "Input",ExpressionUUID->"dd64bbfe-75dc-41cc-b959-0361971dd207"],

Cell["Find Voronoi cells on a grid.", \
"Text",ExpressionUUID->"d76cbd13-a569-4772-8aad-83e8b3a67e27"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"GridGraph", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"10", ",", "10"}], "}"}], ",", 
     RowBox[{"VertexSize", "\[Rule]", "Medium"}], ",", 
     RowBox[{"GraphStyle", "\[Rule]", "\"\<BasicBlack\>\""}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"centers", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"VertexList", "[", "g", "]"}], ",", "3"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"HighlightGraph", "[", 
  RowBox[{"g", ",", "\[IndentingNewLine]", 
   RowBox[{"Append", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"Subgraph", "[", 
        RowBox[{"g", ",", "#"}], "]"}], "&"}], "/@", 
      RowBox[{"Values", "@", 
       RowBox[{"IGVoronoiCells", "[", 
        RowBox[{"g", ",", "centers"}], "]"}]}]}], ",", "\[IndentingNewLine]", 
     
     RowBox[{"Style", "[", 
      RowBox[{"centers", ",", "Black"}], "]"}]}], "\[IndentingNewLine]", 
    "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"GraphHighlightStyle", "\[Rule]", "\"\<DehighlightHide\>\""}]}], 
  "\[IndentingNewLine]", 
  "]"}]}], "Input",ExpressionUUID->"2d488e84-d8ac-4b33-b681-7a67dc2a8834"],

Cell["Edge weights are interpreted as distances.", \
"Text",ExpressionUUID->"d2d648c7-0800-4c18-8c8b-197303bfbb82"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"IGMeshGraph", "@", 
    RowBox[{"DelaunayMesh", "@", 
     RowBox[{"RandomPoint", "[", 
      RowBox[{
       RowBox[{"Disk", "[", "]"}], ",", "200"}], "]"}]}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"centers", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"VertexList", "[", "g", "]"}], ",", "3"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"HighlightGraph", "[", 
  RowBox[{"g", ",", "\[IndentingNewLine]", 
   RowBox[{"Append", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"Subgraph", "[", 
        RowBox[{"g", ",", "#"}], "]"}], "&"}], "/@", 
      RowBox[{"Values", "@", 
       RowBox[{"IGVoronoiCells", "[", 
        RowBox[{"g", ",", "centers"}], "]"}]}]}], ",", "\[IndentingNewLine]", 
     
     RowBox[{"Style", "[", 
      RowBox[{"centers", ",", "Black"}], "]"}]}], "\[IndentingNewLine]", 
    "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"GraphHighlightStyle", "\[Rule]", "\"\<DehighlightGray\>\""}]}], 
  "\[IndentingNewLine]", 
  "]"}]}], "Input",ExpressionUUID->"b8442e40-fb1a-457f-848b-3ff49a6906de"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Efficiency measures", \
"Subsection",ExpressionUUID->"62527cf2-2e28-4a79-8961-47608a54d80b"],

Cell[CellGroupData[{

Cell["IGGlobalEfficiency", \
"Subsubsection",ExpressionUUID->"5d98923c-8a7f-41fa-bc9f-893577cdcdbc"],

Cell[BoxData[
 RowBox[{"?", 
  "IGGlobalEfficiency"}]], \
"Input",ExpressionUUID->"901e2be3-bc26-49bc-95f3-cc2d8ac067da"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGGlobalEfficiency", "[", "graph", "]"}]],ExpressionUUID->
  "2dc26820-31d1-4fa5-9a57-b6035c790d6d"],
 " computes the global efficiency of a graph. The global efficiency is \
defined as the average inverse shortest path length between all pairs of \
vertices,"
}], "Text",ExpressionUUID->"fe6b836c-af27-4532-afe2-5138e812a6d7"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    SubscriptBox["E", "global"], "=", 
    RowBox[{
     FractionBox["1", 
      RowBox[{"V", "(", 
       RowBox[{"V", "-", "1"}], ")"}]], 
     RowBox[{
      UnderscriptBox["\[Sum]", 
       RowBox[{"u", ",", "v"}]], 
      FractionBox["1", 
       SubscriptBox["d", 
        RowBox[{"u", "\[InvisibleComma]", "v"}]]]}]}]}], ","}], 
  TraditionalForm]], \
"DisplayFormula",ExpressionUUID->"377cd965-3387-4719-afb3-8b95e06cadd5"],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["d", 
    RowBox[{"u", "\[InvisibleComma]", "v"}]], TraditionalForm]],
  ExpressionUUID->"5b642846-6993-465d-abbd-bf8ea01289b0"],
 " is the graph distance from vertex ",
 Cell[BoxData[
  FormBox["u", TraditionalForm]],ExpressionUUID->
  "f941908b-ccf9-4229-8788-5e9a2a623ecc"],
 " to vertex ",
 Cell[BoxData[
  FormBox["v", TraditionalForm]],ExpressionUUID->
  "e003db6d-678f-44a0-badc-811cbffe3ca1"],
 " and ",
 Cell[BoxData[
  FormBox["V", TraditionalForm]],ExpressionUUID->
  "66e447d6-c5ea-48f5-b172-5e49bf90972a"],
 " is the number of vertices. When ",
 Cell[BoxData[
  FormBox["v", TraditionalForm]],ExpressionUUID->
  "980675b2-aa6c-44d7-903b-2fda4c6d1149"],
 " is not reachable from ",
 Cell[BoxData[
  FormBox["u", TraditionalForm]],ExpressionUUID->
  "291ed0c4-384f-448c-8ffa-6992959f5997"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"1", "/", 
    SubscriptBox["d", 
     RowBox[{"u", "\[InvisibleComma]", "v"}]]}], TraditionalForm]],
  ExpressionUUID->"2d544407-8a7d-4192-bd05-f1c1e79fcc8b"],
 " is taken to be 0."
}], "Text",ExpressionUUID->"fbfe3193-fa4f-450a-a2eb-5bef5b138e24"],

Cell["Available options:", \
"Text",ExpressionUUID->"23b9723e-e61e-461b-a02d-8fe28f09fccb"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "False"}]],ExpressionUUID->
  "a54d0b4c-b105-4eb1-aea0-3cd620522432"],
 " ignores edge directions when computing shortest path lengths."
}], "Item",ExpressionUUID->"720b9fad-0d1c-4b0e-bddc-c89dcf37cc28"],

Cell["Compute the global efficiency of a network \[Ellipsis]", \
"Text",ExpressionUUID->"b14a6e10-d437-4db8-8e8a-9655451a3cbb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<NetworkGraph\>\"", ",", "\"\<ProteinInteraction\>\""}], 
     "}"}], "]"}]}], ";"}], "\n", 
 RowBox[{"IGGlobalEfficiency", "[", "g", 
  "]"}]}], "Input",ExpressionUUID->"293a4ce8-6c57-4185-b481-ed1c78390ecd"],

Cell["\[Ellipsis] and that of its spanning tree.", \
"Text",ExpressionUUID->"0cc00cb3-f68e-4738-8ddf-e7d57d284d69"],

Cell[BoxData[
 RowBox[{"IGGlobalEfficiency", "@", 
  RowBox[{
  "IGSpanningTree", "[", "g", 
   "]"}]}]], "Input",ExpressionUUID->"094ce0b6-6cef-47e8-b4bc-879c309527bc"],

Cell[CellGroupData[{

Cell["References", \
"Subsubsubsection",ExpressionUUID->"94f9db82-1cbc-46ef-bb35-2ea4d9251e28"],

Cell[TextData[{
 "V. Latora and M. Marchiori, Efficient behavior of small-world networks, \
Phys. Rev. Lett. 87, 198701 (2001). ",
 ButtonBox["https://dx.doi.org/10.1103/PhysRevLett.87.198701",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://dx.doi.org/10.1103/PhysRevLett.87.198701"], None},
  ButtonNote->"https://dx.doi.org/10.1103/PhysRevLett.87.198701"]
}], "Item",ExpressionUUID->"e41451f4-93e7-44e9-b34a-e40af123acb5"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["IGLocalEfficiency ", \
"Subsubsection",ExpressionUUID->"baa71fa6-cca4-4f68-80cf-da37abc38aee"],

Cell[BoxData[
 RowBox[{"?", 
  "IGLocalEfficiency"}]], \
"Input",ExpressionUUID->"b7f31528-57f5-4b53-9ae3-eb7c68bbb976"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGLocalEfficiency", "[", "graph", "]"}]],ExpressionUUID->
  "5066fedd-57a7-4061-8a1d-b9b8f2edda78"],
 " computes the local efficiency around each vertex of a graph. The local \
efficiency around a vertex ",
 Cell[BoxData[
  FormBox["u", TraditionalForm]],ExpressionUUID->
  "894ae167-995e-479f-a576-8a9da2810294"],
 " is defined as the average pairwise inverse shortest path length between \
the neighbours of ",
 Cell[BoxData[
  FormBox["u", TraditionalForm]],ExpressionUUID->
  "df4f780b-c9db-41ff-b709-1150a3b2108e"],
 " after excluding ",
 Cell[BoxData[
  FormBox["u", TraditionalForm]],ExpressionUUID->
  "9bb1daa7-327c-445b-a449-e23f3f3b5393"],
 " itself from the graph,"
}], "Text",ExpressionUUID->"7922ac82-a092-41c4-a71c-60d6df1ad886"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{
     SubscriptBox["E", "local"], "(", "u", ")"}], "=", 
    RowBox[{
     FractionBox["1", 
      RowBox[{
       SubscriptBox["k", "u"], "(", 
       RowBox[{
        SubscriptBox["k", "u"], "-", "1"}], ")"}]], 
     RowBox[{
      UnderscriptBox["\[Sum]", 
       RowBox[{"v", ",", 
        RowBox[{"w", "\[Element]", 
         RowBox[{"N", "(", "u", ")"}]}]}]], 
      FractionBox["1", 
       SubscriptBox["d", 
        RowBox[{"v", "\[InvisibleComma]", "w"}]]]}]}]}], ","}], 
  TraditionalForm]], \
"DisplayFormula",ExpressionUUID->"480e447e-2f16-4955-b715-5b06d17b7ba0"],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "u"], TraditionalForm]],ExpressionUUID->
  "92747b1d-8050-4649-9614-cfef0c99da9b"],
 " is the degree of vertex ",
 Cell[BoxData[
  FormBox["u", TraditionalForm]],ExpressionUUID->
  "ea351773-3626-4564-b7dc-4dca8212159e"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"N", "(", "u", ")"}], TraditionalForm]],ExpressionUUID->
  "3a2c9ba5-f05c-4789-ac53-c067a4df72f9"],
 " denotes its neighbourhood and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["d", 
    RowBox[{"v", "\[InvisibleComma]", "w"}]], TraditionalForm]],
  ExpressionUUID->"639a3ee4-e786-4d45-ba7f-d56aba3c711b"],
 " is the graph distance from vertex ",
 Cell[BoxData[
  FormBox["v", TraditionalForm]],ExpressionUUID->
  "dc108a08-6dec-42c9-ba1b-ea4d934b4806"],
 " to vertex ",
 Cell[BoxData[
  FormBox["w", TraditionalForm]],ExpressionUUID->
  "cbea061f-660f-43db-9cd5-9a4d40d9bf57"],
 ". If ",
 Cell[BoxData[
  FormBox["u", TraditionalForm]],ExpressionUUID->
  "9da9c17f-8fef-48a5-959f-0423af8cd380"],
 " has less than two neighbours, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["E", "local"], "(", "u", ")"}], TraditionalForm]],
  ExpressionUUID->"94e8af99-0c8e-457d-9163-71881ac2c0f8"],
 " is taken to be 0."
}], "Text",ExpressionUUID->"52551d82-1d73-4f19-9486-bedab43f228b"],

Cell["Available options:", \
"Text",ExpressionUUID->"5a2969cc-306c-4b37-a0c9-7d7bf4beb817"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "False"}]],ExpressionUUID->
  "c2751c10-68d1-4e26-acb2-ad983d3369bd"],
 " ignores edge directions when computing shortest path lengths."
}], "Item",ExpressionUUID->"ea6d3a80-294c-4e36-9b41-e4d2d3363a43"],

Cell["\<\
Size the vertices of a graph according to the corresponding local efficiency\
\>", "Text",ExpressionUUID->"94aee723-c25f-422e-8e06-009f93dfceea"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<NetworkGraph\>\"", ",", "\"\<ZacharyKarateClub\>\""}], 
     "}"}], "]"}]}], ";"}], "\n", 
 RowBox[{"IGVertexMap", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"1.5", "#"}], "&"}], ",", 
   RowBox[{"VertexSize", "\[Rule]", "IGLocalEfficiency"}], ",", "g"}], 
  "]"}]}], "Input",ExpressionUUID->"01e98036-9af4-4324-a608-5ba735b2888a"],

Cell["\<\
Plot the local efficiency versus the local clustering coefficient.\
\>", "Text",ExpressionUUID->"5596defa-e3fd-4273-b815-a5bd4f04ada6"],

Cell[BoxData[
 RowBox[{"ListPlot", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Transpose", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"IGLocalClusteringCoefficient", "[", "g", "]"}], ",", 
      RowBox[{"IGLocalEfficiency", "[", "g", "]"}]}], "}"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<Detailed\>\""}]}], 
  "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"d00af6e6-9824-4fa6-937a-5a44a05237dd"],

Cell["Compute the local efficiency of a subset of vertices only.", \
"Text",ExpressionUUID->"d55e5874-69d9-428a-990c-f4de6fc3fa26"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"RandomGraph", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"10", ",", "20"}], "}"}], ",", 
     RowBox[{"DirectedEdges", "\[Rule]", "True"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{"IGLocalEfficiency", "[", 
  RowBox[{"g", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], 
  "]"}]}], "Input",ExpressionUUID->"eb37f828-8d95-46dc-b3b8-b92f39839e47"],

Cell["\<\
By default, both in- and out-neighbours are considered when determining the \
neighbourhoods of vertices. We can also consider only in-neighbours or only \
out-neighbours.\
\>", "Text",ExpressionUUID->"eec821f4-9856-4fe8-b1a4-04db537b732d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"IGLocalEfficiency", "[", 
    RowBox[{"g", ",", "All", ",", "\"\<All\>\""}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"IGLocalEfficiency", "[", 
    RowBox[{"g", ",", "All", ",", "\"\<In\>\""}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"IGLocalEfficiency", "[", 
    RowBox[{"g", ",", "All", ",", "\"\<Out\>\""}], "]"}]}], 
  "}"}]], "Input",ExpressionUUID->"e5981d97-7a85-4ac9-b2fb-5844489db38f"],

Cell["Ignore edge directions when computing shortest paths.", \
"Text",ExpressionUUID->"2c742e1b-b08e-4aec-84e1-aaa73ecd031f"],

Cell[BoxData[
 RowBox[{"IGLocalEfficiency", "[", 
  RowBox[{"g", ",", 
   RowBox[{"DirectedEdges", "\[Rule]", "False"}]}], 
  "]"}]], "Input",ExpressionUUID->"b2c79d0e-5951-4aef-876b-4ed47c76c786"],

Cell[CellGroupData[{

Cell["References", \
"Subsubsubsection",ExpressionUUID->"83658067-9879-45f2-90fc-e488b57c1436"],

Cell[TextData[{
 "I. Vragovi\[CAcute], E. Louis, and A. D\[IAcute]az-Guilera, Efficiency of \
informational transfer in regular and complex networks, Phys. Rev. E 71, 1 \
(2005). ",
 ButtonBox["https://dx.doi.org/10.1103/PhysRevE.71.036122",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://dx.doi.org/10.1103/PhysRevE.71.036122"], None},
  ButtonNote->"https://dx.doi.org/10.1103/PhysRevE.71.036122"]
}], "Item",ExpressionUUID->"7522daa3-1810-4c2e-adbd-063e1b1b0af1"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["IGAverageLocalEfficiency", \
"Subsubsection",ExpressionUUID->"92a83f16-8b0e-4e7c-95cb-cd82ca5f1406"],

Cell[BoxData[
 RowBox[{"?", 
  "IGAverageLocalEfficiency"}]], \
"Input",ExpressionUUID->"5532a539-8481-42d4-a6eb-f005d1b8896d"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGAverageLocalEfficiency", "[", "graph", "]"}]],ExpressionUUID->
  "5126309a-aa75-4960-b177-a93e2f831d7e"],
 " computes the average local efficiency of a network. See ",
 Cell[BoxData[
 "IGLocalEfficiency"],ExpressionUUID->
  "e4002858-9f9a-4981-b41d-2e8f9229ca5b"],
 " for a definition of this graph measure."
}], "Text",ExpressionUUID->"02c15ae9-0222-4b01-af3e-be641a140566"],

Cell["\<\
Plot the decrease in average local efficiency during sequential edge removals.\
\>", "Text",ExpressionUUID->"8b25394c-68bc-4ab5-a8f4-07481681a3b9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"RandomGraph", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"30", ",", "60"}], "}"}], ",", 
     RowBox[{"DirectedEdges", "\[Rule]", "True"}]}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"331c7d8d-e977-403c-a7a6-747837cde28a"],

Cell[BoxData[
 RowBox[{"ListPlot", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k", ",", 
       RowBox[{"IGAverageLocalEfficiency", "@", 
        RowBox[{"Graph", "[", 
         RowBox[{
          RowBox[{"VertexList", "[", "g", "]"}], ",", 
          RowBox[{"Take", "[", 
           RowBox[{
            RowBox[{"EdgeList", "[", "g", "]"}], ",", "k"}], "]"}]}], 
         "]"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"k", ",", 
       RowBox[{"EdgeCount", "[", "g", "]"}]}], "}"}]}], "\[IndentingNewLine]",
     "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<edge count\>\"", ",", "\"\<local efficiency\>\""}], 
     "}"}]}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"b9f3f3a0-b523-4c92-8c47-3568f0888536"],

Cell[TextData[{
 Cell[BoxData[
 "IGAverageLocalEfficiency"],ExpressionUUID->
  "0fa28592-725e-4f2f-9309-c8a950486061"],
 " simply gives the average of the values returned by ",
 Cell[BoxData[
 "IGLocalEfficiency"],ExpressionUUID->
  "d75eb06e-ff30-4cb3-982f-04bc0bb4e04d"],
 "."
}], "Text",ExpressionUUID->"a6390e82-cccf-4f52-8c24-2857c9b95642"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"IGAverageLocalEfficiency", "[", "g", "]"}], ",", 
   RowBox[{"Mean", "@", 
    RowBox[{"IGLocalEfficiency", "[", "g", "]"}]}]}], 
  "}"}]], "Input",ExpressionUUID->"47c13d53-f65e-42eb-b81c-2f75ddcc7828"],

Cell["\<\
Use only the out-neighbourhood while computing the local efficiency.\
\>", "Text",ExpressionUUID->"6f05a889-8737-4b39-bba5-d11056bb8a65"],

Cell[BoxData[
 RowBox[{"IGAverageLocalEfficiency", "[", 
  RowBox[{"g", ",", "\"\<Out\>\""}], 
  "]"}]], "Input",ExpressionUUID->"85dea4c2-78ac-404e-9c7a-e52bbb41f664"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Bipartite graphs", \
"Subsection",ExpressionUUID->"617326a1-b986-4e38-8dd1-f07f55b31874"],

Cell["\<\
The vertices of a bipartite graph can be divided into two groups (partitions) \
such that connections run only between the two partitions, but never within a \
single partition.\
\>", "Text",ExpressionUUID->"84de4892-44be-4431-8976-45306aecb843"],

Cell[BoxData[
 RowBox[{"?", 
  "IGBipartite*"}]], \
"Input",ExpressionUUID->"78833861-7c13-432a-a604-530eae472e74"],

Cell[CellGroupData[{

Cell["IGBipartiteQ", \
"Subsubsection",ExpressionUUID->"4f9f00f3-c844-429a-bc91-ba5e9c540793"],

Cell[BoxData[
 RowBox[{"?", 
  "IGBipartiteQ"}]], \
"Input",ExpressionUUID->"8a64afd4-5154-48b7-acc3-d9e8427d9741"],

Cell["Generate a graph and verify that it is bipartite.", \
"Text",ExpressionUUID->"b30577ce-5f4e-4cf6-bc58-8e5eb7380063"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"IGBipartiteGameGNM", "[", 
   RowBox[{"5", ",", "5", ",", "10", ",", 
    RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], 
   "]"}]}]], "Input",ExpressionUUID->"8139a392-ef82-4299-99f1-122071cbfcab"],

Cell[BoxData[
 RowBox[{"IGBipartiteQ", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"e5f21391-5eb0-4376-a811-0f13429c4732"],

Cell["\<\
Verify that no edges run between two disjoint vertex subsets of the graph.\
\>", "Text",ExpressionUUID->"022695fa-9c87-48b7-91e3-f9d4867dae60"],

Cell[BoxData[
 RowBox[{"IGBipartiteQ", "[", 
  RowBox[{"g", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "7", ",", "8"}], "}"}]}], "}"}]}], 
  "]"}]], "Input",ExpressionUUID->"b596f52f-ce34-48f6-89d6-1fadc5c84d8f"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGBipartitePartitions", \
"Subsubsection",ExpressionUUID->"083840f6-8adb-4b68-bcef-b238bf1b6d6b"],

Cell[BoxData[
 RowBox[{"?", 
  "IGBipartitePartitions"}]], \
"Input",ExpressionUUID->"1a821be9-ab60-4c58-8dac-93669d6dcfed"],

Cell["Find a bipartite partitioning of a graph.", \
"Text",ExpressionUUID->"b073ccab-797a-4b31-96d5-e56c488e9cf2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4, 5, 6, 7, 8}, {
        Null, {{2, 5}, {3, 5}, {4, 5}, {2, 6}, {3, 6}, {1, 7}, {4, 7}, {1, 
         8}}}, {GraphLayout -> {
          "Dimension" -> 2, "VertexLayout" -> "BipartiteEmbedding"}, 
         VertexLabels -> {
          6 -> Placed["Name", After], 3 -> Placed["Name", Before], 5 -> 
           Placed["Name", After], 8 -> Placed["Name", After], 7 -> 
           Placed["Name", After], 4 -> Placed["Name", Before], 2 -> 
           Placed["Name", Before], 1 -> Placed["Name", Before]}}]]}, 
      TagBox[GraphicsGroupBox[{
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
          {Arrowheads[0.], 
           ArrowBox[{{0., -0.38401699437494763`}, {1.0240453183331937`, 
            0.1280056647916492}}, 0.01416776390182925]}, 
          {Arrowheads[0.], 
           ArrowBox[{{0., -0.38401699437494763`}, {1.0240453183331937`, 
            0.38401699437494763`}}, 0.01416776390182925]}, 
          {Arrowheads[0.], 
           ArrowBox[{{0., -0.1280056647916492}, {
            1.0240453183331937`, -0.38401699437494763`}}, 
            0.01416776390182925]}, 
          {Arrowheads[0.], 
           ArrowBox[{{0., -0.1280056647916492}, {
            1.0240453183331937`, -0.1280056647916492}}, 0.01416776390182925]}, 
          {Arrowheads[0.], 
           ArrowBox[{{0., 0.1280056647916492}, {
            1.0240453183331937`, -0.38401699437494763`}}, 
            0.01416776390182925]}, 
          {Arrowheads[0.], 
           ArrowBox[{{0., 0.1280056647916492}, {
            1.0240453183331937`, -0.1280056647916492}}, 0.01416776390182925]}, 
          {Arrowheads[0.], 
           ArrowBox[{{0., 0.38401699437494763`}, {
            1.0240453183331937`, -0.38401699437494763`}}, 
            0.01416776390182925]}, 
          {Arrowheads[0.], 
           ArrowBox[{{0., 0.38401699437494763`}, {1.0240453183331937`, 
            0.1280056647916492}}, 0.01416776390182925]}}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
          0.7]}], {DiskBox[{0., -0.38401699437494763}, 0.01416776390182925], 
           InsetBox["1", 
            Offset[{-2, 0}, {-0.01416776390182925, -0.38401699437494763}], 
            ImageScaled[{1, 0.5}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{0., -0.1280056647916492}, 0.01416776390182925], 
           InsetBox["2", 
            Offset[{-2, 0}, {-0.01416776390182925, -0.1280056647916492}], 
            ImageScaled[{1, 0.5}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{0., 0.1280056647916492}, 0.01416776390182925], 
           InsetBox["3", 
            Offset[{-2, 0}, {-0.01416776390182925, 0.1280056647916492}], 
            ImageScaled[{1, 0.5}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{0., 0.38401699437494763}, 0.01416776390182925], 
           InsetBox["4", 
            Offset[{-2, 0}, {-0.01416776390182925, 0.38401699437494763}], 
            ImageScaled[{1, 0.5}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{1.0240453183331937, -0.38401699437494763}, 
            0.01416776390182925], 
           InsetBox["5", 
            Offset[{2, 0}, {1.0382130822350228, -0.38401699437494763}], 
            ImageScaled[{0, 0.5}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{1.0240453183331937, -0.1280056647916492}, 
            0.01416776390182925], 
           InsetBox["6", 
            Offset[{2, 0}, {1.0382130822350228, -0.1280056647916492}], 
            ImageScaled[{0, 0.5}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{1.0240453183331937, 0.1280056647916492}, 
            0.01416776390182925], 
           InsetBox["7", 
            Offset[{2, 0}, {1.0382130822350228, 0.1280056647916492}], 
            ImageScaled[{0, 0.5}],
            BaseStyle->"Graphics"]}, {
           DiskBox[{1.0240453183331937, 0.38401699437494763}, 
            0.01416776390182925], 
           InsetBox["8", 
            Offset[{2, 0}, {1.0382130822350228, 0.38401699437494763}], 
            ImageScaled[{0, 0.5}],
            BaseStyle->"Graphics"]}}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{89.078125, Automatic}]}], 
  ";"}]], "Input",ExpressionUUID->"5b10e55b-2001-48b4-a814-e76511c5b7ca"],

Cell[BoxData[
 RowBox[{"IGBipartitePartitions", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"ffc8be47-d15e-47a0-8725-5519b6afa1ee"],

Cell["\<\
Ensure that the partitions are returned in such an order that the first one \
contains vertex 5.\
\>", "Text",ExpressionUUID->"9dbd4e53-403e-490e-8ed8-bda8d3001475"],

Cell[BoxData[
 RowBox[{"IGBipartitePartitions", "[", 
  RowBox[{"g", ",", "5"}], 
  "]"}]], "Input",ExpressionUUID->"b6ea903c-7722-40ca-ac47-9628e3e9b700"],

Cell[TextData[{
 Cell[BoxData[
 "$Failed"],ExpressionUUID->"c7e7b8b7-891b-4d79-9ee8-d1f35e8112f1"],
 " is returned for non-bipartite graphs."
}], "Text",ExpressionUUID->"f9e69639-42d1-4fde-87fc-f37e5693048c"],

Cell[BoxData[
 RowBox[{"IGBipartitePartitions", "[", 
  RowBox[{"CompleteGraph", "[", "4", "]"}], 
  "]"}]], "Input",ExpressionUUID->"bc83ba68-454a-4daa-bafa-2f0f2c4e523a"],

Cell[TextData[{
 "We can use ",
 Cell[BoxData[
 "IGPartitionsToMembership"],ExpressionUUID->
  "a8424dea-aba3-42a8-a9a9-58a67a1efa84"],
 " or ",
 Cell[BoxData[
  RowBox[{"IGKVertexColoring", "[", 
   RowBox[{"\[Ellipsis]", ",", "2"}], "]"}]],ExpressionUUID->
  "c5077b7b-9e45-4d32-9589-13bfa8a99e4d"],
 " to obtain a partition index for each vertex."
}], "Text",ExpressionUUID->"d8df3a57-49d4-4d02-a9b4-207697f6d1ad"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGPartitionsToMembership", "[", "g", "]"}], "@", 
  RowBox[{
  "IGBipartitePartitions", "[", "g", 
   "]"}]}]], "Input",ExpressionUUID->"85ecd5d6-63c1-4853-ba0e-c897f6403813"],

Cell[BoxData[
 RowBox[{"IGKVertexColoring", "[", 
  RowBox[{"g", ",", "2"}], 
  "]"}]], "Input",ExpressionUUID->"5a9c4c4e-f934-4c38-827b-ca5f69bc632a"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGBipartiteProjections", \
"Subsubsection",ExpressionUUID->"01e0318f-80b4-46d7-bf34-ca6a9e5a33e3"],

Cell[BoxData[
 RowBox[{"?", 
  "IGBipartiteProjections"}]], \
"Input",ExpressionUUID->"5c53eb91-8beb-4ec6-952b-9d992751cfa1"],

Cell["\<\
The following bipartite graph described the relationship between diseases and \
genes.\
\>", "Text",ExpressionUUID->"c68641b4-34bc-431d-805b-afd93dd5c373"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"ExampleData", "[", 
   RowBox[{"{", 
    RowBox[{
    "\"\<NetworkGraph\>\"", ",", "\"\<BipartiteDiseasomeNetwork\>\""}], "}"}],
    "]"}]}]], "Input",ExpressionUUID->"220b5f62-e0ca-4f45-979e-7149782b9985"],

Cell[BoxData[
 RowBox[{
  RowBox[{"parts", "=", 
   RowBox[{"Values", "@", 
    RowBox[{"GroupBy", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Thread", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"IGVertexProp", "[", "\"\<Type\>\"", "]"}], "[", "g", "]"}], 
        "\[Rule]", 
        RowBox[{"VertexList", "[", "g", "]"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"First", "\[Rule]", "Last"}]}], "\[IndentingNewLine]", 
     "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.722626184490192*^9, 
  3.7226262808705*^9}},ExpressionUUID->"8b8ecc01-230d-4b5a-bed7-63b35ed2451a"],

Cell["Construct a disease-disease and gene-gene network from it.", \
"Text",ExpressionUUID->"8f9e806b-7fdc-43ae-945b-3a047b0902a3"],

Cell[BoxData[
 RowBox[{"IGBipartiteProjections", "[", 
  RowBox[{"g", ",", "parts"}], 
  "]"}]], "Input",ExpressionUUID->"5c2710d0-da0c-4573-a841-fce065e86191"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGBipartiteIncidenceMatrix and IGBipartiteIncidenceGraph", \
"Subsubsection",ExpressionUUID->"1f2ccd35-d8f0-42aa-b55d-c66254836476"],

Cell[BoxData[
 RowBox[{"?", 
  "IGBipartiteIncidenceGraph"}]], \
"Input",ExpressionUUID->"bcf23fbe-c395-4e90-a172-d7e7794b7440"],

Cell[BoxData[
 RowBox[{"?", 
  "IGBipartiteIncidenceMatrix"}]], \
"Input",ExpressionUUID->"7ec81a43-762e-465a-8309-92f5ab14e53c"],

Cell[TextData[{
 "Compute an incidence matrix. The default partitioning used by ",
 Cell[BoxData[
 "IGBipartiteIncidenceMatrix"],ExpressionUUID->
  "3a74ddf5-9e96-4153-b4c6-9de74d3f13d2"],
 " is the one returned by ",
 Cell[BoxData[
 "IGBipartitePartitions"],ExpressionUUID->
  "67ea32de-b689-4fc2-96a7-318e762fa9d4"],
 "."
}], "Text",ExpressionUUID->"19a6b76c-c297-42fb-a1bf-f3f0bd938e7a"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"IGBipartiteGameGNM", "[", 
   RowBox[{"5", ",", "5", ",", "10", ",", 
    RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], 
   "]"}]}]], "Input",ExpressionUUID->"e0e214f0-07e1-4e4e-92c0-d3447f961957"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"bm", "=", 
   RowBox[{"IGBipartiteIncidenceMatrix", "[", "g", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", 
  RowBox[{"bm", ",", 
   RowBox[{"TableHeadings", "\[Rule]", 
    RowBox[{"IGBipartitePartitions", "[", "g", "]"}]}]}], 
  "]"}]}], "Input",ExpressionUUID->"14c079b8-644c-4485-9294-a5986596813c"],

Cell["Reconstruct a graph from an incidence matrix.", \
"Text",ExpressionUUID->"e4ee9ae1-22a1-48da-b487-6a8cc8210fd0"],

Cell[BoxData[
 RowBox[{"IGBipartiteIncidenceGraph", "[", 
  RowBox[{"bm", ",", 
   RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}], ",", 
   RowBox[{"GraphLayout", "\[Rule]", "\"\<BipartiteEmbedding\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"d7d2c6b0-9837-42dd-9601-a2037d5a7475"],

Cell["\<\
Compute an incidence matrix using a given partitioning / vertex ordering. It \
is allowed to pass only a subset of vertices.\
\>", "Text",ExpressionUUID->"694e75b6-6503-4f81-ad6a-3e8d26a94d28"],

Cell[BoxData[
 RowBox[{"IGBipartiteIncidenceMatrix", "[", 
  RowBox[{"g", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "7", ",", "8"}], "}"}]}], "}"}]}], 
  "]"}]], "Input",ExpressionUUID->"21108a56-c86b-4a39-b6a4-74fe9d0ad106"],

Cell["\<\
Reconstruct the bipartite graph while specifying vertex names.\
\>", "Text",ExpressionUUID->"26eadf19-5fec-45c7-8605-fd3e0a7bd553"],

Cell[BoxData[
 RowBox[{"IGBipartiteIncidenceGraph", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"d", ",", "e", ",", "f"}], "}"}]}], "}"}], ",", "%", ",", 
   RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"fb0d1c7b-35c7-4dd9-b4a4-c21983991b64"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Similarity measures", \
"Subsection",ExpressionUUID->"90c6f602-0e3b-4557-ab02-8fd596af0eff"],

Cell["\<\
The functions in this section characterize the similarity of vertex pairs \
within a graph.\
\>", "Text",ExpressionUUID->"cacc71aa-0d1c-4398-baa4-3a9a300129c3"],

Cell[CellGroupData[{

Cell["IGBibliographicCoupling", \
"Subsubsection",ExpressionUUID->"35c78d31-3309-4fcf-8592-23598ae3ac2e"],

Cell[BoxData[
 RowBox[{"?", 
  "IGBibliographicCoupling"}]], \
"Input",ExpressionUUID->"ed746e09-1ec1-44b5-9f4c-f621dea7124c"],

Cell[TextData[{
 "The bibliographic coupling of two vertices in a directed graph is the \
number of other vertices they both connect to. The bibliographic coupling \
matrix can also be obtained using ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"am", ".", 
    RowBox[{"am", "\[Transpose]"}]}], "-", 
   RowBox[{"DiagonalMatrix", "@", 
    RowBox[{"VertexInDegree", "[", "g", "]"}]}]}]],ExpressionUUID->
  "cdb17268-f00c-4219-bdfa-f1b600ba6c77"],
 ", where ",
 Cell[BoxData["am"],ExpressionUUID->"8bd1c013-168c-4f91-b08c-6e23868b1dc1"],
 " is the adjacency matrix of the graph ",
 Cell[BoxData["g"],ExpressionUUID->"fdd468ab-9b97-4ef6-828e-7fccfa0596b9"],
 "."
}], "Text",ExpressionUUID->"b2d6d074-84a5-4923-b41f-091e69fceae6"],

Cell[BoxData[
 RowBox[{"?", 
  "IGStaticPowerLawGame"}]], \
"Input",ExpressionUUID->"0b553e3b-1f23-40da-a4cf-0ddb213c095e"],

Cell["\<\
Create a random graph and compute its bibliographic coupling matrix.\
\>", "Text",ExpressionUUID->"c4a4b276-70b0-45b0-8478-f38e869874bc"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"IGStaticPowerLawGame", "[", 
   RowBox[{"10", ",", "25", ",", "2", ",", "4", ",", "\[IndentingNewLine]", 
    RowBox[{"GraphLayout", "\[Rule]", "\"\<CircularEmbedding\>\""}], ",", 
    RowBox[{"GraphStyle", "\[Rule]", "\"\<BasicBlack\>\""}]}], 
   "]"}]}]], "Input",ExpressionUUID->"759472d5-8db9-4f8b-9fb8-f8834c703532"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"cc", "=", 
   RowBox[{"IGBibliographicCoupling", "[", "g", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", 
  RowBox[{"cc", ",", 
   RowBox[{"TableHeadings", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"VertexList", "[", "g", "]"}], ",", 
      RowBox[{"VertexList", "[", "g", "]"}]}], "}"}]}]}], 
  "]"}]}], "Input",ExpressionUUID->"79b1313e-d1d5-4db1-aef4-9c42d522f4c3"],

Cell["\<\
Construct the weighted graph corresponding to the bibliographic coupling of \
vertices and visualize it.\
\>", "Text",ExpressionUUID->"9c6e04e7-ca0e-4d70-9e97-afc9157fffd1"],

Cell[BoxData[
 RowBox[{"ccg", "=", 
  RowBox[{
   RowBox[{"IGWeightedAdjacencyGraph", "[", 
    RowBox[{"cc", ",", 
     RowBox[{"VertexCoordinates", "\[Rule]", 
      RowBox[{"GraphEmbedding", "[", "g", "]"}]}], ",", 
     RowBox[{"GraphStyle", "\[Rule]", "\"\<ThickEdge\>\""}]}], "]"}], "//", 
   RowBox[{"IGEdgeMap", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Thickness", "[", 
       RowBox[{"0.02", "#"}], "]"}], "&"}], ",", 
     RowBox[{"EdgeStyle", "\[Rule]", 
      RowBox[{"IGEdgeProp", "[", "EdgeWeight", "]"}]}]}], 
    "]"}]}]}]], \
"Input",ExpressionUUID->"4025ef49-e59e-4721-927c-f747371f6f28"],

Cell["\<\
Overlay the bibliographic coupling graph with the original directed graph.\
\>", "Text",ExpressionUUID->"d905d571-ad64-4fe6-b552-cecd91301101"],

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"ccg", ",", "g"}], 
  "]"}]], "Input",ExpressionUUID->"11d29d9f-4340-45be-8208-2f380b92bad1"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGCocitationCoupling", \
"Subsubsection",ExpressionUUID->"e7d956df-94d5-41d4-848e-102dff808b32"],

Cell[BoxData[
 RowBox[{"?", 
  "IGCocitationCoupling"}]], \
"Input",ExpressionUUID->"bab62883-39ad-4d12-982e-7399a359e9a3"],

Cell[TextData[{
 "The co-citation coupling of two vertices in a directed graph is the number \
of other vertices that connect to both of them. The co-citation coupling \
matrix can also be obtained using ",
 Cell[BoxData[
  RowBox[{
   RowBox[{
    RowBox[{"am", "\[Transpose]"}], ".", "am"}], "-", 
   RowBox[{"DiagonalMatrix", "@", 
    RowBox[{"VertexOutDegree", "[", "g", "]"}]}]}]],ExpressionUUID->
  "42b2fb01-0acf-4510-805b-5ed8a7bba7d6"],
 ", where ",
 Cell[BoxData["am"],ExpressionUUID->"f8d7b26e-4610-4d59-92a7-41b49e50d534"],
 " is the adjacency matrix of the graph ",
 Cell[BoxData["g"],ExpressionUUID->"9998778d-8242-4fa9-b4ae-55bc6840e03b"],
 "."
}], "Text",ExpressionUUID->"d54bbbec-4408-4474-8aa9-5315f701cfe5"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGDiceSimilarity", \
"Subsubsection",ExpressionUUID->"69c164bf-debe-4c7f-b48f-7eb32fad7a33"],

Cell[BoxData[
 RowBox[{"?", 
  "IGDiceSimilarity"}]], \
"Input",ExpressionUUID->"8486cca9-9a40-4d49-8bec-00845d5d2207"],

Cell["\<\
The Dice similarity coefficient of two vertices is twice the number of common \
neighbours divided by the sum of the degrees of the vertices. For directed \
graphs, out-neighbours are considered. Edge multiplicities are not taken into \
account.\
\>", "Text",ExpressionUUID->"6c16ae25-867b-4d57-86a3-89e0ac0885d2"],

Cell["The available options are:", \
"Text",ExpressionUUID->"50cc2c8f-cb28-4a81-893e-a9b0abc98138"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"SelfLoops", "\[Rule]", "True"}]],ExpressionUUID->
  "ffe9bbd7-1cc5-4782-8dcd-f8b158789068"],
 " will include self-loops in the calculation of the similarity score."
}], "Item",ExpressionUUID->"b4a6f747-583e-4b95-a447-1eb1aa2e5640"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGJaccardSimilarity", \
"Subsubsection",ExpressionUUID->"760778e4-fa55-46dc-83d0-31b47dc0d779"],

Cell[BoxData[
 RowBox[{"?", 
  "IGJaccardSimilarity"}]], \
"Input",ExpressionUUID->"71590b8d-7af9-428f-9a09-4096d9a6da9e"],

Cell["\<\
The Jaccard similarity coefficient of two vertices is the number of common \
neighbours divided by the number of vertices that are neighbours of at least \
one of the two vertices being considered. For directed graphs, out-neighbours \
are considered. Edge multiplicities are not taken into account.\
\>", "Text",ExpressionUUID->"2c887069-f601-45f5-a32b-d3f9d27c66e3"],

Cell["The available options are:", \
"Text",ExpressionUUID->"340c99ff-72dd-4db3-80b8-89180a4da742"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"SelfLoops", "\[Rule]", "True"}]],ExpressionUUID->
  "0c2fe6d8-e204-47f8-af88-3e8c84527b3f"],
 " will include self-loops in the calculation of the similarity score."
}], "Item",ExpressionUUID->"e668016e-2040-4ebc-aa75-0eac34c495c4"],

Cell["\<\
Construct and visualize a weighted graph of Jaccard similarities between \
vertices of an animal social network:\
\>", "Text",ExpressionUUID->"01f52b8f-9233-4cba-96dd-3c679d2914c3"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"ExampleData", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<NetworkGraph\>\"", ",", "\"\<DolphinSocialNetwork\>\""}], 
    "}"}], "]"}]}]], \
"Input",ExpressionUUID->"b73fca3d-956a-4c09-bb3e-bc8b711327d5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGWeightedAdjacencyGraph", "[", 
   RowBox[{
    RowBox[{"IGZeroDiagonal", "@", 
     RowBox[{"IGJaccardSimilarity", "[", "g", "]"}]}], ",", 
    RowBox[{"VertexCoordinates", "\[Rule]", 
     RowBox[{"GraphEmbedding", "[", "g", "]"}]}]}], "]"}], "//", 
  RowBox[{"IGEdgeMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"GrayLevel", "[", 
      RowBox[{"0", ",", "#"}], "]"}], "&"}], ",", 
    RowBox[{"EdgeStyle", "\[Rule]", 
     RowBox[{"IGEdgeProp", "[", "EdgeWeight", "]"}]}]}], 
   "]"}]}]], "Input",ExpressionUUID->"5ec66ad7-1deb-4cb4-b9b4-71d77c2cd730"],

Cell["Compare it to the inverse log-weighted similarity:", \
"Text",ExpressionUUID->"e30b9a24-0e9a-449c-a9aa-a16ac7503678"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGWeightedAdjacencyGraph", "[", 
   RowBox[{
    RowBox[{"Rescale", "@", 
     RowBox[{"IGInverseLogWeightedSimilarity", "[", "g", "]"}]}], ",", 
    RowBox[{"VertexCoordinates", "\[Rule]", 
     RowBox[{"GraphEmbedding", "[", "g", "]"}]}]}], "]"}], "//", 
  RowBox[{"IGEdgeMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"GrayLevel", "[", 
      RowBox[{"0", ",", "#"}], "]"}], "&"}], ",", 
    RowBox[{"EdgeStyle", "\[Rule]", 
     RowBox[{"IGEdgeProp", "[", "EdgeWeight", "]"}]}]}], 
   "]"}]}]], "Input",ExpressionUUID->"5feaa702-f8f5-452a-9487-7b5696592e7d"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGInverseLogWeightedSimilarity", \
"Subsubsection",ExpressionUUID->"b67d4363-99c4-4223-bdc6-fa7427df9599"],

Cell[BoxData[
 RowBox[{"?", 
  "IGInverseLogWeightedSimilarity"}]], \
"Input",ExpressionUUID->"7b322ae5-d73a-43a8-bd90-47aa76b00d21"],

Cell["\<\
The inverse log-weighted similarity of two vertices is the number of their \
common neighbours, weighted by the inverse natural logarithm of the \
neighbours\[CloseCurlyQuote] degrees. It is also known as the \
Adamic\[Dash]Adar index. It is based on the assumption that two vertices \
should be considered more similar if they share a low-degree common \
neighbour, since high-degree common neighbours are more likely to appear even \
by pure chance.\
\>", "Text",ExpressionUUID->"394cf961-6191-43ca-ad48-b7ee709c5b49"],

Cell[TextData[{
 "Formally, the similarity of vertices ",
 Cell[BoxData[
  FormBox["u", TraditionalForm]],ExpressionUUID->
  "15bca1f2-0c29-4273-93f0-01c127c2e9ee"],
 " and ",
 Cell[BoxData[
  FormBox["v", TraditionalForm]],ExpressionUUID->
  "cd46b65e-101e-4655-a968-a7b03368bce1"],
 " is"
}], "Text",ExpressionUUID->"6ed5bfc7-e2fa-433a-92de-c7af34301270"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{"A", "(", 
     RowBox[{"u", ",", "v"}], ")"}], "=", 
    RowBox[{
     UnderscriptBox["\[Sum]", 
      RowBox[{"w", "\[Element]", 
       RowBox[{
        RowBox[{"\[ScriptCapitalN]", "(", "u", ")"}], "\[Intersection]", 
        RowBox[{"\[ScriptCapitalN]", "(", "v", ")"}]}]}]], 
     FractionBox["1", 
      RowBox[{"ln", " ", 
       SubscriptBox["d", "w"]}]]}]}], ","}], 
  TraditionalForm]], \
"DisplayFormula",ExpressionUUID->"7be861df-6d1c-41f1-906c-5e731ca4ab12"],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[ScriptCapitalN]", "(", "u", ")"}], TraditionalForm]],
  ExpressionUUID->"dbe1e57f-a340-4209-9e92-722584457618"],
 " denotes the neighbourhood of vertex ",
 Cell[BoxData[
  FormBox["u", TraditionalForm]],ExpressionUUID->
  "81708d43-a93d-4494-867c-547d82558e62"],
 " and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["d", "w"], TraditionalForm]],ExpressionUUID->
  "8ca59fa9-b7e6-4950-986a-a3e5d66861a0"],
 " denotes the degree of vertex ",
 Cell[BoxData[
  FormBox["w", TraditionalForm]],ExpressionUUID->
  "679790ba-4009-4b87-a8c3-96cf9b808256"],
 "."
}], "Text",ExpressionUUID->"2c794287-9832-4e4f-8aa2-d0cd227f8dc5"],

Cell["\<\
Isolated vertices will have zero similarity to any other vertex. \
Self-similarities are not calculated.\
\>", "Text",ExpressionUUID->"906c1d88-56d7-4110-89f0-72ad31f8ca8a"],

Cell["\<\
In directed graphs, the out-neighbours of each vertex are considered, \
weighted by the inverse logarithm of their in-degrees.\
\>", "Text",ExpressionUUID->"75f588a3-38c6-4d6e-9af2-34342028f399"],

Cell[CellGroupData[{

Cell["References", \
"Subsubsubsection",ExpressionUUID->"09657536-6581-486e-b24b-765b9b5399c4"],

Cell[TextData[{
 "Lada A. Adamic and Eytan Adar: Friends and neighbors on the Web, ",
 StyleBox["Social Networks",
  FontSlant->"Italic"],
 ", 25(3):211-230, 2003. ",
 ButtonBox["https://doi.org/10.1016/S0378-8733(03)00009-1",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://doi.org/10.1016/S0378-8733(03)00009-1"], None},
  ButtonNote->"https://doi.org/10.1016/S0378-8733(03)00009-1"]
}], "Item",ExpressionUUID->"ac385150-585f-4b2a-b65d-1d740717d241"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Connectivity and graph components", \
"Subsection",ExpressionUUID->"f4c85ada-6140-4470-9780-17be927bf38d"],

Cell[CellGroupData[{

Cell["IGConnectedQ and IGWeaklyConnectedQ", \
"Subsubsection",ExpressionUUID->"8c9709cc-9202-4660-a199-2936ac58c0e2"],

Cell[BoxData[
 RowBox[{"?", 
  "IGConnectedQ"}]], \
"Input",ExpressionUUID->"4c10aeab-6f87-4add-8891-81facabf28a8"],

Cell[BoxData[
 RowBox[{"?", 
  "IGWeaklyConnectedQ"}]], \
"Input",ExpressionUUID->"70248674-4dea-4fe7-bbd4-6909db9e0d3a"],

Cell[TextData[{
 Cell[BoxData[
 "IGConnectedQ"],ExpressionUUID->"2944989a-7feb-438c-9512-a2fc0babc38d"],
 " checks if the graph is (strongly) connected. It is equivalent to ",
 Cell[BoxData[
 "ConnectedGraphQ"],ExpressionUUID->"89732725-0ccd-4ffe-802c-3e0763323c72"],
 ". ",
 Cell[BoxData[
 "IGWeaklyConnectedQ"],ExpressionUUID->"17d8c432-a232-4ca9-8b22-7b90c67f15e9"],
 " check if a directed graph is weakly connected. It is equivalent to ",
 Cell[BoxData[
 "WeaklyConnectedGraphQ"],ExpressionUUID->
  "c0c26bbd-291b-419a-a66d-86a19b32cc50"],
 ". Both of these functions use the implementation from the core igraph \
library, and will always be consistent with it for edge cases such as the \
null graph."
}], "Text",ExpressionUUID->"3de29618-f4fc-46d1-8189-9e8279a3cee7"],

Cell["This graph is connected.", \
"Text",ExpressionUUID->"1fe53385-2f8f-4d1c-8fbe-f03fb3fc79de"],

Cell[BoxData[
 RowBox[{"IGConnectedQ", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3, 4}, {Null, 
        SparseArray[
        Automatic, {4, 4}, 0, {
         1, {{0, 2, 4, 6, 8}, {{2}, {4}, {1}, {3}, {2}, {4}, {1}, {3}}}, 
          Pattern}]}, {
       GraphLayout -> "CircularEmbedding", VertexSize -> {Medium}}]]}, 
     TagBox[
      GraphicsGroupBox[
       GraphicsComplexBox[{{-1., 1.0106430996148606`*^-15}, {
        6.049014748177263*^-16, -1.}, {
        1., -1.133107779529596*^-15}, {-7.044813998280222*^-16, 1.}}, {
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
          {Arrowheads[0.], ArrowBox[{1, 2}, 0.1414213562373094]}, 
          {Arrowheads[0.], ArrowBox[{1, 4}, 0.1414213562373094]}, 
          {Arrowheads[0.], ArrowBox[{2, 3}, 0.1414213562373094]}, 
          {Arrowheads[0.], ArrowBox[{3, 4}, 0.1414213562373094]}}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          DiskBox[1, 0.1414213562373094], DiskBox[2, 0.1414213562373094], 
          DiskBox[3, 0.1414213562373094], DiskBox[4, 0.1414213562373094]}}]],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None], 
  "]"}]], "Input",ExpressionUUID->"97020f0a-13b3-414c-a5c5-d88f478f383d"],

Cell["This directed graph is only weakly connected.", \
"Text",ExpressionUUID->"0df4e0b3-a166-4457-a04c-f9e24039fff2"],

Cell[BoxData[
 RowBox[{"IGConnectedQ", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3}, {{{1, 2}, {2, 3}, {1, 3}}, Null}, {
       GraphLayout -> "SpringElectricalEmbedding", VertexLabels -> {None}, 
        VertexSize -> {Medium}}]]}, 
     TagBox[
      GraphicsGroupBox[
       GraphicsComplexBox[{{0.49692221538126047`, 0.}, {0.9999936568025141, 
        0.8642449403459485}, {0., 0.8677950236298682}}, {
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
          ArrowBox[{{1, 2}, {1, 3}, {2, 3}}, 0.09999999455880902]}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          DiskBox[1, 0.09999999455880902], DiskBox[2, 0.09999999455880902], 
          DiskBox[3, 0.09999999455880902]}}]],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None], 
  "]"}]], "Input",ExpressionUUID->"ffcca6cc-04d5-4dbf-9190-a51864bfe846"],

Cell[BoxData[
 RowBox[{"IGWeaklyConnectedQ", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3}, {{{1, 2}, {2, 3}, {1, 3}}, Null}, {
       GraphLayout -> "SpringElectricalEmbedding", VertexLabels -> {None}, 
        VertexSize -> {Medium}}]]}, 
     TagBox[
      GraphicsGroupBox[
       GraphicsComplexBox[{{0.49692221538126047`, 0.}, {0.9999936568025141, 
        0.8642449403459485}, {0., 0.8677950236298682}}, {
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
          ArrowBox[{{1, 2}, {1, 3}, {2, 3}}, 0.09999999455880902]}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          DiskBox[1, 0.09999999455880902], DiskBox[2, 0.09999999455880902], 
          DiskBox[3, 0.09999999455880902]}}]],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None], 
  "]"}]], "Input",ExpressionUUID->"0b256f39-945f-4cae-a346-eb5f7b175784"],

Cell["The null graph is considered disconnected by convention.", \
"Text",ExpressionUUID->"dbcc5bdf-2e45-408f-bd03-71f0c15fb269"],

Cell[BoxData[
 RowBox[{"IGConnectedQ", "@", 
  RowBox[{
  "IGEmptyGraph", "[", "0", 
   "]"}]}]], "Input",ExpressionUUID->"d001c8f8-e9ad-40f1-a68b-9d30e27b3258"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
IGConnectedComponentSizes and IGWeaklyConnectedComponentSizes\
\>", "Subsubsection",ExpressionUUID->"8e320a18-ce1d-4e3f-b857-08508d40abef"],

Cell[BoxData[
 RowBox[{"?", 
  "IGConnectedComponentSizes"}]], \
"Input",ExpressionUUID->"0fd6ec9c-d648-4fb1-872d-6b21b4b46f65"],

Cell[BoxData[
 RowBox[{"?", 
  "IGWeaklyConnectedComponentSizes"}]], \
"Input",ExpressionUUID->"dcf6e518-d41b-400b-86e2-8ee77968c10e"],

Cell[TextData[{
 Cell[BoxData[
 "IGWeaklyConnectedComponentsSizes"],ExpressionUUID->
  "c8fde377-0f63-4228-83a4-43fc06772d52"],
 " and ",
 Cell[BoxData[
 "IGConnectedComponentSizes"],ExpressionUUID->
  "64a92907-36f6-4277-9039-7fe99d0941a7"],
 " return the sizes of the graph\[CloseCurlyQuote]s weakly or strongly \
connected components in decreasing order."
}], "Text",ExpressionUUID->"0c0ebdb8-81df-4ced-91d5-d3670f4caab1"],

Cell[TextData[{
 "In large graphs, these functions will be faster than the equivalent ",
 Cell[BoxData[
  RowBox[{"Length", "/@", 
   RowBox[{"ConnectedComponents", "[", "g", "]"}]}]],ExpressionUUID->
  "51a5450f-5d7a-42be-8733-0d3f5962a88f"],
 "."
}], "Text",ExpressionUUID->"d35f36e8-01d6-4847-81e9-ef19009e06ae"],

Cell["\<\
The emergence of a giant component as the number of edges in a random graph \
increases.\
\>", "Text",ExpressionUUID->"7e533609-3c0b-4911-8db3-2c1f8e2b6e3b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"m", ",", 
      RowBox[{"First", "@", 
       RowBox[{"IGConnectedComponentSizes", "@", 
        RowBox[{"RandomGraph", "[", 
         RowBox[{"{", 
          RowBox[{"1000", ",", "m"}], "}"}], "]"}]}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"m", ",", "5", ",", "2000", ",", "5"}], "}"}]}], 
   "\[IndentingNewLine]", "]"}], "//", 
  "ListPlot"}]], \
"Input",ExpressionUUID->"373d475d-b27d-4ab1-a9c8-64521860ff96"],

Cell["\<\
The number of weakly and strongly connected components versus the number of \
edges in a random directed graph.\
\>", "Text",ExpressionUUID->"28f14ce3-607d-4a9a-9bc3-36b3f0fddd36"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"g", "=", 
         RowBox[{"RandomGraph", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1000", ",", "m"}], "}"}], ",", 
           RowBox[{"DirectedEdges", "\[Rule]", "True"}]}], "]"}]}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"m", ",", 
           RowBox[{"Length", "@", 
            RowBox[{"IGWeaklyConnectedComponentSizes", "[", "g", "]"}]}]}], 
          "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"m", ",", 
           RowBox[{"Length", "@", 
            RowBox[{"IGConnectedComponentSizes", "[", "g", "]"}]}]}], "}"}]}],
         "}"}]}], "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"m", ",", "5", ",", "3000", ",", "5"}], "}"}]}], 
    "\[IndentingNewLine]", "]"}], "//", "Transpose"}], "//", 
  "ListPlot"}]], \
"Input",ExpressionUUID->"c11294dc-7664-4eff-8f52-dd34251a9193"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGFindMinimumCuts", \
"Subsubsection",ExpressionUUID->"b444791e-fbcb-4719-b104-ec40290451b3"],

Cell[BoxData[
 RowBox[{"?", 
  "IGFindMinimumCuts"}]], \
"Input",ExpressionUUID->"57389d73-e4a1-4b31-9c86-8f147588f9d5"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGFindMinimalCuts", "[", 
   RowBox[{"g", ",", "s", ",", "t"}], "]"}]],ExpressionUUID->
  "cd4a30cd-30cc-48f7-ba33-af15e69901f7"],
 " finds all",
 StyleBox[" ",
  FontSlant->"Italic"],
 "smallest-weight (i.e. minimum) edge cuts that disconnect vertex ",
 Cell[BoxData["t"],ExpressionUUID->"ccc905f8-ff9d-47d6-99d6-46d557091bb2"],
 " from vertex ",
 Cell[BoxData["s"],ExpressionUUID->"a612362f-3c50-4a0a-9e84-11995258b7cd"],
 "."
}], "Text",ExpressionUUID->"d0df35a6-4ed5-4041-970a-8531890d95f2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{"{", 
     RowBox[{
     "\"\<NetworkGraph\>\"", ",", "\"\<MetabolicNetworkAeropyrumPernix\>\""}],
      "}"}], "]"}]}], ";"}], "\n", 
 RowBox[{"IGFindMinimumCuts", "[", 
  RowBox[{"g", ",", "30", ",", "160"}], 
  "]"}]}], "Input",ExpressionUUID->"a01dece5-f63d-4c59-b021-253357657461"],

Cell["\<\
Visualize all minimum cuts between two vertices in a random cubic graph.\
\>", "Text",ExpressionUUID->"b71283d9-ba0f-4846-8475-7f624576e2f7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"IGKRegularGame", "[", 
    RowBox[{"20", ",", "3"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"HighlightGraph", "[", 
    RowBox[{"g", ",", 
     RowBox[{"Join", "[", 
      RowBox[{"#", ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "20"}], "}"}]}], "]"}], ",", 
     RowBox[{"GraphHighlightStyle", "\[Rule]", "\"\<Dotted\>\""}], ",", 
     RowBox[{"VertexSize", "\[Rule]", "Large"}]}], "]"}], "&"}], "/@", 
  RowBox[{"IGFindMinimumCuts", "[", 
   RowBox[{"g", ",", "1", ",", "20"}], 
   "]"}]}]}], "Input",ExpressionUUID->"e99910f2-4bba-4421-8207-4382cfb2ce8c"],

Cell[TextData[{
 StyleBox["Warning:",
  FontWeight->"Bold"],
 " ",
 Cell[BoxData[
 "IGFindMinimumCuts"],ExpressionUUID->
  "473be110-3533-4e60-84bf-9b3f7cb4fe59"],
 " takes edge weights into account, but it is only safe to use with integer \
weights. If the weights are not integers, then numerical roundoff errors may \
prevent the function from detecting that two cuts have the same total \
weight."
}], "Text",ExpressionUUID->"ff014073-68db-42bb-9bbd-fc67d53d706b"],

Cell[TextData[{
 "Create an integer-weighted graph with more than one minimum cut between \
vertices ",
 Cell[BoxData["1"],ExpressionUUID->"739018d8-84af-4d6c-b6a2-f8f5262819e6"],
 " and ",
 Cell[BoxData["10"],ExpressionUUID->"8e3a7190-5501-4561-b78c-dc947eaff61c"],
 ":"
}], "Text",ExpressionUUID->"75f35699-2305-4479-8da7-0e6447fa0cc6"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{
   RowBox[{"IGTryUntil", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Length", "@", 
       RowBox[{"IGFindMinimumCuts", "[", 
        RowBox[{"#", ",", "1", ",", "10"}], "]"}]}], ">", "2"}], "&"}], "]"}],
    "[", 
   RowBox[{"RandomGraph", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"10", ",", "30"}], "}"}], ",", 
     RowBox[{"DirectedEdges", "\[Rule]", "True"}], ",", 
     RowBox[{"EdgeWeight", "\[Rule]", 
      RowBox[{"RandomInteger", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "10"}], "}"}], ",", "30"}], "]"}]}]}], "]"}], 
   "]"}]}]], "Input",ExpressionUUID->"51f96f80-cd91-4b5d-97b6-c15f98d0c126"],

Cell[BoxData[
 RowBox[{"IGFindMinimumCuts", "[", 
  RowBox[{"g", ",", "1", ",", "10"}], 
  "]"}]], "Input",ExpressionUUID->"a0afae1d-13c5-4b81-aa0c-be6d13b9be01"],

Cell[TextData[{
 "Multiplying the weights by ",
 Cell[BoxData["0.1"],ExpressionUUID->"118bdf46-682d-488a-b661-2020f8abbaf7"],
 " causes ",
 Cell[BoxData[
 "IGFindMinimumCuts"],ExpressionUUID->
  "8a925ef0-240b-41d3-b380-2698aaf50276"],
 " to return fewer results because some of the weights are no longer exactly \
representable in binary:"
}], "Text",ExpressionUUID->"ad27802d-83d5-4908-bfb9-4a86451cb7f4"],

Cell[BoxData[
 RowBox[{"IGFindMinimumCuts", "[", 
  RowBox[{
   RowBox[{"IGEdgeMap", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"0.1", "#"}], "&"}], ",", "EdgeWeight", ",", "g"}], "]"}], ",", 
   "1", ",", "10"}], 
  "]"}]], "Input",ExpressionUUID->"fb619525-94f4-48a2-831b-ee98d0bbb025"],

Cell[TextData[{
 "If only a single minimum cut is needed, use ",
 Cell[BoxData[
 "IGMinimumCut"],ExpressionUUID->"ca05815a-9e84-4142-931d-822d2cc42ae5"],
 ":"
}], "Text",ExpressionUUID->"fee8b4d7-aa2e-43b3-89c3-36157978a8fe"],

Cell[BoxData[
 RowBox[{"IGMinimumCut", "[", 
  RowBox[{"g", ",", "1", ",", "10"}], 
  "]"}]], "Input",ExpressionUUID->"76b6837c-7565-41a6-9046-8d0fcfe49b0f"],

Cell[TextData[{
 "The size (total weight) of the cut can be obtained with ",
 Cell[BoxData[
 "IGMinimumCutValue"],ExpressionUUID->
  "868d93f6-75fe-435b-a0fe-a7bda85e79e2"],
 ":"
}], "Text",ExpressionUUID->"fa88edfb-1203-4f68-bfbf-1682d8ab88e9"],

Cell[BoxData[
 RowBox[{"IGMinimumCutValue", "[", 
  RowBox[{"g", ",", "1", ",", "10"}], 
  "]"}]], "Input",ExpressionUUID->"52450cfd-aa3d-4f88-b1f5-fd5f6c012e88"],

Cell[CellGroupData[{

Cell["References", \
"Subsubsubsection",ExpressionUUID->"b8c3fc80-8f42-485c-8fe9-ab8e545b055c"],

Cell[TextData[{
 "J. S. Provan and D. R. Shier: ",
 ButtonBox["A Paradigm for listing (s,t)-cuts in graphs",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://doi.org/10.1007/BF01961544"], None},
  ButtonNote->"https://doi.org/10.1007/BF01961544"],
 ", Algorithmica 15, 351--372, 1996."
}], "Item",ExpressionUUID->"353cb78c-87fa-4355-bd14-279b86468bf0"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["IGFindMinimalCuts", \
"Subsubsection",ExpressionUUID->"f851c267-cd8a-4166-ba2e-cbe481b2bb06"],

Cell[BoxData[
 RowBox[{"?", 
  "IGFindMinimalCuts"}]], \
"Input",ExpressionUUID->"f17802f3-bfab-43f3-b27d-0fd28320daa6"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGFindMinimalCuts", "[", 
   RowBox[{"g", ",", "s", ",", "t"}], "]"}]],ExpressionUUID->
  "9530da93-8429-48c0-83de-181f918c056f"],
 " finds all ",
 StyleBox["unweighted ",
  FontSlant->"Italic"],
 "minimal edge cuts that disconnect vertex ",
 Cell[BoxData["t"],ExpressionUUID->"7aa508c6-e899-433b-b13a-af0cc0e8ea30"],
 " from vertex ",
 Cell[BoxData["s"],ExpressionUUID->"ac5379f5-136b-45ff-aac7-35ca9c89168e"],
 "."
}], "Text",ExpressionUUID->"b9147deb-89ce-4fd0-8fc8-9066f8ed9eb6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {
         SparseArray[
         Automatic, {10, 10}, 0, {
          1, {{0, 6, 9, 12, 14, 17, 18, 19, 20, 20, 20}, {{2}, {5}, {6}, {
            7}, {8}, {10}, {3}, {5}, {7}, {4}, {5}, {7}, {9}, {10}, {6}, {
            9}, {10}, {7}, {9}, {9}}}, Pattern}], Null}, {EdgeStyle -> {
           Arrowheads[2]}, FormatType -> TraditionalForm, 
         GraphLayout -> {
          "Dimension" -> 2, 
           "VertexLayout" -> {
            "LayeredDigraphEmbedding", "Orientation" -> Left}}, GraphStyle -> 
         "DiagramGold", ImageSize -> {147.4765625, Automatic}, 
         VertexSize -> {0.75}}]], Typeset`boxes, Typeset`boxes$s2d = 
      GraphicsGroupBox[{{
         Directive[
          Hue[0.7, 0.3, 0.7], 
          Thickness[Large], 
          Opacity[1]], 
         Arrowheads[2], {
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{-0.6666528591843921, -0.3333333333333333}, \
{-0.533327810340424, 6.903741136987662*^-6}, {-0.6666528591843921, 
                0.3333333333333333}, {0., 6.903741136987662*^-6}}}]], 
              0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$2", Automatic, Center]}]}, {
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{-0.6666528591843921, -0.3333333333333333}, \
{-0.533327810340424, 6.903741136987662*^-6}, {-0.6666528591843921, 
                0.3333333333333333}, {0., 6.903741136987662*^-6}}}]], 
              0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation[
             "VertexID$1", Automatic, 
              Center], {-5.722867042051547, -1.1085317972621682`}, \
{-5.622535302806678, -1.509858799944088}, {-5.509784163658706, \
-1.96086340789562}, {-5.38461362460763, -2.4615456211167657`}, \
{-5.247023685653453, -3.0119054396075233`}, {-5.097014346796172, \
-3.611942863367894}, {-5.071715061938368, -3.6933869257863807`}, \
{-5.038934647194558, -3.7652493340829016`}, {-4.9986731025647355`, \
-3.8275300882574563`}, {-4.950930428048903, -3.880229188310042}, \
{-4.89570662364706, -3.923346634240662}, {-4.833001689359207, \
-3.956882426049315}, {-4.762815625185343, -3.980836563736001}, \
{-4.68514843112547, -3.9952090473007202`}, {-4.4000001071795865`, \
-3.9999998821024514`}, {-4.311111218290696, -3.999999884484219}, \
{-4.222222329401809, -3.9999998868659885`}, {-4.133333440512921, \
-3.999999889247758}, {-4.044444551624031, -3.999999891629526}, \
{-3.955555662735142, -3.999999894011294}, {-3.8666667738462537`, \
-3.999999896393063}, {-3.777777884957364, -3.999999898774832}, \
{-3.6888889960684756`, -3.9999999011566008`}, {-3.6000001071795866`, \
-3.9999999035383693`}, {-3.513580354093167, -3.9999999058539775`}, \
{-3.432098872611686, -3.9999999080372657`}, {-3.355555662735143, \
-3.9999999100882335`}, {-3.283950724463538, -3.99999991200688}, \
{-3.217284057796871, -3.999999913793207}, 
             DynamicLocation["VertexID$5", Automatic, Center]}]]}, {
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{-0.6666528591843921, -0.3333333333333333}, \
{-0.533327810340424, 6.903741136987662*^-6}, {-0.6666528591843921, 
                0.3333333333333333}, {0., 6.903741136987662*^-6}}}]], 
              0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation[
             "VertexID$1", Automatic, Center], {-5.782716049382714, 
             1.54947281091837*^-7}, {-5.716049382716047, 
             1.5316095462322916`*^-7}, {-5.644444444444443, 
             1.5124230767546518`*^-7}, {-5.567901234567898, 
             1.4919134024854505`*^-7}, {-5.486419753086419, 
             1.4700805234246878`*^-7}, {-5.399999999999999, 
             1.4469244395723636`*^-7}, {-5.311111111111108, 
             1.4231067533242586`*^-7}, {-5.2222222222222205`, 
             1.399289067076154*^-7}, {-5.133333333333333, 
             1.3754713808280494`*^-7}, {-5.044444444444443, 
             1.3516536945799444`*^-7}, {-4.955555555555553, 
             1.3278360083318397`*^-7}, {-4.866666666666665, 
             1.304018322083735*^-7}, {-4.777777777777776, 
             1.28020063583563*^-7}, {-4.688888888888887, 
             1.2563829495875253`*^-7}, {-4.399999999999999, 
             1.1789754692811851`*^-7}, {-4.311111111111109, 
             1.1551577830330802`*^-7}, {-4.222222222222221, 
             1.1313400967849755`*^-7}, {-4.133333333333332, 
             1.1075224105368709`*^-7}, {-4.044444444444443, 
             1.083704724288766*^-7}, {-3.955555555555554, 
             1.0598870380406613`*^-7}, {-3.8666666666666654`, 
             1.0360693517925566`*^-7}, {-3.777777777777777, 
             1.0122516655444519`*^-7}, {-3.6888888888888878`, 
             9.884339792963473*^-8}, {-3.399999999999999, 
             9.110264989900066*^-8}, {-3.3138409206343993`, \
-0.004416835605973347}, {-3.23314146031538, -0.017667610968305835`}, \
{-3.1579016190429385`, -0.039752234984347566`}, {-3.0881213968170753`, \
-0.07067070765409854}, {-3.0238007936377924`, -0.11042302897755878`}, \
{-2.9649398095050885`, -0.1590091989547282}, {-2.911538444418963, \
-0.21642921758560693`}, {-2.863596698379417, -0.28268308487019483`}, \
{-2.82111457138645, -0.35777080080849205`}, {-2.688288065534221, \
-0.6234238303083125}, {-2.5658594495395874`, -0.868281078699892}, \
{-2.453828723402548, -1.0923425459832308`}, {-2.3521958871231026`, \
-1.2956082321583287`}, {-2.260960940701252, -1.4780781372251859`}, 
             DynamicLocation["VertexID$6", Automatic, Center]}]]}, {
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{-0.6666528591843921, -0.3333333333333333}, \
{-0.533327810340424, 6.903741136987662*^-6}, {-0.6666528591843921, 
                0.3333333333333333}, {0., 6.903741136987662*^-6}}}]], 
              0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation[
             "VertexID$1", Automatic, Center], {-5.759573862688594, 
             0.24042628519639972`}, {-5.679889717495089, 
             0.320110426119647}, {-5.592374527955324, 
             0.40762561096949135`}, {-5.497028294069297, 
             0.5029718397459328}, {-5.39385101583701, 
             0.6061491124489715}, {-5.282842693258461, 
             0.7171574290786074}, {-5.218542369296644, 
             0.7765194781219649}, {-5.151349272990466, 
             0.8288977564094252}, {-5.081263404339928, 
             0.8742922639409885}, {-5.008284763345027, 
             0.9127030007166542}, {-4.932413350005765, 
             0.944129966736423}, {-4.853649164322141, 
             0.9685731620002946}, {-4.771992206294156, 
             0.9860325865082689}, {-4.687442475921809, 
             0.9965082402603461}, {-4.399999973205102, 
             1.0000001178975466`}, {-4.311111084316212, 
             1.0000001155157778`}, {-4.222222195427324, 
             1.0000001131340093`}, {-4.133333306538435, 
             1.000000110752241}, {-4.0444444176495455`, 
             1.0000001083704722`}, {-3.955555528760658, 
             1.0000001059887036`}, {-3.8666666398717684`, 
             1.000000103606935}, {-3.7777777509828794`, 
             1.0000001012251662`}, {-3.688888862093991, 
             1.0000000988433977`}, {-3.3999999732051016`, 
             1.0000000911026496`}, {-3.3111110843162126`, 
             1.0000000887208809`}, {-3.2222221954273245`, 
             1.0000000863391123`}, {-3.133333306538436, 
             1.0000000839573437`}, {-3.0444444176495464`, 
             1.000000081575575}, {-2.955555528760658, 
             1.0000000791938064`}, {-2.8666666398717693`, 
             1.0000000768120378`}, {-2.7777777509828803`, 
             1.0000000744302693`}, {-2.6888888620939917`, 
             1.0000000720485005`}, {-2.3999999732051025`, 
             1.0000000643077525`}, {-2.3138408938395028`, 
             0.9955831375991292}, {-2.2331414335204824`, 
             0.9823323622367967}, {-2.1579015922480416`, 
             0.9602477382207553}, {-2.0881213700221792`, 
             0.9293292655510041}, {-2.023800766842896, 
             0.8895769442275439}, {-1.9649397827101918`, 
             0.8409907742503746}, {-1.9115384176240666`, 
             0.7835707556194957}, {-1.8635966715845205`, 
             0.7173168883349078}, {-1.821114544591553, 
             0.6422291723966106}, {-1.6882880387393246`, 
             0.3765761428967901}, {-1.565859422744691, 
             0.13171889450521052`}, {-1.4538286966076515`, \
-0.09234257277812816}, {-1.352195860328206, -0.29560825895322607`}, \
{-1.2609609139063553`, -0.4780781640200832}, 
             DynamicLocation["VertexID$7", Automatic, Center]}]]}, {
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{-0.6666528591843921, -0.3333333333333333}, \
{-0.533327810340424, 6.903741136987662*^-6}, {-0.6666528591843921, 
                0.3333333333333333}, {0., 6.903741136987662*^-6}}}]], 
              0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation[
             "VertexID$1", Automatic, Center], {-5.739039084918858, 
             0.5219219559695607}, {-5.647804128718483, 
             0.7043918561471555}, {-5.546171281546071, 
             0.9076575368757702}, {-5.4341405434016234`, 
             1.1317189981554052`}, {-5.311711914285141, 
             1.37657623998606}, {-5.178885394196621, 
             1.642229262367735}, {-5.136403263179719, 
             1.7173169760294236`}, {-5.088461513589642, 
             1.7835708407448232`}, {-5.035060145426391, 
             1.840990856513934}, {-4.976199158689963, 
             1.889577023336755}, {-4.911878553380361, 
             1.9293293412132875`}, {-4.842098329497585, 
             1.960247810143531}, {-4.766858487041633, 
             1.9823324301274847`}, {-4.686159026012507, 
             1.99558320116515}, {-4.399999946410205, 
             2.000000117897546}, {-4.311111057521315, 
             2.000000115515777}, {-4.222222168632427, 
             2.000000113134009}, {-4.133333279743538, 
             2.0000001107522403`}, {-4.0444443908546495`, 
             2.0000001083704717`}, {-3.95555550196576, 
             2.000000105988703}, {-3.8666666130768714`, 
             2.0000001036069346`}, {-3.777777724187983, 
             2.000000101225166}, {-3.6888888352990943`, 
             2.0000000988433975`}, {-3.399999946410205, 
             2.000000091102649}, {-3.3111110575213156`, 
             2.00000008872088}, {-3.222222168632427, 
             2.000000086339112}, {-3.133333279743539, 
             2.0000000839573433`}, {-3.04444439085465, 
             2.0000000815755747`}, {-2.9555555019657604`, 
             2.000000079193806}, {-2.8666666130768723`, 
             2.0000000768120376`}, {-2.777777724187983, 
             2.000000074430269}, {-2.6888888352990943`, 
             2.0000000720485005`}, {-2.3999999464102046`, 
             2.000000064307752}, {-2.311111057521315, 
             2.0000000619259835`}, {-2.222222168632427, 
             2.000000059544215}, {-2.1333332797435385`, 
             2.0000000571624463`}, {-2.0444443908546495`, 
             2.0000000547806778`}, {-1.9555555019657607`, 
             2.000000052398909}, {-1.8666666130768719`, 
             2.0000000500171407`}, {-1.7777777241879829`, 
             2.0000000476353716`}, {-1.6888888352990943`, 
             2.000000045253603}, {-1.5999999464102053`, 
             2.0000000428718345`}, {-1.5135801933237854`, 
             2.000000040556226}, {-1.4320987118423043`, 
             2.0000000383729386`}, {-1.3555555019657612`, 
             2.0000000363219708`}, {-1.2839505636941562`, 
             2.0000000344033237`}, {-1.2172838970274893`, 
             2.0000000326169975`}, 
             DynamicLocation["VertexID$8", Automatic, Center]}]]}, {
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{-0.6666528591843921, -0.3333333333333333}, \
{-0.533327810340424, 6.903741136987662*^-6}, {-0.6666528591843921, 
                0.3333333333333333}, {0., 6.903741136987662*^-6}}}]], 
              0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation[
             "VertexID$1", Automatic, 
              Center], {-5.719199337186602, -1.404003348922274}, \
{-5.616804512466594, -1.9159775438574478`}, {-5.501531824139923, \
-2.492341065797525}, {-5.37338127220659, -3.1330939147425063`}, \
{-5.232352856666593, -3.838236090692391}, {-5.078446577519933, \
-4.60776759364718}, {-5.057044237516566, -4.690087947241619}, \
{-5.027702303526668, -4.762723553634569}, {-4.9904207755502386`, \
-4.825674412826028}, {-4.9451996535872755`, -4.878940524815995}, \
{-4.892038937637782, -4.922521889604472}, {-4.830938627701755, \
-4.956418507191458}, {-4.761898723779197, -4.980630377576953}, \
{-4.684919225870106, -4.995157500760958}, {-4.400000133974483, \
-4.999999882102451}, {-4.311111245085594, -4.999999884484219}, \
{-4.222222356196705, -4.9999998868659885`}, {-4.133333467307818, \
-4.999999889247758}, {-4.044444578418928, -4.9999998916295265`}, \
{-3.9555556895300397`, -4.999999894011295}, {-3.866666800641151, \
-4.999999896393064}, {-3.777777911752262, -4.999999898774831}, \
{-3.688889022863373, -4.9999999011566}, {-3.4000001339744843`, \
-4.999999908897348}, {-3.312557631257776, -4.996508025901168}, \
{-3.2280079008854297`, -4.986032372149092}, {-3.1463509428574445`, \
-4.968572947641118}, {-3.067586757173821, -4.944129752377246}, \
{-2.9917153438345587`, -4.912702786357476}, {-2.918736702839658, \
-4.874292049581811}, {-2.8486508341891184`, -4.828897542050248}, \
{-2.781457737882941, -4.776519263762788}, {-2.7171574139211243`, \
-4.71715721471943}, {-2.606149091342575, -4.606148898089795}, \
{-2.5029718131102876`, -4.502971625386756}, {-2.4076255792242613`, \
-4.407625396610315}, {-2.320110389684496, -4.32011021176047}, \
{-2.2404262444909917`, -4.240426070837223}, 
             DynamicLocation["VertexID$10", Automatic, Center]}]]}, {
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{-0.6666528591843921, -0.3333333333333333}, \
{-0.533327810340424, 6.903741136987662*^-6}, {-0.6666528591843921, 
                0.3333333333333333}, {0., 6.903741136987662*^-6}}}]], 
              0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}]}, {
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{-0.6666528591843921, -0.3333333333333333}, \
{-0.533327810340424, 6.903741136987662*^-6}, {-0.6666528591843921, 
                0.3333333333333333}, {0., 6.903741136987662*^-6}}}]], 
              0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation[
             "VertexID$2", Automatic, 
              Center], {-4.753675538822727, -1.4926488749710494`}, \
{-4.670673566916727, -1.6586528299031966`}, {-4.579103255045544, \
-1.8417934659136488`}, {-4.478964603209177, -2.0420707830024063`}, \
{-4.370257611407628, -2.2594847811694696`}, {-4.252982279640896, \
-2.4940354604148376`}, {-4.194948978694753, -2.605163798212525}, \
{-4.133285608859084, -2.713675730536445}, {-4.067992170133889, \
-2.8195712573865963`}, {-3.999068662519165, -2.9228503787629787`}, \
{-3.9265150860149154`, -3.023513094665594}, {-3.8503314406211393`, \
-3.12155940509444}, {-3.770517726337836, -3.216989310049518}, \
{-3.687073943165006, -3.309802809530828}, {-3.600000091102649, \
-3.3999999035383697`}, {-3.5135803403318375`, -3.4864196589403975`}, \
{-3.4320988610336443`, -3.567901142605167}, {-3.355555653208069, \
-3.644444354532678}, {-3.2839507168551103`, -3.71604929472293}, \
{-3.21728405197477, -3.7827159631759226`}, 
             DynamicLocation["VertexID$5", Automatic, Center]}]]}, {
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{-0.6666528591843921, -0.3333333333333333}, \
{-0.533327810340424, 6.903741136987662*^-6}, {-0.6666528591843921, 
                0.3333333333333333}, {0., 6.903741136987662*^-6}}}]], 
              0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation[
             "VertexID$2", Automatic, 
              Center], {-4.7827160761776115`, -0.9999998718476155}, \
{-4.716049409510944, -0.9999998736339422}, {-4.64444447123934, \
-0.9999998755525891}, {-4.567901261362796, -0.9999998776035566}, \
{-4.486419779881316, -0.9999998797868443}, {-4.4000000267948955`, \
-0.9999998821024527}, {-4.311111137906006, -0.9999998844842212}, \
{-4.222222249017118, -0.99999988686599}, {-4.13333336012823, \
-0.999999889247759}, {-4.04444447123934, -0.9999998916295273}, \
{-3.955555582350452, -0.999999894011296}, {-3.866666693461563, \
-0.9999998963930645}, {-3.777777804572674, -0.9999998987748331}, \
{-3.688888915683786, -0.9999999011566018}, {-3.4000000267948964`, \
-0.9999999088973497}, {-3.312557524078188, -0.9965080259011697}, \
{-3.228007793705842, -0.9860323721490928}, {-3.1463508356778562`, \
-0.9685729476411185}, {-3.067586649994232, -0.9441297523772467}, \
{-2.99171523665497, -0.9127027863574779}, {-2.918736595660069, \
-0.874292049581812}, {-2.84865072700953, -0.8288975420502487}, \
{-2.7814576307033523`, -0.7765192637627885}, {-2.400000010717958, \
-0.399999935692247}, {-2.311111119711941, -0.3209875923950033}, \
{-2.2222222292352067`, -0.2617283355175127}, {-2.1333333392877543`, \
-0.22222216505977518`}, {-2.0444444498695837`, -0.20246908102179068`}, \
{-1.9555555609806945`, -0.20246908340355935`}, {-1.8666666726210877`, \
-0.222222172205081}, {-1.7777777847907625`, -0.2617283474263558}, \
{-1.6888888974897194`, -0.32098760906738366`}, {-1.6000000107179582`, \
-0.3999999571281646}, {-1.5135802599471468`, -0.48641971253019267`}, \
{-1.4320987806489536`, -0.5679011961949622}, {-1.355555572823378, \
-0.6444444081224727}, {-1.2839506364704198`, -0.7160493483127246}, \
{-1.2172839715900794`, -0.7827160167657177}, 
             DynamicLocation["VertexID$7", Automatic, Center]}]]}, {
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{-0.6666528591843921, -0.3333333333333333}, \
{-0.533327810340424, 6.903741136987662*^-6}, {-0.6666528591843921, 
                0.3333333333333333}, {0., 6.903741136987662*^-6}}}]], 
              0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$3", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}]}, {
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{-0.6666528591843921, -0.3333333333333333}, \
{-0.533327810340424, 6.903741136987662*^-6}, {-0.6666528591843921, 
                0.3333333333333333}, {0., 6.903741136987662*^-6}}}]], 
              0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$3", Automatic, Center], 
            DynamicLocation["VertexID$5", Automatic, Center]}]}, {
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{-0.6666528591843921, -0.3333333333333333}, \
{-0.533327810340424, 6.903741136987662*^-6}, {-0.6666528591843921, 
                0.3333333333333333}, {0., 6.903741136987662*^-6}}}]], 
              0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation[
             "VertexID$3", Automatic, 
              Center], {-3.7827161029725094`, -1.9999998986425123`}, \
{-3.7160494363058425`, -1.9999999004288387`}, {-3.644444498034238, \
-1.999999902347486}, {-3.567901288157695, -1.999999904398453}, \
{-3.4864198066762135`, -1.9999999065817409`}, {-3.4000000535897934`, \
-1.9999999088973492`}, {-3.3125575508730845`, -1.996508025901169}, \
{-3.2280078205007383`, -1.9860323721490922`}, {-3.1463508624727536`, \
-1.968572947641118}, {-3.06758667678913, -1.9441297523772463`}, \
{-2.991715263449867, -1.9127027863574777`}, {-2.918736622454966, \
-1.8742920495818116`}, {-2.848650753804427, -1.8288975420502482`}, \
{-2.7814576574982492`, -1.776519263762788}, {-2.2828427468482566`, \
-1.2828426513060833`}, {-2.2185424228864403`, -1.2234806022627258`}, \
{-2.1513493265802626`, -1.1711023239752656`}, {-2.0812634579297233`, \
-1.1257078164437024`}, {-2.0082848169348226`, -1.0872970796680363`}, \
{-1.9324134035955605`, -1.0558701136482673`}, {-1.8536492179119368`, \
-1.0314269183843958`}, {-1.7719922598839513`, -1.0139674938764216`}, \
{-1.687442529511605, -1.0034918401243444`}, {-1.6000000267948966`, \
-0.9999999571281644}, {-1.5135802737084767`, -0.9999999594437726}, \
{-1.4320987922269954`, -0.9999999616270607}, {-1.3555555823504526`, \
-0.9999999636780283}, {-1.2839506440788473`, -0.9999999655966751}, \
{-1.2172839774121806`, -0.9999999673830016}, 
             DynamicLocation["VertexID$7", Automatic, Center]}]]}, {
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{-0.6666528591843921, -0.3333333333333333}, \
{-0.533327810340424, 6.903741136987662*^-6}, {-0.6666528591843921, 
                0.3333333333333333}, {0., 6.903741136987662*^-6}}}]], 
              0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation[
             "VertexID$4", Automatic, 
              Center], {-2.7827161297674063`, -2.9999999254374092`}, \
{-2.71604946310074, -2.9999999272237354`}, {-2.644444524829135, \
-2.9999999291423824`}, {-2.567901314952591, -2.99999993119335}, \
{-2.48641983347111, -2.999999933376638}, {-2.4000000803846904`, \
-2.999999935692246}, {-2.3111111914958014`, -2.9999999380740148`}, \
{-2.2222223026069123`, -2.9999999404557833`}, {-2.1333334137180238`, \
-2.9999999428375523`}, {-2.044444524829135, -2.999999945219321}, \
{-1.9555556359402462`, -2.99999994760109}, {-1.8666667470513572`, \
-2.9999999499828585`}, {-1.7777778581624681`, -2.999999952364627}, \
{-1.6888889692735796`, -2.9999999547463956`}, {-1.4000000803846908`, \
-2.9999999624871436`}, {-1.3111111914958016`, -2.999999964868912}, \
{-1.2222223026069132`, -2.9999999672506807`}, {-1.1333334137180242`, \
-2.9999999696324497`}, {-1.0444445248291352`, -2.999999972014218}, \
{-0.9555556359402463, -2.999999974395987}, {-0.8666667470513576, \
-2.9999999767777554`}, {-0.7777778581624686, -2.999999979159524}, \
{-0.6888889692735798, -2.9999999815412925`}, {-0.6000000803846909, \
-2.999999983923061}, {-0.5135803272982712, -2.9999999862386697`}, \
{-0.4320988458167897, -2.999999988421957}, {-0.3555556359402466, \
-2.999999990472925}, {-0.2839506976686416, -2.9999999923915714`}, \
{-0.2172840310019749, -2.999999994177898}, 
             DynamicLocation["VertexID$9", Automatic, Center]}]]}, {
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{-0.6666528591843921, -0.3333333333333333}, \
{-0.533327810340424, 6.903741136987662*^-6}, {-0.6666528591843921, 
                0.3333333333333333}, {0., 6.903741136987662*^-6}}}]], 
              0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$4", Automatic, Center], 
            DynamicLocation["VertexID$10", Automatic, Center]}]}, {
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{-0.6666528591843921, -0.3333333333333333}, \
{-0.533327810340424, 6.903741136987662*^-6}, {-0.6666528591843921, 
                0.3333333333333333}, {0., 6.903741136987662*^-6}}}]], 
              0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$5", Automatic, Center], 
            DynamicLocation["VertexID$6", Automatic, Center]}]}, {
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{-0.6666528591843921, -0.3333333333333333}, \
{-0.533327810340424, 6.903741136987662*^-6}, {-0.6666528591843921, 
                0.3333333333333333}, {0., 6.903741136987662*^-6}}}]], 
              0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation[
             "VertexID$5", Automatic, 
              Center], {-2.75957398275257, -4.2404260569267125`}, \
{-2.679889841829323, -4.320110202120216}, {-2.5923746569794783`, \
-4.407625391659982}, {-2.497028428203037, -4.502971625546008}, \
{-2.3938511554999984`, -4.606148903778296}, {-2.282842838870362, \
-4.717157226356845}, {-2.2185425180897456`, -4.776519278846042}, \
{-2.151349424590509, -4.828897560734368}, {-2.0812635583726524`, \
-4.874292072021818}, {-2.008284919436175, -4.912702812708393}, \
{-1.9324135077810776`, -4.944129782794096}, {-1.8536493234073599`, \
-4.968572982278924}, {-1.7719923663150214`, -4.986032411162878}, \
{-1.6874426365040633`, -4.996508069445958}, {-1.4000001339744848`, \
-4.999999962487142}, {-1.3138410543721832`, -4.995583040395766}, \
{-1.233141593343057, -4.9823322693581025`}, {-1.1579017508871052`, \
-4.960247649374148}, {-1.0881215270043283`, -4.929329180443904}, \
{-1.0238009216947266`, -4.889576862567372}, {-0.9649399349582995, \
-4.840990695744551}, {-0.9115385667950474, -4.7835706799754405`}, \
{-0.8635968172049703, -4.717316815260041}, {-0.8211146861880679, \
-4.642229101598352}, {-0.6882881660995486, -4.376576079216677}, \
{-0.5658595369830653, -4.131718837386022}, {-0.4538287988386181, \
-3.907657376106388}, {-0.35219595166620676`, -3.7043916953777725`}, \
{-0.2609609954658315, -3.5219217952001776`}, 
             DynamicLocation["VertexID$9", Automatic, Center]}]]}, {
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{-0.6666528591843921, -0.3333333333333333}, \
{-0.533327810340424, 6.903741136987662*^-6}, {-0.6666528591843921, 
                0.3333333333333333}, {0., 6.903741136987662*^-6}}}]], 
              0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$5", Automatic, Center], 
            DynamicLocation["VertexID$10", Automatic, Center]}]}, {
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{-0.6666528591843921, -0.3333333333333333}, \
{-0.533327810340424, 6.903741136987662*^-6}, {-0.6666528591843921, 
                0.3333333333333333}, {0., 6.903741136987662*^-6}}}]], 
              0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$6", Automatic, Center], 
            DynamicLocation["VertexID$7", Automatic, Center]}]}, {
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{-0.6666528591843921, -0.3333333333333333}, \
{-0.533327810340424, 6.903741136987662*^-6}, {-0.6666528591843921, 
                0.3333333333333333}, {0., 6.903741136987662*^-6}}}]], 
              0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$7", Automatic, Center], 
            DynamicLocation["VertexID$9", Automatic, Center]}]}, {
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{-0.6666528591843921, -0.3333333333333333}, \
{-0.533327810340424, 6.903741136987662*^-6}, {-0.6666528591843921, 
                0.3333333333333333}, {0., 6.903741136987662*^-6}}}]], 
              0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$8", Automatic, Center], 
            DynamicLocation["VertexID$9", Automatic, Center]}]}}, {
         Directive[
          Hue[0.15, 0.5, 0.8], 
          EdgeForm[]], 
         TagBox[{
           TagBox[
            
            FilledCurveBox[{{{0, 2, 1}, {1, 2, 2}, {0, 1, 1}, {1, 2, 2}, {0, 
             1, 1}, {1, 2, 2}, {0, 1, 1}, {1, 2, 
             2}}}, {{{-6.294117749999998, -0.2941175892306176}, \
{-5.705882249999998, -0.2941175892306176}, {-5.558823749999998, \
-0.2941175892306176}, {-5.558823749999998, -0.14705871423061773`}, \
{-5.558823749999998, 0.14705903576938206`}, {-5.558823749999998, 
             0.294117910769382}, {-5.705882249999998, 
             0.294117910769382}, {-6.294117749999998, 
             0.294117910769382}, {-6.441176249999998, 
             0.294117910769382}, {-6.441176249999998, 
             0.14705903576938206`}, {-6.441176249999998, \
-0.14705871423061773`}, {-6.441176249999998, -0.2941175892306176}, \
{-6.294117749999998, -0.2941175892306176}}}], "DynamicName", BoxID -> 
            "VertexID$1"], 
           InsetBox[
            FormBox["1", TraditionalForm], 
            DynamicLocation["VertexID$1", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$1"], 
         TagBox[{
           TagBox[
            
            FilledCurveBox[{{{0, 2, 1}, {1, 2, 2}, {0, 1, 1}, {1, 2, 2}, {0, 
             1, 1}, {1, 2, 2}, {0, 1, 1}, {1, 2, 
             2}}}, {{{-5.294117776794895, -1.2941176160255143`}, \
{-4.705882276794895, -1.2941176160255143`}, {-4.558823776794895, \
-1.2941176160255143`}, {-4.558823776794895, -1.1470587410255144`}, \
{-4.558823776794895, -0.8529409910255146}, {-4.558823776794895, \
-0.7058821160255146}, {-4.705882276794895, -0.7058821160255146}, \
{-5.294117776794895, -0.7058821160255146}, {-5.441176276794895, \
-0.7058821160255146}, {-5.441176276794895, -0.8529409910255146}, \
{-5.441176276794895, -1.1470587410255144`}, {-5.441176276794895, \
-1.2941176160255143`}, {-5.294117776794895, -1.2941176160255143`}}}], 
            "DynamicName", BoxID -> "VertexID$2"], 
           InsetBox[
            FormBox["2", TraditionalForm], 
            DynamicLocation["VertexID$2", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$2"], 
         TagBox[{
           TagBox[
            
            FilledCurveBox[{{{0, 2, 1}, {1, 2, 2}, {0, 1, 1}, {1, 2, 2}, {0, 
             1, 1}, {1, 2, 2}, {0, 1, 1}, {1, 2, 
             2}}}, {{{-4.294117803589793, -2.294117642820411}, \
{-3.705882303589793, -2.294117642820411}, {-3.5588238035897932`, \
-2.294117642820411}, {-3.5588238035897932`, -2.147058767820411}, \
{-3.5588238035897932`, -1.8529410178204113`}, {-3.5588238035897932`, \
-1.7058821428204114`}, {-3.705882303589793, -1.7058821428204114`}, \
{-4.294117803589793, -1.7058821428204114`}, {-4.441176303589793, \
-1.7058821428204114`}, {-4.441176303589793, -1.8529410178204113`}, \
{-4.441176303589793, -2.147058767820411}, {-4.441176303589793, \
-2.294117642820411}, {-4.294117803589793, -2.294117642820411}}}], 
            "DynamicName", BoxID -> "VertexID$3"], 
           InsetBox[
            FormBox["3", TraditionalForm], 
            DynamicLocation["VertexID$3", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$3"], 
         TagBox[{
           TagBox[
            
            FilledCurveBox[{{{0, 2, 1}, {1, 2, 2}, {0, 1, 1}, {1, 2, 2}, {0, 
             1, 1}, {1, 2, 2}, {0, 1, 1}, {1, 2, 
             2}}}, {{{-3.29411783038469, -3.294117669615308}, \
{-2.70588233038469, -3.294117669615308}, {-2.55882383038469, \
-3.294117669615308}, {-2.55882383038469, -3.147058794615308}, \
{-2.55882383038469, -2.8529410446153083`}, {-2.55882383038469, \
-2.7058821696153084`}, {-2.70588233038469, -2.7058821696153084`}, \
{-3.29411783038469, -2.7058821696153084`}, {-3.44117633038469, \
-2.7058821696153084`}, {-3.44117633038469, -2.8529410446153083`}, \
{-3.44117633038469, -3.147058794615308}, {-3.44117633038469, \
-3.294117669615308}, {-3.29411783038469, -3.294117669615308}}}], 
            "DynamicName", BoxID -> "VertexID$4"], 
           InsetBox[
            FormBox["4", TraditionalForm], 
            DynamicLocation["VertexID$4", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$4"], 
         TagBox[{
           TagBox[
            
            FilledCurveBox[{{{0, 2, 1}, {1, 2, 2}, {0, 1, 1}, {1, 2, 2}, {0, 
             1, 1}, {1, 2, 2}, {0, 1, 1}, {1, 2, 
             2}}}, {{{-3.2941178571795873`, -4.294117669615307}, \
{-2.7058823571795876`, -4.294117669615307}, {-2.5588238571795876`, \
-4.294117669615307}, {-2.5588238571795876`, -4.147058794615307}, \
{-2.5588238571795876`, -3.852941044615308}, {-2.5588238571795876`, \
-3.705882169615308}, {-2.7058823571795876`, -3.705882169615308}, \
{-3.2941178571795873`, -3.705882169615308}, {-3.4411763571795873`, \
-3.705882169615308}, {-3.4411763571795873`, -3.852941044615308}, \
{-3.4411763571795873`, -4.147058794615307}, {-3.4411763571795873`, \
-4.294117669615307}, {-3.2941178571795873`, -4.294117669615307}}}], 
            "DynamicName", BoxID -> "VertexID$5"], 
           InsetBox[
            FormBox["5", TraditionalForm], 
            DynamicLocation["VertexID$5", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$5"], 
         TagBox[{
           TagBox[
            
            FilledCurveBox[{{{0, 2, 1}, {1, 2, 2}, {0, 1, 1}, {1, 2, 2}, {0, 
             1, 1}, {1, 2, 2}, {0, 1, 1}, {1, 2, 
             2}}}, {{{-2.2941178035897933`, -2.294117696410205}, \
{-1.7058823035897936`, -2.294117696410205}, {-1.5588238035897937`, \
-2.294117696410205}, {-1.5588238035897937`, -2.147058821410205}, \
{-1.5588238035897937`, -1.8529410714102053`}, {-1.5588238035897937`, \
-1.7058821964102053`}, {-1.7058823035897936`, -1.7058821964102053`}, \
{-2.2941178035897933`, -1.7058821964102053`}, {-2.4411763035897933`, \
-1.7058821964102053`}, {-2.4411763035897933`, -1.8529410714102053`}, \
{-2.4411763035897933`, -2.147058821410205}, {-2.4411763035897933`, \
-2.294117696410205}, {-2.2941178035897933`, -2.294117696410205}}}], 
            "DynamicName", BoxID -> "VertexID$6"], 
           InsetBox[
            FormBox["6", TraditionalForm], 
            DynamicLocation["VertexID$6", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$6"], 
         TagBox[{
           TagBox[
            
            FilledCurveBox[{{{0, 2, 1}, {1, 2, 2}, {0, 1, 1}, {1, 2, 2}, {0, 
             1, 1}, {1, 2, 2}, {0, 1, 1}, {1, 2, 
             2}}}, {{{-1.2941177767948966`, -1.2941177232051024`}, \
{-0.7058822767948969, -1.2941177232051024`}, {-0.558823776794897, \
-1.2941177232051024`}, {-0.558823776794897, -1.1470588482051025`}, \
{-0.558823776794897, -0.8529410982051027}, {-0.558823776794897, \
-0.7058822232051027}, {-0.7058822767948969, -0.7058822232051027}, \
{-1.2941177767948966`, -0.7058822232051027}, {-1.4411762767948963`, \
-0.7058822232051027}, {-1.4411762767948963`, -0.8529410982051027}, \
{-1.4411762767948963`, -1.1470588482051025`}, {-1.4411762767948963`, \
-1.2941177232051024`}, {-1.2941177767948966`, -1.2941177232051024`}}}], 
            "DynamicName", BoxID -> "VertexID$7"], 
           InsetBox[
            FormBox["7", TraditionalForm], 
            DynamicLocation["VertexID$7", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$7"], 
         TagBox[{
           TagBox[
            
            FilledCurveBox[{{{0, 2, 1}, {1, 2, 2}, {0, 1, 1}, {1, 2, 2}, {0, 
             1, 1}, {1, 2, 2}, {0, 1, 1}, {1, 2, 
             2}}}, {{{-1.2941176964102055`, 
             1.7058822767948967`}, {-0.7058821964102058, 
             1.7058822767948967`}, {-0.5588236964102059, 
             1.7058822767948967`}, {-0.5588236964102059, 
             1.8529411517948966`}, {-0.5588236964102059, 
             2.1470589017948964`}, {-0.5588236964102059, 
             2.2941177767948964`}, {-0.7058821964102058, 
             2.2941177767948964`}, {-1.2941176964102055`, 
             2.2941177767948964`}, {-1.4411761964102054`, 
             2.2941177767948964`}, {-1.4411761964102054`, 
             2.1470589017948964`}, {-1.4411761964102054`, 
             1.8529411517948966`}, {-1.4411761964102054`, 
             1.7058822767948967`}, {-1.2941176964102055`, 
             1.7058822767948967`}}}], "DynamicName", BoxID -> "VertexID$8"], 
           InsetBox[
            FormBox["8", TraditionalForm], 
            DynamicLocation["VertexID$8", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$8"], 
         TagBox[{
           TagBox[
            
            FilledCurveBox[{{{0, 2, 1}, {1, 2, 2}, {0, 1, 1}, {1, 2, 2}, {0, 
             1, 1}, {1, 2, 2}, {0, 1, 1}, {1, 2, 
             2}}}, {{{-0.29411783038469086`, -3.294117749999999}, {
             0.2941176696153087, -3.294117749999999}, {
             0.44117616961530864`, -3.294117749999999}, {
             0.44117616961530864`, -3.147058874999999}, {
             0.44117616961530864`, -2.852941124999999}, {
             0.44117616961530864`, -2.7058822499999993`}, {
             0.2941176696153087, -2.7058822499999993`}, \
{-0.29411783038469086`, -2.7058822499999993`}, {-0.4411763303846908, \
-2.7058822499999993`}, {-0.4411763303846908, -2.852941124999999}, \
{-0.4411763303846908, -3.147058874999999}, {-0.4411763303846908, \
-3.294117749999999}, {-0.29411783038469086`, -3.294117749999999}}}], 
            "DynamicName", BoxID -> "VertexID$9"], 
           InsetBox[
            FormBox["9", TraditionalForm], 
            DynamicLocation["VertexID$9", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$9"], 
         TagBox[{
           TagBox[
            
            FilledCurveBox[{{{0, 2, 1}, {1, 2, 2}, {0, 1, 1}, {1, 2, 2}, {0, 
             1, 1}, {1, 2, 2}, {0, 1, 1}, {1, 2, 
             2}}}, {{{-2.2941178571795873`, -4.294117696410204}, \
{-1.7058823571795876`, -4.294117696410204}, {-1.5588238571795876`, \
-4.294117696410204}, {-1.5588238571795876`, -4.147058821410204}, \
{-1.5588238571795876`, -3.852941071410205}, {-1.5588238571795876`, \
-3.705882196410205}, {-1.7058823571795876`, -3.705882196410205}, \
{-2.2941178571795873`, -3.705882196410205}, {-2.4411763571795873`, \
-3.705882196410205}, {-2.4411763571795873`, -3.852941071410205}, \
{-2.4411763571795873`, -4.147058821410204}, {-2.4411763571795873`, \
-4.294117696410204}, {-2.2941178571795873`, -4.294117696410204}}}], 
            "DynamicName", BoxID -> "VertexID$10"], 
           InsetBox[
            FormBox["10", TraditionalForm], 
            DynamicLocation["VertexID$10", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> 
          "VertexLabelID$10"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        
        ImageSizeCache->{{-0.3097754409899096, 
         146.78633794098988`}, {-80.91765926054295, 75.0821826896604}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{147.4765625, Automatic}]}], 
  ";"}]], "Input",ExpressionUUID->"fbb2dc4c-4f0a-4209-9a20-7a9e446bd2d7"],

Cell[BoxData[
 RowBox[{"IGFindMinimalCuts", "[", 
  RowBox[{"g", ",", "1", ",", "10"}], 
  "]"}]], "Input",ExpressionUUID->"a0656757-e223-4ed8-b3dd-21d00dc8e1a0"],

Cell["The set of all minimum cuts is a subset of the minimal ones.", \
"Text",ExpressionUUID->"6dd2c854-5df8-4817-8594-bd794f737737"],

Cell[BoxData[
 RowBox[{"IGFindMinimumCuts", "[", 
  RowBox[{"g", ",", "1", ",", "10"}], 
  "]"}]], "Input",ExpressionUUID->"e975cb54-cd80-479e-9afb-1845ccd0fb88"],

Cell[BoxData[
 RowBox[{"SubsetQ", "[", 
  RowBox[{"%%", ",", "%"}], 
  "]"}]], "Input",ExpressionUUID->"7b14f10d-74b2-40d3-99af-811b2454cc10"],

Cell["\<\
Visualize all minimal cuts between two vertices, from smallest to largest, in \
an undirected graph.\
\>", "Text",ExpressionUUID->"57f1114c-2112-4ecf-be82-2c394f57df6a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"IGGiantComponent", "@", 
    RowBox[{"RandomGraph", "[", 
     RowBox[{"{", 
      RowBox[{"8", ",", "12"}], "}"}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"HighlightGraph", "[", 
    RowBox[{"g", ",", 
     RowBox[{"Join", "[", 
      RowBox[{"#", ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "8"}], "}"}]}], "]"}], ",", 
     RowBox[{"GraphHighlightStyle", "\[Rule]", "\"\<Dashed\>\""}], ",", 
     RowBox[{"VertexSize", "\[Rule]", "Medium"}]}], "]"}], "&"}], "/@", 
  RowBox[{
   RowBox[{"SortBy", "[", "Length", "]"}], "@", 
   RowBox[{"IGFindMinimalCuts", "[", 
    RowBox[{"g", ",", "1", ",", "8"}], 
    "]"}]}]}]}], \
"Input",ExpressionUUID->"f04c941e-4a14-4cba-bd77-ed575c809c52"],

Cell[CellGroupData[{

Cell["References", \
"Subsubsubsection",ExpressionUUID->"7aecd32c-39cd-43c7-95eb-eae582a63474"],

Cell[TextData[{
 "J. S. Provan and D. R. Shier: ",
 ButtonBox["A Paradigm for listing (s,t)-cuts in graphs",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://doi.org/10.1007/BF01961544"], None},
  ButtonNote->"https://doi.org/10.1007/BF01961544"],
 ", Algorithmica 15, 351--372, 1996."
}], "Item",ExpressionUUID->"af078db6-242d-42bf-9576-c123f9afda8c"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Vertex separators", \
"Subsubsection",ExpressionUUID->"c96ba37e-5d5a-41b2-a022-c05ac4707464"],

Cell["\<\
A vertex separator is a set of vertices whose removal disconnects the graph.\
\>", "Text",ExpressionUUID->"2d5527ee-e594-4177-bfdc-36ec49d1648f"],

Cell[BoxData[
 RowBox[{"?", 
  "IGMinimalSeparators"}]], \
"Input",ExpressionUUID->"f0ef177b-d6c6-49a4-8041-beabc22b6627"],

Cell[BoxData[
 RowBox[{"?", 
  "IGMinimumSeparators"}]], \
"Input",ExpressionUUID->"a265d2fb-ecd7-498d-bc1a-f08ed4ab5ee9"],

Cell[BoxData[
 RowBox[{"?", 
  "IGVertexSeparatorQ"}]], \
"Input",ExpressionUUID->"e8e567b2-6f66-43c5-a4a9-22bad5c48d2f"],

Cell[BoxData[
 RowBox[{"?", 
  "IGMinimalVertexSeparatorQ"}]], \
"Input",ExpressionUUID->"a1c3c6fc-fa77-4815-b909-3d39d4896836"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"ExampleData", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<NetworkGraph\>\"", ",", "\"\<Friendship\>\""}], "}"}], 
   "]"}]}]], "Input",ExpressionUUID->"9f926f85-9aef-4812-8623-6e4ea3687069"],

Cell[BoxData[
 RowBox[{"separators", "=", 
  RowBox[{
  "IGMinimumSeparators", "[", "g", 
   "]"}]}]], "Input",ExpressionUUID->"24a8631b-c8fb-48a2-b1e7-33adddc303e1"],

Cell["Removing any of these vertex sets will disconnect the graph:", \
"Text",ExpressionUUID->"d50aa033-d594-4033-a1c2-541ae5e3d379"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"VertexDelete", "[", 
    RowBox[{"g", ",", "#"}], "]"}], "&"}], "/@", 
  "separators"}]], \
"Input",ExpressionUUID->"d94999fb-ec01-498d-ab40-88327c25b1c1"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IGVertexSeparatorQ", "[", 
    RowBox[{"g", ",", "#"}], "]"}], "&"}], "/@", 
  "separators"}]], \
"Input",ExpressionUUID->"339d8743-b784-47e4-9eb2-b1d97fae805a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IGMinimalVertexSeparatorQ", "[", 
    RowBox[{"g", ",", "#"}], "]"}], "&"}], "/@", 
  "separators"}]], \
"Input",ExpressionUUID->"05dcef65-c880-4414-bb78-8bd643e33081"],

Cell["\<\
Removing Anna, Nora and Larry also disconnects the graph, thus this vertex \
set is a separator:\
\>", "Text",ExpressionUUID->"06b79d1f-f88d-4b92-a9a9-4565eb0ebbe4"],

Cell[BoxData[
 RowBox[{"IGVertexSeparatorQ", "[", 
  RowBox[{"g", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<Anna\>\"", ",", "\"\<Nora\>\"", ",", "\"\<Larry\>\""}], 
    "}"}]}], "]"}]], \
"Input",ExpressionUUID->"df2fa912-98f3-4bd5-8538-b9f7182063ff"],

Cell["But it is not minimal:", \
"Text",ExpressionUUID->"16d31c07-8b38-4e8a-be5c-ee55e5f1e24a"],

Cell[BoxData[
 RowBox[{"IGMinimalVertexSeparatorQ", "[", 
  RowBox[{"g", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<Anna\>\"", ",", "\"\<Nora\>\"", ",", "\"\<Larry\>\""}], 
    "}"}]}], "]"}]], \
"Input",ExpressionUUID->"4b94b4aa-7ea1-44c3-8e82-b35e9ad57a5a"],

Cell[TextData[{
 Cell[BoxData[
 "IGMinimumSeparators"],ExpressionUUID->
  "ce947860-b900-4c19-b52b-04386b7578c4"],
 " returns only those vertex separators which are of the smallest possible \
size in the graph. ",
 Cell[BoxData[
 "IGMinimalSeparators"],ExpressionUUID->
  "587e7f96-d0b3-4d46-ac0f-acefccf32326"],
 " returns all separators which cannot be made smaller by removing a vertex \
from them. The former is a subset of the latter."
}], "Text",ExpressionUUID->"325bff5e-5ced-4d05-bad1-e68f32b03c7d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{0, 1, 2, 3, 4, 5, 6}, {
        Null, {{1, 2}, {2, 3}, {3, 4}, {3, 5}, {5, 6}, {4, 6}, {6, 7}, {7, 
         1}}}, {VertexLabels -> {
           Placed["Name", Center]}, VertexShapeFunction -> {None}, 
         VertexSize -> {Large}}]]}, 
      TagBox[GraphicsGroupBox[{
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
          {Arrowheads[0.], 
           ArrowBox[{{2.4672573199232506`, 0.8378444909707423}, {
            1.8812749619341707`, 0.}}, 0.125485749580099]}, 
          {Arrowheads[0.], 
           ArrowBox[{{2.4672573199232506`, 0.8378444909707423}, {
            1.8829073080344623`, 1.6753663185872556`}}, 0.125485749580099]}, 
          {Arrowheads[0.], 
           ArrowBox[{{1.8812749619341707`, 0.}, {0.7724059938006376, 
            0.09750948642949642}}, 0.125485749580099]}, 
          {Arrowheads[0.], 
           ArrowBox[{{0.7724059938006376, 0.09750948642949642}, {0., 
            0.8386855499318042}}, 0.125485749580099]}, 
          {Arrowheads[0.], 
           ArrowBox[{{0.7724059938006376, 0.09750948642949642}, {
            0.6274286920883272, 0.8389501936810161}}, 0.125485749580099]}, 
          {Arrowheads[0.], 
           ArrowBox[{{0., 0.8386855499318042}, {0.7736623620480478, 
            1.5791956151476407`}}, 0.125485749580099]}, 
          {Arrowheads[0.], 
           ArrowBox[{{0.6274286920883272, 0.8389501936810161}, {
            0.7736623620480478, 1.5791956151476407`}}, 0.125485749580099]}, 
          {Arrowheads[0.], 
           ArrowBox[{{0.7736623620480478, 1.5791956151476407`}, {
            1.8829073080344623`, 1.6753663185872556`}}, 
            0.125485749580099]}}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], {
           StyleBox[
            DiskBox[{2.4672573199232506, 0.8378444909707423}, 
             0.125485749580099],
            StripOnInput->False,
            ShowContents->False], 
           InsetBox["0", {2.4672573199232506, 0.8378444909707423},
            BaseStyle->"Graphics"]}, {
           StyleBox[DiskBox[{1.8812749619341707, 0.}, 0.125485749580099],
            StripOnInput->False,
            ShowContents->False], InsetBox["1", {1.8812749619341707, 0.},
            BaseStyle->"Graphics"]}, {
           
           StyleBox[
            DiskBox[{0.7724059938006376, 0.09750948642949642}, 
             0.125485749580099],
            StripOnInput->False,
            ShowContents->False], 
           InsetBox["2", {0.7724059938006376, 0.09750948642949642},
            BaseStyle->"Graphics"]}, {
           StyleBox[DiskBox[{0., 0.8386855499318042}, 0.125485749580099],
            StripOnInput->False,
            ShowContents->False], InsetBox["3", {0., 0.8386855499318042},
            BaseStyle->"Graphics"]}, {
           
           StyleBox[
            DiskBox[{0.6274286920883272, 0.8389501936810161}, 
             0.125485749580099],
            StripOnInput->False,
            ShowContents->False], 
           InsetBox["4", {0.6274286920883272, 0.8389501936810161},
            BaseStyle->"Graphics"]}, {
           
           StyleBox[
            DiskBox[{0.7736623620480478, 1.5791956151476407}, 
             0.125485749580099],
            StripOnInput->False,
            ShowContents->False], 
           InsetBox["5", {0.7736623620480478, 1.5791956151476407},
            BaseStyle->"Graphics"]}, {
           
           StyleBox[
            DiskBox[{1.8829073080344623, 1.6753663185872556}, 
             0.125485749580099],
            StripOnInput->False,
            ShowContents->False], 
           InsetBox["6", {1.8829073080344623, 1.6753663185872556},
            BaseStyle->"Graphics"]}}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{171.3828125, Automatic}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7027269099017878`*^9, 
  3.702726915800008*^9}},ExpressionUUID->"16807c75-c417-4fc5-868b-\
2229ad748823"],

Cell[BoxData[
 RowBox[{"IGMinimalSeparators", "[", "g", "]"}]], "Input",
 CellChangeTimes->{{3.702726916648171*^9, 
  3.7027269182479563`*^9}},ExpressionUUID->"d63ad0a1-d607-4ee6-a7f5-\
ef6f8df71b8b"],

Cell[BoxData[
 RowBox[{"IGMinimumSeparators", "[", "g", "]"}]], "Input",
 CellChangeTimes->{{3.7027269205294847`*^9, 
  3.7027269234227457`*^9}},ExpressionUUID->"1de4cd7e-c615-46b9-b52d-\
03a00dc93d69"],

Cell[BoxData[
 RowBox[{"SubsetQ", "[", 
  RowBox[{"%%", ",", "%"}], "]"}]], "Input",
 CellChangeTimes->{{3.702726927581896*^9, 
  3.702726943974859*^9}},ExpressionUUID->"8793c3d8-e1db-404b-8c60-\
607a4504d0be"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGEdgeConnectivity", \
"Subsubsection",ExpressionUUID->"620d4de1-4558-4165-b0ac-102d10ce4bad"],

Cell[BoxData[
 RowBox[{"?", 
  "IGEdgeConnectivity"}]], \
"Input",ExpressionUUID->"0b6175b0-abcd-4b78-9497-a29d50186443"],

Cell[TextData[{
 Cell[BoxData[
 "IGEdgeConnectivity"],ExpressionUUID->"886b1c12-401a-43fb-9e9a-1c02a503c90d"],
 " ignores edge weights. To take edge weights into account, use ",
 Cell[BoxData[
 "IGMinimumCutValue"],ExpressionUUID->
  "edf4e966-ba44-438b-b1d2-d63d7204cb0d"],
 " instead."
}], "Text",ExpressionUUID->"5ba506d1-f78a-4a78-886c-268a32979144"],

Cell["Compute the edge connectivity of the dodecahedral graph.", \
"Text",ExpressionUUID->"7f820f60-3221-4a2d-abb7-5d3a1e084875"],

Cell[BoxData[
 RowBox[{"IGEdgeConnectivity", "[", 
  RowBox[{"GraphData", "[", "\"\<DodecahedralGraph\>\"", "]"}], 
  "]"}]], "Input",ExpressionUUID->"4785108f-bfbf-4866-a5ec-fa69e55e594c"],

Cell["\<\
The edge connectivity of the singleton graph is returned as 0.\
\>", "Text",ExpressionUUID->"d8dd16da-3d75-4290-9dd1-8972697471d3"],

Cell[BoxData[
 RowBox[{"IGEdgeConnectivity", "[", 
  RowBox[{"IGEmptyGraph", "[", "1", "]"}], 
  "]"}]], "Input",ExpressionUUID->"dd54d740-3947-4268-b168-1131c1c3766e"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGVertexConnectivity", \
"Subsubsection",ExpressionUUID->"9af686b4-92cf-455e-8133-539b51864a25"],

Cell[BoxData[
 RowBox[{"?", 
  "IGVertexConnectivity"}]], \
"Input",ExpressionUUID->"93480a8a-d765-4d99-8048-fe64ff5affb6"],

Cell["\<\
According to Steinitz\[CloseCurlyQuote]s theorem, the skeleton of every \
convex polyhedron is a 3-vertex-connected planar graph.\
\>", "Text",ExpressionUUID->"bd2994bd-8aff-465a-88da-efcbbf35bb7b"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{
  "GraphData", "[", "\"\<DodecahedralGraph\>\"", 
   "]"}]}]], "Input",ExpressionUUID->"39c08a8d-5d84-4bf4-b635-42ad0b460ccb"],

Cell[BoxData[
 RowBox[{"IGVertexConnectivity", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"2474f45e-e90b-463a-93b2-89f30764820f"],

Cell[TextData[{
 "To find the specific vertex sets that disconnect the graph, use ",
 Cell[BoxData[
 "IGMinimumSeparators"],ExpressionUUID->
  "c85ddc26-a9e7-4061-bf10-c1dcc8d58eb0"],
 " or ",
 Cell[BoxData[
 "IGMinimalSeparators"],ExpressionUUID->
  "26e8a8e6-ced5-4dfe-bb32-4f32d71ba424"],
 "."
}], "Text",ExpressionUUID->"4130f475-e9cd-4c10-83ce-d24612989b4e"],

Cell[BoxData[
 RowBox[{"IGMinimumSeparators", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"9e1a0ce6-6c8a-4b3c-bc61-de9806e65fc8"],

Cell["\<\
The vertex connectivity of the singleton graph is returned as 0.\
\>", "Text",ExpressionUUID->"2b7d3326-eda4-40ef-a44d-2789fbc88428"],

Cell[BoxData[
 RowBox[{"IGVertexConnectivity", "[", 
  RowBox[{"IGEmptyGraph", "[", "1", "]"}], 
  "]"}]], "Input",ExpressionUUID->"f9e9c597-a4e5-4f77-a0e7-394eb6d9398e"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGBiconnectedQ", \
"Subsubsection",ExpressionUUID->"5b273b23-ce91-4962-864f-167e308b4bfd"],

Cell[BoxData[
 RowBox[{"?", 
  "IGBiconnectedQ"}]], \
"Input",ExpressionUUID->"6ad39d0a-f1d2-40af-9ba5-51ab8c41bbec"],

Cell[TextData[{
 Cell[BoxData[
 "IGBiconnectedQ"],ExpressionUUID->"733aaf7c-8f99-45af-9608-e9d53d1781d9"],
 " checks if a graph is biconnected. Edge directions are ignored."
}], "Text",ExpressionUUID->"e7b09921-6d67-4f90-828d-95a2b251b1ea"],

Cell[BoxData[
 RowBox[{"IGBiconnectedQ", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3, 4, 5, 6}, {
       Null, {{1, 2}, {1, 3}, {1, 4}, {2, 3}, {2, 4}, {3, 4}}}, {
       GraphLayout -> {
         "VertexLayout" -> "TutteEmbedding", "PackingLayout" -> 
          "ClosestPackingCenter"}, VertexSize -> {Medium}}]]}, 
     TagBox[
      GraphicsGroupBox[
       GraphicsComplexBox[{{-2.947193223346186*^-16, 0.7500000000000002}, {
        0.8660254037844386, -0.7499999999999996}, {-1.1102230246251565`*^-16, \
-0.24999999999999986`}, {-0.8660254037844386, -0.7500000000000002}, {
        0.921888475774712, 0.806652416302873}, {-0.921888475774712, 
        0.806652416302873}}, {
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
          {Arrowheads[0.], ArrowBox[{1, 2}, 0.09236275537461923]}, 
          {Arrowheads[0.], ArrowBox[{1, 3}, 0.09236275537461923]}, 
          {Arrowheads[0.], ArrowBox[{1, 4}, 0.09236275537461923]}, 
          {Arrowheads[0.], ArrowBox[{2, 3}, 0.09236275537461923]}, 
          {Arrowheads[0.], ArrowBox[{2, 4}, 0.09236275537461923]}, 
          {Arrowheads[0.], ArrowBox[{3, 4}, 0.09236275537461923]}}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          DiskBox[1, 0.09236275537461923], DiskBox[2, 0.09236275537461923], 
          DiskBox[3, 0.09236275537461923], DiskBox[4, 0.09236275537461923], 
          DiskBox[5, 0.09236275537461923], DiskBox[6, 0.09236275537461923]}}]],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None,
   ImageSize->{83.6640625, Automatic}], 
  "]"}]], "Input",ExpressionUUID->"ce2db44c-18a0-4df5-8583-06a9009a0055"],

Cell[TextData[{
 "Since ",
 Cell[BoxData[
 "IGBiconnectedComponents"],ExpressionUUID->
  "ea0dedfc-bfe0-40d0-a083-da2aa6a9760c"],
 " does not return any isolated vertices, ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"Length", "@", 
    RowBox[{"IGBiconnectedComponents", "[", "g", "]"}]}], "\[Equal]", "1"}]],
  ExpressionUUID->"2df949de-f9cc-4b0a-ab53-e8a93a9f93e0"],
 " cannot be used to check if a graph is biconnected. Use ",
 Cell[BoxData[
 "IGBiconnectedQ"],ExpressionUUID->"86c641f6-2c89-442b-8812-d73c7c07c0dd"],
 " instead."
}], "Text",ExpressionUUID->"4dccb064-46a4-4cd9-94b9-95643975dd50"],

Cell[BoxData[
 RowBox[{"IGBiconnectedComponents", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3, 4, 5, 6}, {
       Null, {{1, 2}, {1, 3}, {1, 4}, {2, 3}, {2, 4}, {3, 4}}}, {
       GraphLayout -> {
         "VertexLayout" -> "TutteEmbedding", "PackingLayout" -> 
          "ClosestPackingCenter"}, VertexSize -> {Medium}}]]}, 
     TagBox[
      GraphicsGroupBox[
       GraphicsComplexBox[{{-2.947193223346186*^-16, 0.7500000000000002}, {
        0.8660254037844386, -0.7499999999999996}, {-1.1102230246251565`*^-16, \
-0.24999999999999986`}, {-0.8660254037844386, -0.7500000000000002}, {
        0.921888475774712, 0.806652416302873}, {-0.921888475774712, 
        0.806652416302873}}, {
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
          {Arrowheads[0.], ArrowBox[{1, 2}, 0.09236275537461923]}, 
          {Arrowheads[0.], ArrowBox[{1, 3}, 0.09236275537461923]}, 
          {Arrowheads[0.], ArrowBox[{1, 4}, 0.09236275537461923]}, 
          {Arrowheads[0.], ArrowBox[{2, 3}, 0.09236275537461923]}, 
          {Arrowheads[0.], ArrowBox[{2, 4}, 0.09236275537461923]}, 
          {Arrowheads[0.], ArrowBox[{3, 4}, 0.09236275537461923]}}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          DiskBox[1, 0.09236275537461923], DiskBox[2, 0.09236275537461923], 
          DiskBox[3, 0.09236275537461923], DiskBox[4, 0.09236275537461923], 
          DiskBox[5, 0.09236275537461923], DiskBox[6, 0.09236275537461923]}}]],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None,
   ImageSize->{83.6640625, Automatic}], 
  "]"}]], "Input",ExpressionUUID->"af35a050-c0f4-4ea5-8867-a62a4a7efcbd"],

Cell["\<\
The singleton graph is not considered to be biconnected, but the two-vertex \
complete graph is.\
\>", "Text",ExpressionUUID->"f1ae69a3-cb32-4f93-a05b-59c9556e46c9"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"IGBiconnectedQ", "@", 
    RowBox[{"CompleteGraph", "[", "k", "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"k", ",", "1", ",", "2"}], "}"}]}], 
  "]"}]], "Input",ExpressionUUID->"2e3819db-8ba0-422a-b217-0853a5c1e17a"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGBiconnectedComponents and IGBiconnectedEdgeComponents", \
"Subsubsection",ExpressionUUID->"284083fe-fa28-44fc-a5a9-dac0cfd74b46"],

Cell[BoxData[
 RowBox[{"?", 
  "IGBiconnectedComponents"}]], \
"Input",ExpressionUUID->"a4718c64-36a4-4f06-9993-f002a6332d08"],

Cell[BoxData[
 RowBox[{"?", 
  "IGBiconnectedEdgeComponents"}]], \
"Input",ExpressionUUID->"a744ba76-ba8a-4348-b016-1968a8a7b602"],

Cell[TextData[{
 Cell[BoxData[
 "IGBiconnectedCompoments"],ExpressionUUID->
  "5eb5f2a0-a81c-44d9-9947-bab18e217f1b"],
 " returns the vertices of the maximal biconnected components of the graph. \
",
 Cell[BoxData[
 "IGBiconnectedEdgeComponents"],ExpressionUUID->
  "6ced6f27-a7e2-49dd-ae41-99fe88122ad5"],
 " returns the edges of the components. Edge directions are ignored and \
isolated vertices are excluded."
}], "Text",ExpressionUUID->"67344d89-6a66-44df-8faf-94b1b5ec0da2"],

Cell[TextData[{
 Cell[BoxData[
 "IGBiconnectedComponents"],ExpressionUUID->
  "918d8d04-1a5f-4a49-9b2c-75842cf81865"],
 " is equivalent to ",
 Cell[BoxData[
  RowBox[{"KVertexConnectedComponents", "[", 
   RowBox[{"\[Ellipsis]", ",", "2"}], "]"}]],ExpressionUUID->
  "792983b5-d658-4bc5-84e2-30219dd2eb56"],
 ", except that isolated vertices are not returned as individual components."
}], "Text",ExpressionUUID->"b1b5300c-8897-46fc-9218-6a1a2eb50549"],

Cell["\<\
The articulation vertices will be part of more than a single component, thus \
the biconnected components are not disjoint subsets of the vertex set.\
\>", "Text",ExpressionUUID->"56dec4da-4ccd-4931-851d-80036e5296a0"],

Cell[BoxData[
 RowBox[{"IGBiconnectedComponents", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3, 4, 5}, {Null, {{1, 2}, {2, 3}, {1, 3}, {1, 4}}}, {
       VertexLabels -> {"Name"}, VertexSize -> {Medium}}]]}, 
     TagBox[GraphicsGroupBox[{
        {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
         {Arrowheads[0.], 
          ArrowBox[{{1.2940029186334419`, -0.6035297525078438}, {
           2.211248247845466, -1.0269675056790861`}}, 0.07833357806433489]}, 
         {Arrowheads[0.], 
          ArrowBox[{{1.2940029186334419`, -0.6035297525078438}, {
           2.2111709478906807`, -0.1799097640846974}}, 
           0.07833357806433489]}, 
         {Arrowheads[0.], 
          ArrowBox[{{1.2940029186334419`, -0.6035297525078438}, {
           0.17990976408469717`, -0.6034512532051322}}, 0.07833357806433489]}, 
         {Arrowheads[0.], 
          ArrowBox[{{2.211248247845466, -1.0269675056790861`}, {
           2.2111709478906807`, -0.1799097640846974}}, 0.07833357806433489]}}, 
        {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
         0.7]}], {
          DiskBox[{1.2940029186334419, -0.6035297525078438}, 
           0.07833357806433489], 
          InsetBox["1", 
           Offset[{2, 2}, {1.3723364966977767, -0.525196174443509}], 
           ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]}, {
          DiskBox[{2.211248247845466, -1.0269675056790861}, 
           0.07833357806433489], 
          InsetBox["2", 
           Offset[{2, 2}, {2.2895818259098006, -0.9486339276147513}], 
           ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]}, {
          DiskBox[{2.2111709478906807, -0.1799097640846974}, 
           0.07833357806433489], 
          InsetBox["3", 
           Offset[{2, 2}, {2.2895045259550155, -0.1015761860203625}], 
           ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]}, {
          DiskBox[{0.17990976408469717, -0.6034512532051322}, 
           0.07833357806433489], 
          InsetBox["4", 
           Offset[{2, 2}, {0.25824334214903205, -0.5251176751407973}], 
           ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]}, {
          DiskBox[{0.17990976408469733, -1.386787033848481}, 
           0.07833357806433489], 
          InsetBox["5", 
           Offset[{2, 2}, {0.2582433421490322, -1.308453455784146}], 
           ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]}}}],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None,
   ImageSize->{110.4296875, Automatic}], 
  "]"}]], "Input",ExpressionUUID->"32867be9-5e06-4bf6-8fc3-62dc71af1df4"],

Cell["\<\
However, each edge is part of precisely one biconnected components.\
\>", "Text",ExpressionUUID->"adf0cea4-ba21-4d96-b10a-f2f1018cd13e"],

Cell[BoxData[
 RowBox[{"IGBiconnectedEdgeComponents", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3, 4, 5}, {Null, {{1, 2}, {2, 3}, {1, 3}, {1, 4}}}, {
       VertexLabels -> {"Name"}, VertexSize -> {Medium}}]]}, 
     TagBox[GraphicsGroupBox[{
        {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
         {Arrowheads[0.], 
          ArrowBox[{{1.2940029186334419`, -0.6035297525078438}, {
           2.211248247845466, -1.0269675056790861`}}, 0.07833357806433489]}, 
         {Arrowheads[0.], 
          ArrowBox[{{1.2940029186334419`, -0.6035297525078438}, {
           2.2111709478906807`, -0.1799097640846974}}, 
           0.07833357806433489]}, 
         {Arrowheads[0.], 
          ArrowBox[{{1.2940029186334419`, -0.6035297525078438}, {
           0.17990976408469717`, -0.6034512532051322}}, 0.07833357806433489]}, 
         {Arrowheads[0.], 
          ArrowBox[{{2.211248247845466, -1.0269675056790861`}, {
           2.2111709478906807`, -0.1799097640846974}}, 0.07833357806433489]}}, 
        {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
         0.7]}], {
          DiskBox[{1.2940029186334419, -0.6035297525078438}, 
           0.07833357806433489], 
          InsetBox["1", 
           Offset[{2, 2}, {1.3723364966977767, -0.525196174443509}], 
           ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]}, {
          DiskBox[{2.211248247845466, -1.0269675056790861}, 
           0.07833357806433489], 
          InsetBox["2", 
           Offset[{2, 2}, {2.2895818259098006, -0.9486339276147513}], 
           ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]}, {
          DiskBox[{2.2111709478906807, -0.1799097640846974}, 
           0.07833357806433489], 
          InsetBox["3", 
           Offset[{2, 2}, {2.2895045259550155, -0.1015761860203625}], 
           ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]}, {
          DiskBox[{0.17990976408469717, -0.6034512532051322}, 
           0.07833357806433489], 
          InsetBox["4", 
           Offset[{2, 2}, {0.25824334214903205, -0.5251176751407973}], 
           ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]}, {
          DiskBox[{0.17990976408469733, -1.386787033848481}, 
           0.07833357806433489], 
          InsetBox["5", 
           Offset[{2, 2}, {0.2582433421490322, -1.308453455784146}], 
           ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]}}}],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None,
   ImageSize->{110.4296875, Automatic}], 
  "]"}]], "Input",ExpressionUUID->"813406d5-edea-41a5-a7c9-0b132b623ad8"],

Cell["\<\
Thus, visualizing biconnected components is best done by colouring the edges, \
not the vertices.\
\>", "Text",ExpressionUUID->"6140416d-f63b-49f4-a976-b83dcd6e6989"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
        18}, {Null, {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {1, 5}, {5, 6}, {6, 7}, {
         5, 7}, {4, 8}, {8, 9}, {4, 9}, {8, 10}, {10, 11}, {11, 12}, {12, 
         13}, {10, 13}, {12, 14}, {14, 15}, {12, 15}, {12, 16}, {16, 17}, {12,
          17}, {11, 18}}}, {
        GraphLayout -> "SpringEmbedding", VertexLabels -> {None}, VertexSize -> {
           Rational[1, 3]}}]]}, 
      TagBox[
       GraphicsGroupBox[
        GraphicsComplexBox[{{0., 1.3758489901764286`}, {0.28749933959007956`, 
         0.4167905888172361}, {1.2508829482516652`, 0.5424967323154759}, {
         1.7386836303964401`, 1.5395137714896254`}, {0.832811506359397, 
         2.1449996572167476`}, {0.6057746139226579, 3.2112511157449872`}, {
         0.08976177000059149, 2.83276630743984}, {2.759205169086871, 
         1.5099586575073447`}, {2.24477639236166, 2.174584838536472}, {
         3.75625121903496, 1.4956763255264407`}, {4.720800515872452, 
         1.116665841510232}, {5.571982137701669, 1.872876424133565}, {
         4.574640296907598, 2.2309524626845922`}, {6.246531601497821, 
         2.6899734054137583`}, {5.775740863174883, 2.9947659982812413`}, {
         6.582867680114843, 1.6598019503167125`}, {6.377933453489726, 
         1.127886353872904}, {4.918141886720571, 0.}}, {
          {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
           LineBox[{{1, 2}, {1, 5}, {2, 3}, {3, 4}, {4, 5}, {4, 8}, {4, 9}, {
            5, 6}, {5, 7}, {6, 7}, {8, 9}, {8, 10}, {10, 11}, {10, 13}, {11, 
            12}, {11, 18}, {12, 13}, {12, 14}, {12, 15}, {12, 16}, {12, 17}, {
            14, 15}, {16, 17}}]}, 
          {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
           DiskBox[1, 0.09347347276062698], DiskBox[2, 0.09347347276062698], 
           DiskBox[3, 0.09347347276062698], DiskBox[4, 0.09347347276062698], 
           DiskBox[5, 0.09347347276062698], DiskBox[6, 0.09347347276062698], 
           DiskBox[7, 0.09347347276062698], DiskBox[8, 0.09347347276062698], 
           DiskBox[9, 0.09347347276062698], DiskBox[10, 0.09347347276062698], 
           DiskBox[11, 0.09347347276062698], DiskBox[12, 0.09347347276062698],
            DiskBox[13, 0.09347347276062698], 
           DiskBox[14, 0.09347347276062698], DiskBox[15, 0.09347347276062698],
            DiskBox[16, 0.09347347276062698], 
           DiskBox[17, 0.09347347276062698], 
           DiskBox[18, 0.09347347276062698]}}]],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{265.0625, Automatic}]}], 
  ";"}]], "Input",ExpressionUUID->"632ecded-31d0-4aae-a69d-82e5600bd1ae"],

Cell[BoxData[
 RowBox[{"HighlightGraph", "[", 
  RowBox[{"g", ",", 
   RowBox[{"IGBiconnectedEdgeComponents", "[", "g", "]"}], ",", 
   RowBox[{"GraphStyle", "\[Rule]", "\"\<ThickEdge\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"8c321529-2960-4e0d-8b13-7ffdc769bf92"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGArticulationPoints", \
"Subsubsection",ExpressionUUID->"75516d60-5b21-4f63-b3df-e00c6e8f3fb6"],

Cell[BoxData[
 RowBox[{"?", 
  "IGArticulationPoints"}]], \
"Input",ExpressionUUID->"dabfc727-4ac6-44c4-82ea-34e6d22348d5"],

Cell[TextData[{
 Cell[BoxData[
 "IGArticulationPoints"],ExpressionUUID->
  "cd527e39-ef7a-45e6-a3f5-a042fa4cdcb3"],
 " finds vertices whose removal increases the number of (weakly) connected \
components in the graph. Edge directions are ignored."
}], "Text",ExpressionUUID->"3c3afda3-e930-4acf-806a-603be906651a"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"Graph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "\[Rule]", "2"}], ",", 
      RowBox[{"2", "\[Rule]", "3"}], ",", 
      RowBox[{"3", "\[Rule]", "1"}], ",", 
      RowBox[{"3", "\[Rule]", "4"}], ",", 
      RowBox[{"4", "\[Rule]", "5"}], ",", 
      RowBox[{"5", "\[Rule]", "6"}], ",", 
      RowBox[{"6", "\[Rule]", "4"}]}], "}"}], ",", 
    RowBox[{"DirectedEdges", "\[Rule]", "False"}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", "Automatic"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"0565fff6-adef-4f17-9321-a02af5651837"],

Cell[BoxData[
 RowBox[{"IGArticulationPoints", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"1306492a-9b38-40c4-97ed-10cb4bb744f4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"VertexDelete", "[", 
    RowBox[{"g", ",", "#"}], "]"}], "&"}], "/@", 
  "%"}]], "Input",ExpressionUUID->"d3a66c22-7e5e-4c8e-809e-14d13bbf3b38"],

Cell["Articulation points are also size-1 separators.", \
"Text",ExpressionUUID->"d3fde557-6fe8-4953-95fd-3d144f7f8912"],

Cell[BoxData[
 RowBox[{"IGMinimumSeparators", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"4d3fd0b4-176b-4e1d-8184-806d0ec47a32"],

Cell["Highlight the articulation points of a cactus graph.", \
"Text",ExpressionUUID->"511ac070-86fd-4f2d-9ab3-ecdf27de154d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
        18}, {Null, {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {1, 5}, {5, 6}, {6, 7}, {
         5, 7}, {4, 8}, {8, 9}, {4, 9}, {8, 10}, {10, 11}, {11, 12}, {12, 
         13}, {10, 13}, {12, 14}, {14, 15}, {12, 15}, {12, 16}, {16, 17}, {12,
          17}, {11, 18}}}, {
        GraphLayout -> "SpringEmbedding", GraphStyle -> "BoldColor", 
         VertexLabels -> {
           Placed[Automatic, Center]}, VertexLabelStyle -> {
           GrayLevel[1]}, VertexSize -> {
           Rational[2, 3]}}]], Typeset`boxes, Typeset`boxes$s2d = 
      GraphicsGroupBox[{{
         RGBColor[0.91, 0.318, 0.243], 
         LineBox[{{
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$2", Automatic, Center]}, {
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$5", Automatic, Center]}, {
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}, {
            DynamicLocation["VertexID$3", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}, {
            DynamicLocation["VertexID$4", Automatic, Center], 
            DynamicLocation["VertexID$5", Automatic, Center]}, {
            DynamicLocation["VertexID$4", Automatic, Center], 
            DynamicLocation["VertexID$8", Automatic, Center]}, {
            DynamicLocation["VertexID$4", Automatic, Center], 
            DynamicLocation["VertexID$9", Automatic, Center]}, {
            DynamicLocation["VertexID$5", Automatic, Center], 
            DynamicLocation["VertexID$6", Automatic, Center]}, {
            DynamicLocation["VertexID$5", Automatic, Center], 
            DynamicLocation["VertexID$7", Automatic, Center]}, {
            DynamicLocation["VertexID$6", Automatic, Center], 
            DynamicLocation["VertexID$7", Automatic, Center]}, {
            DynamicLocation["VertexID$8", Automatic, Center], 
            DynamicLocation["VertexID$9", Automatic, Center]}, {
            DynamicLocation["VertexID$8", Automatic, Center], 
            DynamicLocation["VertexID$10", Automatic, Center]}, {
            DynamicLocation["VertexID$10", Automatic, Center], 
            DynamicLocation["VertexID$11", Automatic, Center]}, {
            DynamicLocation["VertexID$10", Automatic, Center], 
            DynamicLocation["VertexID$13", Automatic, Center]}, {
            DynamicLocation["VertexID$11", Automatic, Center], 
            DynamicLocation["VertexID$12", Automatic, Center]}, {
            DynamicLocation["VertexID$11", Automatic, Center], 
            DynamicLocation["VertexID$18", Automatic, Center]}, {
            DynamicLocation["VertexID$12", Automatic, Center], 
            DynamicLocation["VertexID$13", Automatic, Center]}, {
            DynamicLocation["VertexID$12", Automatic, Center], 
            DynamicLocation["VertexID$14", Automatic, Center]}, {
            DynamicLocation["VertexID$12", Automatic, Center], 
            DynamicLocation["VertexID$15", Automatic, Center]}, {
            DynamicLocation["VertexID$12", Automatic, Center], 
            DynamicLocation["VertexID$16", Automatic, Center]}, {
            DynamicLocation["VertexID$12", Automatic, Center], 
            DynamicLocation["VertexID$17", Automatic, Center]}, {
            DynamicLocation["VertexID$14", Automatic, Center], 
            DynamicLocation["VertexID$15", Automatic, Center]}, {
            DynamicLocation["VertexID$16", Automatic, Center], 
            DynamicLocation["VertexID$17", Automatic, Center]}}]}, {
         Directive[
          RGBColor[0.34398, 0.49112, 0.89936], 
          EdgeForm[
           RGBColor[0.34398, 0.49112, 0.89936]]], 
         TagBox[{
           TagBox[
            DiskBox[{0., 1.3758489901764286`}, 0.18694694552125396`], 
            "DynamicName", BoxID -> "VertexID$1"], 
           InsetBox[
            FormBox[
             StyleBox["1", 
              GrayLevel[1], StripOnInput -> False], TraditionalForm], 
            DynamicLocation["VertexID$1", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$1"], 
         TagBox[{
           TagBox[
            
            DiskBox[{0.28749933959007956`, 0.4167905888172361}, 
             0.18694694552125396`], "DynamicName", BoxID -> "VertexID$2"], 
           InsetBox[
            FormBox[
             StyleBox["2", 
              GrayLevel[1], StripOnInput -> False], TraditionalForm], 
            DynamicLocation["VertexID$2", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$2"], 
         TagBox[{
           TagBox[
            
            DiskBox[{1.2508829482516652`, 0.5424967323154759}, 
             0.18694694552125396`], "DynamicName", BoxID -> "VertexID$3"], 
           InsetBox[
            FormBox[
             StyleBox["3", 
              GrayLevel[1], StripOnInput -> False], TraditionalForm], 
            DynamicLocation["VertexID$3", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$3"], 
         TagBox[{
           TagBox[
            
            DiskBox[{1.7386836303964401`, 1.5395137714896254`}, 
             0.18694694552125396`], "DynamicName", BoxID -> "VertexID$4"], 
           InsetBox[
            FormBox[
             StyleBox["4", 
              GrayLevel[1], StripOnInput -> False], TraditionalForm], 
            DynamicLocation["VertexID$4", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$4"], 
         TagBox[{
           TagBox[
            
            DiskBox[{0.832811506359397, 2.1449996572167476`}, 
             0.18694694552125396`], "DynamicName", BoxID -> "VertexID$5"], 
           InsetBox[
            FormBox[
             StyleBox["5", 
              GrayLevel[1], StripOnInput -> False], TraditionalForm], 
            DynamicLocation["VertexID$5", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$5"], 
         TagBox[{
           TagBox[
            
            DiskBox[{0.6057746139226579, 3.2112511157449872`}, 
             0.18694694552125396`], "DynamicName", BoxID -> "VertexID$6"], 
           InsetBox[
            FormBox[
             StyleBox["6", 
              GrayLevel[1], StripOnInput -> False], TraditionalForm], 
            DynamicLocation["VertexID$6", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$6"], 
         TagBox[{
           TagBox[
            
            DiskBox[{0.08976177000059149, 2.83276630743984}, 
             0.18694694552125396`], "DynamicName", BoxID -> "VertexID$7"], 
           InsetBox[
            FormBox[
             StyleBox["7", 
              GrayLevel[1], StripOnInput -> False], TraditionalForm], 
            DynamicLocation["VertexID$7", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$7"], 
         TagBox[{
           TagBox[
            
            DiskBox[{2.759205169086871, 1.5099586575073447`}, 
             0.18694694552125396`], "DynamicName", BoxID -> "VertexID$8"], 
           InsetBox[
            FormBox[
             StyleBox["8", 
              GrayLevel[1], StripOnInput -> False], TraditionalForm], 
            DynamicLocation["VertexID$8", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$8"], 
         TagBox[{
           TagBox[
            
            DiskBox[{2.24477639236166, 2.174584838536472}, 
             0.18694694552125396`], "DynamicName", BoxID -> "VertexID$9"], 
           InsetBox[
            FormBox[
             StyleBox["9", 
              GrayLevel[1], StripOnInput -> False], TraditionalForm], 
            DynamicLocation["VertexID$9", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$9"], 
         TagBox[{
           TagBox[
            
            DiskBox[{3.75625121903496, 1.4956763255264407`}, 
             0.18694694552125396`], "DynamicName", BoxID -> "VertexID$10"], 
           InsetBox[
            FormBox[
             StyleBox["10", 
              GrayLevel[1], StripOnInput -> False], TraditionalForm], 
            DynamicLocation["VertexID$10", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$10"], 
         TagBox[{
           TagBox[
            
            DiskBox[{4.720800515872452, 1.116665841510232}, 
             0.18694694552125396`], "DynamicName", BoxID -> "VertexID$11"], 
           InsetBox[
            FormBox[
             StyleBox["11", 
              GrayLevel[1], StripOnInput -> False], TraditionalForm], 
            DynamicLocation["VertexID$11", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$11"], 
         TagBox[{
           TagBox[
            
            DiskBox[{5.571982137701669, 1.872876424133565}, 
             0.18694694552125396`], "DynamicName", BoxID -> "VertexID$12"], 
           InsetBox[
            FormBox[
             StyleBox["12", 
              GrayLevel[1], StripOnInput -> False], TraditionalForm], 
            DynamicLocation["VertexID$12", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$12"], 
         TagBox[{
           TagBox[
            
            DiskBox[{4.574640296907598, 2.2309524626845922`}, 
             0.18694694552125396`], "DynamicName", BoxID -> "VertexID$13"], 
           InsetBox[
            FormBox[
             StyleBox["13", 
              GrayLevel[1], StripOnInput -> False], TraditionalForm], 
            DynamicLocation["VertexID$13", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$13"], 
         TagBox[{
           TagBox[
            
            DiskBox[{6.246531601497821, 2.6899734054137583`}, 
             0.18694694552125396`], "DynamicName", BoxID -> "VertexID$14"], 
           InsetBox[
            FormBox[
             StyleBox["14", 
              GrayLevel[1], StripOnInput -> False], TraditionalForm], 
            DynamicLocation["VertexID$14", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$14"], 
         TagBox[{
           TagBox[
            
            DiskBox[{5.775740863174883, 2.9947659982812413`}, 
             0.18694694552125396`], "DynamicName", BoxID -> "VertexID$15"], 
           InsetBox[
            FormBox[
             StyleBox["15", 
              GrayLevel[1], StripOnInput -> False], TraditionalForm], 
            DynamicLocation["VertexID$15", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$15"], 
         TagBox[{
           TagBox[
            
            DiskBox[{6.582867680114843, 1.6598019503167125`}, 
             0.18694694552125396`], "DynamicName", BoxID -> "VertexID$16"], 
           InsetBox[
            FormBox[
             StyleBox["16", 
              GrayLevel[1], StripOnInput -> False], TraditionalForm], 
            DynamicLocation["VertexID$16", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$16"], 
         TagBox[{
           TagBox[
            
            DiskBox[{6.377933453489726, 1.127886353872904}, 
             0.18694694552125396`], "DynamicName", BoxID -> "VertexID$17"], 
           InsetBox[
            FormBox[
             StyleBox["17", 
              GrayLevel[1], StripOnInput -> False], TraditionalForm], 
            DynamicLocation["VertexID$17", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$17"], 
         TagBox[{
           TagBox[
            DiskBox[{4.918141886720571, 0.}, 0.18694694552125396`], 
            "DynamicName", BoxID -> "VertexID$18"], 
           InsetBox[
            FormBox[
             StyleBox["18", 
              GrayLevel[1], StripOnInput -> False], TraditionalForm], 
            DynamicLocation["VertexID$18", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> 
          "VertexLabelID$18"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        
        ImageSizeCache->{{5.151171875, 302.407421875}, {-80.094875, 
         74.06449679721376}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{308.55859375, Automatic}]}], 
  ";"}]], "Input",ExpressionUUID->"30adf52d-7990-4fc0-842a-b11b3868624b"],

Cell[BoxData[
 RowBox[{"HighlightGraph", "[", 
  RowBox[{"g", ",", 
   RowBox[{"IGArticulationPoints", "[", "g", "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"b9d9ed02-6adc-4677-afa6-0f1894160273"],

Cell[TextData[{
 "Compute the block-cut tree of a connected graph. The ",
 StyleBox["blocks",
  FontSlant->"Italic"],
 " are the biconnected components. Together with the articulation vertices \
they form a bipartite graph, specifically a tree."
}], "Text",ExpressionUUID->"ffd4c9a5-2c4d-4204-88e2-42cfa556e763"],

Cell[BoxData[
 RowBox[{"RelationGraph", "[", "\[IndentingNewLine]", 
  RowBox[{"MemberQ", ",", "\[IndentingNewLine]", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"IGBiconnectedComponents", "[", "g", "]"}], ",", 
     RowBox[{"IGArticulationPoints", "[", "g", "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"DirectedEdges", "\[Rule]", "False"}], ",", "\[IndentingNewLine]", 
   
   RowBox[{"GraphStyle", "\[Rule]", "\"\<ClassicDiagram\>\""}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"VertexSize", "\[Rule]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "1"}], "}"}], "/", "7"}]}], ",", 
   RowBox[{"VertexLabelStyle", "\[Rule]", "8"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"b75b1b1b-e9fe-4f16-9577-b44fd50c2719"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGBridges", \
"Subsubsection",ExpressionUUID->"56568c00-8230-435d-b61b-8826cb178396"],

Cell[BoxData[
 RowBox[{"?", 
  "IGBridges"}]], \
"Input",ExpressionUUID->"a41f5938-3ffb-4d44-a85d-ab7e15a1fd57"],

Cell["\<\
A bridge is an edge whose removal disconnects the graph (or increases the \
number of connected components if the graph was already disconnected). Edge \
directions are ignored.\
\>", "Text",ExpressionUUID->"e302cf97-e268-4801-a9aa-5fd8ddc98011"],

Cell[BoxData[
 RowBox[{"IGShorthand", "[", "\"\<1-2-3-1-4-5-6-4\>\"", 
  "]"}]], "Input",ExpressionUUID->"5e918590-f5c2-47d4-af1b-648f0b7bb53e"],

Cell[BoxData[
 RowBox[{"IGBridges", "[", "%", 
  "]"}]], "Input",ExpressionUUID->"2f9a3633-605f-470a-8769-317c6a9f960c"],

Cell["Highlight bridges in a network.", \
"Text",ExpressionUUID->"36c3d5aa-fda5-470b-9bdb-774388583f38"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<NetworkGraph\>\"", ",", "\"\<FlorentineFamilies\>\""}], 
     "}"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"HighlightGraph", "[", 
  RowBox[{"g", ",", 
   RowBox[{"IGBridges", "[", "g", "]"}]}], 
  "]"}]}], "Input",ExpressionUUID->"67c987ad-c08c-4125-b546-4ad7e051e676"],

Cell["", "Text",ExpressionUUID->"e10ee726-eee1-4fe2-b0a9-d04a86c454c2"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGSourceVertexList and IGSinkVertexList", \
"Subsubsection",ExpressionUUID->"17bfed25-bdc1-49ba-8f16-e851b1411a99"],

Cell[BoxData[
 RowBox[{"?", 
  "IGSourceVertexList"}]], \
"Input",ExpressionUUID->"40512276-6432-4c4a-b4f4-1c109b29322e"],

Cell[BoxData[
 RowBox[{"?", 
  "IGSinkVertexList"}]], \
"Input",ExpressionUUID->"361fb816-232d-41b3-b212-b12122601fde"],

Cell["\<\
Find and highlight the source and sink vertices of a random acyclic graph.\
\>", "Text",ExpressionUUID->"7c186274-be78-437e-9d9f-968e8f9e7bdf"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"DirectedGraph", "[", 
   RowBox[{
    RowBox[{"RandomGraph", "[", 
     RowBox[{"{", 
      RowBox[{"10", ",", "20"}], "}"}], "]"}], ",", "\"\<Acyclic\>\"", ",", 
    RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}], ",", 
    RowBox[{"VertexSize", "\[Rule]", "Large"}], ",", 
    RowBox[{"EdgeStyle", "\[Rule]", "Gray"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"65d599d7-b8b3-41c8-a5d8-26b4795217ac"],

Cell[BoxData[
 RowBox[{"IGSourceVertexList", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"227fe407-6ee7-46ff-843b-7ddaf727f1be"],

Cell[BoxData[
 RowBox[{"IGSinkVertexList", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"be2d2375-1008-4f82-8676-10fcae389d2a"],

Cell[BoxData[
 RowBox[{"HighlightGraph", "[", 
  RowBox[{"g", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"IGSourceVertexList", "[", "g", "]"}], ",", 
     RowBox[{"IGSinkVertexList", "[", "g", "]"}]}], "}"}]}], 
  "]"}]], "Input",ExpressionUUID->"c10a73d1-9d18-451f-bc71-92a8897a05cc"],

Cell["\<\
Undirected graphs have neither source nor sink vertices because undirected \
edges are counted as bidirectional.\
\>", "Text",ExpressionUUID->"fb3aff6e-e01e-463f-9f7e-74cdb7148be7"],

Cell[BoxData[
 RowBox[{"IGSourceVertexList", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3}, {Null, 
        SparseArray[
        Automatic, {3, 3}, 0, {
         1, {{0, 2, 4, 6}, {{2}, {3}, {1}, {3}, {1}, {2}}}, Pattern}]}, {
       GraphLayout -> "CircularEmbedding", VertexSize -> {Medium}}]]}, 
     TagBox[
      GraphicsGroupBox[
       GraphicsComplexBox[{{-0.8660254037844384, -0.4999999999999994}, {
        0.8660254037844389, -0.5000000000000012}, {1.8369701987210297`*^-16, 
        1.}}, {
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
          {Arrowheads[0.], ArrowBox[{1, 2}, 0.17320508075688767`]}, 
          {Arrowheads[0.], ArrowBox[{1, 3}, 0.17320508075688767`]}, 
          {Arrowheads[0.], ArrowBox[{2, 3}, 0.17320508075688767`]}}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          DiskBox[1, 0.17320508075688767], DiskBox[2, 0.17320508075688767], 
          DiskBox[3, 0.17320508075688767]}}]],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None], 
  "]"}]], "Input",ExpressionUUID->"ea0e968a-d968-4996-a654-9bffbcb9603c"],

Cell["\<\
The exception is isolated vertices, which are counted both as sources and \
sinks.\
\>", "Text",ExpressionUUID->"89d7e457-3c8e-481c-9120-4d0998d1013d"],

Cell[BoxData[
 RowBox[{"Through", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"IGSourceVertexList", ",", "IGSinkVertexList"}], "}"}], "@", 
   RowBox[{"Graph", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", "}"}]}], "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"8711c026-0346-4d9e-9da2-b3f4c1f57416"],

Cell["\<\
These are merely convenience functions that can be implemented \
straightforwardly as \
\>", "Text",ExpressionUUID->"0a86574f-dacc-425f-b340-fb31fe9a464a"],

Cell[BoxData[
 RowBox[{"Pick", "[", 
  RowBox[{
   RowBox[{"VertexList", "[", "g", "]"}], ",", 
   RowBox[{"VertexOutDegree", "[", "g", "]"}], ",", "0"}], 
  "]"}]], "Input",ExpressionUUID->"706b0708-175c-4262-854b-afde07567f41"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGIsolatedVertexList", \
"Subsubsection",ExpressionUUID->"b109b9a8-dbd7-4e9d-a1b2-ae0331b0ff29"],

Cell[BoxData[
 RowBox[{"?", 
  "IGIsolatedVertexList"}]], \
"Input",ExpressionUUID->"e23d59ab-8129-41eb-978d-2a2a4ea178ce"],

Cell[TextData[{
 Cell[BoxData[
 "IGIsolatedVertexList"],ExpressionUUID->
  "e5a24bca-88d1-4052-8ae5-b61388c427a6"],
 " returns the vertices which form their own weakly connected components. \
This includes vertices with no connections, as well as vertices with only \
self-loops."
}], "Text",ExpressionUUID->"17490f3b-4b66-4c87-8010-698189bf1b7a"],

Cell[BoxData[
 RowBox[{"IGIsolatedVertexList", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3, 4, 6, 5}, {
       Null, {{1, 1}, {2, 3}, {3, 4}, {4, 2}, {2, 5}, {4, 2}}}, {EdgeStyle -> {
          Directive[
           Thickness[Large], 
           GrayLevel[0.5, 1]]}, 
        GraphLayout -> {"PackingLayout" -> "ClosestPackingCenter"}, 
        VertexLabels -> {
          Placed["Name", Center]}, VertexSize -> {
          Rational[1, 3]}, VertexStyle -> {
          GrayLevel[1]}}]]}, 
     TagBox[GraphicsGroupBox[{
        {GrayLevel[0.5], Thickness[Large], Opacity[1], 
         {Arrowheads[0.], 
          ArrowBox[
           BezierCurveBox[{{-0.8400490617102454, -1.080063079341744}, \
{-0.9285283171780059, -1.2708466117270463`}, {-1.1274067947155968`, \
-1.3272428541876404`}, {-1.254577419190054, -1.2682857754127672`}, \
{-1.254577419190054, -0.8918403832707209}, {-1.1274067947155968`, \
-0.8328833044958477}, {-0.928528317178006, -0.8892795469564417}, \
{-0.8400490617102454, -1.080063079341744}},
           SplineDegree->7], 0.14117629085357833`]}, 
         {Arrowheads[0.], 
          ArrowBox[{{0.09842391266836037, -0.00009111762595198636}, {
           1.0156692418803843`, -0.42352887079719437`}}, 
           0.14117629085357833`]}, 
         {Arrowheads[0.], 
          ArrowBox[BezierCurveBox[{{
           0.09842391266836037, -0.00009111762595198636}, {0.4873475398789745,
            0.3625386726091479}, {1.0155919419255992`, 
           0.42352887079719437`}}], 0.14117629085357833`]}, 
         {Arrowheads[0.], 
          ArrowBox[BezierCurveBox[{{
           0.09842391266836037, -0.00009111762595198636}, {0.6266683147149874,
            0.06089908056209398}, {1.0155919419255992`, 
           0.42352887079719437`}}], 0.14117629085357833`]}, 
         {Arrowheads[0.], 
          ArrowBox[{{
           0.09842391266836037, -0.00009111762595198636}, \
{-1.0156692418803843`, -0.000012618323240343177`}}, 0.14117629085357833`]}, 
         {Arrowheads[0.], 
          ArrowBox[{{1.0156692418803843`, -0.42352887079719437`}, {
           1.0155919419255992`, 0.42352887079719437`}}, 
           0.14117629085357833`]}}, 
        {GrayLevel[1], EdgeForm[{GrayLevel[0], Opacity[
         0.7]}], {
          DiskBox[{-0.8400490617102454, -1.080063079341744}, 
           0.14117629085357833], 
          InsetBox["1", {-0.8400490617102454, -1.080063079341744},
           BaseStyle->"Graphics"]}, {
          DiskBox[{0.09842391266836037, -0.00009111762595198636}, 
           0.14117629085357833], 
          InsetBox["2", {0.09842391266836037, -0.00009111762595198636},
           BaseStyle->"Graphics"]}, {
          DiskBox[{1.0156692418803843, -0.42352887079719437}, 
           0.14117629085357833], 
          InsetBox["3", {1.0156692418803843, -0.42352887079719437},
           BaseStyle->"Graphics"]}, {
          DiskBox[{1.0155919419255992, 0.42352887079719437}, 
           0.14117629085357833], 
          InsetBox["4", {1.0155919419255992, 0.42352887079719437},
           BaseStyle->"Graphics"]}, {
          DiskBox[{-1.0156692418803843, -0.000012618323240343177}, 
           0.14117629085357833], 
          InsetBox["6", {-1.0156692418803843, -0.000012618323240343177},
           BaseStyle->"Graphics"]}, {
          DiskBox[{-0.48002803526299737, 0.7200420528944961}, 
           0.14117629085357833], 
          InsetBox["5", {-0.48002803526299737, 0.7200420528944961},
           BaseStyle->"Graphics"]}}}],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None,
   ImageSize->{131.10546875, Automatic}], 
  "]"}]], "Input",ExpressionUUID->"4d5bcea1-5a89-463a-ac24-9893535b3f1a"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGGiantComponent", \
"Subsubsection",ExpressionUUID->"e613b99a-2023-4cd5-86ba-0d3611234c11"],

Cell[BoxData[
 RowBox[{"?", 
  "IGGiantComponent"}]], \
"Input",ExpressionUUID->"6bd45011-6740-43c0-b88b-df627d1981a8"],

Cell[TextData[{
 Cell[BoxData[
 "IGGiantComponent"],ExpressionUUID->"5779ac7b-cfcf-47fd-9b7a-64847b4be727"],
 " is a convenience function that returns the largest weakly connected \
component of graph. If there are multiple components of largest size, there \
is no guarantee about which one would be returned. If this is a concern, use ",
 Cell[BoxData[
 "WeaklyConnectedComponents"],ExpressionUUID->
  "9dba9a43-5b87-4f8a-b253-b376c665f3a7"],
 " or ",
 Cell[BoxData[
 "WeaklyConnectedGraphComponents"],ExpressionUUID->
  "121bdaec-14a0-4b81-9178-a151cd3292c2"],
 " instead."
}], "Text",ExpressionUUID->"ffa323d6-a904-404f-8adf-0bc83e7dccd9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"RandomGraph", "[", 
    RowBox[{"{", 
     RowBox[{"200", ",", "200"}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"HighlightGraph", "[", "\[IndentingNewLine]", 
   RowBox[{"g", ",", "\[IndentingNewLine]", 
    RowBox[{"IGGiantComponent", "[", "g", "]"}]}], "\[IndentingNewLine]", 
   "]"}], "//", 
  "IGLayoutFruchtermanReingold"}]}], \
"Input",ExpressionUUID->"c1486c19-5186-40d2-8d2d-0df3ff3833d7"],

Cell[TextData[{
 Cell[BoxData[
 "IGGiantComponent"],ExpressionUUID->"11bd76c3-cd82-435d-beec-a526a6635aea"],
 " takes all standard graph options."
}], "Text",ExpressionUUID->"9dd6ed1b-844d-47b9-b989-cb78b2d30417"],

Cell[BoxData[
 RowBox[{"IGGiantComponent", "[", 
  RowBox[{"g", ",", 
   RowBox[{"GraphStyle", "\[Rule]", "\"\<BasicGreen\>\""}], ",", 
   RowBox[{"GraphLayout", "\[Rule]", "\"\<SpringEmbedding\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"ee40afad-a063-4fb0-a0c2-7c52675839b8"],

Cell["\<\
Size of the giant component of a random subgraph of a grid graph.\
\>", "Text",ExpressionUUID->"9174e92c-884d-481c-bf09-cd433482848d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"IGSquareLattice", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"30", ",", "30"}], "}"}], ",", 
     RowBox[{"\"\<Periodic\>\"", "\[Rule]", "True"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"Table", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"k", ",", 
      RowBox[{"VertexCount", "@", 
       RowBox[{"IGGiantComponent", "@", 
        RowBox[{"Subgraph", "[", 
         RowBox[{"g", ",", 
          RowBox[{"RandomSample", "[", 
           RowBox[{
            RowBox[{"VertexList", "[", "g", "]"}], ",", "k"}], "]"}]}], 
         "]"}]}]}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"k", ",", "1", ",", 
      RowBox[{"VertexCount", "[", "g", "]"}], ",", "1"}], "}"}]}], 
   "\[IndentingNewLine]", "]"}], "//", 
  "ListPlot"}]}], \
"Input",ExpressionUUID->"cfcc2ca6-f799-4878-b837-107ad212cbc1"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGPercolationCurve", \
"Subsubsection",ExpressionUUID->"6b7e54f5-9153-498c-bffe-81393c9dee10"],

Cell[BoxData[
 RowBox[{"?", 
  "IGPercolationCurve"}]], \
"Input",ExpressionUUID->"c55eae40-b5e0-4cc6-af3e-062e523b2f49"],

Cell[TextData[{
 Cell[BoxData[
 "IGPercolationCurve"],ExpressionUUID->"285d4dec-a949-49e0-b18f-e137bc34c6bb"],
 " computes the percolation curve for a sequence of edge additions \
(interpretable as edge removals in reverse order). The ",
 Cell[BoxData["i"],ExpressionUUID->"611a6d00-905e-4cc3-9ba6-917d105ad58e"],
 "th element of the result is the mean degree and the fraction of vertices \
within the largest component before adding the ",
 Cell[BoxData["i"],ExpressionUUID->"47b6442a-21df-452d-a6ac-74837567451c"],
 "th edge."
}], "Text",ExpressionUUID->"aab64c51-2ca8-4644-b376-93bd44c3690f"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGPercolationCurve", "[", "graph", "]"}]],
  FormatType->StandardForm,ExpressionUUID->
  "6ea851b8-fd7a-431f-a4b9-17462480651f"],
 " is equivalent to ",
 Cell[BoxData[
  RowBox[{"IGPercolationCurve", "[", 
   RowBox[{
    RowBox[{"RandomSample", "@", 
     RowBox[{"EdgeList", "[", "graph", "]"}]}], ",", " ", 
    RowBox[{"VertexCount", "[", "graph", "]"}]}], "]"}]],
  FormatType->StandardForm,ExpressionUUID->
  "36df84f4-e6b9-47a0-883e-03495848f34c"],
 "."
}], "Text",ExpressionUUID->"bef674dc-dd8a-4d68-95ca-4c2bb45fc415"],

Cell["\<\
Plot the averaged percolation curve of a grid graph over many random edge \
removals.\
\>", "Text",ExpressionUUID->"27ce3496-e3cb-495c-ac8c-3c85be4b9fa9"],

Cell[BoxData[
 RowBox[{"ListLinePlot", "@", 
  RowBox[{"Mean", "@", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"IGPercolationCurve", "@", 
      RowBox[{"GridGraph", "[", 
       RowBox[{"{", 
        RowBox[{"50", ",", "50"}], "}"}], "]"}]}], ",", 
     RowBox[{"{", "100", "}"}]}], 
    "]"}]}]}]], \
"Input",ExpressionUUID->"8bbb5d8c-cbda-49a3-840d-a1f75e3b96a0"],

Cell["\<\
Percolation curve for a random geometric graph when edges are removed in \
order of decreasing or increasing betweenness.\
\>", "Text",ExpressionUUID->"7ecb319a-6d6b-4007-bed5-a6130dcbb542"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"IGGeometricGame", "[", 
    RowBox[{"500", ",", "0.1"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"edgeOrder", "=", 
   RowBox[{
    RowBox[{"EdgeList", "[", "g", "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"Ordering", "@", 
      RowBox[{"IGEdgeBetweenness", "[", "g", "]"}]}], "]"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"735c1c0d-ea9d-49d8-b314-b2ea5d85580f"],

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{
   RowBox[{"IGPercolationCurve", "/@", 
    RowBox[{"{", 
     RowBox[{"edgeOrder", ",", 
      RowBox[{"Reverse", "[", "edgeOrder", "]"}]}], "}"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"PlotLegends", "->", 
    RowBox[{"{", 
     RowBox[{
     "\"\<decreasing betweenness\>\"", ",", 
      "\"\<increasing betweenness\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"FrameLabel", "->", 
    RowBox[{"{", 
     RowBox[{
     "\"\<mean degree\>\"", ",", "\"\<largest component fraction\>\""}], 
     "}"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"Frame", "->", "True"}], ",", 
   RowBox[{"PlotRange", "->", "All"}]}], 
  "]"}]], "Input",ExpressionUUID->"4c425aae-443e-4713-858b-d85f83a9e033"],

Cell[TextData[{
 Cell[BoxData["IGPercolationCurve"],
  FormatType->StandardForm,ExpressionUUID->
  "9f974290-f45a-4edd-84aa-d324ecc5e9c8"],
 " also accepts a list of pairs in addition to a list of edge expressions."
}], "Text",ExpressionUUID->"19bae177-4e4d-4248-bb45-0ae880bf3568"],

Cell[BoxData[
 RowBox[{"IGPercolationCurve", "@", 
  RowBox[{"RandomInteger", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "10"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"20", ",", "2"}], "}"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"20825d18-8561-4061-b6f8-3e5c245875ad"],

Cell[TextData[{
 Cell[BoxData["IGPercolationCurve"],
  FormatType->StandardForm,ExpressionUUID->
  "f5fd0d4e-2e9f-4c3e-8e42-9d5721ec6e53"],
 " works efficiently on large networks."
}], "Text",ExpressionUUID->"1a146e84-df97-4d11-bca5-48c703bc82a9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<NetworkGraph\>\"", ",", "\"\<WorldWideWeb\>\""}], "}"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"EdgeCount", "[", "g", 
  "]"}]}], "Input",ExpressionUUID->"87d06a74-c321-463c-b06e-9af1a7060c37"],

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{
   RowBox[{"IGPercolationCurve", "[", "g", "]"}], ",", 
   RowBox[{"MaxPlotPoints", "->", "1000"}]}], 
  "]"}]], "Input",ExpressionUUID->"631e8ba4-ba9b-453a-b814-e6dcea0bed15"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Trees", \
"Subsection",ExpressionUUID->"099e8b7e-5435-4b38-9ac8-d79f9c0d861a"],

Cell["\<\
A tree is a connected graph that contains no undirected cycles.\
\>", "Text",ExpressionUUID->"7c08a068-292c-4eaf-994b-197fe89b3130"],

Cell[CellGroupData[{

Cell["IGTreeQ", \
"Subsubsection",ExpressionUUID->"c8dde410-5a3d-4d24-9536-fddfe4074606"],

Cell[BoxData[
 RowBox[{"?", 
  "IGTreeQ"}]], \
"Input",ExpressionUUID->"e2aef263-4aed-4240-823b-15116548014c"],

Cell[TextData[{
 Cell[BoxData[
 "IGTreeQ"],ExpressionUUID->"801f1618-e3b7-457c-87bf-94bdbe5e7853"],
 " checks if a graph is a tree. An undirected tree is a connected graph with \
no cycles. A directed tree is similar, with its edges oriented either away \
from a root vertex (out-tree or arborescence) or towards a root vertex \
(in-tree or anti-arborescence)."
}], "Text",ExpressionUUID->"09a8db06-5b1d-47aa-a880-86257fe89b01"],

Cell[BoxData[
 RowBox[{"IGTreeQ", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3, 4, 5, 6, 7}, {
       Null, {{6, 7}, {2, 7}, {4, 7}, {1, 4}, {1, 5}, {2, 3}}}, {
       GraphLayout -> {"Dimension" -> 2}, VertexSize -> {Medium}}]]}, 
     TagBox[
      GraphicsGroupBox[
       GraphicsComplexBox[{{0.8660254037844387, 0.8660254037844386}, {0., 
        1.7320508075688772`}, {0., 0.8660254037844386}, {0.8660254037844387, 
        1.7320508075688772`}, {0.8660254037844387, 0.}, {1.7320508075688774`, 
        1.7320508075688772`}, {0.8660254037844387, 2.598076211353316}}, {
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
          {Arrowheads[0.], ArrowBox[{1, 4}, 0.08660254037844387]}, 
          {Arrowheads[0.], ArrowBox[{1, 5}, 0.08660254037844387]}, 
          {Arrowheads[0.], ArrowBox[{2, 3}, 0.08660254037844387]}, 
          {Arrowheads[0.], ArrowBox[{2, 7}, 0.08660254037844387]}, 
          {Arrowheads[0.], ArrowBox[{4, 7}, 0.08660254037844387]}, 
          {Arrowheads[0.], ArrowBox[{6, 7}, 0.08660254037844387]}}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          DiskBox[1, 0.08660254037844387], DiskBox[2, 0.08660254037844387], 
          DiskBox[3, 0.08660254037844387], DiskBox[4, 0.08660254037844387], 
          DiskBox[5, 0.08660254037844387], DiskBox[6, 0.08660254037844387], 
          DiskBox[7, 0.08660254037844387]}}]],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None], 
  "]"}]], "Input",ExpressionUUID->"157de41e-883a-40bd-b527-cbaa3d9e8940"],

Cell[BoxData[
 RowBox[{"IGTreeQ", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3, 4, 5, 6, 7}, {
       Null, {{6, 7}, {2, 7}, {4, 7}, {1, 4}, {1, 5}, {2, 3}, {3, 4}}}, {
       FormatType -> TraditionalForm, GraphLayout -> {"Dimension" -> 2}, 
        VertexCoordinates -> {{0.8660254037844387, 0.8660254037844386}, {0., 
         1.7320508075688772`}, {0., 0.8660254037844386}, {0.8660254037844387, 
         1.7320508075688772`}, {0.8660254037844387, 0.}, {1.7320508075688774`,
          1.7320508075688772`}, {0.8660254037844387, 2.598076211353316}}, 
        VertexSize -> {Medium}}]]}, 
     TagBox[
      GraphicsGroupBox[
       GraphicsComplexBox[{{0.8660254037844387, 0.8660254037844386}, {0., 
        1.7320508075688772`}, {0., 0.8660254037844386}, {0.8660254037844387, 
        1.7320508075688772`}, {0.8660254037844387, 0.}, {1.7320508075688774`, 
        1.7320508075688772`}, {0.8660254037844387, 2.598076211353316}}, {
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
          {Arrowheads[0.], ArrowBox[{1, 4}, 0.08660254037844387]}, 
          {Arrowheads[0.], ArrowBox[{1, 5}, 0.08660254037844387]}, 
          {Arrowheads[0.], ArrowBox[{2, 3}, 0.08660254037844387]}, 
          {Arrowheads[0.], ArrowBox[{2, 7}, 0.08660254037844387]}, 
          {Arrowheads[0.], ArrowBox[{3, 4}, 0.08660254037844387]}, 
          {Arrowheads[0.], ArrowBox[{4, 7}, 0.08660254037844387]}, 
          {Arrowheads[0.], ArrowBox[{6, 7}, 0.08660254037844387]}}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          DiskBox[1, 0.08660254037844387], DiskBox[2, 0.08660254037844387], 
          DiskBox[3, 0.08660254037844387], DiskBox[4, 0.08660254037844387], 
          DiskBox[5, 0.08660254037844387], DiskBox[6, 0.08660254037844387], 
          DiskBox[7, 0.08660254037844387]}}]],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None], 
  "]"}]], "Input",ExpressionUUID->"f5f92725-4a80-4076-b5bb-24d863102d60"],

Cell["By convention, the null graph is not a tree.", \
"Text",ExpressionUUID->"178e2ef0-e2c6-41c4-8040-b6dd1c3faae8"],

Cell[BoxData[
 RowBox[{"IGTreeQ", "[", 
  RowBox[{"IGEmptyGraph", "[", "0", "]"}], 
  "]"}]], "Input",ExpressionUUID->"8330807d-eb4f-4e43-9b46-ae2352460423"],

Cell["This is an out-tree.", \
"Text",ExpressionUUID->"db4b8b8c-6537-4443-90c0-b05cd7902732"],

Cell[BoxData[
 RowBox[{"IGTreeQ", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3, 4}, {{{1, 2}, {2, 3}, {2, 4}}, Null}, {
       GraphLayout -> {
         "LayeredEmbedding", "RootVertex" -> 1, "Orientation" -> Left}, 
        VertexLabels -> {None}, VertexSize -> {Medium}}]]}, 
     TagBox[
      GraphicsGroupBox[
       GraphicsComplexBox[{{0., 0.46291004988627704`}, {0.9258200997725516, 
        0.4629100498862764}, {1.8516401995451024`, 0.}, {1.8516401995451033`, 
        0.9258200997725514}}, {
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
          ArrowBox[{{1, 2}, {2, 3}, {2, 4}}, 0.09258200997725514]}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          DiskBox[1, 0.09258200997725514], DiskBox[2, 0.09258200997725514], 
          DiskBox[3, 0.09258200997725514], DiskBox[4, 0.09258200997725514]}}]],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None], 
  "]"}]], "Input",ExpressionUUID->"b4d500cf-6262-4d41-b0b5-0a02f44c6b99"],

Cell["It is not also an in-tree.", \
"Text",ExpressionUUID->"c848ec1b-2140-498a-b971-d44b5eee48ce"],

Cell[BoxData[
 RowBox[{"IGTreeQ", "[", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4}, {{{1, 2}, {2, 3}, {2, 4}}, Null}, {
        GraphLayout -> {
          "LayeredEmbedding", "RootVertex" -> 1, "Orientation" -> Left}, 
         VertexLabels -> {None}, VertexSize -> {Medium}}]]}, 
      TagBox[
       GraphicsGroupBox[
        GraphicsComplexBox[{{0., 0.46291004988627704`}, {0.9258200997725516, 
         0.4629100498862764}, {1.8516401995451024`, 0.}, {1.8516401995451033`,
          0.9258200997725514}}, {
          {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
           ArrowBox[{{1, 2}, {2, 3}, {2, 4}}, 0.09258200997725514]}, 
          {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
           DiskBox[1, 0.09258200997725514], DiskBox[2, 0.09258200997725514], 
           DiskBox[3, 0.09258200997725514], 
           DiskBox[4, 0.09258200997725514]}}]],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None], ",", "\"\<In\>\""}], 
  "]"}]], "Input",ExpressionUUID->"dbc72fd5-7f38-428c-a1a2-29edcfc95005"],

Cell["It becomes an in-tree if we reverse its edges.", \
"Text",ExpressionUUID->"da2fa912-e0fd-40b0-b412-db0dab3a718d"],

Cell[BoxData[
 RowBox[{"IGTreeQ", "[", 
  RowBox[{
   RowBox[{"ReverseGraph", "[", 
    GraphicsBox[
     NamespaceBox["NetworkGraphics",
      DynamicModuleBox[{Typeset`graph = HoldComplete[
        Graph[{1, 2, 3, 4}, {{{1, 2}, {2, 3}, {2, 4}}, Null}, {
         GraphLayout -> {
           "LayeredEmbedding", "RootVertex" -> 1, "Orientation" -> Left}, 
          VertexLabels -> {None}, VertexSize -> {Medium}}]]}, 
       TagBox[
        GraphicsGroupBox[
         GraphicsComplexBox[{{0., 0.46291004988627704`}, {0.9258200997725516, 
          0.4629100498862764}, {1.8516401995451024`, 0.}, {
          1.8516401995451033`, 0.9258200997725514}}, {
           {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
            ArrowBox[{{1, 2}, {2, 3}, {2, 4}}, 0.09258200997725514]}, 
           {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
            DiskBox[1, 0.09258200997725514], DiskBox[2, 0.09258200997725514], 
            DiskBox[3, 0.09258200997725514], 
            DiskBox[4, 0.09258200997725514]}}]],
        MouseAppearanceTag["NetworkGraphics"]],
       AllowKernelInitialization->False]],
     DefaultBaseStyle->{
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
     FormatType->TraditionalForm,
     FrameTicks->None], "]"}], ",", "\"\<In\>\""}], 
  "]"}]], "Input",ExpressionUUID->"30b5c2af-8e80-4c7f-8039-9351a66fa651"],

Cell["This graph is neither an out-tree nor an in-tree.", \
"Text",ExpressionUUID->"85b12788-1b90-4f98-8cf4-46b5a9d6a897"],

Cell[BoxData[
 RowBox[{"IGTreeQ", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3, 4, 5, 
       6}, {{{1, 2}, {2, 3}, {3, 4}, {5, 2}, {6, 3}}, Null}, {
       GraphLayout -> {
         "LayeredEmbedding", "RootVertex" -> 5, "Orientation" -> Left}, 
        VertexLabels -> {None}, VertexSize -> {Medium}}]]}, 
     TagBox[
      GraphicsGroupBox[
       GraphicsComplexBox[{{1.8257418583505534`, 0.}, {0.912870929175277, 
        0.4564354645876391}, {1.8257418583505542`, 0.9128709291752769}, {
        2.738612787525831, 1.3693063937629146`}, {0., 0.4564354645876398}, {
        2.7386127875258306`, 0.4564354645876378}}, {
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
          ArrowBox[{{1, 2}, {2, 3}, {3, 4}, {5, 2}, {6, 3}}, 
           0.09128709291752768]}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          DiskBox[1, 0.09128709291752768], DiskBox[2, 0.09128709291752768], 
          DiskBox[3, 0.09128709291752768], DiskBox[4, 0.09128709291752768], 
          DiskBox[5, 0.09128709291752768], DiskBox[6, 0.09128709291752768]}}]],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None,
   ImageSize->{94.609375, Automatic}], 
  "]"}]], "Input",ExpressionUUID->"a452b578-d6bb-42dd-bfd6-41747057b4d2"],

Cell["However, it becomes a tree if we ignore edge directions.", \
"Text",ExpressionUUID->"5e4e5003-533f-4dc6-b53d-136c6b87a45f"],

Cell[BoxData[
 RowBox[{"IGTreeQ", "[", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4, 5, 
        6}, {{{1, 2}, {2, 3}, {3, 4}, {5, 2}, {6, 3}}, Null}, {
        GraphLayout -> {
          "LayeredEmbedding", "RootVertex" -> 5, "Orientation" -> Left}, 
         VertexLabels -> {None}, VertexSize -> {Medium}}]]}, 
      TagBox[
       GraphicsGroupBox[
        GraphicsComplexBox[{{1.8257418583505534`, 0.}, {0.912870929175277, 
         0.4564354645876391}, {1.8257418583505542`, 0.9128709291752769}, {
         2.738612787525831, 1.3693063937629146`}, {0., 0.4564354645876398}, {
         2.7386127875258306`, 0.4564354645876378}}, {
          {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
           ArrowBox[{{1, 2}, {2, 3}, {3, 4}, {5, 2}, {6, 3}}, 
            0.09128709291752768]}, 
          {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
           DiskBox[1, 0.09128709291752768], DiskBox[2, 0.09128709291752768], 
           DiskBox[3, 0.09128709291752768], DiskBox[4, 0.09128709291752768], 
           DiskBox[5, 0.09128709291752768], 
           DiskBox[6, 0.09128709291752768]}}]],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{94.609375, Automatic}], ",", "\"\<All\>\""}], 
  "]"}]], "Input",ExpressionUUID->"9f8568c6-b2b1-49f7-a470-a71367653c9a"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGForestQ", \
"Subsubsection",ExpressionUUID->"7ae8a7f4-a77e-4999-9493-ad8d70dc72b7"],

Cell[BoxData[
 RowBox[{"?", 
  "IGForestQ"}]], \
"Input",ExpressionUUID->"c329cc06-7f66-4ec0-8089-07db9ee8fd1f"],

Cell[TextData[{
 Cell[BoxData[
 "IGForestQ"],ExpressionUUID->"9593a19d-50f9-4180-96b3-7475734732a6"],
 " is a convenience function that tests if all connected components of a \
graph are trees."
}], "Text",ExpressionUUID->"d40a4629-614d-4a1a-9922-4d26f8e4e9f3"],

Cell["This graph is not a tree, but it is a forest.", \
"Text",ExpressionUUID->"61a29dad-73d7-4b90-8493-09032ba82fb9"],

Cell[BoxData[
 RowBox[{"Through", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"IGTreeQ", ",", "IGForestQ"}], "}"}], "[", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {
        Null, {{1, 2}, {2, 3}, {2, 4}, {4, 5}, {4, 6}, {7, 8}, {7, 9}, {7, 
         10}, {7, 11}, {7, 12}}}, {
        GraphLayout -> {"PackingLayout" -> "LayeredLeft"}, 
         VertexLabels -> {None}, VertexSize -> {Medium}}]]}, 
      TagBox[
       GraphicsGroupBox[
        GraphicsComplexBox[{{3.325861995674786, -1.7690092222954563`}, {
         4.018904115339238, -1.1218839016790128`}, {
         3.324895133366253, -0.4747965323004171}, {
         5.202920542935289, -1.1217665303819007`}, {
         5.8975787574161505`, -0.47621170609707386`}, {
         5.8979560555871515`, -1.7669723615519644`}, {
         1.4139255006164673`, -1.4739044549594866`}, {
         0.7961099789195158, -2.260577072158629}, {
         1.971794462388056, -2.303601900426146}, {
         2.375302068765419, -1.1997568108406216`}, {
         1.45103908109693, -0.47479653230041685`}, {
         0.47479653230041696`, -1.1291212907692783`}}, {
          {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
           {Arrowheads[0.], ArrowBox[{1, 2}, 0.09481975322747531]}, 
           {Arrowheads[0.], ArrowBox[{2, 3}, 0.09481975322747531]}, 
           {Arrowheads[0.], ArrowBox[{2, 4}, 0.09481975322747531]}, 
           {Arrowheads[0.], ArrowBox[{4, 5}, 0.09481975322747531]}, 
           {Arrowheads[0.], ArrowBox[{4, 6}, 0.09481975322747531]}, 
           {Arrowheads[0.], ArrowBox[{7, 8}, 0.09481975322747531]}, 
           {Arrowheads[0.], ArrowBox[{7, 9}, 0.09481975322747531]}, 
           {Arrowheads[0.], ArrowBox[{7, 10}, 0.09481975322747531]}, 
           {Arrowheads[0.], ArrowBox[{7, 11}, 0.09481975322747531]}, 
           {Arrowheads[0.], ArrowBox[{7, 12}, 0.09481975322747531]}}, 
          {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
           DiskBox[1, 0.09481975322747531], DiskBox[2, 0.09481975322747531], 
           DiskBox[3, 0.09481975322747531], DiskBox[4, 0.09481975322747531], 
           DiskBox[5, 0.09481975322747531], DiskBox[6, 0.09481975322747531], 
           DiskBox[7, 0.09481975322747531], DiskBox[8, 0.09481975322747531], 
           DiskBox[9, 0.09481975322747531], DiskBox[10, 0.09481975322747531], 
           DiskBox[11, 0.09481975322747531], 
           DiskBox[12, 0.09481975322747531]}}]],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{125.796875, Automatic}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"170b0dc0-1da2-4759-a8d6-df137e0130c1"],

Cell["\<\
By convention, the null graph is not a tree, but it is a forest.\
\>", "Text",ExpressionUUID->"7ed6ff57-5f3f-4d2b-873f-ece92dfbacb2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"IGTreeQ", "[", 
    RowBox[{"IGEmptyGraph", "[", "0", "]"}], "]"}], ",", 
   RowBox[{"IGForestQ", "[", 
    RowBox[{"IGEmptyGraph", "[", "0", "]"}], "]"}]}], 
  "}"}]], "Input",ExpressionUUID->"195bbef5-be04-4b58-86dd-c592c9a6f1a2"],

Cell["\<\
Use the second argument to test for forests of out-trees or in-trees. By \
default, directed graphs are checked to be out-forests.\
\>", "Text",ExpressionUUID->"5cace0fb-e45d-4ba3-b411-adaa3614df1e"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{
  "IGShorthand", "[", "\"\<1->2<-3, 4<-5->6\>\"", 
   "]"}]}]], "Input",ExpressionUUID->"30521fbb-7e4e-4d66-94bc-4232bd1189be"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"IGForestQ", "[", "g", "]"}], ",", 
   RowBox[{"IGForestQ", "[", 
    RowBox[{"g", ",", "\"\<Out\>\""}], "]"}], ",", 
   RowBox[{"IGForestQ", "[", 
    RowBox[{"g", ",", "\"\<In\>\""}], "]"}], ",", 
   RowBox[{"IGForestQ", "[", 
    RowBox[{"g", ",", "\"\<All\>\""}], "]"}]}], 
  "}"}]], "Input",ExpressionUUID->"cac8ad98-ce03-4eef-8a8e-e0ae061bcfe8"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGStrahlerNumber", \
"Subsubsection",ExpressionUUID->"9ed5ded4-91a8-4fe0-93e3-b5673c778ecb"],

Cell[BoxData[
 RowBox[{"?", 
  "IGStrahlerNumber"}]], \
"Input",ExpressionUUID->"7af8580d-75ee-4013-8e1f-68ad8e17ad03"],

Cell[TextData[{
 Cell[BoxData[
 "IGStrahlerNumber"],ExpressionUUID->"550a94b4-8277-43dc-9e3c-d98afdf1b13f"],
 " computes the Horton\[Dash]Strahler index of each vertex in a rooted tree. \
The tree must be directed\[LongDash]this is how the root is encoded. The \
Horton\[Dash]Strahler index of the tree itself is the index of the root, i.e. \
the largest returned index. This measure is also called ",
 StyleBox["stream order",
  FontSlant->"Italic"],
 ", as it was originally used to characterize river networks."
}], "Text",ExpressionUUID->"2cf68b7d-3200-4fd6-9ae3-030ba9dc5f3e"],

Cell[BoxData[
 RowBox[{"tree", "=", 
  RowBox[{"IGTreeGame", "[", 
   RowBox[{"30", ",", 
    RowBox[{"DirectedEdges", "\[Rule]", "True"}], ",", 
    RowBox[{"GraphLayout", "\[Rule]", "\"\<LayeredDigraphEmbedding\>\""}]}], 
   "]"}]}]], "Input",ExpressionUUID->"ad6b6094-8e3d-420e-acde-ce6862f5fbac"],

Cell[BoxData[
 RowBox[{"IGVertexMap", "[", 
  RowBox[{
   RowBox[{"#", "&"}], ",", 
   RowBox[{"VertexLabels", "\[Rule]", "IGStrahlerNumber"}], ",", "tree"}], 
  "]"}]], "Input",ExpressionUUID->"d72efb01-b9fc-43d2-8007-bf18f124dc16"],

Cell["\<\
To get the Horton\[Dash]Strahler number of the tree, find the maximal element.\
\>", "Text",ExpressionUUID->"f5a348f1-114a-4a44-ac1d-de14fc6fef33"],

Cell[BoxData[
 RowBox[{"Max", "@", 
  RowBox[{
  "IGStrahlerNumber", "[", "tree", 
   "]"}]}]], "Input",ExpressionUUID->"488ea3a7-5723-4d27-beab-decb493cb072"],

Cell[TextData[{
 Cell[BoxData[
 "IGStrahlerNumber"],ExpressionUUID->"893cbf9e-433f-4147-8af2-efbf91726228"],
 " requires a directed (i.e. rooted) tree as input."
}], "Text",ExpressionUUID->"42ef14a7-d01b-49e4-b302-a4e5edb5b474"],

Cell[BoxData[
 RowBox[{"IGStrahlerNumber", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {
       Null, {{1, 2}, {1, 3}, {1, 4}, {2, 5}, {2, 6}, {3, 7}, {3, 8}, {4, 
        9}, {4, 10}}}, {
       GraphLayout -> {"RadialEmbedding"}, PerformanceGoal -> "Quality", 
        VertexShapeFunction -> {"Name"}}]], Typeset`boxes, Typeset`boxes$s2d =
      GraphicsGroupBox[{{
        Directive[
         Opacity[0.7], 
         Hue[0.6, 0.7, 0.5]], 
        LineBox[{{
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$2", Automatic, Center]}, {
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$3", Automatic, Center]}, {
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$4", Automatic, Center]}, {
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$5", Automatic, Center]}, {
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$6", Automatic, Center]}, {
           DynamicLocation["VertexID$3", Automatic, Center], 
           DynamicLocation["VertexID$7", Automatic, Center]}, {
           DynamicLocation["VertexID$3", Automatic, Center], 
           DynamicLocation["VertexID$8", Automatic, Center]}, {
           DynamicLocation["VertexID$4", Automatic, Center], 
           DynamicLocation["VertexID$9", Automatic, Center]}, {
           DynamicLocation["VertexID$4", Automatic, Center], 
           DynamicLocation["VertexID$10", Automatic, Center]}}]}, {
        Directive[
         Hue[0.6, 0.2, 0.8], 
         EdgeForm[
          Directive[
           GrayLevel[0], 
           Opacity[0.7]]]], 
        TagBox[
         InsetBox[
          BoxData[
           FormBox[
            PaneBox["1", Alignment -> Center, ImageMargins -> 2], 
            TraditionalForm]], {1.7167125271480974`, 1.486716659505236}, 
          BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$1"], 
        TagBox[
         InsetBox[
          BoxData[
           FormBox[
            PaneBox["2", Alignment -> Center, ImageMargins -> 2], 
            TraditionalForm]], {0.9733541973954799, 1.9158947912922606`}, 
          BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$2"], 
        TagBox[
         InsetBox[
          BoxData[
           FormBox[
            PaneBox["3", Alignment -> Center, ImageMargins -> 2], 
            TraditionalForm]], {1.7167125271480972`, 0.6283603959311872}, 
          BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$3"], 
        TagBox[
         InsetBox[
          BoxData[
           FormBox[
            PaneBox["4", Alignment -> Center, ImageMargins -> 2], 
            TraditionalForm]], {2.4600708569007153`, 1.9158947912922597`}, 
          BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$4"], 
        TagBox[
         InsetBox[
          BoxData[
           FormBox[
            PaneBox["5", Alignment -> Center, ImageMargins -> 2], 
            TraditionalForm]], {0.858356263574049, 2.9734333190104714`}, 
          BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$5"], 
        TagBox[
         InsetBox[
          BoxData[
           FormBox[
            PaneBox["6", Alignment -> Center, ImageMargins -> 2], 
            TraditionalForm]], {0., 1.4867166595052368`}, BaseStyle -> 
          "Graphics"], "DynamicName", BoxID -> "VertexID$6"], 
        TagBox[
         InsetBox[
          BoxData[
           FormBox[
            PaneBox["7", Alignment -> Center, ImageMargins -> 2], 
            TraditionalForm]], {0.8583562635740479, 1.1102230246251565`*^-15},
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$7"], 
        TagBox[
         InsetBox[
          BoxData[
           FormBox[
            PaneBox["8", Alignment -> Center, ImageMargins -> 2], 
            TraditionalForm]], {2.575068790722145, 0.}, BaseStyle -> 
          "Graphics"], "DynamicName", BoxID -> "VertexID$8"], 
        TagBox[
         InsetBox[
          BoxData[
           FormBox[
            PaneBox["9", Alignment -> Center, ImageMargins -> 2], 
            TraditionalForm]], {3.433425054296195, 1.4867166595052355`}, 
          BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$9"], 
        TagBox[
         InsetBox[
          BoxData[
           FormBox[
            PaneBox["10", Alignment -> Center, ImageMargins -> 2], 
            TraditionalForm]], {2.5750687907221472`, 2.9734333190104705`}, 
          BaseStyle -> "Graphics"], "DynamicName", BoxID -> 
         "VertexID$10"]}}], $CellContext`flag}, 
     TagBox[
      DynamicBox[GraphComputation`NetworkGraphicsBox[
       3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
       CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
        SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
       ImageSizeCache->{{8.881784197001252*^-16, 112.30859375}, {-57., 
        50.60184121296189}}],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False,
     UnsavedVariables:>{$CellContext`flag}]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None,
   ImageSize->{113.30859375, Automatic}], 
  "]"}]], "Input",ExpressionUUID->"609644c6-6bf4-434e-ba12-fa2923ec5a02"],

Cell[TextData[{
 "Orient undirected trees, effectively specifying a root vertex, before \
passing them to ",
 Cell[BoxData[
 "IGStrahlerNumber"],ExpressionUUID->"f4e7fd9c-9989-46c0-91fa-1a5deac572a5"],
 "."
}], "Text",ExpressionUUID->"e512f3a3-fb21-4483-9b52-4f2c3bb97615"],

Cell[BoxData[
 RowBox[{"IGStrahlerNumber", "@", 
  RowBox[{"IGOrientTree", "[", 
   RowBox[{
    GraphicsBox[
     NamespaceBox["NetworkGraphics",
      DynamicModuleBox[{Typeset`graph = HoldComplete[
        Graph[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {
         Null, {{1, 2}, {1, 3}, {1, 4}, {2, 5}, {2, 6}, {3, 7}, {3, 8}, {4, 
          9}, {4, 10}}}, {
         GraphLayout -> {"RadialEmbedding"}, PerformanceGoal -> "Quality", 
          VertexShapeFunction -> {"Name"}}]], Typeset`boxes, 
       Typeset`boxes$s2d = GraphicsGroupBox[{{
          Directive[
           Opacity[0.7], 
           Hue[0.6, 0.7, 0.5]], 
          LineBox[{{
             DynamicLocation["VertexID$1", Automatic, Center], 
             DynamicLocation["VertexID$2", Automatic, Center]}, {
             DynamicLocation["VertexID$1", Automatic, Center], 
             DynamicLocation["VertexID$3", Automatic, Center]}, {
             DynamicLocation["VertexID$1", Automatic, Center], 
             DynamicLocation["VertexID$4", Automatic, Center]}, {
             DynamicLocation["VertexID$2", Automatic, Center], 
             DynamicLocation["VertexID$5", Automatic, Center]}, {
             DynamicLocation["VertexID$2", Automatic, Center], 
             DynamicLocation["VertexID$6", Automatic, Center]}, {
             DynamicLocation["VertexID$3", Automatic, Center], 
             DynamicLocation["VertexID$7", Automatic, Center]}, {
             DynamicLocation["VertexID$3", Automatic, Center], 
             DynamicLocation["VertexID$8", Automatic, Center]}, {
             DynamicLocation["VertexID$4", Automatic, Center], 
             DynamicLocation["VertexID$9", Automatic, Center]}, {
             DynamicLocation["VertexID$4", Automatic, Center], 
             DynamicLocation["VertexID$10", Automatic, Center]}}]}, {
          Directive[
           Hue[0.6, 0.2, 0.8], 
           EdgeForm[
            Directive[
             GrayLevel[0], 
             Opacity[0.7]]]], 
          TagBox[
           InsetBox[
            BoxData[
             FormBox[
              PaneBox["1", Alignment -> Center, ImageMargins -> 2], 
              TraditionalForm]], {1.7167125271480974`, 1.486716659505236}, 
            BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$1"], 
          TagBox[
           InsetBox[
            BoxData[
             FormBox[
              PaneBox["2", Alignment -> Center, ImageMargins -> 2], 
              TraditionalForm]], {0.9733541973954799, 1.9158947912922606`}, 
            BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$2"], 
          TagBox[
           InsetBox[
            BoxData[
             FormBox[
              PaneBox["3", Alignment -> Center, ImageMargins -> 2], 
              TraditionalForm]], {1.7167125271480972`, 0.6283603959311872}, 
            BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$3"], 
          TagBox[
           InsetBox[
            BoxData[
             FormBox[
              PaneBox["4", Alignment -> Center, ImageMargins -> 2], 
              TraditionalForm]], {2.4600708569007153`, 1.9158947912922597`}, 
            BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$4"], 
          TagBox[
           InsetBox[
            BoxData[
             FormBox[
              PaneBox["5", Alignment -> Center, ImageMargins -> 2], 
              TraditionalForm]], {0.858356263574049, 2.9734333190104714`}, 
            BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$5"], 
          TagBox[
           InsetBox[
            BoxData[
             FormBox[
              PaneBox["6", Alignment -> Center, ImageMargins -> 2], 
              TraditionalForm]], {0., 1.4867166595052368`}, BaseStyle -> 
            "Graphics"], "DynamicName", BoxID -> "VertexID$6"], 
          TagBox[
           InsetBox[
            BoxData[
             FormBox[
              PaneBox["7", Alignment -> Center, ImageMargins -> 2], 
              TraditionalForm]], {0.8583562635740479, 
            1.1102230246251565`*^-15}, BaseStyle -> "Graphics"], 
           "DynamicName", BoxID -> "VertexID$7"], 
          TagBox[
           InsetBox[
            BoxData[
             FormBox[
              PaneBox["8", Alignment -> Center, ImageMargins -> 2], 
              TraditionalForm]], {2.575068790722145, 0.}, BaseStyle -> 
            "Graphics"], "DynamicName", BoxID -> "VertexID$8"], 
          TagBox[
           InsetBox[
            BoxData[
             FormBox[
              PaneBox["9", Alignment -> Center, ImageMargins -> 2], 
              TraditionalForm]], {3.433425054296195, 1.4867166595052355`}, 
            BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$9"], 
          TagBox[
           InsetBox[
            BoxData[
             FormBox[
              PaneBox["10", Alignment -> Center, ImageMargins -> 2], 
              TraditionalForm]], {2.5750687907221472`, 2.9734333190104705`}, 
            BaseStyle -> "Graphics"], "DynamicName", BoxID -> 
           "VertexID$10"]}}], $CellContext`flag}, 
       TagBox[
        DynamicBox[GraphComputation`NetworkGraphicsBox[
         3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
         CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
          SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
         ImageSizeCache->{{8.881784197001252*^-16, 112.30859375}, {-57., 
          50.60184121296189}}],
        MouseAppearanceTag["NetworkGraphics"]],
       AllowKernelInitialization->False,
       UnsavedVariables:>{$CellContext`flag}]],
     DefaultBaseStyle->{
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
     FormatType->TraditionalForm,
     FrameTicks->None,
     ImageSize->{113.30859375, Automatic}], ",", "5"}], 
   "]"}]}]], "Input",ExpressionUUID->"b12ee464-aece-48ac-b74f-162707875421"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGTreelikeComponents", \
"Subsubsection",ExpressionUUID->"78427694-e875-4882-956b-8d38b2fed975"],

Cell[BoxData[
 RowBox[{"?", 
  "IGTreelikeComponents"}]], \
"Input",ExpressionUUID->"28b77265-b114-4bf6-89c3-ef53c86f1b08"],

Cell["\<\
IGTreelikeComponents finds the tree-like components of an undirected graph by \
repeatedly identifying and removing degree-1 vertices. Vertices in the \
tree-like components are not part of any undirected cycle, nor are they on a \
path connecting vertices that belong to a cycle.\
\>", "Text",ExpressionUUID->"298d9cc8-8f15-4043-b6f3-7a547c931d66"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"RandomGraph", "[", 
    RowBox[{"{", 
     RowBox[{"100", ",", "100"}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"HighlightGraph", "[", "\[IndentingNewLine]", 
   RowBox[{"g", ",", "\[IndentingNewLine]", 
    RowBox[{"IGTreelikeComponents", "[", "g", "]"}]}], "\[IndentingNewLine]", 
   "]"}], "//", 
  "IGLayoutFruchtermanReingold"}]}], \
"Input",ExpressionUUID->"5a550b47-cfdf-4628-806d-85e4b8613913"],

Cell["\<\
Highlight both the edges and vertices of tree-like components.\
\>", "Text",ExpressionUUID->"ec84a8cd-a261-4dd3-a5f8-6e960342b078"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"IGGiantComponent", "@", 
    RowBox[{"RandomGraph", "[", 
     RowBox[{"{", 
      RowBox[{"50", ",", "50"}], "}"}], "]"}]}]}], ";"}], "\n", 
 RowBox[{"HighlightGraph", "[", "\[IndentingNewLine]", 
  RowBox[{"g", ",", "\[IndentingNewLine]", 
   RowBox[{"Join", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Union", "@@", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"IncidenceList", "[", 
          RowBox[{"g", ",", "#"}], "]"}], "&"}], ")"}], "/@", 
       RowBox[{"IGTreelikeComponents", "[", "g", "]"}]}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"IGTreelikeComponents", "[", "g", "]"}]}], "\[IndentingNewLine]",
     "]"}]}], "\[IndentingNewLine]", 
  "]"}]}], "Input",ExpressionUUID->"01866abc-0cfd-4311-adf5-4084d0952c20"],

Cell[BoxData[
 RowBox[{"IGLayoutFruchtermanReingold", "[", "%", 
  "]"}]], "Input",ExpressionUUID->"ef723269-fa86-49ed-abbc-655e72fa388b"],

Cell["Remove tree-like components.", \
"Text",ExpressionUUID->"70c48f89-9821-44b2-8c71-4ab1a6a9cd7b"],

Cell[BoxData[
 RowBox[{"VertexDelete", "[", 
  RowBox[{"g", ",", 
   RowBox[{"IGTreelikeComponents", "[", "g", "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"1680848c-a4df-41d2-9e52-3b5e8924c894"],

Cell["\<\
Vertices incident to multi-edges or loop-edges are not part of tree-like \
components.\
\>", "Text",ExpressionUUID->"2d2ff1d4-d932-437a-acbf-a0f5ee24234d"],

Cell[BoxData[
 RowBox[{"IGTreelikeComponents", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3}, {Null, {{1, 1}, {1, 2}, {2, 3}, {2, 3}}}, {
       VertexLabels -> {None}, VertexSize -> {Small}}]]}, 
     TagBox[GraphicsGroupBox[GraphicsComplexBox[CompressedData["
1:eJw9kAtI01EUxv+EsawoX2GN8JFRxCAsRXQuj0GilpE5iFpSS7SskFZWUgx6
6QIrE5KystqyVKicU5IxqjNR2YbapKBSSF0yXExj6iphTnPeezpwuXzcc8/5
fl9swZm8oiWCIEgXTuCmWl75NCflkknGlAdE+REJmxoMXAvp/xv7FW6NJAT3
WDO3y9eosPrQlmsZPzW47rP8ypOxVqz7EWe/mPoSJX/bdg++6MCIrsc19xra
0eIS76o9bcWt0tnj2UInWifKM0dlfRgxvjQYjD3YVlJl/vjWjiv1ypbQwk/o
XPVQdr/ejjlN5WaP6QvKtx1w6EV96PI1TeluDmKQce5kc6QVu4qqxqLV33HD
zrLw38kd2PpMbXp3eBiHpHPFkkkDMtMjuKx0APWr22X0Hpq6+A7d/H8y+w80
X8zmw16+/xTbD+TPz/xBJPffy/xDPOdzMD5Yy/kdjB+0PJ8Mlg+oeH47WH5A
+T7qWcwXVH+OXK5tmYR4q2Jz2MRzKDgfHTsaNQXKMpPl67FGkIRpnZ1VC/pN
nLtO8gpKEpIqZ+an4Op1S0FcVjPM5/tEaeem4VuixmZTtEDma3V7rnMaiqsL
u9NSDDDstZWOH/SCWXH31/gHA9h7A+UFIc8YVeE2QGJCoHwws5/pjSuSboc3
+sDI+9/Lb2TrxbOg5POC6oNmOu7MQj/f96DXdkEk+EHJ/QxMHBXLzvohnfvV
3RoZWu9Y0JynJlhXcWLfHIRwXuL3WBY1En8M60fij2HzkPjT2T4kfiPzg8Sf
xfwi8WsZDxL/CONF4ndxTfxNvJ/4c/k84jfzfcRPfoif/BI/8RA/8f4DN9Pf
VA==
        "], {
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
          {Arrowheads[0.], 
           ArrowBox[BezierCurveBox[{1, 7, 10, 12, 18, 20, 23, 1},
            SplineDegree->7], 0.05]}, 
          {Arrowheads[0.], ArrowBox[{1, 2}, 0.05]}, 
          {Arrowheads[0.], 
           ArrowBox[BezierCurveBox[{
            2, {1.4999999999999984`, 0.1644407471831162}, 3}], 0.05]}, 
          {Arrowheads[0.], 
           ArrowBox[BezierCurveBox[{
            2, {1.4999999999999987`, -0.16444074718311225`}, 3}], 0.05]}}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          DiskBox[1, 0.05], DiskBox[2, 0.05], DiskBox[3, 0.05]}}]],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None,
   ImageSize->{145.0078125, Automatic}], "]"}]], "Input",
 CellChangeTimes->{{3.7323669655480137`*^9, 3.732366968338604*^9}, 
   3.7323672086525583`*^9},ExpressionUUID->"156a976d-c137-4a48-af8d-\
b80be1c37657"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGFromPrufer", \
"Subsubsection",ExpressionUUID->"3222e1fa-a17e-4f9e-a8f5-42b36c9f0b98"],

Cell[BoxData[
 RowBox[{"?", 
  "IGFromPrufer"}]], \
"Input",ExpressionUUID->"ee62d39a-4216-4214-b049-91ca4ec27d18"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGToPrufer", \
"Subsubsection",ExpressionUUID->"1b0702d6-7fa7-40b7-8a1b-1a016383dcbe"],

Cell[BoxData[
 RowBox[{"?", 
  "IGToPrufer"}]], \
"Input",ExpressionUUID->"997adab9-2b59-44ac-80fe-3dc3d6366fc0"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Spanning trees", \
"Subsection",ExpressionUUID->"23bcf4cf-5228-4162-98e5-7af73906c332"],

Cell["\<\
A spanning tree of a graph is a subgraph that is a tree and contains all the \
graph\[CloseCurlyQuote]s vertices.\
\>", "Text",ExpressionUUID->"ccdfdbae-4c37-44a4-9b0f-1f744b5c6177"],

Cell[CellGroupData[{

Cell["IGSpanningTree", \
"Subsubsection",ExpressionUUID->"ccc5b42c-b41c-4954-85da-910b62ed008c"],

Cell[BoxData[
 RowBox[{"?", 
  "IGSpanningTree"}]], \
"Input",ExpressionUUID->"70d16a4a-cd7e-407b-bbfb-b75af09b1cf1"],

Cell[BoxData[
 RowBox[{"IGSpanningTree", "[", 
  RowBox[{
   RowBox[{"RandomGraph", "[", 
    RowBox[{"{", 
     RowBox[{"8", ",", "20"}], "}"}], "]"}], ",", 
   RowBox[{"GraphStyle", "\[Rule]", "\"\<DiagramGold\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"bdc5253e-f621-4efc-84df-e5d9759feb2a"],

Cell["\<\
Find the shortest set of paths connecting a set of points in the plane:\
\>", "Text",ExpressionUUID->"95f1ba55-e071-406e-9735-995c0ed6cb04"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pts", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "2"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"IGMeshGraph", "@", 
    RowBox[{"DelaunayMesh", "[", "pts", "]"}]}]}], 
  ";"}]}], "Input",ExpressionUUID->"5544c42d-4f91-4803-a297-e224cb41775f"],

Cell[BoxData[
 RowBox[{"tree", "=", 
  RowBox[{"IGSpanningTree", "[", 
   RowBox[{"g", ",", 
    RowBox[{"VertexCoordinates", "\[Rule]", "pts"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"b3c1c626-ca49-491b-b8c0-d92a570e1e10"],

Cell["The edge weights are preserved in the result.", \
"Text",ExpressionUUID->"5b758933-c71b-43e5-8624-e6cd0581d2d9"],

Cell[BoxData[
 RowBox[{"IGEdgeWeightedQ", "[", "tree", 
  "]"}]], "Input",ExpressionUUID->"0e8226dd-06f4-4eca-a42b-708a091a71fb"],

Cell["Compute the total path length.", \
"Text",ExpressionUUID->"c89401da-33d5-4915-800a-c57e4ae81119"],

Cell[BoxData[
 RowBox[{"Total", "@", 
  RowBox[{
   RowBox[{"IGEdgeProp", "[", "EdgeWeight", "]"}], "[", "tree", 
   "]"}]}]], "Input",ExpressionUUID->"4ad9f3d0-ed51-4c3b-a192-2bb217fd5467"],

Cell[TextData[{
 "Find a ",
 StyleBox["maximum",
  FontSlant->"Italic"],
 " spanning tree by negating the weights before running the algorithm."
}], "Text",ExpressionUUID->"553065be-5397-46f6-adea-af974679c6ec"],

Cell[BoxData[
 RowBox[{"IGSpanningTree", "[", 
  RowBox[{
   RowBox[{"IGEdgeMap", "[", 
    RowBox[{"Minus", ",", "EdgeWeight", ",", "g"}], "]"}], ",", 
   RowBox[{"VertexCoordinates", "\[Rule]", "pts"}]}], 
  "]"}]], "Input",ExpressionUUID->"878eb5ee-31bd-452a-8a89-2505ee6739e8"],

Cell["\<\
Find the minimum and maximum spanning trees of a network, using its edge \
betweenness as edge weights.\
\>", "Text",ExpressionUUID->"0a1d69e4-a790-4f5d-9779-b64f8a6a69f6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<NetworkGraph\>\"", ",", "\"\<ZacharyKarateClub\>\""}], 
     "}"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"HighlightGraph", "[", "\[IndentingNewLine]", 
    RowBox[{"g", ",", "\[IndentingNewLine]", 
     RowBox[{"EdgeList", "@", 
      RowBox[{"IGSpanningTree", "@", 
       RowBox[{"IGEdgeMap", "[", 
        RowBox[{"#", ",", 
         RowBox[{"EdgeWeight", "->", "IGEdgeBetweenness"}], ",", "g"}], 
        "]"}]}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"GraphHighlightStyle", "\[Rule]", "\"\<Thick\>\""}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "Small"}]}], "\[IndentingNewLine]", 
    "]"}], "&"}], "/@", 
  RowBox[{"{", "\[IndentingNewLine]", 
   RowBox[{"Identity", ",", " ", 
    RowBox[{"(*", " ", 
     RowBox[{"minimum", " ", "spanning", " ", "tree"}], " ", "*)"}], 
    "\[IndentingNewLine]", "Minus"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{"maximum", " ", "spanning", " ", "tree"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   "}"}]}]}], "Input",ExpressionUUID->"bf350899-1928-4f51-b907-136523322a03"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGRandomSpanningTree", \
"Subsubsection",ExpressionUUID->"39bcf75b-5521-467e-942e-9c2092ac8a32"],

Cell[BoxData[
 RowBox[{"?", 
  "IGRandomSpanningTree"}]], \
"Input",ExpressionUUID->"e0d8e5e0-2ff4-439b-8a92-758a28770328"],

Cell[TextData[{
 Cell[BoxData[
 "IGRandomSpanningTree"],ExpressionUUID->
  "d9057a51-fd72-402e-b38c-a95a8d64af24"],
 " samples the spanning trees (or forests) of a graph uniformly by performing \
a loop-erased random walk. Edge directions are ignored."
}], "Text",ExpressionUUID->"8143f607-d70a-48fa-9b46-6c35f9757051"],

Cell[TextData[{
 "If a spanning forest of the entire graph is requested using ",
 Cell[BoxData[
  RowBox[{"IGRandomSpanningTree", "[", "g", "]"}]],ExpressionUUID->
  "1dc2eeb2-98cc-40ea-8b92-7566df09986b"],
 ", then the vertex names and ordering are preserved. If a spanning tree of \
only a single component is requested using ",
 Cell[BoxData[
  RowBox[{"IGRandomSpanningTree", "[", 
   RowBox[{"{", 
    RowBox[{"g", ",", " ", "v"}], "}"}], "]"}]],ExpressionUUID->
  "d2e2f406-0f5b-43ad-9e00-8c3a0e5d72cc"],
 ", then this is not the case."
}], "Text",ExpressionUUID->"89b95e68-bf15-4ba0-b1f3-3d8b5b964d23"],

Cell["Highlight a few random spanning trees of the Petersen graph.", \
"Text",ExpressionUUID->"8d8cc019-657b-4dc6-9ba9-029d8527894d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"PetersenGraph", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"HighlightGraph", "[", 
    RowBox[{"g", ",", "#", ",", 
     RowBox[{"GraphHighlightStyle", "\[Rule]", "\"\<Thick\>\""}]}], "]"}], 
   "&"}], "/@", 
  RowBox[{"IGRandomSpanningTree", "[", 
   RowBox[{"g", ",", "9"}], 
   "]"}]}]}], "Input",ExpressionUUID->"9251972e-a67a-4fe2-9ed8-e4f7e0e685fc"],

Cell[TextData[{
 "If the input is a multi-graph, each edge will be considered separately for \
the purpose of spanning tree calculations. Thus the following graph has not \
3, but 5 different spanning trees. Two pairs of these are indistinguishable \
based on their adjacency matrix due to the indistinguishability of the two \
parallel ",
 Cell[BoxData[
  RowBox[{"1", "\[UndirectedEdge]", "2"}]],ExpressionUUID->
  "1ed45936-34e6-44db-af7c-4bacfe957438"],
 " edges. However, since all 5 spanning trees are generated with equal \
probability, two of the 3 adjacency matrices will appear twice as frequently \
as the third one."
}], "Text",ExpressionUUID->"38a0261d-f96a-44e9-b0b8-557ef537d08c"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"IGShorthand", "[", 
   RowBox[{"\"\<1-2-3-1,1-2\>\"", ",", 
    RowBox[{"MultiEdges", "\[Rule]", "True"}], ",", 
    RowBox[{"ImageSize", "\[Rule]", "Small"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"3942f66e-6dda-4f21-a261-8adea54390df"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"IGRandomSpanningTree", "[", 
     RowBox[{"g", ",", "10000"}], "]"}], "//", 
    RowBox[{"CountsBy", "[", "AdjacencyMatrix", "]"}]}], "//", "KeySort"}], "//", 
  RowBox[{
  "KeyMap", "[", "MatrixForm", 
   "]"}]}]], "Input",ExpressionUUID->"0704822f-1f99-4f2b-9489-a0c549ac4ee1"],

Cell["\<\
Edge directions are ignored for the purpose of spanning tree calculation. \
Thus the result may not be an out-tree.\
\>", "Text",ExpressionUUID->"b0286a08-6169-44ed-bc74-29c6763f463f"],

Cell[BoxData[
 RowBox[{"IGRandomSpanningTree", "@", 
  RowBox[{"WheelGraph", "[", 
   RowBox[{"11", ",", 
    RowBox[{"DirectedEdges", "\[Rule]", "True"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"7d3f12a3-b312-4e76-a652-45f644729e4d"],

Cell["Create mazes by taking random spanning trees of grid graphs.", \
"Text",ExpressionUUID->"a25799a0-bb65-4acb-9e45-14aad55c6b4d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"GridGraph", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"10", ",", "10"}], "}"}], ",", 
     RowBox[{"GraphStyle", "\[Rule]", "\"\<Web\>\""}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"HighlightGraph", "[", 
  RowBox[{"g", ",", 
   RowBox[{"IGRandomSpanningTree", "[", "g", "]"}], ",", 
   RowBox[{"GraphHighlightStyle", "\[Rule]", "\"\<DehighlightHide\>\""}]}], 
  "]"}]}], "Input",ExpressionUUID->"2c94ea84-c425-4d45-ab08-bccafe5084d0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"GridGraph", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"6", ",", "6", ",", "6"}], "}"}], ",", 
     RowBox[{"VertexCoordinates", "\[Rule]", 
      RowBox[{"Tuples", "[", 
       RowBox[{
        RowBox[{"Range", "[", "6", "]"}], ",", 
        RowBox[{"{", "3", "}"}]}], "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"HighlightGraph", "[", 
  RowBox[{"g", ",", 
   RowBox[{"IGRandomSpanningTree", "[", "g", "]"}], ",", 
   RowBox[{"GraphHighlightStyle", "\[Rule]", "\"\<DehighlightHide\>\""}]}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.732465115366085*^9, 3.732465164611658*^9}, {
  3.7324652103222113`*^9, 
  3.732465211828081*^9}},ExpressionUUID->"8ac2a6df-05fe-42af-b17d-\
047eb4f300c5"],

Cell[TextData[{
 "Generate a random spanning tree of the component containing vertex ",
 Cell[BoxData["8"],ExpressionUUID->"7f668691-f3e5-49fa-880e-543f0900dbe5"],
 "."
}], "Text",ExpressionUUID->"a74fe51c-8a62-47ae-aa49-53619d68a067"],

Cell[BoxData[
 RowBox[{"IGRandomSpanningTree", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {
          Null, {{1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {2, 3}, {2, 6}, {3, 
           4}, {4, 5}, {5, 6}, {7, 9}, {7, 10}, {7, 12}, {7, 13}, {8, 10}, {8,
            11}, {8, 13}, {8, 14}, {9, 11}, {9, 12}, {9, 14}, {10, 12}, {10, 
           13}, {11, 13}, {11, 14}, {12, 14}}}, {
          GraphLayout -> {"PackingLayout" -> "LayeredLeft"}, PerformanceGoal -> 
           "Quality", VertexShapeFunction -> {"Name"}}]], Typeset`boxes, 
        Typeset`boxes$s2d = GraphicsGroupBox[{{
           Directive[
            Opacity[0.7], 
            Hue[0.6, 0.7, 0.5]], 
           LineBox[{{
              DynamicLocation["VertexID$1", Automatic, Center], 
              DynamicLocation["VertexID$2", Automatic, Center]}, {
              DynamicLocation["VertexID$1", Automatic, Center], 
              DynamicLocation["VertexID$3", Automatic, Center]}, {
              DynamicLocation["VertexID$1", Automatic, Center], 
              DynamicLocation["VertexID$4", Automatic, Center]}, {
              DynamicLocation["VertexID$1", Automatic, Center], 
              DynamicLocation["VertexID$5", Automatic, Center]}, {
              DynamicLocation["VertexID$1", Automatic, Center], 
              DynamicLocation["VertexID$6", Automatic, Center]}, {
              DynamicLocation["VertexID$2", Automatic, Center], 
              DynamicLocation["VertexID$3", Automatic, Center]}, {
              DynamicLocation["VertexID$2", Automatic, Center], 
              DynamicLocation["VertexID$6", Automatic, Center]}, {
              DynamicLocation["VertexID$3", Automatic, Center], 
              DynamicLocation["VertexID$4", Automatic, Center]}, {
              DynamicLocation["VertexID$4", Automatic, Center], 
              DynamicLocation["VertexID$5", Automatic, Center]}, {
              DynamicLocation["VertexID$5", Automatic, Center], 
              DynamicLocation["VertexID$6", Automatic, Center]}, {
              DynamicLocation["VertexID$7", Automatic, Center], 
              DynamicLocation["VertexID$9", Automatic, Center]}, {
              DynamicLocation["VertexID$7", Automatic, Center], 
              DynamicLocation["VertexID$10", Automatic, Center]}, {
              DynamicLocation["VertexID$7", Automatic, Center], 
              DynamicLocation["VertexID$12", Automatic, Center]}, {
              DynamicLocation["VertexID$7", Automatic, Center], 
              DynamicLocation["VertexID$13", Automatic, Center]}, {
              DynamicLocation["VertexID$8", Automatic, Center], 
              DynamicLocation["VertexID$10", Automatic, Center]}, {
              DynamicLocation["VertexID$8", Automatic, Center], 
              DynamicLocation["VertexID$11", Automatic, Center]}, {
              DynamicLocation["VertexID$8", Automatic, Center], 
              DynamicLocation["VertexID$13", Automatic, Center]}, {
              DynamicLocation["VertexID$8", Automatic, Center], 
              DynamicLocation["VertexID$14", Automatic, Center]}, {
              DynamicLocation["VertexID$9", Automatic, Center], 
              DynamicLocation["VertexID$11", Automatic, Center]}, {
              DynamicLocation["VertexID$9", Automatic, Center], 
              DynamicLocation["VertexID$12", Automatic, Center]}, {
              DynamicLocation["VertexID$9", Automatic, Center], 
              DynamicLocation["VertexID$14", Automatic, Center]}, {
              DynamicLocation["VertexID$10", Automatic, Center], 
              DynamicLocation["VertexID$12", Automatic, Center]}, {
              DynamicLocation["VertexID$10", Automatic, Center], 
              DynamicLocation["VertexID$13", Automatic, Center]}, {
              DynamicLocation["VertexID$11", Automatic, Center], 
              DynamicLocation["VertexID$13", Automatic, Center]}, {
              DynamicLocation["VertexID$11", Automatic, Center], 
              DynamicLocation["VertexID$14", Automatic, Center]}, {
              DynamicLocation["VertexID$12", Automatic, Center], 
              DynamicLocation["VertexID$14", Automatic, Center]}}]}, {
           Directive[
            Hue[0.6, 0.2, 0.8], 
            EdgeForm[
             Directive[
              GrayLevel[0], 
              Opacity[0.7]]]], 
           TagBox[
            InsetBox[
             BoxData[
              FormBox[
               PaneBox["1", Alignment -> Center, ImageMargins -> 2], 
               TraditionalForm]], {1.2878150329597164`, -1.1590570148027601`},
              BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$1"], 
           TagBox[
            InsetBox[
             BoxData[
              FormBox[
               PaneBox["2", Alignment -> Center, ImageMargins -> 2], 
               TraditionalForm]], {
             0.41628242304015517`, -1.4428069469347637`}, BaseStyle -> 
             "Graphics"], "DynamicName", BoxID -> "VertexID$2"], 
           TagBox[
            InsetBox[
             BoxData[
              FormBox[
               PaneBox["3", Alignment -> Center, ImageMargins -> 2], 
               TraditionalForm]], {0.747708012399481, -0.418304509212597}, 
             BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$3"], 
           
           TagBox[
            InsetBox[
             BoxData[
              FormBox[
               PaneBox["4", Alignment -> Center, ImageMargins -> 2], 
               TraditionalForm]], {
             1.8248328746369435`, -0.41628242304015517`}, BaseStyle -> 
             "Graphics"], "DynamicName", BoxID -> "VertexID$4"], 
           TagBox[
            InsetBox[
             BoxData[
              FormBox[
               PaneBox["5", Alignment -> Center, ImageMargins -> 2], 
               TraditionalForm]], {2.1599471977013605`, -1.4399766650365011`},
              BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$5"], 
           TagBox[
            InsetBox[
             BoxData[
              FormBox[
               PaneBox["6", Alignment -> Center, ImageMargins -> 2], 
               TraditionalForm]], {1.289724045151475, -2.0745157177333193`}, 
             BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$6"], 
           
           TagBox[
            InsetBox[
             BoxData[
              FormBox[
               PaneBox["7", Alignment -> Center, ImageMargins -> 2], 
               TraditionalForm]], {4.150443147902685, -0.4211511529204448}, 
             BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$7"], 
           
           TagBox[
            InsetBox[
             BoxData[
              FormBox[
               PaneBox["8", Alignment -> Center, ImageMargins -> 2], 
               TraditionalForm]], {2.992512043781671, -1.5617901198387272`}, 
             BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$8"], 
           
           TagBox[
            InsetBox[
             BoxData[
              FormBox[
               PaneBox["9", Alignment -> Center, ImageMargins -> 2], 
               TraditionalForm]], {4.617815386030818, -1.5728386704183819`}, 
             BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$9"], 
           
           TagBox[
            InsetBox[
             BoxData[
              FormBox[
               PaneBox["10", Alignment -> Center, ImageMargins -> 2], 
               TraditionalForm]], {3.476374640088233, -0.4162824230401556}, 
             BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$10"], 
           TagBox[
            InsetBox[
             BoxData[
              FormBox[
               PaneBox["11", Alignment -> Center, ImageMargins -> 2], 
               TraditionalForm]], {3.4653152674596885`, -2.0411333853026754`},
              BaseStyle -> "Graphics"], "DynamicName", BoxID -> 
            "VertexID$11"], 
           TagBox[
            InsetBox[
             BoxData[
              FormBox[
               PaneBox["12", Alignment -> Center, ImageMargins -> 2], 
               TraditionalForm]], {4.622149685326628, -0.8991009097144342}, 
             BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$12"], 
           TagBox[
            InsetBox[
             BoxData[
              FormBox[
               PaneBox["13", Alignment -> Center, ImageMargins -> 2], 
               TraditionalForm]], {2.9969123090794145`, -0.8898183961535686}, 
             BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$13"], 
           TagBox[
            InsetBox[
             BoxData[
              FormBox[
               PaneBox["14", Alignment -> Center, ImageMargins -> 2], 
               TraditionalForm]], {4.1395568662017155`, -2.0451054807833096`},
              BaseStyle -> "Graphics"], "DynamicName", BoxID -> 
            "VertexID$14"]}}], $CellContext`flag}, 
        TagBox[
         DynamicBox[GraphComputation`NetworkGraphicsBox[
          3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
          CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
           SynchronousUpdating -> False, 
           TrackedSymbols :> {$CellContext`flag}},
          
          ImageSizeCache->{{-3.552713678800501*^-15, 
           202.70703124999997`}, {-49.99999999999999, 43.99229348765167}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False,
        UnsavedVariables:>{$CellContext`flag}]],
      DefaultBaseStyle->{
       "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
        Hue[0.8, 1., 0.6]},
      FormatType->TraditionalForm,
      FrameTicks->None,
      ImageSize->{203.70703125, Automatic}], ",", "8"}], "}"}], ",", 
   RowBox[{"VertexLabels", "\[Rule]", "Automatic"}]}], 
  "]"}]], "Input",ExpressionUUID->"03d5b6a7-bd1a-4d14-9df2-a3e8600db7fa"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGSpanningTreeCount", \
"Subsubsection",ExpressionUUID->"411c234d-6531-4f8d-9672-0468366cf45d"],

Cell[BoxData[
 RowBox[{"?", 
  "IGSpanningTreeCount"}]], \
"Input",ExpressionUUID->"a3d4f0f7-d567-409f-9110-282ff83bb326"],

Cell[TextData[{
 Cell[BoxData[
 "IGSpanningTreeCount"],ExpressionUUID->
  "47d45668-f0c1-4893-93f7-43d003254266"],
 " computes the number of spanning trees of a graph using Kirchhoff\
\[CloseCurlyQuote]s theorem. Multigraphs and directed graphs are supported."
}], "Text",ExpressionUUID->"68cf9723-6946-4c62-a6d8-68d61e89fa78"],

Cell[BoxData[
 RowBox[{"IGSpanningTreeCount", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3, 4}, {Null, {{1, 2}, {2, 3}, {3, 4}, {1, 3}}}, {
       FormatType -> TraditionalForm, 
        GraphLayout -> {
         "Dimension" -> 2, 
          "VertexLayout" -> {
           "CircularEmbedding", "Offset" -> Rational[-1, 4] Pi}}, 
        ImageSize -> {83.3125, Automatic}, VertexLabels -> {None}, 
        VertexSize -> {Small}}]]}, 
     TagBox[
      GraphicsGroupBox[
       GraphicsComplexBox[{{-0.707106781186548, 
        0.7071067811865483}, {-0.7071067811865471, -0.7071067811865467}, {
        0.7071067811865479, -0.7071067811865485}, {0.7071067811865472, 
        0.7071067811865466}}, {
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
          {Arrowheads[0.], ArrowBox[{1, 2}, 0.07071067811865475]}, 
          {Arrowheads[0.], ArrowBox[{1, 3}, 0.07071067811865475]}, 
          {Arrowheads[0.], ArrowBox[{2, 3}, 0.07071067811865475]}, 
          {Arrowheads[0.], ArrowBox[{3, 4}, 0.07071067811865475]}}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          DiskBox[1, 0.07071067811865475], DiskBox[2, 0.07071067811865475], 
          DiskBox[3, 0.07071067811865475], DiskBox[4, 0.07071067811865475]}}]],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None,
   ImageSize->{66.4453125, Automatic}], 
  "]"}]], "Input",ExpressionUUID->"fa557260-98d5-4044-923d-173cc743801f"],

Cell["\<\
The number of spanning trees of a directed graph, rooted in any vertex.\
\>", "Text",ExpressionUUID->"57a490bd-2414-4ef9-ba1e-b1893662d1e2"],

Cell[BoxData[
 RowBox[{"IGSpanningTreeCount", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3}, {
        SparseArray[
        Automatic, {3, 3}, 0, {1, {{0, 1, 2, 3}, {{2}, {3}, {1}}}, Pattern}], 
        Null}, {GraphLayout -> "CircularEmbedding", 
        VertexShapeFunction -> {"Name"}, VertexSize -> {Medium}}]]}, 
     TagBox[
      GraphicsGroupBox[
       GraphicsComplexBox[{{-0.8660254037844384, -0.4999999999999994}, {
        0.8660254037844389, -0.5000000000000012}, {1.8369701987210297`*^-16, 
        1.}}, {
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
          ArrowBox[{{1, 2}, {2, 3}, {3, 1}}, 0.34641016151377535`]}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], InsetBox[
           PaneBox["1",
            Alignment->Center,
            ImageMargins->2], 1, Automatic, {0.34641016151377535, 0.34641016151377535},
           
           BaseStyle->"Graphics"], InsetBox[
           PaneBox["2",
            Alignment->Center,
            ImageMargins->2], 2, Automatic, {0.34641016151377535, 0.34641016151377535},
           
           BaseStyle->"Graphics"], InsetBox[
           PaneBox["3",
            Alignment->Center,
            ImageMargins->2], 3, Automatic, {0.34641016151377535, 0.34641016151377535},
           
           BaseStyle->"Graphics"]}}]],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None], 
  "]"}]], "Input",ExpressionUUID->"b85a086d-3f64-4e0c-a98c-2440d7e61f1e"],

Cell[TextData[{
 "The number of spanning trees rooted in vertex ",
 Cell[BoxData["1"],ExpressionUUID->"281964fb-e89c-4ae4-80bf-e884e33155f9"],
 "."
}], "Text",ExpressionUUID->"b5959bc0-8a3e-4bf8-9687-7f5d26f347cf"],

Cell[BoxData[
 RowBox[{"IGSpanningTreeCount", "[", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3}, {
         SparseArray[
         Automatic, {3, 3}, 0, {1, {{0, 1, 2, 3}, {{2}, {3}, {1}}}, Pattern}],
          Null}, {
        GraphLayout -> "CircularEmbedding", VertexShapeFunction -> {"Name"}, 
         VertexSize -> {Medium}}]]}, 
      TagBox[
       GraphicsGroupBox[
        GraphicsComplexBox[{{-0.8660254037844384, -0.4999999999999994}, {
         0.8660254037844389, -0.5000000000000012}, {1.8369701987210297`*^-16, 
         1.}}, {
          {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
           ArrowBox[{{1, 2}, {2, 3}, {3, 1}}, 0.34641016151377535`]}, 
          {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
           InsetBox[
            PaneBox["1",
             Alignment->Center,
             ImageMargins->2], 1, Automatic, {0.34641016151377535, 0.34641016151377535},
            
            BaseStyle->"Graphics"], InsetBox[
            PaneBox["2",
             Alignment->Center,
             ImageMargins->2], 2, Automatic, {0.34641016151377535, 0.34641016151377535},
            
            BaseStyle->"Graphics"], InsetBox[
            PaneBox["3",
             Alignment->Center,
             ImageMargins->2], 3, Automatic, {0.34641016151377535, 0.34641016151377535},
            
            BaseStyle->"Graphics"]}}]],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None], ",", "1"}], 
  "]"}]], "Input",ExpressionUUID->"d746327a-13ec-418a-a945-0e463b1098c0"],

Cell[BoxData[
 RowBox[{"IGSpanningTreeCount", "[", 
  RowBox[{"PetersenGraph", "[", "]"}], 
  "]"}]], "Input",ExpressionUUID->"55707064-8b7a-46a2-b8a6-ad90572dd0de"],

Cell[TextData[{
 Cell[BoxData[
 "IGSpanningTreeCount"],ExpressionUUID->
  "57dfc2e0-998e-4747-9204-1d37f06ac20d"],
 " works on large graphs."
}], "Text",ExpressionUUID->"43a5517a-c976-44af-9311-a85e37b91f69"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{
  "HypercubeGraph", "[", "6", 
   "]"}]}]], "Input",ExpressionUUID->"089598da-1026-48fc-a3c3-b5b0dd935466"],

Cell[BoxData[
 RowBox[{"IGSpanningTreeCount", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"ad5ab699-de0a-4474-927e-a2e2ce852dcf"],

Cell["\<\
Edge multiplicities are taken into account. Thus the following graph has not \
3, but 5 different spanning trees.\
\>", "Text",ExpressionUUID->"cbe65812-36ea-4f92-870d-f394c53e5662"],

Cell[BoxData[
 RowBox[{"IGSpanningTreeCount", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3}, {Null, {{1, 2}, {2, 3}, {1, 3}, {1, 2}}}, {
       PerformanceGoal -> "Quality", VertexLabels -> {None}, 
        VertexShapeFunction -> {"Name"}}]], Typeset`boxes, Typeset`boxes$s2d =
      GraphicsGroupBox[{{
        Directive[
         Opacity[0.7], 
         Hue[0.6, 0.7, 0.5]], 
        BezierCurveBox[{
          DynamicLocation["VertexID$1", Automatic, Center], {
          7.470730829510974*^-15, -0.2151802710442648}, 
          DynamicLocation["VertexID$2", Automatic, Center]}], 
        BezierCurveBox[{
          DynamicLocation["VertexID$1", Automatic, Center], {
          1.4168627435279434`*^-15, -0.7848197289557832}, 
          DynamicLocation["VertexID$2", Automatic, Center]}], 
        LineBox[{
          DynamicLocation["VertexID$1", Automatic, Center], 
          DynamicLocation["VertexID$3", Automatic, Center]}], 
        LineBox[{
          DynamicLocation["VertexID$2", Automatic, Center], 
          DynamicLocation["VertexID$3", Automatic, Center]}]}, {
        Directive[
         Hue[0.6, 0.2, 0.8], 
         EdgeForm[
          Directive[
           GrayLevel[0], 
           Opacity[0.7]]]], 
        TagBox[
         InsetBox[
          BoxData[
           FormBox[
            PaneBox["1", Alignment -> Center, ImageMargins -> 2], 
            TraditionalForm]], {-0.8660254037844384, -0.4999999999999994}, 
          BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$1"], 
        TagBox[
         InsetBox[
          BoxData[
           FormBox[
            PaneBox["2", Alignment -> Center, ImageMargins -> 2], 
            TraditionalForm]], {0.8660254037844389, -0.5000000000000012}, 
          BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$2"], 
        TagBox[
         InsetBox[
          BoxData[
           FormBox[
            PaneBox["3", Alignment -> Center, ImageMargins -> 2], 
            TraditionalForm]], {1.8369701987210297`*^-16, 1.}, BaseStyle -> 
          "Graphics"], "DynamicName", BoxID -> 
         "VertexID$3"]}}], $CellContext`flag}, 
     TagBox[
      DynamicBox[GraphComputation`NetworkGraphicsBox[
       3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
       CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
        SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
       ImageSizeCache->{{-1.6703610092328418`, 
        59.90082975923283}, {-34.67036100923284, 29.439172183164366`}}],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False,
     UnsavedVariables:>{$CellContext`flag}]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None,
   ImageSize->{59.23046875, Automatic}], 
  "]"}]], "Input",ExpressionUUID->"4c1121a5-8cf4-4c85-9c20-aba04bec1f80"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Dominance", \
"Subsection",ExpressionUUID->"b7db1d45-b41e-442f-8698-8e67dcdd0b9c"],

Cell[TextData[{
 "In a directed graph, a vertex ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],ExpressionUUID->
  "cc2476b5-c433-4a4b-a892-f73a3c07097e"],
 " is said to ",
 StyleBox["dominate",
  FontSlant->"Italic"],
 " a vertex ",
 Cell[BoxData[
  FormBox["v", TraditionalForm]],ExpressionUUID->
  "63ae93f4-25ec-4ab1-8258-5dd9e99d0864"],
 " if every path from the root to ",
 Cell[BoxData[
  FormBox["v", TraditionalForm]],ExpressionUUID->
  "6720c1ff-5853-464c-afad-b8d06206ac7f"],
 " passes through ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],ExpressionUUID->
  "eb3a8162-97f8-4133-bbef-70bfc0aeab53"],
 ". We say that ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],ExpressionUUID->
  "efc48c3a-8571-421f-9455-617570d9e8f3"],
 " is an ",
 StyleBox["immediate dominator",
  FontSlant->"Italic"],
 " of ",
 Cell[BoxData[
  FormBox["v", TraditionalForm]],ExpressionUUID->
  "24d6629b-bef4-4266-bd1a-f7f00dfc0468"],
 " if it does not dominate any other dominator of ",
 Cell[BoxData[
  FormBox["v", TraditionalForm]],ExpressionUUID->
  "625700ca-a3de-4669-a848-87d887b08d80"],
 "."
}], "Text",ExpressionUUID->"c6b7d804-ad91-491f-b625-ad29a5f02bab"],

Cell["\<\
A dominator tree of a graph consists of the same vertices as the graph, and \
the children of a vertex are those other vertices which it immediately \
dominates.\
\>", "Text",ExpressionUUID->"b8f735fd-6ac4-4414-b36a-06bcfc9a74e2"],

Cell[CellGroupData[{

Cell["IGDominatorTree", \
"Subsubsection",ExpressionUUID->"f52b6095-1cc2-4f8c-a2ae-5ff3d16f8f1f"],

Cell[BoxData[
 RowBox[{"?", 
  "IGDominatorTree"}]], \
"Input",ExpressionUUID->"5d90a73f-6795-4d8c-a467-af0ceb0d0217"],

Cell["Find the dominator tree of a directed graph.", \
"Text",ExpressionUUID->"fbb21ec8-f57b-4e97-a256-12cc38176081"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{
        "a", "b", "c", "d", "e", "f"}, {{{1, 2}, {2, 3}, {3, 4}, {1, 5}, {5, 
         6}, {6, 4}}, Null}, {
        FormatType -> TraditionalForm, GraphStyle -> "VintageDiagram", 
         VertexSize -> {Large}}]], Typeset`boxes, Typeset`boxes$s2d = 
      GraphicsGroupBox[{{
         Arrowheads[Medium], 
         Directive[
          Hue[0, 1, 0.5], 
          Opacity[1]], 
         ArrowBox[{
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$5", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$3", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$3", Automatic, Center], 
           DynamicLocation["VertexID$4", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$5", Automatic, Center], 
           DynamicLocation["VertexID$6", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$6", Automatic, Center], 
           DynamicLocation["VertexID$4", Automatic, Center]}]}, {
         Directive[
          Hue[0.15, 0.2, 1], 
          EdgeForm[{
            Thickness[0.003], 
            Hue[0.15, 0.6, 0.9], 
            Opacity[1]}]], 
         TagBox[{
           TagBox[
            
            RectangleBox[{-0.17647060000000003`, 2.8235294}, {
             0.17647060000000003`, 3.1764706}], "DynamicName", BoxID -> 
            "VertexID$1"], 
           InsetBox[
            FormBox["\"a\"", TraditionalForm], 
            DynamicLocation["VertexID$1", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$1"], 
         TagBox[{
           TagBox[
            
            RectangleBox[{-0.17647060000000003`, 1.8235294}, {
             0.17647060000000003`, 2.1764706}], "DynamicName", BoxID -> 
            "VertexID$2"], 
           InsetBox[
            FormBox["\"b\"", TraditionalForm], 
            DynamicLocation["VertexID$2", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$2"], 
         TagBox[{
           TagBox[
            
            RectangleBox[{-0.17647060000000003`, 0.8235294}, {
             0.17647060000000003`, 1.1764706}], "DynamicName", BoxID -> 
            "VertexID$3"], 
           InsetBox[
            FormBox["\"c\"", TraditionalForm], 
            DynamicLocation["VertexID$3", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$3"], 
         TagBox[{
           TagBox[
            
            RectangleBox[{0.8235294, -0.17647060000000003`}, {1.1764706, 
             0.17647060000000003`}], "DynamicName", BoxID -> "VertexID$4"], 
           InsetBox[
            FormBox["\"d\"", TraditionalForm], 
            DynamicLocation["VertexID$4", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$4"], 
         TagBox[{
           TagBox[
            RectangleBox[{0.8235294, 1.8235294}, {1.1764706, 2.1764706}], 
            "DynamicName", BoxID -> "VertexID$5"], 
           InsetBox[
            FormBox["\"e\"", TraditionalForm], 
            DynamicLocation["VertexID$5", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$5"], 
         TagBox[{
           TagBox[
            RectangleBox[{0.8235294, 0.8235294}, {1.1764706, 1.1764706}], 
            "DynamicName", BoxID -> "VertexID$6"], 
           InsetBox[
            FormBox["\"f\"", TraditionalForm], 
            DynamicLocation["VertexID$6", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> 
          "VertexLabelID$6"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        
        ImageSizeCache->{{1.2870533573515353`, 
         68.28339839138042}, {-85.76860300404743, 79.9572857511464}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{70.57045174873195, Automatic}]}], 
  ";"}]], "Input",ExpressionUUID->"a9bd7615-bf11-44c9-ab92-aa4c5d8bac6e"],

Cell[BoxData[
 RowBox[{"IGDominatorTree", "[", 
  RowBox[{"g", ",", "\"\<a\>\"", ",", 
   RowBox[{"GraphStyle", "\[Rule]", "\"\<VintageDiagram\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"d20e4cb2-c4bc-4326-8ffd-341edf6ec0b3"],

Cell["\<\
Vertices that cannot be reached from the specified root are left isolated in \
the returned graph.\
\>", "Text",ExpressionUUID->"5bc35f7c-207d-475d-945f-958212ba85d7"],

Cell[BoxData[
 RowBox[{"IGDominatorTree", "[", 
  RowBox[{"g", ",", "\"\<b\>\"", ",", 
   RowBox[{"GraphStyle", "\[Rule]", "\"\<VintageDiagram\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"34680fbd-1065-44ca-bf96-0e9a836b58ac"],

Cell[TextData[{
 Cell[BoxData[
 "IGDominatorTree"],ExpressionUUID->"956cae91-18b7-4d58-a62d-2e30cf4a0cd3"],
 " accepts all standard ",
 Cell[BoxData["Graph"],ExpressionUUID->"06840d1d-e5a5-4d44-88cd-7252f3616875"],
 " options."
}], "Text",ExpressionUUID->"ce4dd66c-9e72-4d3f-a0f7-a8d53b2f2835"],

Cell[BoxData[
 RowBox[{"IGDominatorTree", "[", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {
         SparseArray[
         Automatic, {10, 10}, 0, {
          1, {{0, 0, 5, 8, 9, 12, 12, 13, 14, 18, 20}, {{1}, {3}, {5}, {7}, {
            8}, {1}, {8}, {9}, {6}, {1}, {4}, {7}, {6}, {3}, {2}, {6}, {8}, {
            10}, {1}, {4}}}, Pattern}], Null}, {
        PerformanceGoal -> "Quality", VertexShapeFunction -> {"Name"}}]], 
      Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
         Arrowheads[Medium], 
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         ArrowBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$1", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$3", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$5", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$7", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$8", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$3", Automatic, Center], 
           DynamicLocation["VertexID$1", Automatic, Center]}], 
         ArrowBox[
          BezierCurveBox[{
            DynamicLocation["VertexID$3", Automatic, Center], {
            0.18878707437328954`, 0.7043491932045127}, 
            DynamicLocation["VertexID$8", Automatic, Center]}]], 
         ArrowBox[{
           DynamicLocation["VertexID$3", Automatic, Center], 
           DynamicLocation["VertexID$9", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$4", Automatic, Center], 
           DynamicLocation["VertexID$6", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$5", Automatic, Center], 
           DynamicLocation["VertexID$1", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$5", Automatic, Center], 
           DynamicLocation["VertexID$4", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$5", Automatic, Center], 
           DynamicLocation["VertexID$7", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$7", Automatic, Center], 
           DynamicLocation["VertexID$6", Automatic, Center]}], 
         ArrowBox[
          BezierCurveBox[{
            DynamicLocation[
            "VertexID$8", Automatic, Center], {-0.05657918854142188, 
            0.7478299202637817}, 
            DynamicLocation["VertexID$3", Automatic, Center]}]], 
         ArrowBox[{
           DynamicLocation["VertexID$9", Automatic, Center], 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$9", Automatic, Center], 
           DynamicLocation["VertexID$6", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$9", Automatic, Center], 
           DynamicLocation["VertexID$8", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$9", Automatic, Center], 
           DynamicLocation["VertexID$10", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$10", Automatic, Center], 
           DynamicLocation["VertexID$1", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$10", Automatic, Center], 
           DynamicLocation["VertexID$4", Automatic, Center]}]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["1", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0.8998185947365909, 1.8443709698976187`}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$1"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["2", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0.8880049373010286, 1.0404023201897854`}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$2"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["3", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0.13220788583186782`, 1.099120978565168}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$3"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["4", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {2.681770513773281, 1.0221130040021649`}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$4"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["5", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {1.8908144666947417`, 1.6789604224359256`}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$5"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["6", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {2.2066339236847954`, 0.}, BaseStyle -> 
           "Graphics"], "DynamicName", BoxID -> "VertexID$6"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["7", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {1.9652257497065992`, 0.6751003020139319}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$7"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["8", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0., 0.3530581349030725}, BaseStyle -> 
           "Graphics"], "DynamicName", BoxID -> "VertexID$8"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["9", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0.9481914494718813, 0.3342446899811662}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$9"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["10", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {1.6325771462817293`, 1.203747908205189}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> 
          "VertexID$10"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        
        ImageSizeCache->{{-0.30228500731643626`, 
         150.0662062788229}, {-61.15214377882288, 55.10494008672938}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{149.9140625, Automatic}], ",", "8", ",", 
   "\[IndentingNewLine]", 
   RowBox[{"VertexShapeFunction", "\[Rule]", "\"\<Name\>\""}], ",", 
   RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"b2a973a9-10c2-4484-a3f4-c010ff03b2d8"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGImmediateDominators", \
"Subsubsection",ExpressionUUID->"c672d93d-5ed7-41e0-ba3a-bd5b6108df04"],

Cell[BoxData[
 RowBox[{"?", 
  "IGImmediateDominators"}]], \
"Input",ExpressionUUID->"74764a74-ef90-40e2-84e3-c426c4ba23e6"],

Cell["\<\
Directly find the immediate dominators of vertices in a graph.\
\>", "Text",ExpressionUUID->"20e8cb80-f284-4c94-84cb-408c99d0812c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{
        "a", "b", "c", "d", "e", "f"}, {{{1, 2}, {2, 3}, {3, 4}, {1, 5}, {5, 
         6}, {6, 4}}, Null}, {
        FormatType -> TraditionalForm, GraphStyle -> "VintageDiagram", 
         VertexSize -> {Large}}]], Typeset`boxes, Typeset`boxes$s2d = 
      GraphicsGroupBox[{{
         Arrowheads[Medium], 
         Directive[
          Hue[0, 1, 0.5], 
          Opacity[1]], 
         ArrowBox[{
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$5", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$3", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$3", Automatic, Center], 
           DynamicLocation["VertexID$4", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$5", Automatic, Center], 
           DynamicLocation["VertexID$6", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$6", Automatic, Center], 
           DynamicLocation["VertexID$4", Automatic, Center]}]}, {
         Directive[
          Hue[0.15, 0.2, 1], 
          EdgeForm[{
            Thickness[0.003], 
            Hue[0.15, 0.6, 0.9], 
            Opacity[1]}]], 
         TagBox[{
           TagBox[
            
            RectangleBox[{-0.17647060000000003`, 2.8235294}, {
             0.17647060000000003`, 3.1764706}], "DynamicName", BoxID -> 
            "VertexID$1"], 
           InsetBox[
            FormBox["\"a\"", TraditionalForm], 
            DynamicLocation["VertexID$1", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$1"], 
         TagBox[{
           TagBox[
            
            RectangleBox[{-0.17647060000000003`, 1.8235294}, {
             0.17647060000000003`, 2.1764706}], "DynamicName", BoxID -> 
            "VertexID$2"], 
           InsetBox[
            FormBox["\"b\"", TraditionalForm], 
            DynamicLocation["VertexID$2", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$2"], 
         TagBox[{
           TagBox[
            
            RectangleBox[{-0.17647060000000003`, 0.8235294}, {
             0.17647060000000003`, 1.1764706}], "DynamicName", BoxID -> 
            "VertexID$3"], 
           InsetBox[
            FormBox["\"c\"", TraditionalForm], 
            DynamicLocation["VertexID$3", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$3"], 
         TagBox[{
           TagBox[
            
            RectangleBox[{0.8235294, -0.17647060000000003`}, {1.1764706, 
             0.17647060000000003`}], "DynamicName", BoxID -> "VertexID$4"], 
           InsetBox[
            FormBox["\"d\"", TraditionalForm], 
            DynamicLocation["VertexID$4", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$4"], 
         TagBox[{
           TagBox[
            RectangleBox[{0.8235294, 1.8235294}, {1.1764706, 2.1764706}], 
            "DynamicName", BoxID -> "VertexID$5"], 
           InsetBox[
            FormBox["\"e\"", TraditionalForm], 
            DynamicLocation["VertexID$5", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$5"], 
         TagBox[{
           TagBox[
            RectangleBox[{0.8235294, 0.8235294}, {1.1764706, 1.1764706}], 
            "DynamicName", BoxID -> "VertexID$6"], 
           InsetBox[
            FormBox["\"f\"", TraditionalForm], 
            DynamicLocation["VertexID$6", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> 
          "VertexLabelID$6"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        
        ImageSizeCache->{{1.2870533573515353`, 
         68.28339839138042}, {-85.76860300404743, 79.9572857511464}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{70.57045174873195, Automatic}]}], ";"}], "\n", 
 RowBox[{"IGImmediateDominators", "[", 
  RowBox[{"g", ",", "\"\<a\>\""}], 
  "]"}]}], "Input",ExpressionUUID->"56e372db-4cec-47ff-9d00-d4f680cfe0d8"],

Cell["\<\
The immediate dominator of a vertex is its parent in the dominator tree.\
\>", "Text",ExpressionUUID->"d9d13951-ea47-45ac-a523-ba913e5275d5"],

Cell[BoxData[
 RowBox[{"tree", "=", 
  RowBox[{"IGDominatorTree", "[", 
   RowBox[{"g", ",", "\"\<a\>\"", ",", 
    RowBox[{"VertexLabels", "\[Rule]", "Automatic"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"1a02cfaa-dab8-4dff-a6ef-35b77da01297"],

Cell[BoxData[
 RowBox[{"IGAdjacencyList", "[", 
  RowBox[{"tree", ",", "\"\<In\>\""}], 
  "]"}]], "Input",ExpressionUUID->"3a37379b-577c-4ccb-ba77-637236ca83d1"],

Cell["\<\
Neither the root, nor vertices unreachable from the root are included in the \
keys of the returned association.\
\>", "Text",ExpressionUUID->"8a695d59-59b3-4720-a0c2-dd74ab2d6ce6"],

Cell[BoxData[
 RowBox[{"IGImmediateDominators", "[", 
  RowBox[{"g", ",", "\"\<b\>\""}], 
  "]"}]], "Input",ExpressionUUID->"38d0c1d2-6cdf-457b-8fe9-1f75ce9f7726"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "011491d5-5b00-4a4b-b45e-568154e9dd11"],
 "-cores"
}], "Subsection",ExpressionUUID->"8db85c5a-293f-455b-bdc2-f8f9002a8983"],

Cell[BoxData[
 RowBox[{"?", 
  "IGCoreness"}]], \
"Input",ExpressionUUID->"c1419a85-2752-40a7-8581-7fa4adb37129"],

Cell[TextData[{
 "A ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "1ba41642-00c3-45f2-b638-cb189c5d2168"],
 "-core of a graph is a maximal subgraph in which each vertex has degree at \
least ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "148f160e-726b-44ec-a1d9-b346152d1a8b"],
 ". The coreness of a vertex is the highest order of ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "b4abbaf6-13b3-41ba-9aac-7582c3ad5863"],
 "-cores that contain it."
}], "Text",ExpressionUUID->"792fd862-f405-4556-b0ef-6cd6869f3ea1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4, 6, 7, 8, 5}, {
        Null, {{1, 2}, {1, 3}, {1, 4}, {2, 3}, {2, 4}, {3, 4}, {5, 6}, {5, 
         7}, {6, 7}, {4, 8}, {8, 5}}}, {
        GraphLayout -> "SpringEmbedding", PerformanceGoal -> "Quality", 
         VertexLabels -> {None}, VertexShapeFunction -> {"Name"}}]], 
      Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         LineBox[{{
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$2", Automatic, Center]}, {
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}, {
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}, {
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}, {
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}, {
            DynamicLocation["VertexID$3", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}, {
            DynamicLocation["VertexID$4", Automatic, Center], 
            DynamicLocation["VertexID$8", Automatic, Center]}, {
            DynamicLocation["VertexID$5", Automatic, Center], 
            DynamicLocation["VertexID$6", Automatic, Center]}, {
            DynamicLocation["VertexID$5", Automatic, Center], 
            DynamicLocation["VertexID$7", Automatic, Center]}, {
            DynamicLocation["VertexID$5", Automatic, Center], 
            DynamicLocation["VertexID$8", Automatic, Center]}, {
            DynamicLocation["VertexID$6", Automatic, Center], 
            DynamicLocation["VertexID$7", Automatic, Center]}}]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["1", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {3.7467846609091016`, 1.2741982597585317`}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$1"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["2", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {3.7485856975678935`, 0.}, BaseStyle -> 
           "Graphics"], "DynamicName", BoxID -> "VertexID$2"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["3", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {4.051190380473853, 0.6375948331878527}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$3"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["4", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {2.973159914451887, 0.6359335911642814}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$4"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["6", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0.9120004180682939, 0.6368378216059289}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$5"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["7", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0., 0.15074669540982583`}, BaseStyle -> 
           "Graphics"], "DynamicName", BoxID -> "VertexID$6"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["8", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0.0009124959632362817, 1.123899335870539}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$7"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["5", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {1.9371561314484906`, 0.6313350495470617}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> 
          "VertexID$8"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        
        ImageSizeCache->{{0., 153.17187500000003`}, {-35.00000000000001, 
         29.031049355431144`}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{154.171875, Automatic}]}], 
  ";"}]], "Input",ExpressionUUID->"02e4e2b9-c85b-493f-98ba-4d165caa58a7"],

Cell[BoxData[
 RowBox[{"IGCoreness", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"8cb126f3-40a7-4162-910c-3e2862e59b5f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"KCoreComponents", "[", 
    RowBox[{"g", ",", "2"}], "]"}], ",", 
   RowBox[{"KCoreComponents", "[", 
    RowBox[{"g", ",", "3"}], "]"}]}], 
  "}"}]], "Input",ExpressionUUID->"5a03ac27-2462-4b8b-8edd-e92beb47f08e"],

Cell["\<\
By default, edge directions are ignored, and multi-edges are considered.\
\>", "Text",ExpressionUUID->"56103903-3d81-4408-8b43-71afae2e0402"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 
        4}, {{{1, 2}, {2, 3}, {3, 1}, {1, 3}, {2, 4}, {4, 3}, {4, 2}, {2, 
         1}, {3, 2}}, Null}, {
        GraphLayout -> "SpringEmbedding", PerformanceGoal -> "Quality", 
         VertexLabels -> {None}, VertexShapeFunction -> {"Name"}}]], 
      Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
         Arrowheads[Medium], 
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         ArrowBox[
          BezierCurveBox[{
            DynamicLocation["VertexID$1", Automatic, Center], {
            1.4309418677737078`, 0.08602171242173523}, 
            DynamicLocation["VertexID$2", Automatic, Center]}]], 
         ArrowBox[
          BezierCurveBox[{
            DynamicLocation["VertexID$1", Automatic, Center], {
            1.2767364175266749`, 0.5549001891174254}, 
            DynamicLocation["VertexID$3", Automatic, Center]}]], 
         ArrowBox[
          BezierCurveBox[{
            DynamicLocation["VertexID$2", Automatic, Center], {
            1.2767364001751114`, 0.38285680534268735`}, 
            DynamicLocation["VertexID$1", Automatic, Center]}]], 
         ArrowBox[
          BezierCurveBox[{
            DynamicLocation["VertexID$2", Automatic, Center], {
            0.7483539705088016, 0.46887847669555666`}, 
            DynamicLocation["VertexID$3", Automatic, Center]}]], 
         ArrowBox[
          BezierCurveBox[{
            DynamicLocation["VertexID$2", Automatic, Center], {
            0.37417697598584154`, 0.08602171515838052}, 
            DynamicLocation["VertexID$4", Automatic, Center]}]], 
         ArrowBox[
          BezierCurveBox[{
            DynamicLocation["VertexID$3", Automatic, Center], {
            1.430941857361143, 0.8517352797562621}, 
            DynamicLocation["VertexID$1", Automatic, Center]}]], 
         ArrowBox[
          BezierCurveBox[{
            DynamicLocation["VertexID$3", Automatic, Center], {
            1.0567648779418708`, 0.46887847441347713`}, 
            DynamicLocation["VertexID$2", Automatic, Center]}]], 
         ArrowBox[
          BezierCurveBox[{
            DynamicLocation["VertexID$4", Automatic, Center], {
            0.5283824447699929, 0.382856806210867}, 
            DynamicLocation["VertexID$2", Automatic, Center]}]], 
         ArrowBox[{
           DynamicLocation["VertexID$4", Automatic, Center], 
           DynamicLocation["VertexID$3", Automatic, Center]}]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["1", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {1.8051188471929829`, 0.4688785177644604}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$1"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["2", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0.9025594207558351, 0.}, BaseStyle -> 
           "Graphics"], "DynamicName", BoxID -> "VertexID$2"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["3", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0.902559427694838, 0.937756951109058}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$3"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["4", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0., 0.46887852136926367`}, BaseStyle -> 
           "Graphics"], "DynamicName", BoxID -> 
          "VertexID$4"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        
        ImageSizeCache->{{0., 138.47265625}, {-45.999999999999986`, 
         39.741381939048665`}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{139.47265625, Automatic}]}], 
  ";"}]], "Input",ExpressionUUID->"4d8e94fb-52e4-4b77-8b6f-2837a024e790"],

Cell[BoxData[
 RowBox[{"IGCoreness", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"b71ab327-df7b-4511-a8fd-77d04d0b8b9d"],

Cell["Use the second argument to consider only in- or out-degrees.", \
"Text",ExpressionUUID->"cb9eb904-bc45-4c4e-af1d-16ae3b342941"],

Cell[BoxData[
 RowBox[{"IGCoreness", "[", 
  RowBox[{"g", ",", "\"\<In\>\""}], 
  "]"}]], "Input",ExpressionUUID->"ca02f2cf-77df-4c80-a51d-0dd1aabb0c1b"],

Cell[BoxData[
 RowBox[{"IGCoreness", "[", 
  RowBox[{"g", ",", "\"\<Out\>\""}], 
  "]"}]], "Input",ExpressionUUID->"131a4000-2c87-432a-8ee0-371bec46e642"]
}, Closed]],

Cell[CellGroupData[{

Cell["Matchings", \
"Subsection",ExpressionUUID->"a9bbd8fc-1c4f-46a7-8799-1d5488214dc0"],

Cell["\<\
A matching of a graph is a subset of its edges that share no vertices between \
them.\
\>", "Text",ExpressionUUID->"31bbd2ba-8116-490b-90a0-be93e48c1727"],

Cell[CellGroupData[{

Cell["IGMaximumMatching", \
"Subsubsection",ExpressionUUID->"e6079f85-0160-436f-85e4-9d2ebc7faade"],

Cell[BoxData[
 RowBox[{"?", 
  "IGMaximumMatching"}]], \
"Input",ExpressionUUID->"58a0f8a2-7d4f-4387-b00f-45694b6d323a"],

Cell["\<\
A matching of a graph is also known as an independent edge set.\
\>", "Text",ExpressionUUID->"b014d4af-38ef-4afc-b596-3e730aed4aee"],

Cell[TextData[{
 Cell[BoxData[
 "IGMaximumMatching"],ExpressionUUID->
  "844ca206-85c9-4768-b660-720975e79181"],
 " ignores edge directions and edge weights."
}], "Text",ExpressionUUID->"4d50416e-85f3-43a9-ae71-3f5d0226d8de"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"RandomGraph", "[", 
    RowBox[{"{", 
     RowBox[{"10", ",", "20"}], "}"}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"a986154c-5604-44ab-a442-4a1b97f49290"],

Cell[BoxData[
 RowBox[{"IGMaximumMatching", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"f588a19f-d44f-4233-bce1-95c7e339323f"],

Cell[BoxData[
 RowBox[{"HighlightGraph", "[", 
  RowBox[{"g", ",", 
   RowBox[{"IGMaximumMatching", "[", "g", "]"}], ",", 
   RowBox[{"GraphHighlightStyle", "\[Rule]", "\"\<Thick\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"1ffe59f0-d809-4cba-a3a2-3e2bc0a1c125"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGMatchingNumber", \
"Subsubsection",ExpressionUUID->"782443ac-c744-4e0f-847e-8a57ea5d46cc"],

Cell[BoxData[
 RowBox[{"?", 
  "IGMatchingNumber"}]], \
"Input",ExpressionUUID->"a754de40-732f-4f3c-9dd8-c38f19e903da"],

Cell["\<\
The matching number of a graph is the size of its maximum matchings.\
\>", "Text",ExpressionUUID->"06f80f09-9f5d-403b-871b-70818e6b1d33"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Graph traversal", \
"Subsection",ExpressionUUID->"c549d73c-9fd7-4ef0-a075-1684ceb62480"],

Cell[CellGroupData[{

Cell["IGUnfoldTree", \
"Subsubsection",ExpressionUUID->"79207c67-3391-4d59-80ae-b28136d8b53a"],

Cell[BoxData[
 RowBox[{"?", 
  "IGUnfoldTree"}]], \
"Input",ExpressionUUID->"f09f0662-1331-4ef5-a86b-fa234cf3b8c1"],

Cell[TextData[{
 Cell[BoxData[
 "IGUnfoldTree"],ExpressionUUID->"34bac7da-5c0d-4f9d-b850-acec988b344d"],
 " creates a tree based on the breadth-first traversal of a graph. Each time \
a graph vertex is found, a new tree vertex is created."
}], "Text",ExpressionUUID->"071d88fd-7482-4942-9a39-a51f026f8cd3"],

Cell["Available options:", \
"Text",ExpressionUUID->"f409cafc-c5fd-481a-95b6-63dcb030ab15"],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "False"}]],ExpressionUUID->
  "1db32889-efcd-499d-9e27-6fc67ee32c98"],
 " will ignore edge directions in directed graphs. Otherwise, the search is \
done only along edge directions."
}], "Item",ExpressionUUID->"a67ad6ff-ad22-4241-a4d6-aa76f3c8d1de"],

Cell[BoxData[
 RowBox[{"tree", "=", 
  RowBox[{"IGUnfoldTree", "[", 
   RowBox[{
    GraphicsBox[
     NamespaceBox["NetworkGraphics",
      DynamicModuleBox[{Typeset`graph = HoldComplete[
        Graph[{1, 2, 3, 4, 6, 7, 8, 5}, {
         Null, {{1, 2}, {1, 3}, {1, 4}, {2, 3}, {2, 4}, {3, 4}, {5, 6}, {5, 
          7}, {6, 7}, {4, 8}, {8, 5}}}, {
         GraphLayout -> "SpringEmbedding", PerformanceGoal -> "Quality", 
          VertexLabels -> {None}, VertexShapeFunction -> {"Name"}}]], 
       Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
          Directive[
           Opacity[0.7], 
           Hue[0.6, 0.7, 0.5]], 
          LineBox[{{
             DynamicLocation["VertexID$1", Automatic, Center], 
             DynamicLocation["VertexID$2", Automatic, Center]}, {
             DynamicLocation["VertexID$1", Automatic, Center], 
             DynamicLocation["VertexID$3", Automatic, Center]}, {
             DynamicLocation["VertexID$1", Automatic, Center], 
             DynamicLocation["VertexID$4", Automatic, Center]}, {
             DynamicLocation["VertexID$2", Automatic, Center], 
             DynamicLocation["VertexID$3", Automatic, Center]}, {
             DynamicLocation["VertexID$2", Automatic, Center], 
             DynamicLocation["VertexID$4", Automatic, Center]}, {
             DynamicLocation["VertexID$3", Automatic, Center], 
             DynamicLocation["VertexID$4", Automatic, Center]}, {
             DynamicLocation["VertexID$4", Automatic, Center], 
             DynamicLocation["VertexID$8", Automatic, Center]}, {
             DynamicLocation["VertexID$5", Automatic, Center], 
             DynamicLocation["VertexID$6", Automatic, Center]}, {
             DynamicLocation["VertexID$5", Automatic, Center], 
             DynamicLocation["VertexID$7", Automatic, Center]}, {
             DynamicLocation["VertexID$5", Automatic, Center], 
             DynamicLocation["VertexID$8", Automatic, Center]}, {
             DynamicLocation["VertexID$6", Automatic, Center], 
             DynamicLocation["VertexID$7", Automatic, Center]}}]}, {
          Directive[
           Hue[0.6, 0.2, 0.8], 
           EdgeForm[
            Directive[
             GrayLevel[0], 
             Opacity[0.7]]]], 
          TagBox[
           InsetBox[
            BoxData[
             FormBox[
              PaneBox["1", Alignment -> Center, ImageMargins -> 2], 
              TraditionalForm]], {3.7467846609091016`, 1.2741982597585317`}, 
            BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$1"], 
          TagBox[
           InsetBox[
            BoxData[
             FormBox[
              PaneBox["2", Alignment -> Center, ImageMargins -> 2], 
              TraditionalForm]], {3.7485856975678935`, 0.}, BaseStyle -> 
            "Graphics"], "DynamicName", BoxID -> "VertexID$2"], 
          TagBox[
           InsetBox[
            BoxData[
             FormBox[
              PaneBox["3", Alignment -> Center, ImageMargins -> 2], 
              TraditionalForm]], {4.051190380473853, 0.6375948331878527}, 
            BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$3"], 
          TagBox[
           InsetBox[
            BoxData[
             FormBox[
              PaneBox["4", Alignment -> Center, ImageMargins -> 2], 
              TraditionalForm]], {2.973159914451887, 0.6359335911642814}, 
            BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$4"], 
          TagBox[
           InsetBox[
            BoxData[
             FormBox[
              PaneBox["6", Alignment -> Center, ImageMargins -> 2], 
              TraditionalForm]], {0.9120004180682939, 0.6368378216059289}, 
            BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$5"], 
          TagBox[
           InsetBox[
            BoxData[
             FormBox[
              PaneBox["7", Alignment -> Center, ImageMargins -> 2], 
              TraditionalForm]], {0., 0.15074669540982583`}, BaseStyle -> 
            "Graphics"], "DynamicName", BoxID -> "VertexID$6"], 
          TagBox[
           InsetBox[
            BoxData[
             FormBox[
              PaneBox["8", Alignment -> Center, ImageMargins -> 2], 
              TraditionalForm]], {0.0009124959632362817, 1.123899335870539}, 
            BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$7"], 
          TagBox[
           InsetBox[
            BoxData[
             FormBox[
              PaneBox["5", Alignment -> Center, ImageMargins -> 2], 
              TraditionalForm]], {1.9371561314484906`, 0.6313350495470617}, 
            BaseStyle -> "Graphics"], "DynamicName", BoxID -> 
           "VertexID$8"]}}], $CellContext`flag}, 
       TagBox[
        DynamicBox[GraphComputation`NetworkGraphicsBox[
         3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
         CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
          SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
         ImageSizeCache->{{0.07132812500000174, 253.49507812500005`}, {-51., 
          44.562711080888874`}}],
        MouseAppearanceTag["NetworkGraphics"]],
       AllowKernelInitialization->False,
       UnsavedVariables:>{$CellContext`flag}]],
     DefaultBaseStyle->{
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
     FormatType->TraditionalForm,
     FrameTicks->None,
     ImageSize->{254.56640625, Automatic}], ",", 
    RowBox[{"{", "1", "}"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"19a28627-a627-4def-b922-f4c981619cd7"]
}, Open  ]],

Cell[TextData[{
 "The original vertex that generates a tree node is stored in the ",
 Cell[BoxData[
 "\"\<OriginalVertex\>\""],ExpressionUUID->
  "a525c5d5-6ad3-4842-95f0-c1ae5fef9c9e"],
 " property."
}], "Text",ExpressionUUID->"b1358f26-3de5-4d6a-9084-c57ee74931b0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGVertexProp", "[", "\"\<OriginalVertex\>\"", "]"}], "[", "tree", 
  "]"}]], "Input",ExpressionUUID->"0097b457-49fb-48ad-ba9f-ba11e77ab00c"],

Cell[TextData[{
 "We can label the tree nodes with the name of the original vertex either \
using pattern matching in ",
 Cell[BoxData[
 "VertexLabels"],ExpressionUUID->"3f26d515-5144-420a-809b-6c374620d5a8"],
 " along with ",
 Cell[BoxData[
 "PropertyValue"],ExpressionUUID->"518e573a-fa9b-420a-9b80-5f5c07af9b86"],
 " \[Ellipsis]"
}], "Text",
 InitializationCell->
  True,ExpressionUUID->"e70c41e6-353a-4d5c-9d16-7295b775faf5"],

Cell[BoxData[
 RowBox[{"IGLayoutReingoldTilford", "[", "\[IndentingNewLine]", 
  RowBox[{"tree", ",", "\[IndentingNewLine]", 
   RowBox[{"\"\<RootVertices\>\"", "\[Rule]", 
    RowBox[{"{", "1", "}"}]}], ",", 
   RowBox[{"VertexLabels", "\[Rule]", 
    RowBox[{"(", 
     RowBox[{"v_", "\[RuleDelayed]", 
      RowBox[{"PropertyValue", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"tree", ",", "v"}], "}"}], ",", "\"\<OriginalVertex\>\""}], 
       "]"}]}], ")"}]}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"7656d19f-a173-4f15-80e9-f8baad69a8ca"],

Cell[TextData[{
 "\[Ellipsis] or using ",
 Cell[BoxData[
 "IGVertexMap"],ExpressionUUID->"9d7b6ecf-6acd-4612-8637-f974411b8c86"],
 "."
}], "Text",ExpressionUUID->"c6b31fb0-75f6-441c-99fe-d7e06714d57f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGLayoutReingoldTilford", "[", 
   RowBox[{"tree", ",", 
    RowBox[{"\"\<RootVertices\>\"", "\[Rule]", 
     RowBox[{"{", "1", "}"}]}]}], "]"}], "//", 
  RowBox[{"IGVertexMap", "[", 
   RowBox[{
    RowBox[{"#", "&"}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", 
     RowBox[{"IGVertexProp", "[", "\"\<OriginalVertex\>\"", "]"}]}]}], 
   "]"}]}]], "Input",ExpressionUUID->"bf2b9075-9faf-4136-8e13-21ad14b5fdb1"],

Cell["\<\
In directed graphs, the search is done along edge directions. It may be \
necessary to give multiple starting roots to fully unfold a weakly connected \
(or unconnected) graph.\
\>", "Text",ExpressionUUID->"87f03fba-589d-4d53-acff-d8a0276de457"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGUnfoldTree", "[", 
   RowBox[{
    RowBox[{"Graph", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "2"}], ",", 
       RowBox[{"2", "\[Rule]", "3"}]}], "}"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1"}], "}"}]}], "]"}], "//", 
  RowBox[{"IGVertexMap", "[", 
   RowBox[{
    RowBox[{"#", "&"}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", 
     RowBox[{"IGVertexProp", "[", "\"\<OriginalVertex\>\"", "]"}]}]}], 
   "]"}]}]], "Input",ExpressionUUID->"f5b6db22-864f-4644-be76-813a274c4112"],

Cell[TextData[{
 "Use ",
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "False"}]],ExpressionUUID->
  "556b24ed-0fd5-457b-b10b-ce3dcecbc994"],
 " to ignore edge directions during the search. Edge directions are still \
preserved in the result."
}], "Text",ExpressionUUID->"d7b6ca5e-6a6c-4e80-b459-4dd1238d4a48"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGUnfoldTree", "[", 
   RowBox[{
    RowBox[{"Graph", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "2"}], ",", 
       RowBox[{"2", "\[Rule]", "3"}]}], "}"}], "]"}], ",", 
    RowBox[{"{", "2", "}"}], ",", 
    RowBox[{"DirectedEdges", "\[Rule]", "False"}]}], "]"}], "//", 
  RowBox[{"IGVertexMap", "[", 
   RowBox[{
    RowBox[{"#", "&"}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", 
     RowBox[{"IGVertexProp", "[", "\"\<OriginalVertex\>\"", "]"}]}]}], 
   "]"}]}]], "Input",ExpressionUUID->"dcff093d-e524-477a-9b7c-081ded27c496"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Other structural properties", \
"Subsection",ExpressionUUID->"39a24b4e-7538-4af4-9114-9b67ec1bfddd"],

Cell[CellGroupData[{

Cell["IGNullGraphQ", \
"Subsubsection",ExpressionUUID->"94b3384d-993e-4b1b-8612-95ec6d646b7b"],

Cell[BoxData[
 RowBox[{"?", 
  "IGNullGraphQ"}]], \
"Input",ExpressionUUID->"96c2a2ae-db4e-4f9a-9471-6972d992e236"],

Cell[TextData[{
 Cell[BoxData[
 "IGNullGraphQ"],ExpressionUUID->"01cb4804-59f7-43ee-a997-a3396f3a2f0b"],
 " returns ",
 Cell[BoxData[
 "True"],ExpressionUUID->"7aa3d51c-3e3a-4dad-afe9-f139ca657251"],
 " only for the null graph, i.e. the graph that has no vertices."
}], "Text",ExpressionUUID->"0a1115ba-35a9-44d8-bbca-8ca41aa2cd09"],

Cell[BoxData[
 RowBox[{"IGNullGraphQ", "[", 
  RowBox[{"IGEmptyGraph", "[", "]"}], 
  "]"}]], "Input",ExpressionUUID->"17219e13-6874-48a6-bdf5-d25985de6620"],

Cell[TextData[{
 "For graphs that have vertices, but no edges, it returns ",
 Cell[BoxData["False"],ExpressionUUID->"0cfa33ba-d9ef-47da-9ac7-fd9c67f31b77"],
 "."
}], "Text",ExpressionUUID->"d3dfa32b-3267-4379-86e5-b6dc60c65b8c"],

Cell[BoxData[
 RowBox[{"IGNullGraphQ", "[", 
  RowBox[{"IGEmptyGraph", "[", "5", "]"}], 
  "]"}]], "Input",ExpressionUUID->"2055a25d-4f72-4cbd-aff8-9ba80212bd68"],

Cell[TextData[{
 "In contrast, the built-in ",
 Cell[BoxData[
 "EmptyGraphQ"],ExpressionUUID->"281ac520-73a6-41e8-83e4-b1a64d7bbecb"],
 " tests if there are no edges:"
}], "Text",ExpressionUUID->"12dc696b-e1ac-4f50-a9a1-b1df2e7dd12f"],

Cell[BoxData[
 RowBox[{"EmptyGraphQ", "[", 
  RowBox[{"IGEmptyGraph", "[", "5", "]"}], 
  "]"}]], "Input",ExpressionUUID->"eb9c3916-3071-4fb8-ad87-4ecd2b548355"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGCompleteQ", \
"Subsubsection",ExpressionUUID->"b90bc196-283c-4c9e-848c-f7887184a13f"],

Cell[BoxData[
 RowBox[{"?", 
  "IGCompleteQ"}]], \
"Input",ExpressionUUID->"755dacf5-70b0-49ce-b4df-8675dd0492d8"],

Cell[TextData[{
 Cell[BoxData[
 "IGCompleteQ"],ExpressionUUID->"7dff2205-2f6b-4b4a-b9fd-b9031410b5bc"],
 " tests if a graph is complete, i.e. if all pairs of vertices are \
connected."
}], "Text",ExpressionUUID->"e88b23f0-0ae0-4d63-8f37-f6fed153842b"],

Cell[BoxData[
 RowBox[{"IGCompleteQ", "@", 
  RowBox[{
  "IGCompleteGraph", "[", "10", 
   "]"}]}]], "Input",ExpressionUUID->"e5ead46c-91da-49cd-8e60-6da685f4dc95"],

Cell[BoxData[
 RowBox[{"IGCompleteQ", "@", 
  RowBox[{"IGCompleteGraph", "[", 
   RowBox[{"5", ",", 
    RowBox[{"DirectedEdges", "\[Rule]", "True"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"142ca21d-8fef-4ee9-90a4-a8a2eb1f1180"],

Cell[TextData[{
 Cell[BoxData[
 "IGCompleteQ"],ExpressionUUID->"72ae9053-1f6b-4049-a094-b4fc4cf2215c"],
 " ignores self-loops and multi-edges."
}], "Text",ExpressionUUID->"2edd08d9-9dbe-417d-9d1a-20eb7fbb22ab"],

Cell[BoxData[
 RowBox[{"IGCompleteQ", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3, 4}, {
       Null, {{1, 1}, {1, 2}, {1, 3}, {1, 4}, {2, 2}, {2, 3}, {2, 4}, {3, 
        3}, {3, 4}, {4, 4}, {1, 2}}}, {
       GraphLayout -> {
         "Dimension" -> 2, "VertexLayout" -> "CircularEmbedding"}, 
        VertexSize -> {Medium}}]]}, 
     TagBox[GraphicsGroupBox[GraphicsComplexBox[CompressedData["
1:eJw9VQ9M1WUUBSRDZoKZUFgQ5FLYMhJHSsABDSzDKGK18af0oRKBQchKEEc8
xZUY6TMGKSgBFSG1nAgETy7jX2M84hUwcJZgAiJEAWrgHzD93fvFxr7t973v
3nPO7jnXVZcYtt3KwsLi43v/90/+m6DMbF1r85rffPdG91Wc3tpmlO9Qp5Vj
y6FP47qNGSmF615ob/FV75rngk/G3TunP/rqxcMb0ujcT5lDXZsmyPGu/9yi
/np6v8T2+Jalk5RgvhA+22mimFcTDebQKdrsnjcQO9FFjfFvOI0NXCO46Ep0
/b3UrBu5vK/sBu02LdjvPnieGsK8y+z003T9UtL1l3rOU2heUo5h400yLrNO
njrTS4XFB90qum/RgFuT9eCpLuo7tTpEv+AOOaV7LTG5mMiu+p/I0I47lF87
FFoYco5cHObXvG0/SxFRNotLYs2+6n5FnXYP9T6K30PVt3xKq4/XpP9F7g+F
z+FPDR9aBP9xxo8m4beV+WGb8P+A+UPpc5b1gdIvh/WD0ndJpqYvvqbqZ4o6
xqlg+y9RNgGNqKz39Xlr7TjNBIzeyulshd4hed7q3L+oPr0tdn5gO8IWN7ge
GRyjh9NjPDqOdOLEQh/3P54eIx/LUEN5/6/QrzsTfyBqlNb2vJJtuNyFAkv/
KusDV8mzvN12Z1cPSpP8bHtLRqhh46W0R37oRQ2f9C1/x0r+HZ3kd/DkOpTF
deHJfaiY+2Jmj4aDwhkXShknZTFuDDAPqmJe0DNPKmPeKN1hGplNHCPPeesN
c4bTaE8MCnw8ZJRqbJ1WBftV4ULRQzvqn71KASGJg4lv1uEB19izh5aN0GDt
3d11OxuQkNFX5WF/hX7scIzM3taEhKURtd6Lhmm5k9frw5+1YtLjWNrLDkNk
vPngivErbXCP+rzxxspBKrhPN6kD+/mkVfwdpfw7+pffYSHXoV1cF/nch5K5
L7oZB9kyLjzJOGmAceMw8yAz84IN86TvmDeij7HPKie1uUCqMzSfTVdoc4O9
4+yz5DxtrqDzY58Vb9DmDuufZ58ZdNpcQj/MPouM1OYWk7fZZ89t1uYaX3qx
z7KOanOPam/22ZYizRcw5LPPzOWab5DXxz4zVWm+Qn52qvNoyu9G8R3Mvewz
db+c36NL3uu5PmKkfhz3xyfSv4XxYY3gi2D8eEfwOzM/5Aq/AOaPUuEfxPog
RfSZekLTDzOiX8FR9pnSV/yHeM435U/YiT/Fv3hX/Cv5hk3ib8k3+In/Jd/w
oeQDcX7gGucbJN9QK/lSwPmDi5xvKp/wmOST5BdyOd+gdK6ssXcL7jQb1b03
55vKR0RLPp6Q+lacbyT5hn7JV8k3PMr5RpJvKJR8bhF+sZLfkm/YJfmu9Ple
8t8o+mXIflD6Bu7jufbPYJ1V7mWLzioXy0RnlZvvic4qVyNFZ7VXvhCd1V6x
l5xWud0nOqu9clt0VrkfLjqrvWAje0LtjW9Kpv+Oyv/ZV+2Vatkz6t5NdFbv
h2RPqfqNovP//WXPKXwZorPCHyQ6q70SLjor/ntEZ6WPk+is9DOlss5K3/8A
XjRQhw==
        "], {
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
          {Arrowheads[0.], 
           ArrowBox[BezierCurveBox[{1, 8, 11, 13, 19, 21, 24, 1},
            SplineDegree->7], 0.1414213562373094]}, 
          {Arrowheads[0.], 
           ArrowBox[BezierCurveBox[{
            1, {-0.6644407471831174, 0.664440747183116}, 2}], 
            0.1414213562373094]}, 
          {Arrowheads[0.], 
           ArrowBox[BezierCurveBox[{
            1, {-0.3355592528168825, 0.33555925281688337`}, 2}], 
            0.1414213562373094]}, 
          {Arrowheads[0.], ArrowBox[{1, 3}, 0.1414213562373094]}, 
          {Arrowheads[0.], ArrowBox[{1, 4}, 0.1414213562373094]}, 
          {Arrowheads[0.], 
           ArrowBox[BezierCurveBox[{2, 63, 66, 68, 74, 76, 79, 2},
            SplineDegree->7], 0.1414213562373094]}, 
          {Arrowheads[0.], ArrowBox[{2, 3}, 0.1414213562373094]}, 
          {Arrowheads[0.], ArrowBox[{2, 4}, 0.1414213562373094]}, 
          {Arrowheads[0.], 
           ArrowBox[BezierCurveBox[{3, 86, 89, 91, 97, 99, 102, 3},
            SplineDegree->7], 0.1414213562373094]}, 
          {Arrowheads[0.], ArrowBox[{3, 4}, 0.1414213562373094]}, 
          {Arrowheads[0.], 
           ArrowBox[BezierCurveBox[{4, 109, 112, 114, 120, 122, 125, 4},
            SplineDegree->7], 0.1414213562373094]}}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          DiskBox[1, 0.1414213562373094], DiskBox[2, 0.1414213562373094], 
          DiskBox[3, 0.1414213562373094], DiskBox[4, 0.1414213562373094]}}]],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None,
   ImageSize->{87.7109375, Automatic}], 
  "]"}]], "Input",ExpressionUUID->"48255548-7234-4dac-82a3-eadc1f18e490"],

Cell["Check if each connected component of a graph is a clique.", \
"Text",ExpressionUUID->"6fab5b58-1f4c-4939-bcb3-165cc30f5525"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"GraphData", "[", 
   RowBox[{"{", 
    RowBox[{"8", ",", "911"}], "}"}], 
   "]"}]}]], "Input",ExpressionUUID->"5593caa6-048a-4c02-bf20-9b4cc95ba3c1"],

Cell[BoxData[
 RowBox[{"AllTrue", "[", 
  RowBox[{
   RowBox[{"ConnectedGraphComponents", "[", "g", "]"}], ",", "IGCompleteQ"}], 
  "]"}]], "Input",ExpressionUUID->"4bbd7104-2428-4b2a-9bf9-fa944d46c4fc"],

Cell["The null graph is considered complete.", \
"Text",ExpressionUUID->"4a3f181c-97ad-4fb1-81a9-6c4d5375f5f6"],

Cell[BoxData[
 RowBox[{"IGCompleteQ", "@", 
  RowBox[{
  "IGEmptyGraph", "[", 
   "]"}]}]], "Input",ExpressionUUID->"ae70ad72-4855-4730-ad5f-5adc2ded841a"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGCactusQ", \
"Subsubsection",ExpressionUUID->"0c93d54e-c87b-48fa-8c20-b25a7d3f2585"],

Cell[BoxData[
 RowBox[{"?", 
  "IGCactusQ"}]], \
"Input",ExpressionUUID->"ecfa19a1-dc12-47b3-ad3e-abe1194b5e9b"],

Cell[TextData[{
 Cell[BoxData[
 "IGCactusQ"],ExpressionUUID->"15423e50-2d53-4356-960d-9c28e40f9def"],
 " tests if a graph is a cactus. A cactus graph is a connected undirected \
graph in which any two simple cycles share at most one vertex. Equivalently, \
a cactus is a connected graph in which every edge belongs to at most one \
simple cycle."
}], "Text",ExpressionUUID->"8bb1458c-6c32-4529-ad7a-7a2559602ba3"],

Cell[BoxData[
 RowBox[{"IGCactusQ", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{4, 14, 18, 3, 17, 1, 5, 10, 9, 7, 16, 13, 8, 12, 15, 11, 6, 2}, {
       Null, {{6, 18}, {18, 4}, {4, 1}, {1, 7}, {6, 7}, {7, 17}, {17, 10}, {7,
         10}, {1, 13}, {13, 9}, {1, 9}, {13, 8}, {8, 16}, {16, 14}, {14, 
        12}, {8, 12}, {14, 2}, {2, 15}, {14, 15}, {14, 11}, {11, 5}, {14, 
        5}, {16, 3}}}, {
       FormatType -> TraditionalForm, GraphLayout -> "SpringEmbedding", 
        ImageSize -> {265.0625, Automatic}, VertexLabels -> {None}, 
        VertexSize -> {
          Rational[1, 3]}}]]}, 
     TagBox[
      GraphicsGroupBox[
       GraphicsComplexBox[{{4.790187201481743, 1.809242922417648}, {0., 
        1.67551962138272}, {1.6688973832840506`, 0.}, {5.0127605437559986`, 
        2.918094010391539}, {0.3627475470654846, 2.6991090380817857`}, {
        6.423306373168762, 2.4486540644159898`}, {5.8013841040483705`, 
        1.5059621473913356`}, {2.8146598764657598`, 1.5086510110981295`}, {
        4.40007411886745, 0.9753228722163537}, {6.275646181647883, 
        0.5291674773982216}, {0.8406682445782754, 2.999141676633758}, {
        1.9965533059737801`, 2.218489543424144}, {3.806680273313481, 
        1.588746377422435}, {1.0023484739093975`, 1.8672007026421988`}, {
        0.19204993908974544`, 1.1400685137948297`}, {1.8525356729623894`, 
        1.11267411249711}, {6.683296142832674, 1.0260781990320202`}, {
        5.922976873581133, 3.295969370429825}}, {
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
          LineBox[{{1, 4}, {1, 7}, {1, 9}, {1, 13}, {2, 14}, {2, 15}, {3, 
           16}, {4, 18}, {5, 11}, {5, 14}, {6, 7}, {6, 18}, {7, 10}, {7, 
           17}, {8, 12}, {8, 13}, {8, 16}, {9, 13}, {10, 17}, {11, 14}, {12, 
           14}, {14, 15}, {14, 16}}]}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          DiskBox[1, 0.0940490086939858], DiskBox[2, 0.0940490086939858], 
          DiskBox[3, 0.0940490086939858], DiskBox[4, 0.0940490086939858], 
          DiskBox[5, 0.0940490086939858], DiskBox[6, 0.0940490086939858], 
          DiskBox[7, 0.0940490086939858], DiskBox[8, 0.0940490086939858], 
          DiskBox[9, 0.0940490086939858], DiskBox[10, 0.0940490086939858], 
          DiskBox[11, 0.0940490086939858], DiskBox[12, 0.0940490086939858], 
          DiskBox[13, 0.0940490086939858], DiskBox[14, 0.0940490086939858], 
          DiskBox[15, 0.0940490086939858], DiskBox[16, 0.0940490086939858], 
          DiskBox[17, 0.0940490086939858], DiskBox[18, 0.0940490086939858]}}]],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None,
   ImageSize->{265.0625, Automatic}], 
  "]"}]], "Input",ExpressionUUID->"1a1a70fa-7783-4faa-9281-8b41a955191f"],

Cell[BoxData[
 RowBox[{"IGCactusQ", "[", 
  RowBox[{"GridGraph", "[", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"4fb0cc04-a1e4-4a89-8cd3-c875d3bad7b8"],

Cell[TextData[{
 Cell[BoxData[
 "IGCactusQ"],ExpressionUUID->"18cb2663-d2b5-4c6f-a4f2-9d59bfe18ba5"],
 " supports multigraphs and ignores self-loops."
}], "Text",ExpressionUUID->"5fe2c96c-7dcc-49b3-a3c9-aa08188f8f3c"],

Cell[BoxData[
 RowBox[{"IGCactusQ", "/@", 
  RowBox[{"{", 
   RowBox[{
    GraphicsBox[
     NamespaceBox["NetworkGraphics",
      DynamicModuleBox[{Typeset`graph = HoldComplete[
        Graph[{1, 2, 3, 4}, {
         Null, {{1, 2}, {2, 3}, {3, 1}, {1, 4}, {4, 1}, {4, 4}}}, {
         ImageSize -> 100, VertexLabels -> {None}, VertexSize -> {Medium}}]]}, 
       TagBox[GraphicsGroupBox[GraphicsComplexBox[CompressedData["
1:eJw1zwtMU2cUAOBrtzItHW3cILxmh3GGmsGIxDCZ8zCCAgvq2o2BAgMsyDYf
IBmjBFZxGIxvoGydnXNAaCjMkjCHFlr8sUKRgi2Ucikt7S0tVKDgxngUFe3u
ku0kJyfnkZN8IUfzubkUDMM+IPPfOoLcKZ+OLMKLvoJmcYAZZFa/nPAYLAb7
L9QSpoVK9q1+gPsHueD/eb32xKwj0Aw7hLJ9HfY/YVB87fGGYiNkHxOp3fNP
4FxxUkiYcQxsz0+IZEsLoMFOWkM5Y5BJu8c55Z6HcvEgY58dh8Ox6Yd0ay6o
WTyU8eASDom9C5y8tTlQpVA9+AEcqqta2NrVWfBJH77ZGIrD/vaStBvLMxBb
2xEbG4xDY5S4yskbhcoI10ov2V92LxyryByBrT70pWg2DmavuFPc9GH4vPij
2TMHccglPszcdFcLq+3n+gSXcdjeHVUrVGrgi+0vjJsdOLB70gQ3B9QQMacw
beSOQZ0wsvyMUwUN3b6BrPEx2Plu4fIm1j2g0C/8TOUbITg6+3Qv6a+7+Jmb
r7SAQmzXeS08AQzv42emWeGnq6lMRPoLb4XIi+xWuH5tUnOW9McV2DqOcwjo
f+3t1CnS32xLHfA0EbCr7BH/O9KfyLrR/HKaAEsFf32K9Mf0zOjqqTYY4jXk
3Sb9PpElBye8baCsdUnfzBmF8A2bQ7fQbbDNeoHeRvoT3vJ6Nk/et3/zilJA
+om9RmGTk4CwlaTvM0g/Q3Jll0JKAHO0lz9J+resMyt2cwlgMGhHp0i/4YeC
P5IdVqDlZkkUpD+QVX2ak24FPY/BPU769c8P/FbWZQEsy9fbfy8TDb3Oqb9q
MkFVQIfV46pE71N2GD1ZOKyHmW4r90gQx3ecWpGghyxKYVBR0x0Ul60y8zSP
YGcL7ash7AFSqRI/3vP0IXgFpBQNywfQe5X4GyXlahAlxyuP5OhRMI9bYK5R
w/5+tjpSgaPW+33W2fB+6LTcrx4/b0JdUX4nfVhaiAqca44vs6Dx1ceViwI9
YM76/OE0AuUEuybYv+LgNrS89HgI9HeyQFYcZAZnWydFSu4NtbRqJCLgl/Wu
rWulFrQ8OJK0ZJ4E5pdHOF+T/38s7dGJhQ6gmp7JZZ04qktQ5dXopoBjX2x4
yNOjjGL507PfToNRliu+dXcA5WmFjdTSaXDXpfJUHhU6793R3j0xBfKLdu/f
JXfQRqLUP1fqAINJOhMRLUF0/kxT6+okfMJsC7nkrESvvpMv0hoIwAriNSv+
THT4L0v07jQz/ANnSvON
          "], {
           {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
            {Arrowheads[0.], ArrowBox[{1, 2}, 0.084705774512147]}, 
            {Arrowheads[0.], ArrowBox[{1, 3}, 0.084705774512147]}, 
            {Arrowheads[0.], 
             ArrowBox[BezierCurveBox[{
              1, {0.5570336687903829, 0.2402746920570066}, 4}], 
              0.084705774512147]}, 
            {Arrowheads[0.], 
             ArrowBox[BezierCurveBox[{
              1, {0.5570594857583636, 0.6066793135881896}, 4}], 
              0.084705774512147]}, 
            {Arrowheads[0.], ArrowBox[{2, 3}, 0.084705774512147]}, 
            {Arrowheads[0.], 
             ArrowBox[BezierCurveBox[{4, 40, 43, 45, 51, 53, 56, 4},
              SplineDegree->7], 0.084705774512147]}}, 
           {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
            DiskBox[1, 0.084705774512147], DiskBox[2, 0.084705774512147], 
            DiskBox[3, 0.084705774512147], DiskBox[4, 0.084705774512147]}}]],
        MouseAppearanceTag["NetworkGraphics"]],
       AllowKernelInitialization->False]],
     DefaultBaseStyle->{
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
     FormatType->TraditionalForm,
     FrameTicks->None,
     ImageSize->100], ",", 
    GraphicsBox[
     NamespaceBox["NetworkGraphics",
      DynamicModuleBox[{Typeset`graph = HoldComplete[
        Graph[{1, 2, 3, 4}, {
         Null, {{1, 2}, {2, 3}, {3, 1}, {1, 4}, {4, 1}, {4, 4}, {1, 2}}}, {
         ImageSize -> 100, VertexLabels -> {None}, VertexSize -> {Medium}}]]}, 
       TagBox[GraphicsGroupBox[GraphicsComplexBox[CompressedData["
1:eJw1zwdQk2cYB/AIgjKEaEFZClikTEU5D0XhryiKu8EiKChbbHGgVYmiiKJ4
DhxARXEFKzIqFAcKMj6I7CkQP0JCEkgQw2wxYWkg/XrXvnfPvfd/nueeu595
0BHPUBUajeZL1b9/KzHmvbN1GJNVEZkphnxkC+eGLF5DW0P771Wm0QVqVM6Z
C9LAuB//91MbD/ZKjPgY+v2zeBVLhq+7bCQHDvCg/myeb7SeHA8fVSzZ78AD
q/4I/ctlOU4X+4QZiNvB2xaf7vlVjnANVk/22XbIG4bD/MJH4L5OZh6k2g6l
wjiknjeCDdLZF87+yoVsulVqgMco9gytW+nV2IYvjE4X7qtRdGyT0rfotYE9
37o5I0EBi6CTDTGnq2HnH2FX/k2BqWXlmpcElZilOqTpHjQJnWU2vncMKnBF
0FM4VDEJZsbnvlK79wi2tXOJs5xC7U7W0A/GZdDP1NrXEjuF6bMlgxq1xajS
seu6L5hCwLWkQ9vnFaCme+3DbEclZm6Rnvpk9hphdyUXVMxkWJE3ujlwNokD
hydc9U7KYJGmpVPVyoERx5AtaJIhX3Xc3iC9FfWMCbG1vRx6j8xeql9vwbPH
riFl8XKUyhSOzrHN+P60k374sBzyHH7UjvgPUF2QJ+v3HsG433yPXK8mHPZX
bJ9RNgKOffil1/kNWG3rLm57/A0xUvMgV/1crGJORu/QUoDWsP+87Z4sLI3R
KJIwFcidHHXudUiD85+O+TulVF40sKr8BQu7ltxl7t09CbNeLfv6knu4kZun
W1I3iTUZMeYWzETYts2qWIoplNqGLr9pGY+17S4ux19NIcassXqFZRxsErPd
C8R/oT7l5udpkVwE7k+uHBsYwsXIreb23DZ0fjuYnC0bRC3tkNCK0QZ/zRLG
4bEBxKTU67qLSex289vRNN6PhOEde99fI7GpYpARNt4HtreaktxG4vatLOvG
0V7o+DU/empFYkPeKd8Hcinckgrc3ExIPHVKudUT/BFxDv0jFVS+Pja4P9a/
FQt1tGXO1iT46usPe/o1Y1fk2t5z20mEilz8Nd42YjTvYlX0dRKWpU5JiUW1
2Gc5yZ0jIWFd7hv9qK4SDn2FvJmebWAlOsac62HjSam+kWl7G5bZHZNrmJZA
RfvKfTUmFybOgUcrKD/r6k9jzCIBClPETeqDQ6CRVUx/XyHu3vChE5T/2HPz
/BNiIe7d7Ko9T/nXR3QWhDNEqJlh5tNN+TM7feqU6SIsP9PAPEv5N5k+yJz6
JIIglqnopvxryqVNqWqd+BD8JOwV5ddxPLW9Q6sTRUn9GXohH7F42hyrBdqd
sBBe0X5B+T3mq38doPbzjqsWRVN+kSs3Mb1HBPuRrRf2Un7dtPjlhRki0D9W
MLso/wIFPXalpwi6uppB3ZSf81vEay+JEJqhAWmFlN/I9PZRhp8QLcG6nuGU
v+Xbtj/OFAtAC9DXMnClEx9mMVJv8Hi4ZVggVPbHEStUbLjKABIKe96rotVp
BEO/XS3WowUBKseMT6S/IdYHsvnBtQ1YlqX58wfae4LN3rR59UQ11A29TzTn
1xFL4sjvTsVUItlrY9GekBbCJNgzgp9QiQ011pWOhSSRU1Yl7F1cg3eCstvt
l3lEsdPcQzqmjXAy6svceEZAtI9+jhuObgGtJ/VIs6+ICDHp77B+TGKMkzWl
VIqIL17R2ZHGfPS8eKeSQc05SZq3iWQRHiqKF45HCQh5fetWGb8L9AN7GL9Q
9+9ElTelJEqgxvuan/2OJFge7LCEpm4wxMNPqoNbiL2R+RPnT34CNzs05fnb
OiKsMfGpWtQnjLF8gtlKNnFZqyCvtKMb+VfFWi/T3hAzRVEGoRkScHgZUgfn
NEKbKU3PGe3Cj/QX5td64ojpi44kN3JEoEVsrB0xoBO7/xY4r/Tl4x8mh/QJ

          "], {
           {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
            {Arrowheads[0.], 
             ArrowBox[BezierCurveBox[{
              1, {1.6423462396717772`, 0.3625513838714687}, 2}], 
              0.084705774512147]}, 
            {Arrowheads[0.], 
             ArrowBox[BezierCurveBox[{
              1, {1.5030853986377377`, 0.06088636929977091}, 2}], 
              0.084705774512147]}, 
            {Arrowheads[0.], ArrowBox[{1, 3}, 0.084705774512147]}, 
            {Arrowheads[0.], 
             ArrowBox[BezierCurveBox[{
              1, {0.5570336687903829, 0.2402746920570066}, 4}], 
              0.084705774512147]}, 
            {Arrowheads[0.], 
             ArrowBox[BezierCurveBox[{
              1, {0.5570594857583636, 0.6066793135881896}, 4}], 
              0.084705774512147]}, 
            {Arrowheads[0.], ArrowBox[{2, 3}, 0.084705774512147]}, 
            {Arrowheads[0.], 
             ArrowBox[BezierCurveBox[{4, 72, 75, 77, 83, 85, 88, 4},
              SplineDegree->7], 0.084705774512147]}}, 
           {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
            DiskBox[1, 0.084705774512147], DiskBox[2, 0.084705774512147], 
            DiskBox[3, 0.084705774512147], DiskBox[4, 0.084705774512147]}}]],
        MouseAppearanceTag["NetworkGraphics"]],
       AllowKernelInitialization->False]],
     DefaultBaseStyle->{
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
     FormatType->TraditionalForm,
     FrameTicks->None,
     ImageSize->100]}], 
   "}"}]}]], "Input",ExpressionUUID->"425997f6-ae5e-473c-abfa-fb4a8d5efa50"],

Cell["\<\
The null graph is not considered to be a cactus, but the singleton graph is.\
\>", "Text",ExpressionUUID->"9addc678-8a62-4d3f-b680-1cb17e988841"],

Cell[BoxData[
 RowBox[{"IGCactusQ", "/@", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"IGEmptyGraph", "[", "0", "]"}], ",", 
    RowBox[{"IGEmptyGraph", "[", "1", "]"}]}], 
   "}"}]}]], "Input",ExpressionUUID->"cfd8423a-2b41-42fe-9c23-33f197f49448"],

Cell[TextData[{
 "Currently, ",
 Cell[BoxData[
 "IGCactusQ"],ExpressionUUID->"1e3216e9-f12a-4d8e-af30-c099e3b6abab"],
 " does not support directed graphs."
}], "Text",ExpressionUUID->"7ce9cc64-2a08-4594-aa5b-c64a96c11526"],

Cell[BoxData[
 RowBox[{"IGCactusQ", "[", 
  RowBox[{"Graph", "[", 
   RowBox[{"{", 
    RowBox[{"1", "\[Rule]", "2"}], "}"}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"4ed3aa03-6661-4e79-92af-6348a68a70f9"]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Motifs and subgraphs", \
"Section",ExpressionUUID->"e7c2581f-cfb4-4e5d-936c-183f16dcd057"],

Cell[CellGroupData[{

Cell["Motifs", \
"Subsection",ExpressionUUID->"e46915c2-1f47-4c99-8a40-dcbc10b4018b"],

Cell[TextData[{
 "IGraph/M\[CloseCurlyQuote]s motif-related functions count the number of \
times each possible connectivity pattern of ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "8ba24839-fda1-46e1-b1c8-e549780bbc25"],
 " vertices (i.e. induced subgraph of size ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "90f887ab-c0d7-453c-8012-b2d6091ee151"],
 ") occurs in a graph. The patterns are called ",
 StyleBox["motifs",
  FontSlant->"Italic"],
 ". As of IGraph/M 0.6, size 3 and 4 motifs are supported in directed graphs \
and size 3 to 6 in undirected graphs. Only (weakly) connected subgraphs are \
considered."
}], "Text",ExpressionUUID->"068ec60a-c024-4b6b-85ab-85c984d9c169"],

Cell[TextData[{
 "To count larger induced subgraphs, see ",
 Cell[BoxData[
 "IGLADSubisomorphismCount"],ExpressionUUID->
  "0d52436e-8367-4097-92dd-87c542c18d15"],
 ". To identify where a subgraph occurs, see ",
 Cell[BoxData[
 "IGLADFindSubisomorphisms"],ExpressionUUID->
  "2e63e4a4-44bd-4109-87a0-57f104a52f1f"],
 "."
}], "Text",ExpressionUUID->"13d68aa6-5f58-4cc4-995c-2810b90189ac"],

Cell[TextData[{
 "To count non-connected size-3 subgraphs, use ",
 Cell[BoxData[
 "IGTriadCensus"],ExpressionUUID->"b56cf645-a4d0-4753-a8db-60e6db54f99f"],
 "."
}], "Text",ExpressionUUID->"d0dc5c9e-8c01-43c2-949b-cc9c25eb6644"],

Cell[TextData[{
 "igraph\[CloseCurlyQuote]s motif functions use the RAND-ESU algorithm, which \
is able to uniformly sample a random subset of motifs (connected subgraphs), \
and can thus estimate motif counts even in very large graphs. See the \
description of ",
 Cell[BoxData[
 "IGMotifs"],ExpressionUUID->"0e5b4e25-d7bf-4150-98c8-3e4d502960c7"],
 " for an example."
}], "Text",ExpressionUUID->"0b60f95a-2ad3-414d-8689-480fdf113c0e"],

Cell[CellGroupData[{

Cell["References", \
"Subsubsubsection",ExpressionUUID->"22343e06-618b-476e-88a4-19cb69fb670c"],

Cell[TextData[{
 "S. Wernicke, ",
 StyleBox["Efficient Detection of Network Motifs",
  FontSlant->"Italic"],
 ", IEEE/ACM Trans. Comput. Biol. Bioinforma. ",
 StyleBox["3",
  FontWeight->"Bold"],
 ", 347 (2006)."
}], "Item",ExpressionUUID->"170960ca-e6b4-4ecd-badb-892a4acc489c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["IGMotifs", \
"Subsubsection",ExpressionUUID->"d88c5668-4534-4e18-8944-3a5ab55bee66"],

Cell[BoxData[
 RowBox[{"?", 
  "IGMotifs"}]], \
"Input",ExpressionUUID->"ee299216-bf38-4ebb-b5ab-57e01033adc6"],

Cell[TextData[{
 Cell[BoxData[
 "IGMotifs"],ExpressionUUID->"22f1a443-5f83-4322-9c42-38cf85672579"],
 " counts how many times each motif (i.e. induced subgraph) of the given size \
occurs in the graph. For subgraphs that are not weakly connected, ",
 Cell[BoxData[
 "Indeterminate"],ExpressionUUID->"56ada3d9-d50b-4cad-875e-e369e0c8d2bd"],
 " is returned."
}], "Text",ExpressionUUID->"f1882474-7873-4c88-bee9-43212f25ed65"],

Cell["Available options are:", \
"Text",ExpressionUUID->"5543924f-12c9-409f-acc2-34aec0c02466"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "False"}]],ExpressionUUID->
  "50abc0ea-7750-4dec-b7d6-537a184d50f0"],
 " treats the graph as undirected and ",
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "True"}]],ExpressionUUID->
  "95ae3248-330e-4afc-a11e-17fb5b5eadec"],
 " treats the graph as directed. The default is ",
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "Automatic"}]],ExpressionUUID->
  "9b7b8f09-5703-4623-bd88-9841c7f40e8a"],
 ", which respects the directedness of the graph."
}], "Item",ExpressionUUID->"44e89ff4-da84-4037-9833-6902594fdccd"],

Cell[TextData[{
 "Motifs are returned by their ",
 Cell[BoxData[
 "IGIsoclass"],ExpressionUUID->"7f3efc58-d3f8-4188-8362-025ae5fb6660"],
 ", i.e. the same order as listed in ",
 Cell[BoxData[
 "IGData"],ExpressionUUID->"13117ddc-e71f-4489-9332-9d70ed4db95f"],
 "."
}], "Text",ExpressionUUID->"a18ff9ab-42d7-4f09-a567-f2c0e5920e19"],

Cell[BoxData[
 RowBox[{"mot3", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"Graph", "[", 
     RowBox[{"#", ",", 
      RowBox[{"ImageSize", "\[Rule]", "36"}], ",", 
      RowBox[{"VertexSize", "\[Rule]", "0.1"}]}], "]"}], "&"}], "/@", 
   RowBox[{"IGData", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<AllDirectedGraphs\>\"", ",", "3"}], "}"}], 
    "]"}]}]}]], \
"Input",ExpressionUUID->"0fd524e3-4ac1-4cf3-8d2a-c77acf8324c5"],

Cell[TextData[{
 "Let us count size-3 motifs in the following graph, and summarize them a \
table. For non-weakly-connected subgraphs, ",
 Cell[BoxData[
 "Indeterminate"],ExpressionUUID->"1fab1b76-f1fc-4c3c-91ed-ccd4c7bdcc56"],
 " is returned."
}], "Text",ExpressionUUID->"b11a0a11-35d0-4e33-98f5-84eb05e16eaa"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"RandomGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10", ",", "40"}], "}"}], ",", 
    RowBox[{"DirectedEdges", "\[Rule]", "True"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"08e8eeb3-d008-455d-8e40-ab1e9b252085"],

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"mot3", ",", 
      RowBox[{"IGMotifs", "[", 
       RowBox[{"g", ",", "3"}], "]"}]}], "}"}], "\[Transpose]"}], ",", 
   RowBox[{"Frame", "\[Rule]", "All"}]}], 
  "]"}]], "Input",ExpressionUUID->"396eaff2-9b41-48c8-82c2-1fa61ac2aed6"],

Cell[TextData[{
 "Empty graphs are treated as undirected by default. To treat them as \
directed, use ",
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "True"}]],ExpressionUUID->
  "806e5c2c-13f6-47bd-9ef6-68b1a081955f"],
 ". The result will be different as the number of non-isomorphic graphs on ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "cb575b45-4650-4e77-9589-4fb8c537b4ce"],
 " vertices is not the same in the directed and undirected cases."
}], "Text",ExpressionUUID->"fe5d6188-6730-4488-80ea-7c04c3fd3e67"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IGMotifs", "[", 
    RowBox[{
     RowBox[{"IGEmptyGraph", "[", "5", "]"}], ",", "3", ",", 
     RowBox[{"DirectedEdges", "\[Rule]", "#"}]}], "]"}], "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{"Automatic", ",", "True", ",", "False"}], 
   "}"}]}]], "Input",ExpressionUUID->"c56de6bf-e3ca-42e2-b7c5-3bd956a9d5b2"],

Cell[CellGroupData[{

Cell["Example: metabolic network", \
"Subsubsubsection",ExpressionUUID->"9841d08b-ec84-4cb0-9011-a7bbb65a53e3"],

Cell[TextData[{
 "Let us find the size-4 motifs that stand out in the ",
 StyleBox["E. coli",
  FontSlant->"Italic"],
 " metabolic network by comparing the motif counts to that of a rewired graph:"
}], "Text",ExpressionUUID->"64f715f7-be7c-42d3-87c7-14af2fee52ee"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{"{", 
     RowBox[{
     "\"\<NetworkGraph\>\"", ",", "\"\<MetabolicNetworkEscherichiaColi\>\""}],
      "}"}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"b5701d72-79e0-4d67-a9ad-2e2b21c215fd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rg", "=", 
   RowBox[{"IGRewire", "[", 
    RowBox[{"g", ",", "50000"}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"cbaa7a98-645c-47de-bab5-ff380be0c0a3"],

Cell[BoxData[
 RowBox[{"ratios", "=", 
  RowBox[{"N", "@", 
   RowBox[{"Quiet", "[", 
    FractionBox[
     RowBox[{"IGMotifs", "[", 
      RowBox[{"g", ",", "4"}], "]"}], 
     RowBox[{"IGMotifs", "[", 
      RowBox[{"rg", ",", "4"}], "]"}]], 
    "]"}]}]}]], \
"Input",ExpressionUUID->"1365527c-c878-4ed0-9acd-70d1e4179bc1"],

Cell[BoxData[
 RowBox[{"largeRatios", "=", 
  RowBox[{"Select", "[", 
   RowBox[{"ratios", ",", 
    RowBox[{
     RowBox[{"#", ">", "5"}], "&"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"9b8b512f-fb81-4820-9cd9-aac4c9bf3ea5"],

Cell["\<\
There are two motifs that are more than 30 times more common in the metabolic \
network than in the rewired graph.\
\>", "Text",ExpressionUUID->"318375f2-8e26-4edd-b0ff-60ccdbb7c852"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Extract", "[", 
    RowBox[{
     RowBox[{"IGData", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<AllDirectedGraphs\>\"", ",", "4"}], "}"}], "]"}], ",", 
     RowBox[{"FirstPosition", "[", 
      RowBox[{"ratios", ",", "#"}], "]"}]}], "]"}], "&"}], "/@", 
  "largeRatios"}]], "Input",
 CellChangeTimes->{{3.6642667484180593`*^9, 3.664266777741116*^9}, {
  3.664266860768724*^9, 3.664266868234413*^9}, {3.664266954052833*^9, 
  3.664266964982087*^9}},ExpressionUUID->"2e744019-c3ad-450c-b0b7-\
bec13a35dcdd"],

Cell["\<\
The Davidson\[Dash]Harel algorithm attempts to reduce edge crossings and can \
draw these subgraphs in a clearer way:\
\>", "Text",ExpressionUUID->"f77515b0-4c71-4c57-a56c-c2066dbec830"],

Cell[BoxData[
 RowBox[{"IGLayoutDavidsonHarel", "/@", 
  "%"}]], "Input",ExpressionUUID->"f40f9042-75ff-42d6-8a08-23aa6fe180dc"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Estimating motif counts in large graphs", \
"Subsubsubsection",ExpressionUUID->"3e1d73a3-50ee-4971-b165-cfbddd02f3fb"],

Cell[TextData[{
 Cell[BoxData[
 "IGMotifs"],ExpressionUUID->"417be3cc-aca8-4ac5-a18c-8cd999bc86c7"],
 " uses the RAND-ESU algorithm which can uniformly sample a random subset of \
motifs, and thus estimate motif counts even in very large graphs. To enable \
random sampling, set a cutoff probability ",
 Cell[BoxData[
  RowBox[{"cutoff", "=", 
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["p", "1"], ",", 
     SubscriptBox["p", "2"], ",", "\[Ellipsis]", ",", 
     SubscriptBox["p", "n"]}], "}"}]}]],ExpressionUUID->
  "7df2ac18-b6f1-4729-b4b8-989f12ec2c09"],
 " for stopping the search at each level of the ESU tree. The length of the \
cutoff probability vector, ",
 Cell[BoxData["n"],ExpressionUUID->"8e4b7e03-c5be-4e3f-a378-af862b0d09dd"],
 ", must be the same as the motif size. The number of sampled motifs is, on \
average, a fraction ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"(", 
    RowBox[{"1", "-", 
     SubscriptBox["p", "1"]}], ")"}], "\[Times]", 
   RowBox[{"(", 
    RowBox[{"1", "-", 
     SubscriptBox["p", "2"]}], ")"}], "\[Times]", "\[Ellipsis]", "\[Times]", 
   RowBox[{"(", 
    RowBox[{"1", "-", 
     SubscriptBox["p", "n"]}], ")"}]}]],ExpressionUUID->
  "aaffd83c-5022-4fbe-bc6d-7c8cd1cc39a7"],
 " of the total number."
}], "Text",ExpressionUUID->"532746f5-7add-4faa-9106-fbfaf8229819"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"bigG", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<NetworkGraph\>\"", ",", "\"\<WorldWideWeb\>\""}], "}"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"{", 
  RowBox[{
   RowBox[{"VertexCount", "[", "bigG", "]"}], ",", 
   RowBox[{"EdgeCount", "[", "bigG", "]"}]}], 
  "}"}]}], "Input",ExpressionUUID->"f6c66013-0003-405b-9ee1-656143aff3f4"],

Cell[TextData[{
 "Sample a fraction ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["0.1", "3"], "=", "0.001"}], TraditionalForm]],
  ExpressionUUID->"3df1746f-56c2-4d31-988e-45df7d77fda7"],
 " of all motifs."
}], "Text",ExpressionUUID->"bb9a74d1-8a0d-4924-ae82-a1017223cda9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGMotifs", "[", 
   RowBox[{"bigG", ",", "3", ",", 
    RowBox[{"1", "-", 
     RowBox[{"0.1", 
      RowBox[{"{", 
       RowBox[{"1", ",", "1", ",", "1"}], "}"}]}]}]}], "]"}], "//", 
  "AbsoluteTiming"}]], \
"Input",ExpressionUUID->"99f7367e-b663-4d3c-b298-6636704ad129"],

Cell[TextData[{
 "Sample 12.5% of motifs, i.e. a fraction of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["0.5", "3"], TraditionalForm]],ExpressionUUID->
  "2e3ff057-2a35-4118-b5ed-29883dd2351e"],
 "."
}], "Text",ExpressionUUID->"655c781f-a19a-4611-b22a-59fe159b738a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGMotifs", "[", 
   RowBox[{"bigG", ",", "3", ",", 
    RowBox[{"1", "-", 
     RowBox[{"0.5", 
      RowBox[{"{", 
       RowBox[{"1", ",", "1", ",", "1"}], "}"}]}]}]}], "]"}], "//", 
  "AbsoluteTiming"}]], \
"Input",ExpressionUUID->"0ce7ee18-e5c2-46b8-895b-8b09a9892d3d"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["IGMotifsVertexParticipation", \
"Subsubsection",ExpressionUUID->"d432039e-5a20-4684-a26c-afb4f21ecf60"],

Cell[BoxData[
 RowBox[{"?", 
  "IGMotifsVertexParticipation"}]], \
"Input",ExpressionUUID->"e4f42fc8-f070-4d6c-b1ab-cedd9dd64676"],

Cell[TextData[{
 Cell[BoxData[
 "IGMotifsVertexParticipation"],ExpressionUUID->
  "96d6eb3c-4d58-4f2d-9e88-508d98a1c883"],
 " counts how many times each vertex participates in each motif. For each \
vertex, the result is returned in the same format as with ",
 Cell[BoxData[
 "IGMotifs"],ExpressionUUID->"12db6a63-9a0f-4763-90e5-fbadc4ee4b9b"],
 "."
}], "Text",ExpressionUUID->"b04adf10-07f4-4ed6-89bd-f474ea9cf7e0"],

Cell["Available options are:", \
"Text",ExpressionUUID->"5e418c99-c8ca-48d7-b50a-8515aae3d59e"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "False"}]],ExpressionUUID->
  "fa7f4493-85cc-40eb-b9a2-aa077c781851"],
 " treats the graph as undirected and ",
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "True"}]],ExpressionUUID->
  "8c0d5928-3365-4cd8-8830-acb5db672124"],
 " treats the graph as directed. The default is ",
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "Automatic"}]],ExpressionUUID->
  "674bd6b3-09a1-4aa6-9b90-181140569c47"],
 ", which respects the directedness of the graph."
}], "Item",ExpressionUUID->"579021ac-6703-4b49-a2eb-ffc5de90d469"],

Cell["\<\
Count how many times each vertex appears in each 3-motif in a directed graph.\
\
\>", "Text",ExpressionUUID->"8b1bb2e1-1ad7-4ebe-9d2f-fa31ad963207"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{"A", "B", "C", "D", "E", "F"}, {
         SparseArray[
         Automatic, {6, 6}, 0, {
          1, {{0, 2, 6, 8, 10, 12, 13}, {{4}, {5}, {1}, {3}, {5}, {6}, {2}, {
            6}, {2}, {5}, {4}, {6}, {1}}}, Pattern}], Null}, {
        GraphStyle -> "BasicBlack", ImageSize -> {170.88671875, Automatic}, 
         VertexShapeFunction -> {"Name"}}]], Typeset`boxes, 
      Typeset`boxes$s2d = GraphicsGroupBox[{{
         Arrowheads[Medium], 
         Directive[
          GrayLevel[0], 
          Opacity[0.7]], 
         ArrowBox[{
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$4", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$5", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$1", Automatic, Center]}], 
         ArrowBox[
          BezierCurveBox[{
            DynamicLocation["VertexID$2", Automatic, Center], {
            1.8565416187101347`, 0.27770154806882896`}, 
            DynamicLocation["VertexID$3", Automatic, Center]}]], 
         ArrowBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$5", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$6", Automatic, Center]}], 
         ArrowBox[
          BezierCurveBox[{
            DynamicLocation["VertexID$3", Automatic, Center], {
            1.8897505332278919`, -0.11686070191761325`}, 
            DynamicLocation["VertexID$2", Automatic, Center]}]], 
         ArrowBox[{
           DynamicLocation["VertexID$3", Automatic, Center], 
           DynamicLocation["VertexID$6", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$4", Automatic, Center], 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         ArrowBox[
          BezierCurveBox[{
            DynamicLocation["VertexID$4", Automatic, Center], {
            0.2790676742574243, 0.2436166626263496}, 
            DynamicLocation["VertexID$5", Automatic, Center]}]], 
         ArrowBox[
          BezierCurveBox[{
            DynamicLocation["VertexID$5", Automatic, Center], {
            0.3691919666304214, 0.030416063193837932`}, 
            DynamicLocation["VertexID$4", Automatic, Center]}]], 
         ArrowBox[{
           DynamicLocation["VertexID$5", Automatic, Center], 
           DynamicLocation["VertexID$6", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$6", Automatic, Center], 
           DynamicLocation["VertexID$1", Automatic, Center]}]}, {
         GrayLevel[0], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["\"A\"", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0.5941784171976565, 0.9253973650040548}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$1"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["\"B\"", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {1.2732913308019425`, 0.02993276249477783}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$2"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["\"C\"", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {2.4730008211360825`, 0.13090808365643866`}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$3"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["\"D\"", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0., 0.}, BaseStyle -> "Graphics"], 
          "DynamicName", BoxID -> "VertexID$4"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["\"E\"", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0.6482596408878456, 0.2740327258201875}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$5"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["\"F\"", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {1.633667975091004, 0.7775134384172717}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> 
          "VertexID$6"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        
        ImageSizeCache->{{-1.247437428278353, 
         171.13415617827835`}, {-44.24743742827833, 36.70287699333443}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{170.88671875, Automatic}]}], 
  ";"}]], "Input",ExpressionUUID->"5e0dec1f-5b0e-4467-ab6a-7fb74900adec"],

Cell[BoxData[
 RowBox[{"mot", "=", 
  RowBox[{"IGMotifsVertexParticipation", "[", 
   RowBox[{"g", ",", "3"}], 
   "]"}]}]], "Input",ExpressionUUID->"bba527a9-3a79-4dfc-9482-1de0155ed316"],

Cell["\<\
The sum of the participation counts in 3-motifs is 3 times the total motif \
counts of the graph.\
\>", "Text",ExpressionUUID->"b8ec1e33-8ffe-4ddf-b613-0c9692a6d7b0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Total", "[", "mot", "]"}], "===", 
  RowBox[{"3", 
   RowBox[{"IGMotifs", "[", 
    RowBox[{"g", ",", "3"}], 
    "]"}]}]}]], "Input",ExpressionUUID->"d9200c34-27d9-498a-afd0-01bde60115df"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGMotifsTotalCount and IGMotifsTotalCountEstimate", \
"Subsubsection",ExpressionUUID->"a15851a1-3aca-42a7-a89c-ebcee9fdfa87"],

Cell[BoxData[
 RowBox[{"?", 
  "IGMotifsTotalCount"}]], \
"Input",ExpressionUUID->"7d9e9392-b799-4988-aa66-bfe78774d992"],

Cell[BoxData[
 RowBox[{"?", 
  "IGMotifsTotalCountEstimate"}]], \
"Input",ExpressionUUID->"673f4a52-3405-4472-94e6-b3a33278d4e1"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGMotifsTotalCount", "[", 
   RowBox[{"graph", ",", "motifSize"}], "]"}]],ExpressionUUID->
  "829f0da5-66dc-4ef8-8413-2c1ad81cce83"],
 " counts the number of weakly connected subgraphs of the given size in a \
graph. All subgraph sizes greater than 2 are supported."
}], "Text",ExpressionUUID->"5d685ce6-c09d-42cc-807e-707ade58c580"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGMotifsTotalCountEstimate", "[", 
   RowBox[{"graph", ",", "motifSize", ",", "sampleSize"}], "]"}]],
  ExpressionUUID->"bc8943c0-c775-40b4-baae-1abc086f6405"],
 " estimates the total number of motifs by taking a random subset of vertices \
of the specified size, and counting motifs in which these vertices \
participate. The total number is estimated as ",
 Cell[BoxData[
  RowBox[{"motifCount", "\[Times]", 
   RowBox[{"vertexCount", "/", "sampleSize"}]}]],ExpressionUUID->
  "8dbb8091-3f48-4596-89f1-49ad709e41fc"],
 ". ",
 Cell[BoxData[
  RowBox[{"IGMotifsTotalCountEstimate", "[", 
   RowBox[{"graph", ",", "motifSize", ",", "vertices"}], "]"}]],
  ExpressionUUID->"4fc1f38c-ad9a-4bb1-a1f3-1ec86d30fa63"],
 " uses the specified vertices as the sample."
}], "Text",ExpressionUUID->"ed25437e-dacc-4758-84d1-a13a1496f1ee"],

Cell["Let us create a graph.", \
"Text",ExpressionUUID->"ef4e9456-ffcd-4e65-a870-14d0292ef61d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"RandomGraph", "[", 
    RowBox[{"{", 
     RowBox[{"20", ",", "50"}], "}"}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"de0e96aa-accf-4799-b017-69d8ef3bc960"],

Cell["The number of size-4 subgraphs it has is:", \
"Text",ExpressionUUID->"4df33c32-5e91-4bc9-ace0-7ad70da73de6"],

Cell[BoxData[
 RowBox[{"Binomial", "[", 
  RowBox[{
   RowBox[{"VertexCount", "[", "g", "]"}], ",", "4"}], 
  "]"}]], "Input",ExpressionUUID->"bec4cd3f-e715-4992-bbf1-21427dbcbf37"],

Cell["However, only a small fraction of these is connected:", \
"Text",ExpressionUUID->"353e9a47-ca6a-4795-9767-0254db29f7ea"],

Cell[BoxData[
 RowBox[{"IGMotifsTotalCount", "[", 
  RowBox[{"g", ",", "4"}], 
  "]"}]], "Input",ExpressionUUID->"a8346295-3535-4cb1-a8d0-8f3665d69a7a"],

Cell[TextData[{
 Cell[BoxData[
 "IGMotifsTotalCount"],ExpressionUUID->"46a19898-8958-4ecb-8ff7-6126f03307a6"],
 " is effectively equivalent to (but much faster than) the following:"
}], "Text",ExpressionUUID->"8e6447ce-9112-4f54-b009-beb6bb0ae8df"],

Cell[BoxData[
 RowBox[{"Count", "[", 
  RowBox[{
   RowBox[{"Subsets", "[", 
    RowBox[{
     RowBox[{"VertexList", "[", "g", "]"}], ",", 
     RowBox[{"{", "4", "}"}]}], "]"}], ",", 
   RowBox[{"subset_", "/;", 
    RowBox[{"WeaklyConnectedGraphQ", "@", 
     RowBox[{"Subgraph", "[", 
      RowBox[{"g", ",", "subset"}], "]"}]}]}]}], 
  "]"}]], "Input",ExpressionUUID->"dd3f1c07-20a7-432a-813a-8e6c63ec666b"],

Cell["\<\
Estimate the count of connected subgraphs by subsampling: at each level of \
the ESU tree, continue only with probability 0.9.\
\>", "Text",ExpressionUUID->"b275943e-c6dd-42bc-90a6-a83585728415"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGMotifsTotalCount", "[", 
   RowBox[{"g", ",", "4", ",", 
    RowBox[{"1", "-", 
     RowBox[{"0.9", 
      RowBox[{"{", 
       RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}]}]}]}], "]"}], "/", 
  RowBox[{
  "0.9", "^", 
   "4"}]}]], "Input",ExpressionUUID->"8906c45b-ad7a-4bdf-9f93-7f853e64794d"],

Cell["\<\
Estimate the count of connected subgraphs by considering a random subset of \
15 vertices (out of a total of 20).\
\>", "Text",ExpressionUUID->"bf608f8e-c212-4702-914f-e2a80ae73f34"],

Cell[BoxData[
 RowBox[{"IGMotifsTotalCountEstimate", "[", 
  RowBox[{"g", ",", "4", ",", "15"}], 
  "]"}]], "Input",ExpressionUUID->"23faac15-1735-43f3-852d-96f78224e298"],

Cell["Use the first 15 vertices tot estimate the count.", \
"Text",ExpressionUUID->"aa5f8675-a678-4f25-be7f-c1b9a402b582"],

Cell[BoxData[
 RowBox[{"IGMotifsTotalCountEstimate", "[", 
  RowBox[{"g", ",", "4", ",", 
   RowBox[{"Range", "[", "15", "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"2b686610-c004-4c4b-8ede-4e0f1bf53549"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Triad and dyad census", \
"Subsection",ExpressionUUID->"8cd5d282-78c1-4c5c-83c9-9a89d86d80d8"],

Cell[BoxData[
 RowBox[{"?", 
  "IGTriadCensus"}]], \
"Input",ExpressionUUID->"7b393f07-63b9-43ee-b204-0a7eb7321821"],

Cell[BoxData[
 RowBox[{"?", 
  "IGDyadCensus"}]], \
"Input",ExpressionUUID->"3309c364-699d-41c0-8bf0-6294475d4a5b"],

Cell[TextData[{
 "See ",
 Cell[BoxData[
  RowBox[{"IGData", "[", "\"\<MANTriadLabels\>\"", "]"}]],ExpressionUUID->
  "aebfa97e-da10-4213-9a12-3de405b1c768"],
 " for the mapping between MAN labels and graphs."
}], "Text",ExpressionUUID->"cc42accb-adeb-4bf6-9e79-b4504995878a"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGTriadCensus", "[", "g", "]"}]],ExpressionUUID->
  "d6795aba-b53d-4e13-a516-4e00b2864ffe"],
 " does not return triad counts in the same order as ",
 Cell[BoxData[
  RowBox[{"IGMotifs", "[", 
   RowBox[{"g", ",", "3"}], "]"}]],ExpressionUUID->
  "12ceee3a-b462-42fa-8de5-a1aa1a24eb83"],
 ", i.e. ordered according to the triads\[CloseCurlyQuote] ",
 Cell[BoxData[
  RowBox[{"IGIsoclass", "[", "]"}]],ExpressionUUID->
  "4647c0b7-ef17-4816-8ef4-1a11fc4c88b8"],
 ". To get the result ordered by isoclass, use"
}], "Text",ExpressionUUID->"6bb383db-d92c-4e6b-99a6-dd077c15db61"],

Cell[BoxData[
 RowBox[{"Lookup", "[", 
  RowBox[{
   RowBox[{"IGTriadCensus", "[", "g", "]"}], ",", 
   RowBox[{"Keys", "@", 
    RowBox[{"IGData", "[", "\"\<MANTriadLabels\>\"", "]"}]}]}], 
  "]"}]], "Input",
 Evaluatable->False,ExpressionUUID->"23e6e6a4-b437-446c-8551-2dfbe0679580"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGData", "[", "\"\<MANTriadLabels\>\"", "]"}]],ExpressionUUID->
  "6c5ba777-59e2-4244-ae89-3b2bc51142b6"],
 " are ordered according to isoclass."
}], "Text",ExpressionUUID->"fa5a5512-9605-4a1d-ab13-48e6fc8ccd57"],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{"{", 
     RowBox[{
     "\"\<NetworkGraph\>\"", ",", 
      "\"\<MetabolicNetworkActinobacillusActinomycetemcomitans\>\""}], "}"}], 
    "]"}]}], ";"}]], \
"Input",ExpressionUUID->"4192d34b-d29b-4d07-8107-65f0315686c4"],

Cell[BoxData[
 RowBox[{"IGDyadCensus", "[", "net", 
  "]"}]], "Input",ExpressionUUID->"85e0d74a-af09-4b27-95ec-b942f16939cc"],

Cell[BoxData[
 RowBox[{"IGTriadCensus", "[", "net", 
  "]"}]], "Input",ExpressionUUID->"b16229fe-62b9-4851-8993-bcb48da55537"]
}, Closed]],

Cell[CellGroupData[{

Cell["Finding triangles", \
"Subsection",ExpressionUUID->"2efa0eb9-604a-4ee7-8c15-46a90648eead"],

Cell[CellGroupData[{

Cell["IGTriangles", \
"Subsubsection",ExpressionUUID->"2ebf2ef1-0779-4580-9631-28cd0d6b3ff6"],

Cell[BoxData[
 RowBox[{"?", 
  "IGTriangles"}]], \
"Input",ExpressionUUID->"eb7af878-3430-45bf-837c-e36eed636e14"],

Cell["Highlight all triangles in a graph.", \
"Text",ExpressionUUID->"c680a371-df41-4bcf-bec4-566e7126bfda"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"RandomGraph", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"8", ",", "16"}], "}"}], ",", 
     RowBox[{"VertexSize", "\[Rule]", "Large"}]}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"dd97dddb-b6a5-4848-bdea-55440972c033"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HighlightGraph", "[", 
    RowBox[{"g", ",", 
     RowBox[{"Subgraph", "[", 
      RowBox[{"g", ",", "#"}], "]"}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
     RowBox[{"GraphHighlightStyle", "\[Rule]", "\"\<Thick\>\""}]}], "]"}], 
   "&"}], "/@", 
  RowBox[{
  "IGTriangles", "[", "g", 
   "]"}]}]], "Input",ExpressionUUID->"1e998d1a-5c3b-4070-8f64-21ffef1a462c"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGAdjacenctTriangleCount", \
"Subsubsection",ExpressionUUID->"7945f98f-2b44-4153-8940-5125a345f189"],

Cell[BoxData[
 RowBox[{"?", 
  "IGAdjacentTriangleCount"}]], \
"Input",ExpressionUUID->"69f5a620-1673-4a29-9503-39db6c7120c6"],

Cell["\<\
Label a graph\[CloseCurlyQuote]s vertices based on the number of adjacent \
triangles.\
\>", "Text",ExpressionUUID->"5409c123-b5fc-4d1c-aa7d-432a620078b6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"8", ",", "16"}], "}"}], ",", 
    RowBox[{"VertexSize", "\[Rule]", "Large"}]}], "]"}], "//", 
  RowBox[{"IGVertexMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Placed", "[", 
      RowBox[{"#", ",", "Center"}], "]"}], "&"}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", "IGAdjacentTriangleCount"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"808292ba-5b2d-46d5-aa39-364d01855668"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGTriangleFreeQ", \
"Subsubsection",ExpressionUUID->"48c85942-9b04-4377-a583-1a57fcdff22a"],

Cell["\<\
Triangle-free graphs do not have any fully connected subgraphs of size 3. \
Equivalently, they do not have any cliques (other than 2-cliques, which are \
edges).\
\>", "Text",ExpressionUUID->"7ac1b1f8-eb63-46a7-bcd5-bc28fbac107b"],

Cell[BoxData[
 RowBox[{"?", 
  "IGTriangleFreeQ"}]], \
"Input",ExpressionUUID->"f73da08e-136c-47cb-8a9c-05f8e2db3d91"],

Cell["Mycielski graphs are triangle-free.", \
"Text",ExpressionUUID->"4fcc094f-c446-4924-b1d6-0c2b20293923"],

Cell[BoxData[
 RowBox[{"IGTriangleFreeQ", "@", 
  RowBox[{"GraphData", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<Mycielski\>\"", ",", " ", "10"}], "}"}], 
   "]"}]}]], "Input",ExpressionUUID->"8b41b979-9d79-4b99-8b38-0248ff504f69"]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Isomorphism and the automorphism group", \
"Section",ExpressionUUID->"9e4da9b6-8c20-4afc-8b85-62de48aa1e5b"],

Cell["\<\
igraph implements three isomorphism testing algorithms: BLISS, VF2 and LAD. \
These support slightly different functionality.\
\>", "Text",ExpressionUUID->"55258a0e-b492-4242-95a3-4d27550619ab"],

Cell[TextData[{
 StyleBox["Naming:",
  FontWeight->"Bold"],
 " Most of IGraph/M's isomorphism related functions include the name of the \
algorithm as a prefix, e.g. ",
 Cell[BoxData[
 "IGBlissIsomorphicQ"],ExpressionUUID->"983156bc-8087-42df-9fb4-8e7a1bfa7cfd"],
 ". Functions named as ",
 Cell[BoxData[
 "\[Ellipsis]GetIsomorphism"],ExpressionUUID->
  "070e8acd-9bbe-4172-9a0c-54fd46c2342b"],
 " will find a single isomorphism. Functions named as ",
 Cell[BoxData[
 "\[Ellipsis]FindIsomorphisms"],ExpressionUUID->
  "70dd4a27-c774-4a9e-8294-02257682ed0a"],
 " can find multiple isomorphisms. Both return a result in a format \
compatible with the built-in ",
 Cell[BoxData[
 "FindGraphIsomorphism"],ExpressionUUID->
  "97c96f69-2434-4c3b-a4b0-1044ad39c384"],
 "."
}], "Text",ExpressionUUID->"31a4c015-6d72-4139-a1e9-d5039be6119d"],

Cell[TextData[{
 "Additionally, ",
 Cell[BoxData[
  RowBox[{"IGIsomorphicQ", "[", "]"}]],ExpressionUUID->
  "ea218061-431e-4c53-bb11-6614f03a5604"],
 " and ",
 Cell[BoxData[
  RowBox[{"IGSubisomorphicQ", "[", "]"}]],ExpressionUUID->
  "fa4e7a5d-c76e-4d92-89f4-353439e94837"],
 " try to select the best algorithm for the given graphs. For graphs without \
multi-edges, they use igraph\[CloseCurlyQuote]s default algorithm selection. \
For multigraphs, they use VF2 after internally transforming the multigraphs \
to edge- and vertex-coloured simple graphs, in a manner similar to ",
 Cell[BoxData[
 "IGColoredSimpleGraph"],ExpressionUUID->
  "94fcc2cc-d1bb-42a7-bf03-32fa5a3e7874"],
 "."
}], "Text",ExpressionUUID->"7fafb07c-326b-407b-96e0-04af295bc978"],

Cell[CellGroupData[{

Cell["Basic functions", \
"Subsection",ExpressionUUID->"eb962161-ebbf-4fd8-addc-d98420b95817"],

Cell[CellGroupData[{

Cell["IGIsomorphicQ", \
"Subsubsection",ExpressionUUID->"fb15d4e1-53dd-4e95-812d-e12f48dbc489"],

Cell[BoxData[
 RowBox[{"?", 
  "IGIsomorphicQ"}]], \
"Input",ExpressionUUID->"a7b1fecc-6ac4-4920-818e-13dca30c019e"],

Cell[BoxData[
 RowBox[{"?", 
  "IGGetIsomorphism"}]], \
"Input",ExpressionUUID->"fa1b4167-70c3-4b74-95a4-a7b1d117523f"],

Cell[TextData[{
 Cell[BoxData[
 "IGIsomorphicQ"],ExpressionUUID->"2800038f-dc52-4a5d-941f-dd8a214095f6"],
 " decides if two graphs are isomorphic."
}], "Text",ExpressionUUID->"e26f3eb1-8f8d-48a4-8a82-277837a22f42"],

Cell[BoxData[
 RowBox[{"IGIsomorphicQ", "[", 
  RowBox[{
   RowBox[{"IGShorthand", "[", "\"\<a-b-c-a-d\>\"", "]"}], ",", 
   RowBox[{"IGShorthand", "[", "\"\<1-2,3-4-2-3\>\"", "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"6260cda7-874b-4118-9555-f16385f0e054"],

Cell[TextData[{
 Cell[BoxData[
 "IGIsomorphicQ"],ExpressionUUID->"f3282667-29bf-4b0a-b2fc-1a77f1c04cdd"],
 " supports multigraphs."
}], "Text",ExpressionUUID->"fadd78ab-4b79-426c-80de-2cc2337434e1"],

Cell[BoxData[
 RowBox[{"IGIsomorphicQ", "[", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4}, {
        Null, {{1, 2}, {2, 2}, {2, 1}, {1, 3}, {3, 4}, {4, 2}}}, {
        ImageSize -> 80, VertexLabels -> {None}, VertexSize -> {Medium}}]]}, 
      TagBox[GraphicsGroupBox[GraphicsComplexBox[CompressedData["
1:eJw1kgtIk2EUhr2nQ6WiNNQio4sKqXkprx0nWUSiJZLpFPG6TGU2h4hpmuRA
ppUTI/Jei8okFGvexo6YDmVNM+elIrOa9wRNk6mUqef3h48D5/vOed/n5beN
5YUk6Ono6Hhvnq1K3wLeEcUqutw++uREjdY3xvTKmD7kCio9vZXdPjvvdvp6
lt1FhUlq2TNsPlmjmseKhL5IY79OeCP38QrzmEet3+zavX4F5Fvw9V3KfqE8
u5drxFZCyJ4O2xLNHO7NjnNQlfRDlamX/dfjc+ilGyyu+zYA+Z5NycLIWfQY
uiQS/xyECt2zUgPhDDrXKVmpg0MgSfNljTydxo4L37P2vR6BFqr4nPpgR++w
mubAmfZgAe0FZ9LBJ6QL2lvbPjCUfIGEfGIB+YZx4kApcUE+ceIL4gZJ4vvp
v7w5dNb3F/8TN4KSF8C2CZzFFpaV43lfKXypMUuUO82gXyBPw7vaDoa23LdF
1tOoadvIbE/tgJTcUanD7ilsUFlyRPHvIGV/RNtp80k8auV6ZbJYAYsOj7Mu
WkygbHXXifmpXrCPvN/5x06DFVu4aSq4SxUdqQ8SeocrNAemtAfTaS88Ih3k
ky6oyQeyyBccJp84Tr7hAXHgB+ICY+LEl8QNNkbNYwp5BpamNmVyNv+LQ30R
YyBrw1MT7rdVfgtwQ1AWoVzqwQmDWvaZhQXwXKkqFJ0bwLDFH31Cnd/Q9fBT
cmW9Gq0UhjkazhK88og7ZpcyjA0C7c30yWXICJ0YCogexvTx8O7ivBXI4/ib
bQjVGB+ljQoy0YK43KTU3WQAPfmVSW4xq9A9E2TuzulBPkufXZeyBsbXl/Va
o1sRhdVqb4t1MDmSbe107bNsqhJcgy+vQxB3+x527qNpHgTMfAztB29mfwjp
A5fRDyR/kMH4KyD/0MT4ryU+OMjwHSB+CGf4XSgfmGLyKVdt5wcuTH5JG9Kt
fGEn3//pMdr8
         "], {
          {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
           {Arrowheads[0.], 
            ArrowBox[BezierCurveBox[{
             1, {-0.6644407471831174, 0.664440747183116}, 2}], 
             0.1414213562373094]}, 
           {Arrowheads[0.], 
            ArrowBox[BezierCurveBox[{
             1, {-0.3355592528168825, 0.33555925281688337`}, 2}], 
             0.1414213562373094]}, 
           {Arrowheads[0.], ArrowBox[{1, 3}, 0.1414213562373094]}, 
           {Arrowheads[0.], 
            ArrowBox[BezierCurveBox[{2, 40, 43, 45, 51, 53, 56, 2},
             SplineDegree->7], 0.1414213562373094]}, 
           {Arrowheads[0.], ArrowBox[{2, 4}, 0.1414213562373094]}, 
           {Arrowheads[0.], ArrowBox[{3, 4}, 0.1414213562373094]}}, 
          {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
           DiskBox[1, 0.1414213562373094], DiskBox[2, 0.1414213562373094], 
           DiskBox[3, 0.1414213562373094], DiskBox[4, 0.1414213562373094]}}]],
       
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->80], ",", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4}, {
        Null, {{1, 2}, {2, 3}, {3, 4}, {4, 1}, {4, 3}, {3, 3}}}, {
        ImageSize -> 96, VertexLabels -> {None}, VertexSize -> {Medium}}]]}, 
      TagBox[GraphicsGroupBox[GraphicsComplexBox[CompressedData["
1:eJw9kH0s1HEcxz0lhFSi4Q/a8rT0hArH505olVBrGUdCmGEnqZmHxOw2oaLZ
LDtdYWRqybo83HxMGNOdLuehrfR0zlPW7VAeKnGfn37bb5/t8/l+Pu/3620X
wzsfp6OlpeW1/m9U+lSYVxTT2+32jpUTOdbYFN0vZvqwWXUse4oLE+Xi3HSB
h9dAD2tzT5HRnMFdn4uVovHejhvAUbnflLBVMPoifBzEbRCw/RHnmEoFh7nl
4QPzfVC38lXK11KDVFFVWOQnAzPplhwFdx7Uee+TBI1ysM5aunpNuQB79sbu
c0wegRMTYT0lt37CD++JYf+oEWi8vBQZZLgEgwG+Jmt8OTimCxLdopfh0m3D
++6GMgjdpstpSF6BXbIgU3duHyzzH8q9LFZh+eyCTmtUKygF4BocsgoOtXrX
h0/LxJvzyiDNHDf3w2gfnZj7+XQfnzL686SPfow/cx+NP7Rh/AP5x50Mn3W+
hg/rGf5fxI/+TD4ZlA+ymfyCmjX5/c+Xq9bkizX4ykUomQNhnDTCgN2FzR0s
z9Djc/CbPbNyZ7AX8y3SdI+Uf4fO7P4Efc4AhuzotCtVzIJ5dqyzpHQQq4w9
nT7azwJLO7is4ZMM8z2ak/gRM8AaPlNU9m0IK7V9RHr8aXBrGDBKGRrG6lRv
o9HqKeg++SXT/NkoiqhCPfXRnt6BkPbQhe4An+7iftKBx6SL6iyND7hAvlBI
PqGAfOMYcYCIuDCbOKGOuLE2/s3UH94sHNL1Lftb1oRSnj/HJnAGWoysDgR4
i/CD0CS+4+A0sAN5Ct7FdtS3S3hZbD0Fira1jPaUTkzJHRM5m03Cc4klt+jK
a0zZHd521FQJtlau55Qlvah2fpB5ymICWpa3OsxN9qNzxN2uRUcFVGzgpkqw
gCq4UB9r6B0s0h4a0x1Io7tYQTqQRrooJx9gRL7QlnzCZ/KN94gD3hIXGhAn
PCFu/Acjtd2q
         "], {
          {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
           {Arrowheads[0.], ArrowBox[{1, 2}, 0.1414213562373094]}, 
           {Arrowheads[0.], ArrowBox[{1, 4}, 0.1414213562373094]}, 
           {Arrowheads[0.], ArrowBox[{2, 3}, 0.1414213562373094]}, 
           {Arrowheads[0.], 
            ArrowBox[BezierCurveBox[{3, 8, 11, 13, 19, 21, 24, 3},
             SplineDegree->7], 0.1414213562373094]}, 
           {Arrowheads[0.], 
            ArrowBox[BezierCurveBox[{
             3, {0.664440747183117, -0.664440747183117}, 4}], 
             0.1414213562373094]}, 
           {Arrowheads[0.], 
            ArrowBox[BezierCurveBox[{
             3, {0.33555925281688137`, -0.33555925281688564`}, 4}], 
             0.1414213562373094]}}, 
          {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
           DiskBox[1, 0.1414213562373094], DiskBox[2, 0.1414213562373094], 
           DiskBox[3, 0.1414213562373094], DiskBox[4, 0.1414213562373094]}}]],
       
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->96]}], 
  "]"}]], "Input",ExpressionUUID->"0f6794bb-cd06-482d-bea8-3ed108fd26ec"],

Cell[BoxData[
 RowBox[{"IGIsomorphicQ", "[", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4}, {
        Null, {{1, 2}, {2, 2}, {2, 1}, {1, 3}, {3, 4}, {4, 2}}}, {
        ImageSize -> 80, VertexLabels -> {None}, VertexSize -> {Medium}}]]}, 
      TagBox[GraphicsGroupBox[GraphicsComplexBox[CompressedData["
1:eJw1kgtIk2EUhr2nQ6WiNNQio4sKqXkprx0nWUSiJZLpFPG6TGU2h4hpmuRA
ppUTI/Jei8okFGvexo6YDmVNM+elIrOa9wRNk6mUqef3h48D5/vOed/n5beN
5YUk6Ono6Hhvnq1K3wLeEcUqutw++uREjdY3xvTKmD7kCio9vZXdPjvvdvp6
lt1FhUlq2TNsPlmjmseKhL5IY79OeCP38QrzmEet3+zavX4F5Fvw9V3KfqE8
u5drxFZCyJ4O2xLNHO7NjnNQlfRDlamX/dfjc+ilGyyu+zYA+Z5NycLIWfQY
uiQS/xyECt2zUgPhDDrXKVmpg0MgSfNljTydxo4L37P2vR6BFqr4nPpgR++w
mubAmfZgAe0FZ9LBJ6QL2lvbPjCUfIGEfGIB+YZx4kApcUE+ceIL4gZJ4vvp
v7w5dNb3F/8TN4KSF8C2CZzFFpaV43lfKXypMUuUO82gXyBPw7vaDoa23LdF
1tOoadvIbE/tgJTcUanD7ilsUFlyRPHvIGV/RNtp80k8auV6ZbJYAYsOj7Mu
WkygbHXXifmpXrCPvN/5x06DFVu4aSq4SxUdqQ8SeocrNAemtAfTaS88Ih3k
ky6oyQeyyBccJp84Tr7hAXHgB+ICY+LEl8QNNkbNYwp5BpamNmVyNv+LQ30R
YyBrw1MT7rdVfgtwQ1AWoVzqwQmDWvaZhQXwXKkqFJ0bwLDFH31Cnd/Q9fBT
cmW9Gq0UhjkazhK88og7ZpcyjA0C7c30yWXICJ0YCogexvTx8O7ivBXI4/ib
bQjVGB+ljQoy0YK43KTU3WQAPfmVSW4xq9A9E2TuzulBPkufXZeyBsbXl/Va
o1sRhdVqb4t1MDmSbe107bNsqhJcgy+vQxB3+x527qNpHgTMfAztB29mfwjp
A5fRDyR/kMH4KyD/0MT4ryU+OMjwHSB+CGf4XSgfmGLyKVdt5wcuTH5JG9Kt
fGEn3//pMdr8
         "], {
          {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
           {Arrowheads[0.], 
            ArrowBox[BezierCurveBox[{
             1, {-0.6644407471831174, 0.664440747183116}, 2}], 
             0.1414213562373094]}, 
           {Arrowheads[0.], 
            ArrowBox[BezierCurveBox[{
             1, {-0.3355592528168825, 0.33555925281688337`}, 2}], 
             0.1414213562373094]}, 
           {Arrowheads[0.], ArrowBox[{1, 3}, 0.1414213562373094]}, 
           {Arrowheads[0.], 
            ArrowBox[BezierCurveBox[{2, 40, 43, 45, 51, 53, 56, 2},
             SplineDegree->7], 0.1414213562373094]}, 
           {Arrowheads[0.], ArrowBox[{2, 4}, 0.1414213562373094]}, 
           {Arrowheads[0.], ArrowBox[{3, 4}, 0.1414213562373094]}}, 
          {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
           DiskBox[1, 0.1414213562373094], DiskBox[2, 0.1414213562373094], 
           DiskBox[3, 0.1414213562373094], DiskBox[4, 0.1414213562373094]}}]],
       
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->80], ",", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4}, {
        Null, {{1, 2}, {2, 3}, {3, 4}, {4, 1}, {4, 3}, {1, 1}}}, {
        ImageSize -> 96, VertexLabels -> {None}, VertexSize -> {Medium}}]]}, 
      TagBox[GraphicsGroupBox[GraphicsComplexBox[CompressedData["
1:eJw1kH0s1HEcxz2UuJCahw1/0JawVAsV7nycoVlC1lJ3zDMTt5OsmWdmtwkV
ZbPa6QpLZi1Zl6f5mDCmOy7noa3o4ZynbLdD85Ck+/j9tt8+2/f7/bzf79fb
MV4YkWSgp6fns/f/n/RpsLg8frDf4xM7P3q6pTVuuHv/HJhpYDNQUZaq7C7M
Env5jAywmT1Vdls2f28Gz0tnBnvuIlfjWSDz0+DsW94MdHdi0JHn3AsaDXry
a3gjq0PYtPVDLtLTokJVV1YeoEAL+cF8FX8V14o/p4lblGiXu3H7jnoNbY8n
nHBOn8SAuZsDlUW/UcOZmwiMmcSW2I3oUJMNVAT5m+2KlOiSJU71iNvE2Hsm
jzxNFBh52JDbnL6FVopQc0/+EG6Knil9rLdx58qaQUdMB6rF4B4Wvo2PI0o6
bzWOsZn7ylDdPTD7N2gfGP0i0gfGX0v+wOQ75qvLB/b7+TmUHxg+6xIdHzD8
68QPTD8F1A8w/fHadP0B02+iRtcvNOB7N4lsBSRJ8ihjvz5s62F7R15cgT9+
S1v3RwexxDrT8FzNL+jNG04x4o5g+NFexyrVMljmJbjKqkaxztTb5avTMrD1
w6qbZxVY4tWWJopaAvbE5fLqn+P4VN9XekC0CB7NIyzB+ATWZ3BYU/UL0H/p
e47l6ymU0oQmOkcnegcS2kM30gER6eIp8oEX5IvaXF0OuEa5UEI5oZRy4zRx
gJS4MI844SVxY2Pyx4Ud4TKcNfSv/lvdinJhINc+ZAnaWbangzhS/CIxS+45
swh+IUKV8HoXGjmmvKuwWwBV5252l6AXBYXTUleLeXgjs+GXJ35AgRWv87y5
Ghxs3a+qKwdR6/okJ9h6Dto3D51cmR9G16gHfevOKqj9j5shw1Ka4Ebn2EDv
YJ320JR0IJN0sZZ8IJN8UUk5gEW50IFywjfKjQ+JA8aIC42JE14RN/4DMTbp
IA==
         "], {
          {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
           {Arrowheads[0.], 
            ArrowBox[BezierCurveBox[{1, 8, 11, 13, 19, 21, 24, 1},
             SplineDegree->7], 0.1414213562373094]}, 
           {Arrowheads[0.], ArrowBox[{1, 2}, 0.1414213562373094]}, 
           {Arrowheads[0.], ArrowBox[{1, 4}, 0.1414213562373094]}, 
           {Arrowheads[0.], ArrowBox[{2, 3}, 0.1414213562373094]}, 
           {Arrowheads[0.], 
            ArrowBox[BezierCurveBox[{
             3, {0.664440747183117, -0.664440747183117}, 4}], 
             0.1414213562373094]}, 
           {Arrowheads[0.], 
            ArrowBox[BezierCurveBox[{
             3, {0.33555925281688137`, -0.33555925281688564`}, 4}], 
             0.1414213562373094]}}, 
          {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
           DiskBox[1, 0.1414213562373094], DiskBox[2, 0.1414213562373094], 
           DiskBox[3, 0.1414213562373094], DiskBox[4, 0.1414213562373094]}}]],
       
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->96]}], 
  "]"}]], "Input",ExpressionUUID->"f62ea1da-3cc2-47c0-b85a-1975f0468a58"],

Cell["Get a specific mapping between the vertices of the graphs.", \
"Text",ExpressionUUID->"37ec1704-14fc-48ef-a122-3fe28bc9aa83"],

Cell[BoxData[
 RowBox[{"IGGetIsomorphism", "[", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4}, {
        Null, {{1, 2}, {2, 2}, {2, 1}, {1, 3}, {3, 4}, {4, 2}}}, {
        ImageSize -> 80, PerformanceGoal -> "Quality", VertexLabels -> {None},
          VertexShapeFunction -> {"Name"}, VertexSize -> {Medium}}]], 
      Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         BezierCurveBox[{
           DynamicLocation[
           "VertexID$1", Automatic, Center], {-0.6644407471831174, 
           0.664440747183116}, 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         BezierCurveBox[{
           DynamicLocation[
           "VertexID$1", Automatic, Center], {-0.3355592528168825, 
           0.33555925281688337`}, 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         LineBox[{
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$3", Automatic, Center]}], 
         BezierCurveBox[{
           DynamicLocation[
           "VertexID$2", Automatic, Center], {-0.2698086589769875, 
           1.1251285630706513`}, {-0.3495649899317138, 
           1.406385203268681}, {-0.26618708953031345`, 1.586231625136078}, {
           0.2661870895303107, 1.5862316251360784`}, {0.3495649899317115, 
           1.4063852032686817`}, {0.2698086589769857, 1.1251285630706518`}, 
           DynamicLocation["VertexID$2", Automatic, Center]}, SplineDegree -> 
          7], 
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$4", Automatic, Center]}], 
         LineBox[{
           DynamicLocation["VertexID$3", Automatic, Center], 
           DynamicLocation["VertexID$4", Automatic, Center]}]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["1", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {-1., 1.0106430996148606`*^-15}, Automatic, {
           0.2828427124746188, 0.2828427124746188}, BaseStyle -> "Graphics"], 
          "DynamicName", BoxID -> "VertexID$1"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["2", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {-7.044813998280222*^-16, 1.}, Automatic, {
           0.2828427124746188, 0.2828427124746188}, BaseStyle -> "Graphics"], 
          "DynamicName", BoxID -> "VertexID$2"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["3", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {6.049014748177263*^-16, -1.}, Automatic, {
           0.2828427124746188, 0.2828427124746188}, BaseStyle -> "Graphics"], 
          "DynamicName", BoxID -> "VertexID$3"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["4", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {1., -1.133107779529596*^-15}, Automatic, {
           0.2828427124746188, 0.2828427124746188}, BaseStyle -> "Graphics"], 
          "DynamicName", BoxID -> "VertexID$4"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        
        ImageSizeCache->{{-3.2393066909899035`, 
         82.2393066909899}, {-52.8550676530868, 48.01663919563945}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->80], ",", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4}, {
        Null, {{1, 2}, {2, 3}, {3, 4}, {4, 1}, {4, 3}, {3, 3}}}, {
        ImageSize -> 96, PerformanceGoal -> "Quality", VertexLabels -> {None},
          VertexShapeFunction -> {"Name"}, VertexSize -> {Medium}}]], 
      Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         LineBox[{
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         LineBox[{
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$4", Automatic, Center]}], 
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$3", Automatic, Center]}], 
         BezierCurveBox[{
           DynamicLocation["VertexID$3", Automatic, Center], {
           1.1251285630711807`, 0.26980865897674}, {1.4063852032689546`, 
           0.3495649899313937}, {1.5862316251361879`, 0.266187089530069}, {
           1.586231625136188, -0.266187089530071}, {
           1.4063852032689548`, -0.34956498993139573`}, {
           1.125128563071181, -0.2698086589767423}, 
           DynamicLocation["VertexID$3", Automatic, Center]}, SplineDegree -> 
          7], 
         BezierCurveBox[{
           DynamicLocation["VertexID$3", Automatic, Center], {
           0.664440747183117, -0.664440747183117}, 
           DynamicLocation["VertexID$4", Automatic, Center]}], 
         BezierCurveBox[{
           DynamicLocation["VertexID$3", Automatic, Center], {
           0.33555925281688137`, -0.33555925281688564`}, 
           DynamicLocation["VertexID$4", Automatic, Center]}]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["1", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {-1., 1.0106430996148606`*^-15}, Automatic, {
           0.2828427124746188, 0.2828427124746188}, BaseStyle -> "Graphics"], 
          "DynamicName", BoxID -> "VertexID$1"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["2", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {-7.044813998280222*^-16, 1.}, Automatic, {
           0.2828427124746188, 0.2828427124746188}, BaseStyle -> "Graphics"], 
          "DynamicName", BoxID -> "VertexID$2"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["3", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {1., -1.133107779529596*^-15}, Automatic, {
           0.2828427124746188, 0.2828427124746188}, BaseStyle -> "Graphics"], 
          "DynamicName", BoxID -> "VertexID$3"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["4", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {6.049014748177263*^-16, -1.}, Automatic, {
           0.2828427124746188, 0.2828427124746188}, BaseStyle -> "Graphics"], 
          "DynamicName", BoxID -> "VertexID$4"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        
        ImageSizeCache->{{-3.2393066909898955`, 
         96.3991042630133}, {-45.2393066909899, 39.20712973709298}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->96]}], 
  "]"}]], "Input",ExpressionUUID->"a94fe7c4-bd6f-4b0c-ada6-c31a3c65c619"],

Cell["\<\
When the graphs are not isomorphic, an empty list is returned.\
\>", "Text",ExpressionUUID->"9f82ac9c-5373-4869-9c61-7f2ac61977ce"],

Cell[BoxData[
 RowBox[{"IGGetIsomorphism", "[", 
  RowBox[{
   RowBox[{"CycleGraph", "[", "4", "]"}], ",", 
   RowBox[{"IGCompleteGraph", "[", "4", "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"751a9c8c-9ed4-438d-9654-d1ff2ac60ec7"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGSubisomorphicQ", \
"Subsubsection",ExpressionUUID->"b52f1594-dc89-4971-a258-59af56af6a0b"],

Cell[BoxData[
 RowBox[{"?", 
  "IGSubisomorphicQ"}]], \
"Input",ExpressionUUID->"1a022ad3-34cc-4a72-8514-c5a37aba8716"],

Cell[BoxData[
 RowBox[{"?", 
  "IGGetSubisomorphism"}]], \
"Input",ExpressionUUID->"17ae2edf-efda-4bfd-958c-a65ba9cf27ae"],

Cell[TextData[{
 Cell[BoxData[
 "IGSubisomorphicQ"],ExpressionUUID->"9a3b5731-43b4-4138-9414-2a43a7b045c4"],
 " decides if a subgraph is part of a larger graph."
}], "Text",ExpressionUUID->"86d6a2ea-c8d0-4344-9074-30c8d5db725c"],

Cell[TextData[{
 "A dodecahedral graph does not contain a ",
 Cell[BoxData[
  RowBox[{"[", 
   RowBox[{"1", ",", "2", ",", "3"}], "]"}]],ExpressionUUID->
  "897f0f6e-1a34-4e7e-a3b0-13f8541eeab4"],
 " symmetric tree."
}], "Text",ExpressionUUID->"91ca7730-98a6-4dfb-90ca-a0ac64a3c49f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"target", "=", 
   RowBox[{"GraphData", "[", "\"\<DodecahedralGraph\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pattern", "=", 
   RowBox[{"IGSymmetricTree", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"3f817190-9d69-4882-a166-9cd17638a9a9"],

Cell[BoxData[
 RowBox[{"IGSubisomorphicQ", "[", 
  RowBox[{"pattern", ",", "target"}], 
  "]"}]], "Input",ExpressionUUID->"3e20d859-61e8-4252-827d-74870963c9b8"],

Cell[TextData[{
 "It does contain a ",
 Cell[BoxData[
  RowBox[{"[", 
   RowBox[{"3", ",", "2", ",", "1"}], "]"}]],ExpressionUUID->
  "03ca1447-8b0d-4d12-a317-4569720fc9dd"],
 " tree."
}], "Text",ExpressionUUID->"ebfd8b26-0c98-4811-bc5a-67592868eb08"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pattern", "=", 
   RowBox[{"IGSymmetricTree", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "2", ",", "1"}], "}"}], "]"}]}], ";"}], "\n", 
 RowBox[{"IGSubisomorphicQ", "[", 
  RowBox[{"pattern", ",", "target"}], 
  "]"}]}], "Input",ExpressionUUID->"f7c0b17d-498a-45a4-8df4-aac58b44bb75"],

Cell["Let us retrieve a specific mapping ...", \
"Text",ExpressionUUID->"7db45268-930c-4469-b188-8d29629fb1b3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", "iso", "}"}], "=", 
  RowBox[{"IGGetSubisomorphism", "[", 
   RowBox[{"pattern", ",", "target"}], 
   "]"}]}]], "Input",ExpressionUUID->"1085a2df-ad76-478b-8ed0-b33b0e03e229"],

Cell["... and highlight it.", \
"Text",ExpressionUUID->"c67d19c1-e445-4e29-bdcf-d9b8dcc8b3ec"],

Cell[BoxData[
 RowBox[{"HighlightGraph", "[", 
  RowBox[{"target", ",", 
   RowBox[{"VertexReplace", "[", 
    RowBox[{"pattern", ",", 
     RowBox[{"Normal", "[", "iso", "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"GraphHighlightStyle", "\[Rule]", "\"\<Thick\>\""}]}], 
  "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"f45d96a6-f582-4e83-83b4-f7c3ccfa7b01"],

Cell[TextData[{
 Cell[BoxData[
 "IGSubisomorphicQ"],ExpressionUUID->"39dcd81d-0baa-4998-8445-10f3018142f1"],
 " supports multigraphs."
}], "Text",ExpressionUUID->"452383ea-73fa-458b-a79b-90b9343549e5"],

Cell[BoxData[
 RowBox[{"IGSubisomorphicQ", "[", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{"a", "b"}, {Null, {{1, 1}, {1, 2}}}, {
        ImageSize -> 120, PerformanceGoal -> "Quality", 
         VertexLabels -> {None}, VertexShapeFunction -> {"Name"}}]], 
      Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         BezierCurveBox[{
           DynamicLocation["VertexID$1", Automatic, Center], {
           1.0884792554677603`, 0.1907835323853024}, {1.2873577330053512`, 
           0.24717977484589673`}, {1.4145283574798084`, 0.1882226960710236}, {
           1.4145283574798089`, -0.18822269607102265`}, {
           1.2873577330053516`, -0.2471797748458961}, {
           1.0884792554677607`, -0.19078353238530207`}, 
           DynamicLocation["VertexID$1", Automatic, Center]}, SplineDegree -> 
          7], 
         LineBox[{
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$2", Automatic, Center]}]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["\"a\"", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {1., 0.}, BaseStyle -> "Graphics"], 
          "DynamicName", BoxID -> "VertexID$1"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["\"b\"", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0., 1.2246467991473532`*^-16}, BaseStyle -> 
           "Graphics"], "DynamicName", BoxID -> 
          "VertexID$2"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        
        ImageSizeCache->{{-3.239306690989907, 
         119.912776078745}, {-25.0058373032348, 20.501223792165177`}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->120], ",", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3}, {Null, {{2, 1}, {1, 2}, {2, 3}, {1, 1}}}, {
        ImageSize -> 180, PerformanceGoal -> "Quality", 
         VertexLabels -> {None}, VertexShapeFunction -> {"Name"}}]], 
      Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         BezierCurveBox[{
           DynamicLocation[
           "VertexID$1", Automatic, 
            Center], {-0.08847925546776053, -0.19078353238530196`}, \
{-0.2873577330053514, -0.24717977484589607`}, {-0.41452835747980865`, \
-0.18822269607102282`}, {-0.41452835747980865`, 
           0.18822269607102343`}, {-0.2873577330053514, 
           0.24717977484589673`}, {-0.08847925546776059, 
           0.19078353238530268`}, 
           DynamicLocation["VertexID$1", Automatic, Center]}, SplineDegree -> 
          7], 
         BezierCurveBox[{
           DynamicLocation["VertexID$1", Automatic, Center], {
           0.4999999999999994, 0.16444074718311658`}, 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         BezierCurveBox[{
           DynamicLocation["VertexID$1", Automatic, Center], {
           0.4999999999999998, -0.1644407471831159}, 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$3", Automatic, Center]}]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["1", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0., 3.6739403974420594`*^-16}, BaseStyle -> 
           "Graphics"], "DynamicName", BoxID -> "VertexID$1"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["2", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {1., 2.4492935982947064`*^-16}, BaseStyle -> 
           "Graphics"], "DynamicName", BoxID -> "VertexID$2"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["3", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {2., 0.}, BaseStyle -> "Graphics"], 
          "DynamicName", BoxID -> "VertexID$3"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        
        ImageSizeCache->{{0.31171371717335816`, 
         182.2393066909899}, {-23.830327099153163`, 17.54664667499721}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->180]}], 
  "]"}]], "Input",ExpressionUUID->"36e9892f-d5d8-46af-b5f6-762217572a66"],

Cell[BoxData[
 RowBox[{"IGGetSubisomorphism", "[", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{"a", "b"}, {Null, {{1, 1}, {1, 2}}}, {
        ImageSize -> 120, PerformanceGoal -> "Quality", 
         VertexLabels -> {None}, VertexShapeFunction -> {"Name"}}]], 
      Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         BezierCurveBox[{
           DynamicLocation["VertexID$1", Automatic, Center], {
           1.0884792554677603`, 0.1907835323853024}, {1.2873577330053512`, 
           0.24717977484589673`}, {1.4145283574798084`, 0.1882226960710236}, {
           1.4145283574798089`, -0.18822269607102265`}, {
           1.2873577330053516`, -0.2471797748458961}, {
           1.0884792554677607`, -0.19078353238530207`}, 
           DynamicLocation["VertexID$1", Automatic, Center]}, SplineDegree -> 
          7], 
         LineBox[{
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$2", Automatic, Center]}]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["\"a\"", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {1., 0.}, BaseStyle -> "Graphics"], 
          "DynamicName", BoxID -> "VertexID$1"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["\"b\"", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0., 1.2246467991473532`*^-16}, BaseStyle -> 
           "Graphics"], "DynamicName", BoxID -> 
          "VertexID$2"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        
        ImageSizeCache->{{-3.239306690989907, 
         119.912776078745}, {-25.0058373032348, 20.501223792165177`}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->120], ",", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3}, {Null, {{2, 1}, {1, 2}, {2, 3}, {1, 1}}}, {
        ImageSize -> 180, PerformanceGoal -> "Quality", 
         VertexLabels -> {None}, VertexShapeFunction -> {"Name"}}]], 
      Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         BezierCurveBox[{
           DynamicLocation[
           "VertexID$1", Automatic, 
            Center], {-0.08847925546776053, -0.19078353238530196`}, \
{-0.2873577330053514, -0.24717977484589607`}, {-0.41452835747980865`, \
-0.18822269607102282`}, {-0.41452835747980865`, 
           0.18822269607102343`}, {-0.2873577330053514, 
           0.24717977484589673`}, {-0.08847925546776059, 
           0.19078353238530268`}, 
           DynamicLocation["VertexID$1", Automatic, Center]}, SplineDegree -> 
          7], 
         BezierCurveBox[{
           DynamicLocation["VertexID$1", Automatic, Center], {
           0.4999999999999994, 0.16444074718311658`}, 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         BezierCurveBox[{
           DynamicLocation["VertexID$1", Automatic, Center], {
           0.4999999999999998, -0.1644407471831159}, 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$3", Automatic, Center]}]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["1", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0., 3.6739403974420594`*^-16}, BaseStyle -> 
           "Graphics"], "DynamicName", BoxID -> "VertexID$1"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["2", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {1., 2.4492935982947064`*^-16}, BaseStyle -> 
           "Graphics"], "DynamicName", BoxID -> "VertexID$2"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["3", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {2., 0.}, BaseStyle -> "Graphics"], 
          "DynamicName", BoxID -> "VertexID$3"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        
        ImageSizeCache->{{0.31171371717335816`, 
         182.2393066909899}, {-23.830327099153163`, 17.54664667499721}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->180]}], 
  "]"}]], "Input",ExpressionUUID->"23075b71-cc93-4754-9b2a-6d568a50c802"],

Cell[BoxData[
 RowBox[{"IGSubisomorphicQ", "[", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{"a", "b"}, {Null, {{1, 1}, {1, 2}, {2, 1}}}, {
        ImageSize -> 120, PerformanceGoal -> "Quality", 
         VertexLabels -> {None}, VertexShapeFunction -> {"Name"}}]], 
      Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         BezierCurveBox[{
           DynamicLocation["VertexID$1", Automatic, Center], {
           1.0884792554677603`, 0.1907835323853024}, {1.2873577330053512`, 
           0.24717977484589673`}, {1.4145283574798084`, 0.1882226960710236}, {
           1.4145283574798089`, -0.18822269607102265`}, {
           1.2873577330053516`, -0.2471797748458961}, {
           1.0884792554677607`, -0.19078353238530207`}, 
           DynamicLocation["VertexID$1", Automatic, Center]}, SplineDegree -> 
          7], 
         BezierCurveBox[{
           DynamicLocation["VertexID$1", Automatic, Center], {
           0.5000000000000006, -0.16444074718311627`}, 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         BezierCurveBox[{
           DynamicLocation["VertexID$1", Automatic, Center], {
           0.5000000000000001, 0.16444074718311646`}, 
           DynamicLocation["VertexID$2", Automatic, Center]}]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["\"a\"", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {1., 0.}, BaseStyle -> "Graphics"], 
          "DynamicName", BoxID -> "VertexID$1"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["\"b\"", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0., 1.2246467991473532`*^-16}, BaseStyle -> 
           "Graphics"], "DynamicName", BoxID -> 
          "VertexID$2"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        
        ImageSizeCache->{{-3.239306690989907, 
         119.912776078745}, {-25.0058373032348, 20.501223792165177`}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->120], ",", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3}, {Null, {{2, 1}, {1, 2}, {2, 3}, {1, 1}}}, {
        ImageSize -> 180, PerformanceGoal -> "Quality", 
         VertexLabels -> {None}, VertexShapeFunction -> {"Name"}}]], 
      Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         BezierCurveBox[{
           DynamicLocation[
           "VertexID$1", Automatic, 
            Center], {-0.08847925546776053, -0.19078353238530196`}, \
{-0.2873577330053514, -0.24717977484589607`}, {-0.41452835747980865`, \
-0.18822269607102282`}, {-0.41452835747980865`, 
           0.18822269607102343`}, {-0.2873577330053514, 
           0.24717977484589673`}, {-0.08847925546776059, 
           0.19078353238530268`}, 
           DynamicLocation["VertexID$1", Automatic, Center]}, SplineDegree -> 
          7], 
         BezierCurveBox[{
           DynamicLocation["VertexID$1", Automatic, Center], {
           0.4999999999999994, 0.16444074718311658`}, 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         BezierCurveBox[{
           DynamicLocation["VertexID$1", Automatic, Center], {
           0.4999999999999998, -0.1644407471831159}, 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$3", Automatic, Center]}]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["1", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0., 3.6739403974420594`*^-16}, BaseStyle -> 
           "Graphics"], "DynamicName", BoxID -> "VertexID$1"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["2", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {1., 2.4492935982947064`*^-16}, BaseStyle -> 
           "Graphics"], "DynamicName", BoxID -> "VertexID$2"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["3", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {2., 0.}, BaseStyle -> "Graphics"], 
          "DynamicName", BoxID -> "VertexID$3"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        
        ImageSizeCache->{{0.31171371717335816`, 
         182.2393066909899}, {-23.830327099153163`, 17.54664667499721}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->180]}], 
  "]"}]], "Input",ExpressionUUID->"5bfe1f15-b013-4336-b955-fe8ff1d49195"],

Cell[BoxData[
 RowBox[{"IGSubisomorphicQ", "[", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{"a", "b"}, {Null, {{1, 1}, {1, 2}, {2, 1}, {1, 2}}}, {
        ImageSize -> 120, PerformanceGoal -> "Quality", 
         VertexLabels -> {None}, VertexShapeFunction -> {"Name"}}]], 
      Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         BezierCurveBox[{
           DynamicLocation["VertexID$1", Automatic, Center], {
           1.0884792554677603`, 0.1907835323853024}, {1.2873577330053512`, 
           0.24717977484589673`}, {1.4145283574798084`, 0.1882226960710236}, {
           1.4145283574798089`, -0.18822269607102265`}, {
           1.2873577330053516`, -0.2471797748458961}, {
           1.0884792554677607`, -0.19078353238530207`}, 
           DynamicLocation["VertexID$1", Automatic, Center]}, SplineDegree -> 
          7], 
         BezierCurveBox[{
           DynamicLocation["VertexID$1", Automatic, Center], {
           0.5000000000000006, -0.16444074718311627`}, 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         LineBox[{
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         BezierCurveBox[{
           DynamicLocation["VertexID$1", Automatic, Center], {
           0.5000000000000001, 0.16444074718311646`}, 
           DynamicLocation["VertexID$2", Automatic, Center]}]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["\"a\"", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {1., 0.}, BaseStyle -> "Graphics"], 
          "DynamicName", BoxID -> "VertexID$1"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["\"b\"", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0., 1.2246467991473532`*^-16}, BaseStyle -> 
           "Graphics"], "DynamicName", BoxID -> 
          "VertexID$2"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        
        ImageSizeCache->{{-3.239306690989907, 
         119.912776078745}, {-25.0058373032348, 20.501223792165177`}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->120], ",", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3}, {Null, {{2, 1}, {1, 2}, {2, 3}, {1, 1}}}, {
        ImageSize -> 180, PerformanceGoal -> "Quality", 
         VertexLabels -> {None}, VertexShapeFunction -> {"Name"}}]], 
      Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         BezierCurveBox[{
           DynamicLocation[
           "VertexID$1", Automatic, 
            Center], {-0.08847925546776053, -0.19078353238530196`}, \
{-0.2873577330053514, -0.24717977484589607`}, {-0.41452835747980865`, \
-0.18822269607102282`}, {-0.41452835747980865`, 
           0.18822269607102343`}, {-0.2873577330053514, 
           0.24717977484589673`}, {-0.08847925546776059, 
           0.19078353238530268`}, 
           DynamicLocation["VertexID$1", Automatic, Center]}, SplineDegree -> 
          7], 
         BezierCurveBox[{
           DynamicLocation["VertexID$1", Automatic, Center], {
           0.4999999999999994, 0.16444074718311658`}, 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         BezierCurveBox[{
           DynamicLocation["VertexID$1", Automatic, Center], {
           0.4999999999999998, -0.1644407471831159}, 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$3", Automatic, Center]}]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["1", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0., 3.6739403974420594`*^-16}, BaseStyle -> 
           "Graphics"], "DynamicName", BoxID -> "VertexID$1"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["2", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {1., 2.4492935982947064`*^-16}, BaseStyle -> 
           "Graphics"], "DynamicName", BoxID -> "VertexID$2"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["3", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {2., 0.}, BaseStyle -> "Graphics"], 
          "DynamicName", BoxID -> "VertexID$3"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        
        ImageSizeCache->{{0.31171371717335816`, 
         182.2393066909899}, {-23.830327099153163`, 17.54664667499721}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->180]}], 
  "]"}]], "Input",ExpressionUUID->"f74ddf62-abfd-4575-83f7-344d70037d5d"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Bliss", \
"Subsection",ExpressionUUID->"2a1476b1-0a79-428a-b5d7-b4151a6df319"],

Cell[TextData[{
 ButtonBox["The Bliss library",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.tcs.hut.fi/Software/bliss/"], None},
  ButtonNote->"http://www.tcs.hut.fi/Software/bliss/"],
 " was developed by Tommi Junttila and Petteri Kaski. It is capable of \
canonical labelling of directed or undirected vertex coloured graphs."
}], "Text",ExpressionUUID->"4c1123d4-b2a4-498b-aae2-1b4b9c250745"],

Cell[TextData[{
 "Bliss generally outperforms ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s built-in isomorphisms functions (including finding and \
counting automorphisms) as of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " 12.1. However, this advantage will only be apparent for large and \
difficult graphs. For small ones the overhead of having to copy the graph and \
convert it to igraph\[CloseCurlyQuote]s internal format is much larger than \
the actual computation time."
}], "Text",ExpressionUUID->"eaff43b3-96f4-4ea3-9a68-79c633333478"],

Cell[BoxData[
 RowBox[{"?", 
  "IGBliss*"}]], \
"Input",ExpressionUUID->"0cd71477-a8a5-4ce4-954f-dde03487b472"],

Cell[TextData[{
 "All Bliss functions take a ",
 Cell[BoxData[
 "\"\<SplittingHeuristics\>\""],ExpressionUUID->
  "18d33a5e-4bad-431a-8f1a-b17924856cae"],
 " option, which can influence the performance of the method. Possible values \
are:"
}], "Text",ExpressionUUID->"4660f92b-443e-4540-93a1-82cc5ef8f262"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<First\>\""],ExpressionUUID->"6a56ba67-4730-4fc8-af2c-806e25f6f332"],
 " \[Dash] First non-unit cell. Very fast but may result in large search \
spaces on difficult graphs. Use for large but easy graphs."
}], "Item",ExpressionUUID->"c06b075a-c307-449a-bcb1-7b3e9beb7f28"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<FirstSmallest\>\""],ExpressionUUID->
  "6fa3a1f0-b1f8-4ac5-bd32-fcaec240f6d9"],
 " \[Dash] First smallest non-unit cell. Fast, should usually produce smaller \
search spaces than ",
 Cell[BoxData[
 "\"\<First\>\""],ExpressionUUID->"1f7da745-831b-4f80-ac25-d3ecc0eec47b"],
 "."
}], "Item",ExpressionUUID->"e85ed53d-38ee-4174-a72a-2d25895e7c02"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<FirstLargest\>\""],ExpressionUUID->
  "83b3d119-2484-4898-876d-83af9a9fad83"],
 " \[Dash] First largest non-unit cell. Fast, should usually produce smaller \
search spaces than ",
 Cell[BoxData[
 "\"\<First\>\""],ExpressionUUID->"d42a7cd5-eb66-42f3-b1a6-44a7bf328465"],
 "."
}], "Item",ExpressionUUID->"64e9b12d-bf71-4eca-a86f-fd0c32f9783e"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<FirstMaximallyConnected\>\""],ExpressionUUID->
  "78f0c2dd-3cd0-40d0-bd07-65bde66b50b4"],
 " \[Dash] First maximally non-trivially connected non-unit cell. Not so \
fast, should usually produce smaller search spaces than ",
 Cell[BoxData[
 "\"\<First\>\""],ExpressionUUID->"aa36c6a1-e892-41fe-b621-b71b48653e55"],
 ", ",
 Cell[BoxData[
 "\"\<FirstSmallest\>\""],ExpressionUUID->
  "d8356bb5-e012-4150-9d77-ab491927b6fb"],
 " and ",
 Cell[BoxData[
 "\"\<FirstLargest\>\""],ExpressionUUID->
  "e5f89ef7-aab3-4195-b84f-2d69d8d228e9"],
 "."
}], "Item",ExpressionUUID->"1389dd2e-3283-4ec6-a33c-50e2a7c5b4c1"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<FirstSmallestMaximallyConnected\>\""],ExpressionUUID->
  "80268e47-8076-4a3d-9a2f-2e557a123b1f"],
 " \[Dash] First smallest maximally non-trivially connected non-unit cell. \
Not so fast, should usually produce smaller search spaces than ",
 Cell[BoxData[
 "\"\<First\>\""],ExpressionUUID->"a32429f9-9fdb-4eb4-b049-658c0e41bbcf"],
 ", ",
 Cell[BoxData[
 "\"\<FirstSmallest\>\""],ExpressionUUID->
  "cc1b06a0-fb4b-4c44-b9cc-781d31652533"],
 " and ",
 Cell[BoxData[
 "\"\<FirstLargest\>\""],ExpressionUUID->
  "d15b3035-7379-48db-867e-e5d86d4b98ca"],
 "."
}], "Item",ExpressionUUID->"343ec89a-7bc4-454b-8f52-24112cb8d617"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<FirstLargestMaximallyConnected\>\""],ExpressionUUID->
  "2d8f7001-275f-441c-9427-74e9cf643850"],
 " \[Dash] First largest maximally non-trivially connected non-unit cell. Not \
so fast, should usually produce smaller search spaces than ",
 Cell[BoxData[
 "\"\<First\>\""],ExpressionUUID->"7e4b7d7d-186e-46f5-94b2-8c256a83382a"],
 ", ",
 Cell[BoxData[
 "\"\<FirstSmallest\>\""],ExpressionUUID->
  "7a6433d7-3f1f-45df-b9a2-3d8e4e785632"],
 " and ",
 Cell[BoxData[
 "\"\<FirstLargest\>\""],ExpressionUUID->
  "58341016-92e2-43e5-894e-031a470d1aba"],
 "."
}], "Item",ExpressionUUID->"e604953d-5b00-44d4-8a35-b810c9e70b2c"],

Cell[TextData[{
 "The default setting is ",
 Cell[BoxData[
 "\"\<FirstLargest\>\""],ExpressionUUID->
  "5f2fc0e4-e574-4027-ae3d-d3214edf9cc7"],
 ", which performs well on average on sparse graphs."
}], "Text",ExpressionUUID->"8c540466-81e7-40eb-a27d-218728589290"],

Cell[TextData[{
 StyleBox["Note:",
  FontWeight->"Bold"],
 " The result of the ",
 Cell[BoxData[
 "IGBlissCanonicalLabeling"],ExpressionUUID->
  "0df01f29-e0a0-48b5-af00-313a37bbf68e"],
 ", ",
 Cell[BoxData[
 "IGBlissCanonicalPermutation"],ExpressionUUID->
  "865df3ac-7760-4c05-92a3-363a365ce1fb"],
 " and ",
 Cell[BoxData[
 "IGBlissanonicalGraph"],ExpressionUUID->
  "f74c5109-0206-4b58-b21b-1fffb9fb394c"],
 " functions depend on the choice of ",
 Cell[BoxData[
 "\"\<SplittingHeuristics\>\""],ExpressionUUID->
  "b3518ffb-c2c0-4c23-af19-f197bce12f28"],
 ". See the ",
 ButtonBox["Bliss documentation",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.tcs.hut.fi/Software/bliss/doxy/classbliss_1_1Graph.html#\
a08da370e34106cd7db479eca7c7375cc"], None},
  ButtonNote->
   "http://www.tcs.hut.fi/Software/bliss/doxy/classbliss_1_1Graph.html#\
a08da370e34106cd7db479eca7c7375cc"],
 " for more information. "
}], "Text",ExpressionUUID->"eac59b8a-c2b2-4541-98f6-c9d8e5715548"],

Cell[CellGroupData[{

Cell["Basic examples", \
"Subsubsubsection",ExpressionUUID->"d5c95749-df16-4f56-afe2-103a8f398d77"],

Cell["Let us take the cuboctahedral graph from GraphData \[Ellipsis]", \
"Text",ExpressionUUID->"61c23989-401b-4bdb-b513-90fe38709165"],

Cell[BoxData[
 RowBox[{"g1", "=", 
  RowBox[{
  "GraphData", "[", "\"\<CuboctahedralGraph\>\"", 
   "]"}]}]], "Input",ExpressionUUID->"51a66455-c890-462c-af80-1b31e2e3cd67"],

Cell["\[Ellipsis] and also generate it based on its LCF notation.", \
"Text",ExpressionUUID->"555ed5b3-3158-4d7c-ae71-93f2797d9f12"],

Cell[BoxData[
 RowBox[{"g2", "=", 
  RowBox[{"IGLCF", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"4", ",", "2"}], "}"}], ",", "6"}], 
   "]"}]}]], "Input",ExpressionUUID->"6e77a2e3-30dc-4559-862c-9d57a7fd2911"],

Cell["The two graphs are isomorphic:", \
"Text",ExpressionUUID->"35e27d5c-4c63-4757-8ad1-10562613605a"],

Cell[BoxData[
 RowBox[{"IGBlissIsomorphicQ", "[", 
  RowBox[{"g1", ",", "g2"}], 
  "]"}]], "Input",ExpressionUUID->"dc132312-a08b-4f0d-8dde-103328a3836a"],

Cell["One particular mapping between them is the following:", \
"Text",ExpressionUUID->"35ea45b1-4fa7-474a-98ae-8db128c05ad4"],

Cell[BoxData[
 RowBox[{"IGBlissGetIsomorphism", "[", 
  RowBox[{"g1", ",", "g2"}], 
  "]"}]], "Input",ExpressionUUID->"23f55e3d-3a4d-4364-8838-23880dd4286f"],

Cell["\<\
How many mappings are there in total? The same number as the number of \
automorphisms of either graph.\
\>", "Text",ExpressionUUID->"8e601f12-d6d8-4921-b6b4-d1bac8643009"],

Cell[BoxData[
 RowBox[{"IGBlissAutomorphismCount", "[", "g1", 
  "]"}]], "Input",ExpressionUUID->"498779bd-0341-4949-ad32-f9524ba44753"],

Cell[TextData[{
 "Bliss cannot generate all 48 of these mappings ",
 StyleBox["directly",
  FontSlant->"Italic"],
 ".  We can either use VF2 for this \[Ellipsis]"
}], "Text",ExpressionUUID->"5301391e-b76d-475c-8cdf-224477c5c52d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGVF2FindIsomorphisms", "[", 
   RowBox[{"g1", ",", "g2"}], "]"}], "//", 
  "Length"}]], "Input",ExpressionUUID->"351e74d7-e1de-4d12-b086-118f84e8585c"],

Cell[TextData[{
 "\[Ellipsis] or we can use the automorphism group computed by the ",
 Cell[BoxData[
 "IGBlissAutomorphismGroup"],ExpressionUUID->
  "79b3ee6a-337f-4bf1-a907-252d706cd5ee"],
 " function."
}], "Text",ExpressionUUID->"0714d669-a049-4252-b0ba-bdf46cd49b21"],

Cell[BoxData[
 RowBox[{"group", "=", 
  RowBox[{
  "IGBlissAutomorphismGroup", "[", "g1", 
   "]"}]}]], "Input",ExpressionUUID->"5d0218a6-69a5-45b6-b286-7fdefc6bbd39"],

Cell[BoxData[
 RowBox[{"GroupOrder", "[", "group", 
  "]"}]], "Input",ExpressionUUID->"704e6042-1551-4d18-8eda-e7d917601c23"],

Cell["\<\
Ask for all 48 vertex permutations that create isomorphic graphs:\
\>", "Text",ExpressionUUID->"9a932a4e-a127-4fb3-b26d-dc023eba3383"],

Cell[BoxData[
 RowBox[{"PermutationReplace", "[", 
  RowBox[{
   RowBox[{"VertexList", "[", "g1", "]"}], ",", "group"}], 
  "]"}]], "Input",ExpressionUUID->"ac161f59-edd2-457c-9e03-f28f8899ffc1"],

Cell["\<\
Permuting the adjacency matrix with any of these leaves it invariant.\
\>", "Text",ExpressionUUID->"e90b81d6-c1e7-4287-b3fe-5b6612f88639"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"perms", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"PermutationList", "[", 
      RowBox[{"#", ",", 
       RowBox[{"VertexCount", "[", "g1", "]"}]}], "]"}], "&"}], "/@", 
    RowBox[{"GroupElements", "[", "group", "]"}]}]}], ";"}], "\n", 
 RowBox[{"Equal", "@@", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"AdjacencyMatrix", "[", "g1", "]"}], "[", 
      RowBox[{"[", 
       RowBox[{"#", ",", "#"}], "]"}], "]"}], "&"}], "/@", "perms"}], 
   ")"}]}]}], "Input",ExpressionUUID->"afb0a816-f184-4bd7-9397-abcd94a22f81"],

Cell["\<\
Bliss works by computing a canonical labelling of vertices. Then isomorphism \
can be tested for by comparing the canonically relabelled graphs.\
\>", "Text",ExpressionUUID->"02f27dfc-97b2-4ed1-98ad-b992a9a9c9dd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGBlissCanonicalGraph", "[", "g1", "]"}], "===", 
  RowBox[{
  "IGBlissCanonicalGraph", "[", "g2", 
   "]"}]}]], "Input",ExpressionUUID->"a83d88a6-9a84-4a04-ae1b-91ce10522cd7"],

Cell[TextData[{
 Cell[BoxData[
 "IGBlissCanonicalGraph"],ExpressionUUID->
  "8a28eecc-6278-4f5a-8637-64fb8df82d7d"],
 " returns graphs in a consistent format so that two graphs are isomorphic if \
and only if their canonical graphs will compare equal with ",
 Cell[BoxData["==="],ExpressionUUID->"0148c060-be8f-4b24-9474-4bdf3f9e03a7"],
 ". Note that in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", graphs may not always compare equal even if they have the same vertex and \
edge lists."
}], "Text",ExpressionUUID->"a95c8b64-4699-469a-9b56-34956aa04080"],

Cell["The corresponding permutation and labelling are", \
"Text",ExpressionUUID->"f6cac807-1603-4000-a0cd-edc331d0d100"],

Cell[BoxData[
 RowBox[{"IGBlissCanonicalPermutation", "[", "g1", 
  "]"}]], "Input",ExpressionUUID->"c84b2c0e-6564-4c1c-a061-6cea205436ab"],

Cell[BoxData[
 RowBox[{"IGBlissCanonicalLabeling", "[", "g1", 
  "]"}]], "Input",ExpressionUUID->"0b169b07-bc3e-4423-bef2-e2a35fc546cc"],

Cell["Notice that the canonical labelling is simply", \
"Text",ExpressionUUID->"941bb6ef-5704-4735-8968-84f4ef1c5d00"],

Cell[BoxData[
 RowBox[{"AssociationThread", "[", 
  RowBox[{
   RowBox[{"VertexList", "[", "g1", "]"}], ",", 
   RowBox[{"IGBlissCanonicalPermutation", "[", "g1", "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"72e49e4f-ab55-405f-8fda-f595a110881a"],

Cell[TextData[{
 "Also notice that it is a mapping from ",
 Cell[BoxData["g1"],ExpressionUUID->"1314fa74-83db-490c-8d0a-be0f2e55d8cc"],
 " to ",
 Cell[BoxData[
  RowBox[{"IGBlissCanonicalGraph", "[", "g1", "]"}]],ExpressionUUID->
  "8db42437-797a-4fd5-a6b2-d2cd6d246994"],
 ":"
}], "Text",ExpressionUUID->"51c03f36-dfcb-4ac5-93f6-d85cda431d5d"],

Cell[BoxData[
 RowBox[{"MemberQ", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"IGVF2FindIsomorphisms", "[", 
    RowBox[{"g1", ",", 
     RowBox[{"IGBlissCanonicalGraph", "[", "g1", "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"IGBlissCanonicalLabeling", "[", "g1", "]"}]}], 
  "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"df9c8e1c-0ef2-4fd5-af67-c4d420869f8f"],

Cell[TextData[{
 "The canonical graph returned by ",
 Cell[BoxData[
 "IGBlissCanonicalGraph"],ExpressionUUID->
  "87cbdb90-12b3-465f-b539-d0eb98aadc67"],
 " always has vertices labelled by the integers ",
 Cell[BoxData[
  RowBox[{"1", ",", "2", ",", "\[Ellipsis]"}]],ExpressionUUID->
  "afa80189-7420-40cb-8aee-6e7b65fccbc6"],
 " It can also be used to filter duplicates from a list of graphs "
}], "Text",ExpressionUUID->"bfe4f085-a373-4ef5-8a6f-4222ff6171d7"],

Cell["\<\
For example, let us generate all possible adjacency matrices of 3-vertex \
simple directed graphs.\
\>", "Text",ExpressionUUID->"c6804d24-d2e6-45d1-962d-193f7d87757e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "fills", " ", "nondiagonal", " ", "entries", " ", "of", " ", "n", " ", 
    "by", " ", "n", " ", "matrix", " ", "from", " ", "vector"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"toMat", "[", 
    RowBox[{"vec_", ",", "n_"}], "]"}], ":=", 
   RowBox[{"SparseArray", "@", 
    RowBox[{"Partition", "[", 
     RowBox[{
      RowBox[{"Flatten", "@", 
       RowBox[{"Riffle", "[", 
        RowBox[{
         RowBox[{"Partition", "[", 
          RowBox[{"vec", ",", "n"}], "]"}], ",", "0", ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", 
           RowBox[{"-", "1"}], ",", "2"}], "}"}]}], "]"}]}], ",", "n"}], 
     "]"}]}]}]}]], \
"Input",ExpressionUUID->"10a3450a-24d9-44fc-b296-426fecad97e4"],

Cell[TextData[{
 "There are ",
 Cell[BoxData[
  RowBox[{
   SuperscriptBox["2", 
    RowBox[{"3", " ", "2"}]], "=", 
   RowBox[{
    SuperscriptBox["2", "6"], "=", "64"}]}]],ExpressionUUID->
  "0a6edb17-be43-418e-8465-4b1d358a8b47"],
 " such matrices. "
}], "Text",ExpressionUUID->"43e948d5-7a87-45f7-9982-935fbf11f175"],

Cell[BoxData[
 RowBox[{
  RowBox[{"graphs", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"AdjacencyGraph", "[", 
      RowBox[{
       RowBox[{"toMat", "[", 
        RowBox[{"#", ",", "3"}], "]"}], ",", 
       RowBox[{"DirectedEdges", "\[Rule]", "True"}]}], "]"}], "&"}], "/@", 
    RowBox[{"IntegerDigits", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Range", "[", 
        RowBox[{"2", "^", "6"}], "]"}], "-", "1"}], ",", "2", ",", "6"}], 
     "]"}]}]}], 
  ";"}]], "Input",ExpressionUUID->"7f1a4f38-f6ab-4b96-bed9-0f3c39d4147e"],

Cell["But only 16 of them correspond to non-isomorphic graphs", \
"Text",ExpressionUUID->"166f2531-f154-427b-9012-2e27a608f4a1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeleteDuplicatesBy", "[", 
   RowBox[{"graphs", ",", "IGBlissCanonicalGraph"}], "]"}], "//", 
  "Length"}]], "Input",ExpressionUUID->"d2e0319b-b3e8-4d4c-a652-4ba233191579"],

Cell[TextData[{
 "When ",
 Cell[BoxData[
 "IGBlissCanonicalGraph"],ExpressionUUID->
  "f4b2a3a4-01ca-4edc-97e0-8b94bbe9a518"],
 " is given a vertex coloured graph, it will encode the colours into a vertex \
property named ",
 Cell[BoxData[
 "\"\<Color\>\""],ExpressionUUID->"685a5cb9-29b8-4611-83c5-defbfce11ec0"],
 ". This allows distinguishing between graphs whose canonical graphs are \
identical in structure, but differ in colouring."
}], "Text",ExpressionUUID->"1c86912e-c0e1-4101-8c1a-ad78c392d4d7"],

Cell["Take for example the following coloured graphs:", \
"Text",ExpressionUUID->"4503d641-06ca-449d-bb5b-f3bb590c7ab6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"Graph", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[UndirectedEdge]", "2"}], ",", 
       RowBox[{"2", "\[UndirectedEdge]", "3"}]}], "}"}], ",", 
     RowBox[{"VertexSize", "\[Rule]", "Large"}], ",", 
     RowBox[{"GraphStyle", "\[Rule]", "\"\<BasicBlack\>\""}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"colg1", "=", 
   RowBox[{"Graph", "[", 
    RowBox[{"g", ",", 
     RowBox[{"Properties", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"1", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"\"\<color\>\"", "\[Rule]", "1"}], "}"}]}], ",", 
        RowBox[{"2", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"\"\<color\>\"", "\[Rule]", "3"}], "}"}]}], ",", 
        RowBox[{"3", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"\"\<color\>\"", "\[Rule]", "2"}], "}"}]}]}], "}"}]}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"colg2", "=", 
   RowBox[{"Graph", "[", 
    RowBox[{"g", ",", 
     RowBox[{"Properties", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"1", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"\"\<color\>\"", "\[Rule]", "1"}], "}"}]}], ",", 
        RowBox[{"2", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"\"\<color\>\"", "\[Rule]", "3"}], "}"}]}], ",", 
        RowBox[{"3", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"\"\<color\>\"", "\[Rule]", "1"}], "}"}]}]}], "}"}]}]}], 
    "]"}]}], ";"}]}], \
"Input",ExpressionUUID->"95ef81d8-f634-446a-a134-f252cd49d705"],

Cell["Visualize them for clarity:", \
"Text",ExpressionUUID->"c3d52d5b-6cd3-4828-ab18-485ce2b8089c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGVertexMap", "[", 
   RowBox[{
    RowBox[{"ColorData", "[", "97", "]"}], ",", 
    RowBox[{"VertexStyle", "\[Rule]", 
     RowBox[{"IGVertexProp", "[", "\"\<color\>\"", "]"}]}]}], "]"}], "/@", 
  RowBox[{"{", 
   RowBox[{"colg1", ",", "colg2"}], 
   "}"}]}]], "Input",ExpressionUUID->"01c5f210-16f3-4a2d-b49d-79ceeae0c74e"],

Cell["\<\
The vertex and edge lists of their canonical graphs are identical:\
\>", "Text",ExpressionUUID->"9ba9ebcb-11f8-455a-8df6-5f3ffd0355bc"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"cang1", "=", 
   RowBox[{"IGBlissCanonicalGraph", "[", 
    RowBox[{"{", 
     RowBox[{"colg1", ",", 
      RowBox[{"\"\<VertexColors\>\"", "\[Rule]", "\"\<color\>\""}]}], "}"}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"cang2", "=", 
   RowBox[{"IGBlissCanonicalGraph", "[", 
    RowBox[{"{", 
     RowBox[{"colg2", ",", 
      RowBox[{"\"\<VertexColors\>\"", "\[Rule]", "\"\<color\>\""}]}], "}"}], 
    "]"}]}], ";"}]}], \
"Input",ExpressionUUID->"019786a5-fe32-414a-b760-62b467cd2856"],

Cell[BoxData[{
 RowBox[{"VertexList", "/@", 
  RowBox[{"{", 
   RowBox[{"cang1", ",", "cang2"}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{"EdgeList", "/@", 
  RowBox[{"{", 
   RowBox[{"cang1", ",", "cang2"}], 
   "}"}]}]}], "Input",ExpressionUUID->"b0798d38-0b6d-48e8-99a3-582dc48aee8f"],

Cell["\<\
But they differ in colouring, and therefore do not compare equal:\
\>", "Text",ExpressionUUID->"d9197c0f-6876-4b4d-80d6-0014f3e5c0aa"],

Cell[BoxData[
 RowBox[{"IGVertexPropertyList", "[", "cang1", 
  "]"}]], "Input",ExpressionUUID->"ca4ff6c5-5f3a-4bc1-a39d-0387e555ae81"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGVertexProp", "[", "\"\<Color\>\"", "]"}], "/@", 
  RowBox[{"{", 
   RowBox[{"cang1", ",", "cang2"}], 
   "}"}]}]], "Input",ExpressionUUID->"0417928f-1076-4b59-98dc-05a0325ca129"],

Cell[BoxData[
 RowBox[{"cang1", "===", 
  "cang2"}]], "Input",ExpressionUUID->"9c34baf7-c468-4017-9ea6-8195fd9d7227"],

Cell["\<\
The performance of Bliss functions may depend significantly on the choice of \
splitting heuristics.\
\>", "Text",ExpressionUUID->"aae8453a-672c-4c42-8b41-30fcf7ddea41"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"LineGraph", "@", 
    RowBox[{"GraphData", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<Hadamard\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"24", ",", "6"}], "}"}]}], "}"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"timings", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"#", ",", 
       RowBox[{"First", "@", 
        RowBox[{"Timing", "@", 
         RowBox[{"IGBlissAutomorphismGroup", "[", 
          RowBox[{"g", ",", 
           RowBox[{"\"\<SplittingHeuristics\>\"", "\[Rule]", "#"}]}], 
          "]"}]}]}]}], "}"}], "&"}], "/@", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<First\>\"", ",", "\"\<FirstSmallest\>\"", ",", 
      "\"\<FirstLargest\>\"", ",", "\"\<FirstMaximallyConnected\>\"", ",", 
      "\"\<FirstSmallestMaximallyConnected\>\"", ",", 
      "\"\<FirstLargestMaximallyConnected\>\""}], "}"}]}]}], ";"}], "\n", 
 RowBox[{"TableForm", "[", 
  RowBox[{"timings", ",", 
   RowBox[{"TableHeadings", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"None", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<Splitting heuristics\>\"", ",", "\"\<Timing (s)\>\""}], 
       "}"}]}], "}"}]}]}], 
  "]"}]}], "Input",ExpressionUUID->"a96e2d1e-9946-445e-8a3a-b3520768bb43"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Additional examples", \
"Subsubsubsection",ExpressionUUID->"48797576-aea0-45f7-9854-2413c295b9e0"],

Cell["\<\
Let us visualize the vertex equivalence classes induced by a graph\
\[CloseCurlyQuote]s automorphism group. Two vertices are considered \
equivalent if there is an automorphism that maps one into the other.\
\>", "Text",ExpressionUUID->"d470fe00-85ef-4480-97b8-65efab62afbc"],

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"g", "=", 
     RowBox[{"GraphData", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Mycielski\>\"", ",", " ", "4"}], "}"}], "]"}]}], "}"}], 
   ",", 
   RowBox[{"HighlightGraph", "[", 
    RowBox[{"g", ",", 
     RowBox[{"GroupOrbits", "@", 
      RowBox[{"IGBlissAutomorphismGroup", "[", "g", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"VertexSize", "\[Rule]", "Large"}], ",", 
     RowBox[{"GraphStyle", "\[Rule]", "\"\<BasicBlack\>\""}]}], "]"}]}], 
  "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"28236d5f-b5e0-4115-8519-775449e0d325"],

Cell["\<\
Visualize the edge equivalence classes of a polyhedron, induced by its \
skeleton\[CloseCurlyQuote]s automorphism group.\
\>", "Text",ExpressionUUID->"1c6cd318-482f-4fc7-823a-9a38069ea8fb"],

Cell[BoxData[
 RowBox[{"mesh", "=", 
  RowBox[{"PolyhedronData", "[", 
   RowBox[{"\"\<TruncatedOctahedron\>\"", ",", "\"\<BoundaryMeshRegion\>\""}],
    "]"}]}]], "Input",ExpressionUUID->"7ccf1cfa-b503-4424-912b-47f31d6171d7"],

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"g", "=", 
     RowBox[{"IGMeshGraph", "[", 
      RowBox[{"mesh", ",", 
       RowBox[{"VertexStyle", "\[Rule]", "Black"}]}], "]"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"HighlightGraph", "[", 
    RowBox[{"g", ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"EdgeList", "[", "g", "]"}], "[", 
        RowBox[{"[", "#", "]"}], "]"}], "&"}], "/@", 
      RowBox[{"GroupOrbits", "@", 
       RowBox[{"IGBlissAutomorphismGroup", "@", 
        RowBox[{"LineGraph", "[", "g", "]"}]}]}]}]}], "\[IndentingNewLine]", 
    "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"3e6c7cb2-2610-4017-b238-e8cfb9d64465"]
}, Open  ]],

Cell[CellGroupData[{

Cell["References", \
"Subsubsubsection",ExpressionUUID->"4d8cbfbc-c567-4121-b9d2-8c24437411fa"],

Cell[TextData[{
 "T. Junttila, P. Kaski, Engineering an Efficient Canonical Labeling Tool for \
Large and Sparse Graphs, 2007 Proceedings of the Ninth Workshop on Algorithm \
Engineering and Experiments, ",
 ButtonBox["doi:10.1137/1.9781611972870.13",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://doi.org/10.1137/1.9781611972870.13"], None},
  ButtonNote->"https://doi.org/10.1137/1.9781611972870.13"],
 "."
}], "Item",ExpressionUUID->"398aecfb-c521-4414-a866-9211d424a628"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["VF2", \
"Subsection",ExpressionUUID->"49c36198-96ef-4f90-b6be-30831da3c7c8"],

Cell[BoxData[
 RowBox[{"?", 
  "IGVF2*"}]], "Input",ExpressionUUID->"b92173ac-7d82-44c1-b9da-4682b5d885a9"],

Cell[TextData[{
 "VF2 supports vertex coloured and edge coloured graphs. A colour \
specification consists of one or more of the ",
 Cell[BoxData[
 "\"\<VertexColors\>\""],ExpressionUUID->
  "274a277b-1caa-4e44-ad99-690eee7058c4"],
 " and ",
 Cell[BoxData[
 "\"\<EdgeColors\>\""],ExpressionUUID->"ae0cf130-c5d1-4ea1-a6bc-57e632d37418"],
 " options. Allowed formats for these options are a list of integers, an \
association assigning integers to the vertices/edges, or ",
 Cell[BoxData[
 "None"],ExpressionUUID->"ac6439b4-388b-41b4-8c88-376ab807cbbb"],
 ". When using associations, it is not necessarily to specify a colour for \
each vertex/edge. The omitted ones are assumed to have colour ",
 Cell[BoxData["0"],ExpressionUUID->"72d4bfce-de72-47c4-ab76-f55dea287145"],
 "."
}], "Text",ExpressionUUID->"db518849-c9e8-43b3-bdc2-52032d29413c"],

Cell["The VF2 algorithm only supports simple graphs.", \
"Text",ExpressionUUID->"31bea4a5-0484-4e93-9091-bacf72649832"],

Cell[TextData[{
 "The following graph has two automorphisms: ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"1", ",", "2"}], "}"}]],ExpressionUUID->
  "715c8a85-947a-46eb-8cba-16e8afe241b1"],
 " and ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"2", ",", "1"}], "}"}]],ExpressionUUID->
  "fb8aa546-6b7e-4d63-8641-32c8e997de7e"],
 "."
}], "Text",ExpressionUUID->"75c86397-1fb5-4242-818b-3e48242e2724"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"Graph", "[", 
    RowBox[{"{", 
     RowBox[{"1", "\[UndirectedEdge]", "2"}], "}"}], "]"}]}], ";"}], "\n", 
 RowBox[{"IGVF2IsomorphismCount", "[", 
  RowBox[{"g", ",", "g"}], 
  "]"}]}], "Input",ExpressionUUID->"97854f64-66bc-4af7-82fe-06136f3db474"],

Cell[TextData[{
 "If we colour one of the vertices, the permutation ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"2", ",", "1"}], "}"}]],ExpressionUUID->
  "0d8f662c-f6e0-479a-9017-37c71d6eae5a"],
 " becomes forbidden, so only one automorphism remains."
}], "Text",ExpressionUUID->"45777bf2-7afe-403e-8b21-0dee3fc7a931"],

Cell[BoxData[
 RowBox[{"IGVF2IsomorphismCount", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"g", ",", 
     RowBox[{"\"\<VertexColors\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"g", ",", 
     RowBox[{"\"\<VertexColors\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}]}]}], "}"}]}], 
  "]"}]], "Input",ExpressionUUID->"7813a8be-5ad0-453b-bc3a-3aac8f18ab13"],

Cell["\<\
Multigraphs are not directly supported for isomorphism checking, but we can \
map the multigraph isomorphism problem into an edge-coloured graph \
isomorphism one by designating the multiplicity of each edge as its colour.\
\>", "Text",ExpressionUUID->"a2df0040-4b1d-49fc-be59-30102bf4f65a"],

Cell[BoxData[
 RowBox[{"g1", "=", 
  RowBox[{"EdgeAdd", "[", 
   RowBox[{
    RowBox[{"PathGraph", "[", 
     RowBox[{
      RowBox[{"Range", "[", "5", "]"}], ",", 
      RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}], ",", 
    RowBox[{"2", "\[UndirectedEdge]", "3"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"3aec297a-8885-4c1d-b2f0-e1815dc9bd2e"],

Cell[BoxData[
 RowBox[{"g2", "=", 
  RowBox[{"EdgeAdd", "[", 
   RowBox[{
    RowBox[{"PathGraph", "[", 
     RowBox[{
      RowBox[{"Range", "[", "5", "]"}], ",", 
      RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}], ",", 
    RowBox[{"4", "\[UndirectedEdge]", "3"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"9508940d-7921-4e06-b517-882f559d137c"],

Cell[BoxData[
 RowBox[{"IGVF2IsomorphicQ", "[", 
  RowBox[{"g1", ",", "g2"}], 
  "]"}]], "Input",ExpressionUUID->"cb4dc092-ec28-4477-81b3-33ba7cb0b42f"],

Cell[TextData[{
 "Since ",
 Cell[BoxData["g1"],ExpressionUUID->"dedabe33-5287-4991-bd46-481531f8d428"],
 " and ",
 Cell[BoxData["g2"],ExpressionUUID->"f2939457-9948-462b-9d0d-f5161090cb3f"],
 " are undirected, we need to bring their edges into a sorted canonical form \
before counting them. This ensures that ",
 Cell[BoxData[
  RowBox[{"4", "\[UndirectedEdge]", "3"}]],ExpressionUUID->
  "21c3821d-39c2-46f1-855e-7766e64c7b62"],
 " and ",
 Cell[BoxData[
  RowBox[{"3", "\[UndirectedEdge]", "4"}]],ExpressionUUID->
  "6a6fcc05-17b9-4b63-aa96-05b7af315a72"],
 " are treated as the same edge."
}], "Text",ExpressionUUID->"e9c3bc5f-94c4-4baa-b3e3-97f159562107"],

Cell[BoxData[
 RowBox[{"colors1", "=", 
  RowBox[{"Counts", "[", 
   RowBox[{"Sort", "/@", 
    RowBox[{"EdgeList", "[", "g1", "]"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"0e0e170c-ad73-4fe7-ba55-ce7f36f1fa8b"],

Cell[BoxData[
 RowBox[{"colors2", "=", 
  RowBox[{"Counts", "[", 
   RowBox[{"Sort", "/@", 
    RowBox[{"EdgeList", "[", "g2", "]"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"a820114c-dce4-43cc-8a00-592540e8f541"],

Cell[BoxData[
 RowBox[{"IGVF2IsomorphicQ", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Graph", "@", 
      RowBox[{"Keys", "[", "colors1", "]"}]}], ",", 
     RowBox[{"\"\<EdgeColors\>\"", "\[Rule]", "colors1"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Graph", "@", 
      RowBox[{"Keys", "[", "colors2", "]"}]}], ",", 
     RowBox[{"\"\<EdgeColors\>\"", "\[Rule]", "colors2"}]}], "}"}]}], 
  "]"}]], "Input",ExpressionUUID->"9961eb1f-b027-4eb2-b65f-1fe067fc78af"],

Cell[TextData[{
 Cell[BoxData[
 "IGIsomorphicQ"],ExpressionUUID->"f3b01436-935b-4a4c-9358-75fc6f4ad70a"],
 " and ",
 Cell[BoxData[
 "IGSubisomorphicQ"],ExpressionUUID->"3c2d1cfb-5ba9-4eeb-b390-755eb0f3f4e5"],
 " check multigraph isomorphism in a similar way, based on edge colouring."
}], "Text",ExpressionUUID->"3849ca25-3497-4786-9380-fbe8814428d5"],

Cell[CellGroupData[{

Cell["References", \
"Subsubsubsection",ExpressionUUID->"cd5a0099-9bf7-4b67-aaf2-fedae88cf1a2"],

Cell["\<\
L. P. Cordella, P. Foggia, C. Sansone, and M. Vento, IEEE Trans. Pattern \
Anal. Mach. Intell. 26, 1367 (2004).\
\>", "Item",ExpressionUUID->"74c8fe2d-653c-453c-928f-5dfab9770aaf"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["LAD", \
"Subsection",ExpressionUUID->"d18bc4d4-7a91-4c45-8218-6e6567afa156"],

Cell[TextData[{
 ButtonBox["The LAD library",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://liris.cnrs.fr/csolnon/LAD.html"], None},
  ButtonNote->"http://liris.cnrs.fr/csolnon/LAD.html"],
 " was developed by Christine Solnon. It is capable of finding subgraphs in a \
larger graph."
}], "Text",ExpressionUUID->"dfe84fcf-b5f9-4cd8-a077-1ece9888e9c4"],

Cell["The LAD algorithm does not support multi-edges.", \
"Text",ExpressionUUID->"b1be5048-511c-4b19-9e14-846d2a45d9cd"],

Cell[BoxData[
 RowBox[{"?", 
  "IGLAD*"}]], "Input",ExpressionUUID->"a591c284-dd03-4182-a328-415ede5216ad"],

Cell[TextData[{
 "With the ",
 Cell[BoxData[
  RowBox[{"\"\<Induced\>\"", "\[Rule]", "True"}]],ExpressionUUID->
  "805011cf-5d35-40fa-a295-fa44111dfe52"],
 " option LAD will search for induced subgraphs."
}], "Text",ExpressionUUID->"7bbcc2b6-9987-4619-85d9-faaa7701a348"],

Cell[BoxData[
 RowBox[{"IGLADSubisomorphicQ", "[", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3}, {Null, {{1, 2}, {2, 3}}}]]}, 
      TagBox[
       GraphicsGroupBox[
        GraphicsComplexBox[{{0., 3.6739403974420594`*^-16}, {1., 
         2.4492935982947064`*^-16}, {2., 0.}}, {
          {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
           {Arrowheads[0.], ArrowBox[{1, 2}, 0.02261146496815286]}, 
           {Arrowheads[0.], ArrowBox[{2, 3}, 0.02261146496815286]}}, 
          {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
           DiskBox[1, 0.02261146496815286], DiskBox[2, 0.02261146496815286], 
           DiskBox[3, 0.02261146496815286]}}]],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FrameTicks->None,
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImageSize->Tiny], ",", " ", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3}, {Null, 
         SparseArray[
         Automatic, {3, 3}, 0, {
          1, {{0, 2, 4, 6}, {{2}, {3}, {1}, {3}, {1}, {2}}}, Pattern}]}, {
        GraphLayout -> "CircularEmbedding"}]]}, 
      TagBox[
       GraphicsGroupBox[
        GraphicsComplexBox[{{-0.8660254037844384, -0.4999999999999994}, {
         0.8660254037844389, -0.5000000000000012}, {1.8369701987210297`*^-16, 
         1.}}, {
          {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
           {Arrowheads[0.], ArrowBox[{1, 2}, 0.020399597244776385`]}, 
           {Arrowheads[0.], ArrowBox[{1, 3}, 0.020399597244776385`]}, 
           {Arrowheads[0.], ArrowBox[{2, 3}, 0.020399597244776385`]}}, 
          {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
           DiskBox[1, 0.020399597244776385], DiskBox[2, 0.020399597244776385],
            DiskBox[3, 0.020399597244776385]}}]],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FrameTicks->None,
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImageSize->Tiny]}], 
  "]"}]], "Input",ExpressionUUID->"36420d8d-5df0-4094-bed3-6df52943d2d2"],

Cell[BoxData[
 RowBox[{"IGLADSubisomorphicQ", "[", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3}, {Null, {{1, 2}, {2, 3}}}]]}, 
      TagBox[
       GraphicsGroupBox[
        GraphicsComplexBox[{{0., 3.6739403974420594`*^-16}, {1., 
         2.4492935982947064`*^-16}, {2., 0.}}, {
          {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
           {Arrowheads[0.], ArrowBox[{1, 2}, 0.02261146496815286]}, 
           {Arrowheads[0.], ArrowBox[{2, 3}, 0.02261146496815286]}}, 
          {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
           DiskBox[1, 0.02261146496815286], DiskBox[2, 0.02261146496815286], 
           DiskBox[3, 0.02261146496815286]}}]],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FrameTicks->None,
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImageSize->Tiny], ",", " ", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3}, {Null, 
         SparseArray[
         Automatic, {3, 3}, 0, {
          1, {{0, 2, 4, 6}, {{2}, {3}, {1}, {3}, {1}, {2}}}, Pattern}]}, {
        GraphLayout -> "CircularEmbedding"}]]}, 
      TagBox[
       GraphicsGroupBox[
        GraphicsComplexBox[{{-0.8660254037844384, -0.4999999999999994}, {
         0.8660254037844389, -0.5000000000000012}, {1.8369701987210297`*^-16, 
         1.}}, {
          {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
           {Arrowheads[0.], ArrowBox[{1, 2}, 0.020399597244776385`]}, 
           {Arrowheads[0.], ArrowBox[{1, 3}, 0.020399597244776385`]}, 
           {Arrowheads[0.], ArrowBox[{2, 3}, 0.020399597244776385`]}}, 
          {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
           DiskBox[1, 0.020399597244776385], DiskBox[2, 0.020399597244776385],
            DiskBox[3, 0.020399597244776385]}}]],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FrameTicks->None,
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImageSize->Tiny], ",", 
   RowBox[{"\"\<Induced\>\"", "\[Rule]", "True"}]}], 
  "]"}]], "Input",ExpressionUUID->"07db529c-0e0b-4471-bf8f-6d8e6bb067c9"],

Cell[BoxData[
 RowBox[{"IGLADSubisomorphicQ", "[", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3}, {Null, {{1, 2}, {2, 3}}}]]}, 
      TagBox[
       GraphicsGroupBox[
        GraphicsComplexBox[{{0., 3.6739403974420594`*^-16}, {1., 
         2.4492935982947064`*^-16}, {2., 0.}}, {
          {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
           {Arrowheads[0.], ArrowBox[{1, 2}, 0.02261146496815286]}, 
           {Arrowheads[0.], ArrowBox[{2, 3}, 0.02261146496815286]}}, 
          {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
           DiskBox[1, 0.02261146496815286], DiskBox[2, 0.02261146496815286], 
           DiskBox[3, 0.02261146496815286]}}]],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FrameTicks->None,
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImageSize->Tiny], ",", " ", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4}, {Null, 
         SparseArray[
         Automatic, {4, 4}, 0, {
          1, {{0, 3, 5, 8, 10}, {{2}, {3}, {4}, {1}, {3}, {1}, {2}, {4}, {
            3}, {1}}}, Pattern}]}, {
        GraphLayout -> "CircularEmbedding", GridLinesStyle -> Directive[
           GrayLevel[0.5, 0.4]]}]]}, 
      TagBox[
       GraphicsGroupBox[
        GraphicsComplexBox[{{-1., 1.0106430996148606`*^-15}, {
         6.049014748177263*^-16, -1.}, {
         1., -1.133107779529596*^-15}, {-7.044813998280222*^-16, 1.}}, {
          {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
           {Arrowheads[0.], ArrowBox[{1, 2}, 0.02261146496815286]}, 
           {Arrowheads[0.], ArrowBox[{1, 3}, 0.02261146496815286]}, 
           {Arrowheads[0.], ArrowBox[{1, 4}, 0.02261146496815286]}, 
           {Arrowheads[0.], ArrowBox[{2, 3}, 0.02261146496815286]}, 
           {Arrowheads[0.], ArrowBox[{3, 4}, 0.02261146496815286]}}, 
          {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
           DiskBox[1, 0.02261146496815286], DiskBox[2, 0.02261146496815286], 
           DiskBox[3, 0.02261146496815286], 
           DiskBox[4, 0.02261146496815286]}}]],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FrameTicks->None,
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImageSize->Tiny], ",", 
   RowBox[{"\"\<Induced\>\"", "\[Rule]", "True"}]}], 
  "]"}]], "Input",ExpressionUUID->"4f29e4e3-0ca2-4aaa-af9b-5806e0cf4edf"],

Cell["Highlight subgraphs in a grid graph.", \
"Text",ExpressionUUID->"71da37af-772e-46b3-871c-3e66ffa6c50c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"GridGraph", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "3"}], "}"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"HighlightGraph", "[", 
    RowBox[{"g", ",", 
     RowBox[{"Subgraph", "[", 
      RowBox[{"g", ",", "#"}], "]"}], ",", 
     RowBox[{"GraphHighlightStyle", "\[Rule]", "\"\<Thick\>\""}]}], "]"}], 
   "&"}], "/@", 
  RowBox[{"Union", "[", 
   RowBox[{
    RowBox[{"Sort", "@*", "Values"}], "/@", 
    RowBox[{"IGLADFindSubisomorphisms", "[", 
     RowBox[{
      RowBox[{"GridGraph", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "2"}], "}"}], "]"}], ",", "g"}], "]"}]}], 
   "]"}]}]}], "Input",ExpressionUUID->"a9720685-1deb-457d-ba30-88cd3e825c3e"],

Cell["\<\
Count how many times each vertex of a graph appears at the apex of the \
following subgraph (motif):\
\>", "Text",ExpressionUUID->"d9635d25-b9cf-4b65-a1fd-6cecc900e6f2"],

Cell[TextData[Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{2, 1, 3}, {{{1, 2}, {2, 1}, {2, 3}, {3, 2}}, Null}, {
      PerformanceGoal -> "Quality", PlotTheme -> "DarkColor", 
       VertexCoordinates -> {{Rational[1, 2] 3^Rational[1, 2], 
          Rational[-1, 2]}, {0, 1}, {Rational[-1, 2] 3^Rational[1, 2], 
          Rational[-1, 2]}}, VertexLabels -> {None}, VertexSize -> {0.15}}]], 
    Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
       Arrowheads[Medium], 
       RGBColor[0.365248, 0.427802, 0.758297], 
       ArrowBox[
        BezierCurveBox[{
          DynamicLocation["VertexID$1", Automatic, Center], {
          0.18635158111754768`, 0.10759013552212691`}, 
          DynamicLocation["VertexID$2", Automatic, Center]}]], 
       ArrowBox[
        BezierCurveBox[{
          DynamicLocation["VertexID$2", Automatic, Center], {
          0.679673822666892, 0.3924098644779406}, 
          DynamicLocation["VertexID$1", Automatic, Center]}]], 
       ArrowBox[
        BezierCurveBox[{
          DynamicLocation[
          "VertexID$2", Automatic, Center], {-0.18635158111754604`, 
          0.10759013552211057`}, 
          DynamicLocation["VertexID$3", Automatic, Center]}]], 
       ArrowBox[
        BezierCurveBox[{
          DynamicLocation[
          "VertexID$3", Automatic, Center], {-0.6796738226668945, 
          0.39240986447788667`}, 
          DynamicLocation["VertexID$2", Automatic, Center]}]]}, {
       Directive[
        RGBColor[0.9, 0.36, 0.054], 
        EdgeForm[
         RGBColor[0.9, 0.36, 0.054]]], 
       TagBox[
        DiskBox[{0.8660254037844386, -0.5}, 0.12990381056766578`], 
        "DynamicName", BoxID -> "VertexID$1"], 
       TagBox[
        DiskBox[{0., 1.}, 0.12990381056766578`], "DynamicName", BoxID -> 
        "VertexID$2"], 
       TagBox[
        DiskBox[{-0.8660254037844386, -0.5}, 0.12990381056766578`], 
        "DynamicName", BoxID -> "VertexID$3"]}}], $CellContext`flag}, 
    TagBox[
     DynamicBox[GraphComputation`NetworkGraphicsBox[
      3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
      CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
       SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
      ImageSizeCache->{{0.31984374999999865`, 
       65.67234375000002}, {-31.732950000000006`, 26.239005994133603`}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False,
    UnsavedVariables:>{$CellContext`flag}]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None,
  ImageSize->{66.9921875, Automatic}]],
 CellChangeTimes->{{3.725366687066119*^9, 3.7253667128258047`*^9}, {
  3.7253668263607273`*^9, 
  3.725366873438944*^9}},ExpressionUUID->"eb66cad2-f27f-4df0-973a-\
e6eb9091f412"]], \
"Text",ExpressionUUID->"277e4b53-548c-451b-a804-fe4cac3214d4"],

Cell["Generate a directed random graph to do the counting in.", \
"Text",ExpressionUUID->"220393dc-b875-4171-8f89-697f08f5f73c"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"RandomGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"20", ",", "120"}], "}"}], ",", 
    RowBox[{"DirectedEdges", "\[Rule]", "True"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"473a7d4b-c1e1-49e8-8cb6-7f750b6e920b"],

Cell[TextData[{
 Cell[BoxData[
 "IGShorthand"],ExpressionUUID->"d5cf5bc0-1abf-4f02-bb9c-6c32400c0c6c"],
 " provides a concise way to input this subgraph."
}], "Text",ExpressionUUID->"673a0a99-2757-49d7-af4c-cebe0b995a09"],

Cell[BoxData[
 RowBox[{"motif", "=", 
  RowBox[{
  "IGShorthand", "[", "\"\<2<->1<->3\>\"", 
   "]"}]}]], "Input",ExpressionUUID->"df1eb780-a762-4625-9266-2b5c9537fe5e"],

Cell["\<\
This motif has a two-fold symmetry, as revealed by its automorphism group. We \
divide the final counts by two.\
\>", "Text",ExpressionUUID->"a0fac0e1-2c87-4ce8-b559-fe1ae04fbb30"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Counts", "@", 
   RowBox[{"Lookup", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"IGLADFindSubisomorphisms", "[", 
      RowBox[{"motif", ",", "g", ",", 
       RowBox[{"\"\<Induced\>\"", "\[Rule]", "True"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "1"}], "\[IndentingNewLine]", "]"}]}], "/", 
  RowBox[{
  "IGBlissAutomorphismCount", "[", "motif", 
   "]"}]}]], "Input",ExpressionUUID->"8550011c-07da-4265-b945-17edca50c7a7"],

Cell["Check that a graph is claw-free.", \
"Text",ExpressionUUID->"ca4147db-aade-4b75-8dd7-2d1912e541dc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"clawFreeQ", "[", 
   RowBox[{"graph_", "?", "UndirectedGraphQ"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Not", "@", 
   RowBox[{"IGLADSubisomorphicQ", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"StarGraph", "[", "4", "]"}], ",", " ", 
     RowBox[{"(*", " ", 
      RowBox[{"claw", " ", "graph"}], " ", "*)"}], "\[IndentingNewLine]", 
     "graph", ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<Induced\>\"", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
    "]"}]}]}]], \
"Input",ExpressionUUID->"ac57926f-4c59-4702-b886-111e8bcab47f"],

Cell[BoxData[
 RowBox[{"clawFreeQ", "/@", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"GraphData", "[", "\"\<DodecahedralGraph\>\"", "]"}], ",", 
    RowBox[{"GraphData", "[", "\"\<TruncatedPrismGraph\>\"", "]"}]}], 
   "}"}]}]], "Input",ExpressionUUID->"3c6a7e94-32bc-44e2-93e5-9fb14953c312"],

Cell[CellGroupData[{

Cell["References", \
"Subsubsubsection",ExpressionUUID->"6060ce8b-9646-4a14-84e5-2888bc8910f7"],

Cell[TextData[{
 "Christine Solnon, ",
 StyleBox["AllDifferent",
  FontSlant->"Italic"],
 "-based filtering for subgraph isomorphism, Artificial Intelligence 174 \
(2010), ",
 ButtonBox["doi:10.1016/j.artint.2010.05.002",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://doi.org/10.1016/j.artint.2010.05.002"], None},
  ButtonNote->"https://doi.org/10.1016/j.artint.2010.05.002"]
}], "Item",ExpressionUUID->"e556413d-09f9-472d-9400-7d2df212e521"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Isomorphism of coloured graphs", \
"Subsection",ExpressionUUID->"f045b34b-b47c-4ce1-81ea-e185ec5f49bd"],

Cell[TextData[{
 "All three included isomorphism algorithms support vertex coloured graphs, \
and VF2 supports edge coloured graphs as well. A coloured graph is specified \
as ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"g", ",", " ", 
    RowBox[{"\"\<VertexColors\>\"", "\[Rule]", "\[Ellipsis]"}], ",", 
    RowBox[{"\"\<EdgeColors\>\"", "\[Rule]", "\[Ellipsis]"}]}], "}"}]],
  ExpressionUUID->"487d76bd-268b-4deb-8373-89b469aaa82c"],
 ", where both vertex and edge colour specifications are optional. Colours \
are represented by integers and may be specified in one of the following ways:"
}], "Text",ExpressionUUID->"8d2f7ece-aafa-4c36-9e55-d54975664655"],

Cell[CellGroupData[{

Cell[TextData[{
 "A list of integers, given in the same order as ",
 Cell[BoxData[
  RowBox[{"VertexList", "[", "g", "]"}]],ExpressionUUID->
  "5ba7c10c-692f-42f2-9a7e-654014883d15"],
 " (or ",
 Cell[BoxData[
  RowBox[{"EdgeList", "[", "g", "]"}]],ExpressionUUID->
  "38b9af16-6773-4fd8-8f0f-065f9c64f96e"],
 " if specifying edge colours)."
}], "Item",ExpressionUUID->"89b9a3f0-9f95-4254-87c5-f9bfbb7254e3"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Graph", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"a", ",", "b"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"a", "\[UndirectedEdge]", "b"}], "}"}]}], "]"}], ",", 
    RowBox[{"\"\<VertexColors\>\"", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}]}]}], "}"}]],ExpressionUUID->
  "885815b2-984a-49f7-81cd-2d8ddae7a8cb"],
 "."
}], "ItemParagraph",ExpressionUUID->"6e969ba4-2017-4e20-9a81-6d239ddbdefe"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "An association assigning integers to vertices (or edges). Vertices (or \
edges) not present in the association are assumed to have colour ",
 Cell[BoxData["0"],ExpressionUUID->"18d521a0-f7b4-4798-a6b6-6ec3648a4af8"],
 "."
}], "Item",ExpressionUUID->"da4377a7-fecc-4754-9413-83e5fac99862"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Graph", "[", 
     RowBox[{"{", 
      RowBox[{"a", "\[UndirectedEdge]", "b"}], "}"}], "]"}], ",", 
    RowBox[{"\"\<VertexColors\>\"", "\[Rule]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"a", "\[Rule]", "1"}], ",", 
       RowBox[{"b", "\[Rule]", "2"}]}], "\[RightAssociation]"}]}]}], "}"}]],
  ExpressionUUID->"1723233b-aa4a-4287-bacc-e45d43e0a7d4"],
 "."
}], "ItemParagraph",ExpressionUUID->"53758c03-b1c3-42a1-b4c5-cb181ea7fc78"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "The name of a a vertex (or edge) property. Vertices (or edges) without an \
assigned property value are assumed to have colour ",
 Cell[BoxData["0"],ExpressionUUID->"099280b7-fb7d-4d47-b031-0c8eede50383"],
 ". "
}], "Item",ExpressionUUID->"5d49306c-b381-4367-b6eb-168ef0a10c2e"],

Cell[TextData[Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Graph", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Property", "[", 
        RowBox[{"a", ",", 
         RowBox[{"\"\<color\>\"", "\[Rule]", "1"}]}], "]"}], ",", 
       RowBox[{"Property", "[", 
        RowBox[{"b", ",", 
         RowBox[{"\"\<color\>\"", "\[Rule]", "2"}]}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", "\[UndirectedEdge]", "b"}], "}"}]}], "]"}], ",", 
   RowBox[{"\"\<VertexColors\>\"", "\[Rule]", "\"\<color\>\""}]}], 
  "}"}]],ExpressionUUID->"25424014-2071-4399-a02f-55f067c6f62b"]], \
"ItemParagraph",ExpressionUUID->"08227a3e-0a35-45a4-a1d6-529aab0d85ff"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<VertexColors\>\"", "\[Rule]", "None"}]],ExpressionUUID->
  "6f7d6488-7364-436f-93ed-1e7da5037694"],
 " indicates no colouring."
}], "Item",ExpressionUUID->"392e1681-4d96-45f7-b3e7-dbee51ccd029"],

Cell[TextData[{
 StyleBox["Example.",
  FontWeight->"Bold"],
 " Define a graph along with the colours of its vertices."
}], "Text",ExpressionUUID->"83022294-78e8-45e0-b8e9-df3a2e22acef"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"CycleGraph", "[", "4", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"vcols", "=", 
   RowBox[{"\[LeftAssociation]", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "1"}], ",", 
     RowBox[{"2", "\[Rule]", "1"}], ",", "\[IndentingNewLine]", 
     RowBox[{"3", "\[Rule]", "2"}], ",", 
     RowBox[{"4", "\[Rule]", "2"}]}], "\[IndentingNewLine]", 
    "\[RightAssociation]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"5d0f53c5-234b-4f47-8166-f86ab246c6da"],

Cell["Visualize it.", \
"Text",ExpressionUUID->"84c1b297-7c48-4b39-94ad-af426cc7bbce"],

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{"g", ",", "\[IndentingNewLine]", 
   RowBox[{"VertexStyle", "\[Rule]", 
    RowBox[{"Normal", "[", 
     RowBox[{
      RowBox[{"ColorData", "[", "24", "]"}], "/@", "vcols"}], "]"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"VertexSize", "\[Rule]", "Medium"}], ",", 
   RowBox[{"VertexLabels", "\[Rule]", 
    RowBox[{"Placed", "[", 
     RowBox[{"\"\<Name\>\"", ",", "Center"}], "]"}]}]}], 
  "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"7217ab43-2f4d-4333-86a3-3f9f104bbd38"],

Cell["\<\
Compute its automorphism group, taking vertex colours into account.\
\>", "Text",ExpressionUUID->"bbe3852e-ebfb-4a45-a5bb-50018ed40dcc"],

Cell[BoxData[
 RowBox[{"IGBlissAutomorphismGroup", "[", 
  RowBox[{"{", 
   RowBox[{"g", ",", 
    RowBox[{"\"\<VertexColors\>\"", "\[Rule]", "vcols"}]}], "}"}], 
  "]"}]], "Input",ExpressionUUID->"d64cd80d-fa49-4e11-99ac-0026cd505b66"]
}, Closed]],

Cell[CellGroupData[{

Cell["Properties related to the automorphism group", \
"Subsection",ExpressionUUID->"79711ed1-25f1-4dd1-bee5-9d2754ff54e0"],

Cell["\<\
The functions in this section test for properties related to a graph\
\[CloseCurlyQuote]s automorphism group. The summary table below illustrates \
the functions on a set of graphs which all have different properties.\
\>", "Text",ExpressionUUID->"8dfcc2eb-574b-452c-a23a-f71ce9dbc536"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"graphs", "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"StarGraph", "[", "4", "]"}], ",", 
      RowBox[{"IGSquareLattice", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "3"}], "}"}], ",", 
        RowBox[{"\"\<Periodic\>\"", "\[Rule]", "True"}]}], "]"}], ",", 
      RowBox[{"HypercubeGraph", "[", "3", "]"}], ",", 
      RowBox[{"GraphData", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<Rook\>\"", ",", " ", 
         RowBox[{"{", 
          RowBox[{"4", ",", " ", "4"}], "}"}]}], "}"}], "]"}], ",", 
      RowBox[{"GraphData", "[", "\"\<ShrikhandeGraph\>\"", "]"}], ",", 
      RowBox[{"GraphData", "[", "\"\<HoltGraph\>\"", "]"}], ",", 
      RowBox[{"GraphData", "[", "\"\<Tutte12Cage\>\"", "]"}], ",", 
      RowBox[{"GraphData", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<Paulus\>\"", ",", 
         RowBox[{"{", 
          RowBox[{"25", ",", "1"}], "}"}]}], "}"}], "]"}]}], "}"}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"functions", "=", 
    RowBox[{"\[LeftAssociation]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\"\<regular\>\"", "->", "IGRegularQ"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<strongly regular\>\"", "->", "IGStronglyRegularQ"}], ",", 
      RowBox[{"\"\<distance regular\>\"", "->", "IGDistanceRegularQ"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<vertex transitive\>\"", "->", "IGVertexTransitiveQ"}], ",",
       "\[IndentingNewLine]", 
      RowBox[{"\"\<edge transitive\>\"", "->", "IGEdgeTransitiveQ"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<arc transitive\>\"", "->", 
       RowBox[{"IGEdgeTransitiveQ", "@*", "DirectedGraph"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
      "\"\<distance transitive\>\"", "->", "IGDistanceTransitiveQ"}]}], 
     "\[IndentingNewLine]", "\[RightAssociation]"}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TableForm", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Through", "[", 
       RowBox[{
        RowBox[{"Values", "[", "functions", "]"}], "[", "#", "]"}], "]"}], 
      "&"}], "/@", "graphs"}], ",", "\[IndentingNewLine]", 
    RowBox[{"TableHeadings", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Show", "[", 
          RowBox[{"#", ",", 
           RowBox[{"ImageSize", "\[Rule]", "50"}]}], "]"}], "&"}], "/@", 
        "graphs"}], ",", 
       RowBox[{"Keys", "[", "functions", "]"}]}], "}"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"TableDirections", "\[Rule]", "Row"}]}], "\[IndentingNewLine]", 
   "]"}], "//", 
  RowBox[{
   RowBox[{"Style", "[", 
    RowBox[{"#", ",", "\"\<Text\>\""}], "]"}], 
   "&"}]}]}], "Input",ExpressionUUID->"a4eb5acb-e644-486d-9187-6864618eac5e"],

Cell[CellGroupData[{

Cell["IGRegularQ", \
"Subsubsection",ExpressionUUID->"56ec5293-951c-462e-8510-8c10cae905e3"],

Cell[BoxData[
 RowBox[{"?", 
  "IGRegularQ"}]], \
"Input",ExpressionUUID->"d6c64495-df91-47e4-8a7b-bcd1e0b26db5"],

Cell[TextData[{
 Cell[BoxData[
 "IGRegularQ"],ExpressionUUID->"0a1c4b3e-3e7c-4496-9ff8-4484c6112019"],
 " checks if a graph is regular. All vertices of a regular graph have the \
same degrees. In regular directed graphs, the in- and out-degrees are also \
equal to each other."
}], "Text",ExpressionUUID->"dcdceb65-ee8b-4e0d-9754-c1a54fc79316"],

Cell[BoxData[
 RowBox[{"IGRegularQ", "[", 
  RowBox[{"IGSquareLattice", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", ",", "4"}], "}"}], ",", 
    RowBox[{"\"\<Periodic\>\"", "\[Rule]", "True"}]}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"02d681f8-0adf-45ed-b4d8-82fb90e26bba"],

Cell[TextData[{
 "Check if a graph is ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "c39d4e88-ad89-4a83-8b04-4594a2c84499"],
 "-regular for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", "=", "2"}], TraditionalForm]],ExpressionUUID->
  "e6d8d359-2833-4992-9143-dec6d25d222a"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", "=", "3"}], TraditionalForm]],ExpressionUUID->
  "b84a1958-a8e4-4ec2-9fa1-bc809fb381d5"],
 "."
}], "Text",ExpressionUUID->"3ecaf6dc-9cdb-44cb-a785-02d7a1cbdb96"],

Cell[BoxData[
 RowBox[{"IGRegularQ", "[", 
  RowBox[{
   RowBox[{"CycleGraph", "[", "10", "]"}], ",", "2"}], 
  "]"}]], "Input",ExpressionUUID->"2aea3b02-0815-4c44-aef3-18c94c63e3fd"],

Cell[BoxData[
 RowBox[{"IGRegularQ", "[", 
  RowBox[{
   RowBox[{"CycleGraph", "[", "10", "]"}], ",", "3"}], 
  "]"}]], "Input",ExpressionUUID->"8b50a2ca-0fb0-42f5-8b17-1c9650d02886"],

Cell["The null graph is considered 0-regular.", \
"Text",ExpressionUUID->"a6241a17-dfbb-47c8-9e33-4857e01ef2a9"],

Cell[BoxData[
 RowBox[{"IGRegularQ", "[", 
  RowBox[{"IGEmptyGraph", "[", "]"}], 
  "]"}]], "Input",ExpressionUUID->"02ea951a-b6b5-4485-b408-298d40bbfb3b"],

Cell["Check if a directed graph is regular.", \
"Text",ExpressionUUID->"54bfa9cd-dec1-4447-a92d-8b67c70796e1"],

Cell[BoxData[
 RowBox[{"IGRegularQ", "[", 
  RowBox[{"CycleGraph", "[", 
   RowBox[{"5", ",", 
    RowBox[{"DirectedEdges", "\[Rule]", "True"}]}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"f885fb2f-1cfe-4565-a60c-1b3c6218f180"],

Cell[TextData[{
 Cell[BoxData[
 "IGRegularQ"],ExpressionUUID->"ae76b1b9-7fab-43b6-8c32-42b481d7acb2"],
 " considers self-loops and multi-edges when computing vertex degrees."
}], "Text",ExpressionUUID->"24a919f7-3a07-4fb2-aeff-b9aed34b6a25"],

Cell[BoxData[
 RowBox[{"IGRegularQ", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3, 4}, {
       Null, {{1, 1}, {1, 2}, {2, 3}, {3, 4}, {4, 4}, {2, 3}}}, {
       VertexLabels -> {None}, VertexSize -> {Medium}}]]}, 
     TagBox[GraphicsGroupBox[GraphicsComplexBox[CompressedData["
1:eJw9lAtIk1EUx4dY29TS1NIsfLQoQoiVIqbD8wWFJZamPZeYSU8qsqyMkLI0
e1gqaGVk5KuSHs4ZPrLytNTcaDUpyrSXD0rzETrNjE1Nd8/tgzEO995z/r/D
+R+v2IMRO61EIlHExG/yn3/S+GZU2b9UsKgfxFHOPgvuaCgWCSxWUywR/j9s
VPakejugvCF4aeTMOMzcsuj0yp+pKH4XeepmZxnmtssMxwJv47w/j0JaijTo
XHcjO+tOBdZ0ua3I2afFxQHmXatFtYh9KcEditfo3DtFClWv8N6B9Odvyg1o
p4opnbHjLX6efl1xtdCAocUpz/urP2DIko1tKvFr7DIVG/PPtaCpcmxviYsW
63amd3okfsHZyxOcfvtrsOxWYvXTrd9QHzC2x3tAjUx0K57vPPa3u6VWwc9l
gZZzqKf3y9l74PllVZb8sIbqx7P6wPVNtbfoAxfS/57pBznxdTM+cCX+bsYP
edSftaw/EEf9C2P9A97fcr2lvxA3HH0ip3QAwrXKhY59BRB7xMOrw90ISQnV
DU3b74K3Y9732vSJ+KGsJ9f7Phzw8bs4Mm6EvDMNsbJVJTAeZRIHHR6ELt9U
nU5ZCsEPEivCvw/C8cwd9UHL1PBtSBffu3kIGpUZv3pr1GDQT35D4BBR5X62
Rw2+PpOfCSQUz7f1u+R01wRauv8sMnm1ys0McZTPutB6RHPZDK1U75ped1Qs
GoUk0tPct81NcWgUYkhvflrr17ltEzHxZEvzz+4OGwM58XL+xgZLjJxfxO4j
5xexfMj5PVk95PzFTA9yfn+mFzl/JuNBzt+4zsKLnP8jxZw/h+5zfoHycf5S
qsf5uR7Oz/Vyfs7D+TlvxYdpmzwn/DeoY/NgGZdZEsGH5uVihuJT33qJEEDz
5Pm1KNe3XCI00bwV1B68ai2XCi00j5rozP7kJ1JBS/PaNtPO70yojTDK/AbS
Kw6u0U02wn6a90SPDUFD4baCJ/mhSj9gTlbZCkB+Gc4Ku5bQYyvMIT8xv9kJ
Vi71ly7srVPwc+7Hx/Tejfx6kvKPkZ9tqH44+b2d9P2gffCC9FfSvigiPgPt
Ey/if0X7Jo3640f7SEn9k9G+4v01sv7iP7oAjuY=
        "], {
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
          {Arrowheads[0.], 
           ArrowBox[BezierCurveBox[{1, 8, 11, 13, 19, 21, 24, 1},
            SplineDegree->7], 0.1]}, 
          {Arrowheads[0.], ArrowBox[{1, 2}, 0.1]}, 
          {Arrowheads[0.], 
           ArrowBox[BezierCurveBox[{
            2, {1.4999999999999978`, 0.16444074718311635`}, 3}], 0.1]}, 
          {Arrowheads[0.], 
           ArrowBox[BezierCurveBox[{
            2, {1.499999999999998, -0.16444074718311566`}, 3}], 0.1]}, 
          {Arrowheads[0.], ArrowBox[{3, 4}, 0.1]}, 
          {Arrowheads[0.], 
           ArrowBox[BezierCurveBox[{4, 63, 66, 68, 74, 76, 79, 4},
            SplineDegree->7], 0.1]}}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          DiskBox[1, 0.1], DiskBox[2, 0.1], DiskBox[3, 0.1], 
          DiskBox[4, 0.1]}}]],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None,
   ImageSize->{161.3671875, Automatic}], 
  "]"}]], "Input",ExpressionUUID->"ab0d4b21-be06-43cc-954a-c09c63bb9173"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGStronglyRegularQ", \
"Subsubsection",ExpressionUUID->"87927757-b176-4ebf-a862-fab030f1a9cc"],

Cell[BoxData[
 RowBox[{"?", 
  "IGStronglyRegularQ"}]], \
"Input",ExpressionUUID->"9e3f0714-176a-4a57-97ed-56f1c5f79707"],

Cell[TextData[{
 Cell[BoxData[
 "IGStronglyRegularQ"],ExpressionUUID->"7baa65e6-106d-42e9-b652-25dc2b701cfa"],
 " checks if a graph is strongly regular. A strongly regular graph is a \
regular graph where each pair of connected vertices have the same number of \
common neighbours, ",
 Cell[BoxData[
  FormBox["\[Lambda]", TraditionalForm]],ExpressionUUID->
  "eb220c5b-ff03-49d1-9bf4-2089bad650e5"],
 ", and each pair of unconnected vertices also have the same number of common \
neighbours, ",
 Cell[BoxData[
  FormBox["\[Mu]", TraditionalForm]],ExpressionUUID->
  "fd527f5a-39b1-409f-ab7b-1de199044870"],
 "."
}], "Text",ExpressionUUID->"cfdf25ff-41f4-48d0-afff-ce035d4313ce"],

Cell[BoxData[
 RowBox[{"IGStronglyRegularQ", "@", 
  RowBox[{
  "GraphData", "[", "\"\<ShrikhandeGraph\>\"", 
   "]"}]}]], "Input",ExpressionUUID->"720656d7-8c7b-4581-bb8b-a1a81c4913a8"],

Cell["\<\
Hypercube graphs and 3 and higher dimensions are not strongly regular, even \
though they are regular.\
\>", "Text",ExpressionUUID->"e12c6012-1e15-4007-9f06-21a619118b12"],

Cell[BoxData[
 RowBox[{"IGStronglyRegularQ", "/@", 
  RowBox[{"HypercubeGraph", "/@", 
   RowBox[{"Range", "[", 
    RowBox[{"2", ",", "4"}], 
    "]"}]}]}]], \
"Input",ExpressionUUID->"e28d6fbd-a933-4bfa-89e0-1c80f5fff3a3"],

Cell[TextData[{
 "Some authors exclude empty and complete graph from the definition, as they \
satisfy these conditions trivially. ",
 Cell[BoxData[
 "IGStronglyRegularQ"],ExpressionUUID->"968e9eea-8661-4087-9bad-f0522de1b8f2"],
 " returns ",
 Cell[BoxData[
 "True"],ExpressionUUID->"df8eee7b-1e1a-4954-a314-51435c975471"],
 " for these."
}], "Text",ExpressionUUID->"61459f5d-a05c-4a70-9f3c-30b1d9f6fa06"],

Cell[BoxData[
 RowBox[{"IGStronglyRegularQ", "/@", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"IGEmptyGraph", "[", "5", "]"}], ",", 
    RowBox[{"IGCompleteGraph", "[", "6", "]"}]}], 
   "}"}]}]], "Input",ExpressionUUID->"9e865d20-7734-47b3-87a2-9b8fedece1cc"],

Cell[TextData[{
 "It also returns ",
 Cell[BoxData[
 "True"],ExpressionUUID->"a590ca20-cb3f-4c79-b50b-56b2698dcf23"],
 " for graphs on 0, 1 and 2 vertices."
}], "Text",ExpressionUUID->"4c8e2601-85a5-465e-8eeb-31b520e045e1"],

Cell[BoxData[
 RowBox[{"IGStronglyRegularQ", "/@", 
  RowBox[{"IGCompleteGraph", "/@", 
   RowBox[{"Range", "[", 
    RowBox[{"0", ",", "2"}], 
    "]"}]}]}]], \
"Input",ExpressionUUID->"7abcfa35-7b66-432c-aae6-30e0d0c4acfe"],

Cell[TextData[{
 "Currently, ",
 Cell[BoxData[
 "IGStronglyRegularQ"],ExpressionUUID->"516c2af9-c973-4308-bfd7-2800a4790629"],
 " does not support directed graphs."
}], "Text",ExpressionUUID->"9b680e4b-90a5-4629-968e-75fb2fd4da58"],

Cell[BoxData[
 RowBox[{"IGStronglyRegularQ", "@", 
  RowBox[{"Graph", "[", 
   RowBox[{"{", 
    RowBox[{"1", "\[Rule]", "2"}], "}"}], 
   "]"}]}]], "Input",ExpressionUUID->"f509743d-06a1-44dd-81ec-984e077cfa70"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGStronglyRegularParameters", \
"Subsubsection",ExpressionUUID->"5aa54045-91c8-4831-ba32-08ad699ee008"],

Cell[BoxData[
 RowBox[{"?", 
  "IGStronglyRegularParameters"}]], \
"Input",ExpressionUUID->"a7263e5b-2f33-42d2-9c39-ad3adc177664"],

Cell[TextData[{
 Cell[BoxData[
 "IGStronglyRegularParameters"],ExpressionUUID->
  "b615533b-4f37-46ab-bc3f-b3601cacdad1"],
 " returns the parameters ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"v", ",", "k", ",", "\[Lambda]", ",", "\[Mu]"}], ")"}], 
   TraditionalForm]],ExpressionUUID->"48bfbaaf-43f0-4b59-b9dd-a157d02b9d05"],
 " of a strongly regular graph. ",
 Cell[BoxData[
  FormBox["v", TraditionalForm]],ExpressionUUID->
  "d553e53f-4857-4c32-b48e-c9834af293ee"],
 " is the number of vertices, ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "8bedf54e-0e72-4735-ba33-1cc947c8f145"],
 " the degree of the vertices, ",
 Cell[BoxData[
  FormBox["\[Lambda]", TraditionalForm]],ExpressionUUID->
  "ecd45033-e58f-473d-879e-84b7bf8ef520"],
 " the number of common neighbours of connected vertices and ",
 Cell[BoxData[
  FormBox["\[Mu]", TraditionalForm]],ExpressionUUID->
  "4ddcab4f-255c-49c7-93bc-bb7b37d5be9e"],
 " the number of common neighbours of unconnected vertices."
}], "Text",ExpressionUUID->"8bf7a838-1464-4f17-a880-eaf736c36fd7"],

Cell[BoxData[
 RowBox[{"IGStronglyRegularParameters", "[", 
  RowBox[{"PetersenGraph", "[", "]"}], 
  "]"}]], "Input",ExpressionUUID->"9b0a10b3-e0d6-47ae-806c-6ad4752d15a5"],

Cell[BoxData[
 RowBox[{"IGStronglyRegularParameters", "[", 
  RowBox[{"CycleGraph", "[", "5", "]"}], 
  "]"}]], "Input",ExpressionUUID->"f6853393-e422-45bf-b684-7b440e9ec821"],

Cell[TextData[{
 "The parameters of a strongly regular graph satisfy the equation ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"v", "-", "k", "-", "1"}], ")"}], "\[Mu]"}], "=", 
    RowBox[{"k", "(", 
     RowBox[{"k", "-", "\[Lambda]", "-", "1"}], ")"}]}], TraditionalForm]],
  ExpressionUUID->"2b33e06b-0e8b-4865-85c8-0ec7bfdeea6d"],
 "."
}], "Text",ExpressionUUID->"96f53f21-b16d-4b6b-a664-9d654d624670"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"v", ",", "k", ",", "lambda", ",", "mu"}], "}"}], "=", 
  RowBox[{"IGStronglyRegularParameters", "[", 
   RowBox[{"GraphData", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<Paley\>\"", ",", " ", "101"}], "}"}], "]"}], 
   "]"}]}]], "Input",ExpressionUUID->"656dd858-818b-4c75-8a10-4f3cde372c23"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{"v", "-", "k", "-", "1"}], ")"}], "mu"}], "\[Equal]", 
  RowBox[{"k", 
   RowBox[{"(", 
    RowBox[{"k", "-", "lambda", "-", "1"}], 
    ")"}]}]}]], \
"Input",ExpressionUUID->"845e9440-10c2-46b4-8191-2ce95c6b4ace"],

Cell[TextData[{
 Cell[BoxData[
  FormBox["\[Lambda]", TraditionalForm]],ExpressionUUID->
  "9d3b4503-e08b-4017-a6b6-b06d398098bf"],
 " and ",
 Cell[BoxData[
  FormBox["\[Mu]", TraditionalForm]],ExpressionUUID->
  "adbce137-f72c-4921-a89c-d47a19d76a4b"],
 " are not well-defined for empty and complete graphs, respectively. In these \
cases, 0 is returned."
}], "Text",ExpressionUUID->"2154f973-1d51-4ddc-ab27-c5e84675bc09"],

Cell[BoxData[
 RowBox[{"IGStronglyRegularParameters", "/@", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"IGEmptyGraph", "[", "5", "]"}], ",", 
    RowBox[{"IGCompleteGraph", "[", "6", "]"}]}], 
   "}"}]}]], "Input",ExpressionUUID->"519777a1-dc16-489b-a2c0-d9a06ee96d6c"],

Cell[TextData[{
 "For non-strongly-regular graphs, ",
 Cell[BoxData[
  RowBox[{"{", "}"}]],ExpressionUUID->
  "dff1f0af-0696-4f4b-bd06-217e63118334"],
 " is returned."
}], "Text",ExpressionUUID->"dcbfce58-3309-4761-92cf-896a2b9b1f56"],

Cell[BoxData[
 RowBox[{"IGStronglyRegularParameters", "[", 
  RowBox[{"HypercubeGraph", "[", "3", "]"}], 
  "]"}]], "Input",ExpressionUUID->"7847b97d-13f0-4367-b40a-dbe79622f2e7"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGDistanceRegularQ", \
"Subsubsection",ExpressionUUID->"9e64cbd3-789e-417e-9264-a406375a69ea"],

Cell[BoxData[
 RowBox[{"?", 
  "IGDistanceRegularQ"}]], \
"Input",ExpressionUUID->"7967bf57-4a54-48a3-bbbb-d077a500f26d"],

Cell[TextData[{
 Cell[BoxData[
 "IGDistanceRegularGraph"],ExpressionUUID->
  "ec590a9a-5aea-47d5-aa9e-5301cb7e3909"],
 " checks if a graph is distance regular."
}], "Text",ExpressionUUID->"07086f5f-fd8c-453a-a2af-6349840e5fad"],

Cell[BoxData[
 RowBox[{"IGDistanceRegularQ", "@", 
  RowBox[{
  "HypercubeGraph", "[", "5", 
   "]"}]}]], "Input",ExpressionUUID->"2e51fd75-47ad-4664-80f6-250ef707ace4"],

Cell[BoxData[
 RowBox[{"IGDistanceRegularQ", "@", 
  RowBox[{"IGSquareLattice", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "5"}], "}"}], ",", 
    RowBox[{"\"\<Periodic\>\"", "\[Rule]", "True"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"d2cf8b16-27d3-4afe-98c5-b2842104b828"],

Cell["\<\
A distance regular graph with a diameter of 2 is also strongly regular.\
\>", "Text",ExpressionUUID->"fd00d508-9a4c-4a2e-9b9e-852ceeb0cfaf"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"GraphData", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<Paley\>\"", ",", "13"}], "}"}], 
   "]"}]}]], "Input",ExpressionUUID->"e4be943e-842d-439f-8f25-18c5ee0ce2b3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"IGDiameter", "[", "g", "]"}], ",", 
   RowBox[{"IGDistanceRegularQ", "[", "g", "]"}], ",", 
   RowBox[{"IGStronglyRegularQ", "[", "g", "]"}]}], 
  "}"}]], "Input",ExpressionUUID->"d5be6808-9fdc-4457-8e79-970d4109c9d7"],

Cell["\<\
The Shrikhande graph is the smallest graph that is distance regular, but not \
distance transitive.\
\>", "Text",ExpressionUUID->"2a2d5da7-c06e-4ee5-b154-0f433d767ead"],

Cell[BoxData[
 RowBox[{"Through", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"IGDistanceRegularQ", ",", "IGDistanceTransitiveQ"}], "}"}], "[", 
   
   RowBox[{"GraphData", "[", "\"\<ShrikhandeGraph\>\"", "]"}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"66d82a1f-bba6-440d-a914-3a5ca1cd1cbf"],

Cell["\<\
A disconnected graph is distance regular if its components are distance \
regular and they are co-spectral. The following graphs are co-spectral:\
\>", "Text",ExpressionUUID->"4642e274-9e40-4f79-8f99-bb7c29e49421"],

Cell[BoxData[
 RowBox[{"components", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"GraphData", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<Rook\>\"", ",", " ", 
       RowBox[{"{", 
        RowBox[{"4", ",", " ", "4"}], "}"}]}], "}"}], "]"}], ",", 
    RowBox[{"GraphData", "[", "\"\<ShrikhandeGraph\>\"", "]"}]}], 
   "}"}]}]], "Input",ExpressionUUID->"ddc73ac3-90b9-40e2-afcd-da357c62c10e"],

Cell[BoxData[
 RowBox[{"Eigenvalues", "/@", 
  RowBox[{
  "AdjacencyMatrix", "/@", 
   "components"}]}]], \
"Input",ExpressionUUID->"29f2f219-95dc-4921-bf8e-c09be20afee7"],

Cell["\<\
They are both distance regular with the same intersection array.\
\>", "Text",ExpressionUUID->"64d0a8a2-546a-4c9d-86f6-0641f56641cd"],

Cell[BoxData[
 RowBox[{"IGIntersectionArray", "/@", 
  "components"}]], \
"Input",ExpressionUUID->"0923a718-2b0a-42fd-b40c-9196f43741ae"],

Cell["Thus their disjoint union is also distance regular.", \
"Text",ExpressionUUID->"dc764a9e-5381-4cc6-ab8c-52eff9cd384e"],

Cell[BoxData[
 RowBox[{"IGDistanceRegularQ", "@", 
  RowBox[{
  "IGDisjointUnion", "[", "components", 
   "]"}]}]], "Input",ExpressionUUID->"b29582df-865c-441a-a6fe-4fc3307ac4fd"],

Cell["\<\
All distance transitive graphs are also distance regular, but the reverse is \
not true.\
\>", "Text",ExpressionUUID->"f978f8da-7670-417a-abc9-2385b84b0d18"],

Cell[BoxData[
 RowBox[{"IGDistanceTransitiveQ", "/@", 
  "components"}]], \
"Input",ExpressionUUID->"1d0a8b72-c8a7-45ce-8171-d79f1318cf76"],

Cell[TextData[{
 Cell[BoxData[
 "IGDistanceRegularQ"],ExpressionUUID->"d63a7526-281b-457c-9abf-027647d7c357"],
 " does not currently support directed graphs or non-simple graphs."
}], "Text",ExpressionUUID->"dd867d7c-c463-459f-9d92-14fb7b76a08e"],

Cell[BoxData[
 RowBox[{"IGDistanceRegularQ", "[", 
  RowBox[{"Graph", "[", 
   RowBox[{"{", 
    RowBox[{"1", "\[Rule]", "2"}], "}"}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"c768359e-def2-4875-a327-7682b32fd24e"],

Cell[BoxData[
 RowBox[{"IGDistanceRegularQ", "[", 
  RowBox[{"Graph", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[UndirectedEdge]", "2"}], ",", 
     RowBox[{"1", "\[UndirectedEdge]", "2"}]}], "}"}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"5049caad-4a0b-4483-9e51-aa87b5c3aab9"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGIntersectionArray", \
"Subsubsection",ExpressionUUID->"29e64b20-f82f-4618-8257-bf3237d7d50b"],

Cell[BoxData[
 RowBox[{"?", 
  "IGIntersectionArray"}]], \
"Input",ExpressionUUID->"2bdccf81-dd4a-408d-b008-e07fd1324de7"],

Cell[BoxData[
 RowBox[{"IGIntersectionArray", "@", 
  RowBox[{
  "GraphData", "[", "\"\<IcosahedralGraph\>\"", 
   "]"}]}]], "Input",ExpressionUUID->"c3b60e93-7253-4295-bec9-9bb6d80ac6e6"],

Cell[BoxData[
 RowBox[{"IGIntersectionArray", "@", 
  RowBox[{
  "GraphData", "[", "\"\<SuzukiGraph\>\"", 
   "]"}]}]], "Input",ExpressionUUID->"0c8d3b11-2f63-4697-bf18-1b74c21903ac"],

Cell[BoxData[
 RowBox[{"IGIntersectionArray", "@", 
  RowBox[{
  "CycleGraph", "[", "6", 
   "]"}]}]], "Input",ExpressionUUID->"6e37ab0e-976f-44e4-a958-44671a604882"],

Cell[TextData[{
 "For non-distance-regular graphs, ",
 Cell[BoxData[
  RowBox[{"{", "}"}]],ExpressionUUID->
  "0e8f495c-a7e6-40fd-b008-07f216a34fff"],
 " is returned."
}], "Text",ExpressionUUID->"fadeb0fe-85dc-4518-8642-9a5234e4cc05"],

Cell[BoxData[
 RowBox[{"IGIntersectionArray", "[", 
  RowBox[{"GridGraph", "[", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3"}], "}"}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"b6c7f269-3757-4cc9-a744-e78f8df5f3b1"],

Cell[TextData[{
 Cell[BoxData[
 "IGIntersectionArray"],ExpressionUUID->
  "e869ac5e-73fa-4631-b50b-47f2cd3d14df"],
 " does not currently support directed graphs."
}], "Text",ExpressionUUID->"3b261e88-98c5-4db0-8f54-b4d7a469173d"],

Cell[BoxData[
 RowBox[{"IGIntersectionArray", "[", 
  RowBox[{"Graph", "[", 
   RowBox[{"{", 
    RowBox[{"1", "\[Rule]", "2"}], "}"}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"b472e53c-8228-4058-b919-c3ca555a0b9a"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGVertexTransitiveQ", \
"Subsubsection",ExpressionUUID->"7b32e271-78c8-4568-9380-e5f5a0002573"],

Cell[BoxData[
 RowBox[{"?", 
  "IGVertexTransitiveQ"}]], \
"Input",ExpressionUUID->"c93eb1f1-ec96-4012-88eb-1a1fba2078ec"],

Cell[TextData[{
 Cell[BoxData[
 "IGVertexTransitiveQ"],ExpressionUUID->
  "c04c202e-1bc3-473f-a3ed-7469bf2c5e7b"],
 " checks if a graph is vertex transitive, i.e. if any vertex can be mapped \
into any other by some automorphism of the graph."
}], "Text",ExpressionUUID->"62d15eec-1388-4962-ab92-cf67cd17580c"],

Cell[BoxData[
 RowBox[{"IGVertexTransitiveQ", "[", 
  Graphics3DBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3, 4, 5, 6}, {
       Null, {{1, 2}, {2, 3}, {3, 1}, {4, 5}, {5, 6}, {6, 4}, {1, 4}, {2, 
        5}, {3, 6}}}, {GraphLayout -> {"Dimension" -> 3}}]]}, 
     TagBox[
      GraphicsGroup3DBox[
       GraphicsComplex3DBox[{{1.0869615340607288`, 0.7811654957389979, 
        0.9508116723640363}, {1.0898598511506954`, 0.8669288298090742, 
        0.002203878342136756}, {1.0914900405521404`, 0.0013890239809158933`, 
        0.40228439998755583`}, {0., 0.7790672571899876, 0.9498507250481623}, {
        0.0019660079632800587`, 0.8648196171161563, 0.}, {
        0.003835095936344013, 0., 0.40066402089054426`}}, {
         {Hue[0.6, 0.2, 0.8], 
          {Arrowheads[0.], 
           Arrow3DBox[TubeBox[{{{1.0869615340607288`, 0.7811654957389979, 
            0.9508116723640363}, {1.0898598511506954`, 0.8669288298090742, 
            0.002203878342136756}}}], 0.029574235656201153`]}, 
          {Arrowheads[0.], 
           Arrow3DBox[TubeBox[{{{1.0869615340607288`, 0.7811654957389979, 
            0.9508116723640363}, {1.0914900405521404`, 0.0013890239809158933`,
             0.40228439998755583`}}}], 0.029574235656201153`]}, 
          {Arrowheads[0.], 
           Arrow3DBox[TubeBox[{{{1.0869615340607288`, 0.7811654957389979, 
            0.9508116723640363}, {0., 0.7790672571899876, 
            0.9498507250481623}}}], 0.029574235656201153`]}, 
          {Arrowheads[0.], 
           Arrow3DBox[TubeBox[{{{1.0898598511506954`, 0.8669288298090742, 
            0.002203878342136756}, {1.0914900405521404`, 
            0.0013890239809158933`, 0.40228439998755583`}}}], 
            0.029574235656201153`]}, 
          {Arrowheads[0.], 
           Arrow3DBox[TubeBox[{{{1.0898598511506954`, 0.8669288298090742, 
            0.002203878342136756}, {0.0019660079632800587`, 
            0.8648196171161563, 0.}}}], 0.029574235656201153`]}, 
          {Arrowheads[0.], 
           Arrow3DBox[TubeBox[{{{1.0914900405521404`, 0.0013890239809158933`, 
            0.40228439998755583`}, {0.003835095936344013, 0., 
            0.40066402089054426`}}}], 0.029574235656201153`]}, 
          {Arrowheads[0.], 
           Arrow3DBox[TubeBox[{{{0., 0.7790672571899876, 
            0.9498507250481623}, {0.0019660079632800587`, 0.8648196171161563, 
            0.}}}], 0.029574235656201153`]}, 
          {Arrowheads[0.], 
           Arrow3DBox[TubeBox[{{{0., 0.7790672571899876, 
            0.9498507250481623}, {0.003835095936344013, 0., 
            0.40066402089054426`}}}], 0.029574235656201153`]}, 
          {Arrowheads[0.], 
           Arrow3DBox[TubeBox[{{{0.0019660079632800587`, 0.8648196171161563, 
            0.}, {0.003835095936344013, 0., 0.40066402089054426`}}}], 
            0.029574235656201153`]}}, 
         {Hue[0.6, 0.6, 1], SphereBox[1, 0.029574235656201153`], 
          SphereBox[2, 0.029574235656201153`], 
          SphereBox[3, 0.029574235656201153`], 
          SphereBox[4, 0.029574235656201153`], 
          SphereBox[5, 0.029574235656201153`], 
          SphereBox[6, 0.029574235656201153`]}}]],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False]],
   Boxed->False,
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   ImageSize->{159.1785475064865, 164.},
   Lighting->Dynamic[
     FEPrivate`If[
      FEPrivate`SameQ[FEPrivate`$OperatingSystem, "Windows"], {{"Directional", 
        GrayLevel[0.7], 
        ImageScaled[{1, 1, 0}]}, {"Point", 
        GrayLevel[0.9], 
        ImageScaled[{0, 0, 3.5}], {0, 0, 0.07}}}, {{"Directional", 
        GrayLevel[0.7], 
        ImageScaled[{1, 1, 0}]}, {"Point", 
        GrayLevel[0.9], 
        ImageScaled[{0, 0, 0}], {0, 0, 0.07}}}]],
   ViewPoint->{1.5974039274806806`, -0.910889875977648, -2.8405246568742752`},
   
   ViewVertical->{
    0.9809812268807439, -0.14800419823097383`, -0.12558100896854307`}], 
  "]"}]], "Input",ExpressionUUID->"970b0cf9-d768-469f-a867-894818ee9e56"],

Cell[BoxData[
 RowBox[{"IGVertexTransitiveQ", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3}, {Null, {{1, 2}, {2, 3}}}, {
       FormatType -> TraditionalForm, GraphLayout -> {"Dimension" -> 2}, 
        VertexSize -> {Medium}}]]}, 
     TagBox[
      GraphicsGroupBox[
       GraphicsComplexBox[{{0., 3.6739403974420594`*^-16}, {1., 
        2.4492935982947064`*^-16}, {2., 0.}}, {
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], LineBox[{{1, 2}, {2, 3}}]}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          DiskBox[1, 0.1], DiskBox[2, 0.1], DiskBox[3, 0.1]}}]],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None], 
  "]"}]], "Input",ExpressionUUID->"9ce90dda-2526-421b-b7d7-acf16358dd9b"],

Cell["All Cayley graphs are vertex transitive.", \
"Text",ExpressionUUID->"2add6183-867c-478c-af75-7019fdccf7db"],

Cell[BoxData[
 RowBox[{"cg", "=", 
  RowBox[{"CayleyGraph", "@", 
   RowBox[{"IGBlissAutomorphismGroup", "@", 
    RowBox[{"IGLCF", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", 
        RowBox[{"-", "1"}], ",", "2"}], "}"}], ",", "3"}], 
     "]"}]}]}]}]], \
"Input",ExpressionUUID->"2969c5ba-0b6c-4343-8320-2b278f091097"],

Cell[BoxData[
 RowBox[{"IGVertexTransitiveQ", "[", "cg", 
  "]"}]], "Input",ExpressionUUID->"043aca46-8d10-4ced-a1e7-4faf37a9158a"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGEdgeTransitiveQ", \
"Subsubsection",ExpressionUUID->"cd3b57ef-aad4-4eae-8d76-1b9a85e49fa2"],

Cell[BoxData[
 RowBox[{"?", 
  "IGEdgeTransitiveQ"}]], \
"Input",ExpressionUUID->"5ce596be-5633-4d75-8065-f3bf6714ce9e"],

Cell[TextData[{
 Cell[BoxData[
 "IGEdgeTransitiveQ"],ExpressionUUID->
  "9795ada6-354a-45c0-a546-48221067b792"],
 " checks if a graph is edge transitive, i.e. if any edge can be mapped into \
any other by some automorphism of the graph."
}], "Text",ExpressionUUID->"538b8876-5a86-4dc4-907b-d2c1d8646d12"],

Cell[BoxData[
 RowBox[{"IGEdgeTransitiveQ", "[", 
  Graphics3DBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3, 4, 5, 6}, {
       Null, {{1, 2}, {2, 3}, {3, 1}, {4, 5}, {5, 6}, {6, 4}, {1, 4}, {2, 
        5}, {3, 6}}}, {GraphLayout -> {"Dimension" -> 3}}]]}, 
     TagBox[
      GraphicsGroup3DBox[
       GraphicsComplex3DBox[{{1.0869615340607288`, 0.7811654957389979, 
        0.9508116723640363}, {1.0898598511506954`, 0.8669288298090742, 
        0.002203878342136756}, {1.0914900405521404`, 0.0013890239809158933`, 
        0.40228439998755583`}, {0., 0.7790672571899876, 0.9498507250481623}, {
        0.0019660079632800587`, 0.8648196171161563, 0.}, {
        0.003835095936344013, 0., 0.40066402089054426`}}, {
         {Hue[0.6, 0.2, 0.8], 
          {Arrowheads[0.], 
           Arrow3DBox[TubeBox[{{{1.0869615340607288`, 0.7811654957389979, 
            0.9508116723640363}, {1.0898598511506954`, 0.8669288298090742, 
            0.002203878342136756}}}], 0.029574235656201153`]}, 
          {Arrowheads[0.], 
           Arrow3DBox[TubeBox[{{{1.0869615340607288`, 0.7811654957389979, 
            0.9508116723640363}, {1.0914900405521404`, 0.0013890239809158933`,
             0.40228439998755583`}}}], 0.029574235656201153`]}, 
          {Arrowheads[0.], 
           Arrow3DBox[TubeBox[{{{1.0869615340607288`, 0.7811654957389979, 
            0.9508116723640363}, {0., 0.7790672571899876, 
            0.9498507250481623}}}], 0.029574235656201153`]}, 
          {Arrowheads[0.], 
           Arrow3DBox[TubeBox[{{{1.0898598511506954`, 0.8669288298090742, 
            0.002203878342136756}, {1.0914900405521404`, 
            0.0013890239809158933`, 0.40228439998755583`}}}], 
            0.029574235656201153`]}, 
          {Arrowheads[0.], 
           Arrow3DBox[TubeBox[{{{1.0898598511506954`, 0.8669288298090742, 
            0.002203878342136756}, {0.0019660079632800587`, 
            0.8648196171161563, 0.}}}], 0.029574235656201153`]}, 
          {Arrowheads[0.], 
           Arrow3DBox[TubeBox[{{{1.0914900405521404`, 0.0013890239809158933`, 
            0.40228439998755583`}, {0.003835095936344013, 0., 
            0.40066402089054426`}}}], 0.029574235656201153`]}, 
          {Arrowheads[0.], 
           Arrow3DBox[TubeBox[{{{0., 0.7790672571899876, 
            0.9498507250481623}, {0.0019660079632800587`, 0.8648196171161563, 
            0.}}}], 0.029574235656201153`]}, 
          {Arrowheads[0.], 
           Arrow3DBox[TubeBox[{{{0., 0.7790672571899876, 
            0.9498507250481623}, {0.003835095936344013, 0., 
            0.40066402089054426`}}}], 0.029574235656201153`]}, 
          {Arrowheads[0.], 
           Arrow3DBox[TubeBox[{{{0.0019660079632800587`, 0.8648196171161563, 
            0.}, {0.003835095936344013, 0., 0.40066402089054426`}}}], 
            0.029574235656201153`]}}, 
         {Hue[0.6, 0.6, 1], SphereBox[1, 0.029574235656201153`], 
          SphereBox[2, 0.029574235656201153`], 
          SphereBox[3, 0.029574235656201153`], 
          SphereBox[4, 0.029574235656201153`], 
          SphereBox[5, 0.029574235656201153`], 
          SphereBox[6, 0.029574235656201153`]}}]],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False]],
   Boxed->False,
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   ImageSize->{159.1785475064865, 164.},
   Lighting->Dynamic[
     FEPrivate`If[
      FEPrivate`SameQ[FEPrivate`$OperatingSystem, "Windows"], {{"Directional", 
        GrayLevel[0.7], 
        ImageScaled[{1, 1, 0}]}, {"Point", 
        GrayLevel[0.9], 
        ImageScaled[{0, 0, 3.5}], {0, 0, 0.07}}}, {{"Directional", 
        GrayLevel[0.7], 
        ImageScaled[{1, 1, 0}]}, {"Point", 
        GrayLevel[0.9], 
        ImageScaled[{0, 0, 0}], {0, 0, 0.07}}}]],
   ViewPoint->{1.6054375543825434`, -0.9097573583241039, -2.8363553740589955`},
   ViewVertical->{
    0.9870603011882955, -0.146593327504995, -0.12371554044216537`}], 
  "]"}]], "Input",ExpressionUUID->"fc568f25-eecc-4f44-8e4a-4b0dd2acf790"],

Cell[BoxData[
 RowBox[{"IGEdgeTransitiveQ", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3}, {Null, {{1, 2}, {2, 3}}}, {VertexSize -> {Medium}}]]}, 
     
     TagBox[
      GraphicsGroupBox[
       GraphicsComplexBox[{{0., 3.6739403974420594`*^-16}, {1., 
        2.4492935982947064`*^-16}, {2., 0.}}, {
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
          {Arrowheads[0.], ArrowBox[{1, 2}, 0.1]}, 
          {Arrowheads[0.], ArrowBox[{2, 3}, 0.1]}}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          DiskBox[1, 0.1], DiskBox[2, 0.1], DiskBox[3, 0.1]}}]],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None], 
  "]"}]], "Input",ExpressionUUID->"0694fcef-86ba-429b-9fab-15289a382511"],

Cell["\<\
The Folkman graph is not vertex transitive but it is edge transitive.\
\>", "Text",ExpressionUUID->"0fa1eeda-d359-4a74-9334-5e714f2bdf71"],

Cell[BoxData[
 RowBox[{"Through", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"IGVertexTransitiveQ", ",", "IGEdgeTransitiveQ"}], "}"}], "@", 
   RowBox[{"GraphData", "[", "\"\<FolkmanGraph\>\"", "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"c0a6f1f4-6683-40e5-aeca-d27ab3d4aa42"],

Cell[TextData[{
 Cell[BoxData[
 "IGEdgeTransitiveQ"],ExpressionUUID->
  "7e62b5b0-3a4d-42ef-ab07-1dbf8e3af844"],
 " takes into account edge directions."
}], "Text",ExpressionUUID->"b6d9d778-fd53-4dae-86ff-a85f4306d776"],

Cell[BoxData[
 RowBox[{"IGEdgeTransitiveQ", "@", 
  RowBox[{"Graph", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "2"}], ",", 
     RowBox[{"2", "\[Rule]", "3"}]}], "}"}], 
   "]"}]}]], "Input",ExpressionUUID->"f5a214b3-9476-42fe-a3ca-47fae2728686"],

Cell[BoxData[
 RowBox[{"IGEdgeTransitiveQ", "@", 
  RowBox[{"Graph", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "2"}], ",", 
     RowBox[{"3", "\[Rule]", "2"}]}], "}"}], 
   "]"}]}]], "Input",ExpressionUUID->"2da92f80-9a06-4c8a-b415-87d4cd5e1dff"],

Cell["\<\
Arc transitivity in an undirected graph refers to edge transitivity when each \
undirected edge is replaced by two opposite directed edges.\
\>", "Text",ExpressionUUID->"fd5b3be3-84ad-482f-b60f-30e0dff1b54e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"arcTransitiveQ", "[", 
   RowBox[{"graph_", "?", "UndirectedGraphQ"}], "]"}], ":=", 
  RowBox[{"IGEdgeTransitiveQ", "@", 
   RowBox[{
   "DirectedGraph", "[", "graph", 
    "]"}]}]}]], \
"Input",ExpressionUUID->"d5e62b0c-3825-4f80-beb5-57a1c1a41309"],

Cell["Some graphs are edge transitive, but not arc transitive.", \
"Text",ExpressionUUID->"5ab8ac7a-d0e1-4f7a-beef-ef160d454ffa"],

Cell[BoxData[
 RowBox[{"IGEdgeTransitiveQ", "@", 
  RowBox[{"GraphData", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<Bouwer\>\"", ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4", ",", "15"}], "}"}]}], "}"}], 
   "]"}]}]], "Input",ExpressionUUID->"172ba4f9-a37e-45d8-a7ac-73eac4352801"],

Cell[BoxData[
 RowBox[{"arcTransitiveQ", "@", 
  RowBox[{"GraphData", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<Bouwer\>\"", ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4", ",", "15"}], "}"}]}], "}"}], 
   "]"}]}]], "Input",ExpressionUUID->"d8cc3865-966c-4a2e-b4d8-1193283e93c7"],

Cell["\<\
Most graphs are edge transitive if their line graphs are vertex transitive. \
The exceptions are disjoint unions of the 3-star and 3-cycle. These two \
graphs have the same line graph, but they are not isomorphic.\
\>", "Text",ExpressionUUID->"1a045257-fe76-4aed-8b7f-1c7b329a888d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4, 5, 6, 7}, {Null, 
         SparseArray[
         Automatic, {7, 7}, 0, {
          1, {{0, 2, 3, 4, 5, 7, 9, 12}, {{5}, {6}, {7}, {7}, {7}, {1}, {6}, {
            1}, {5}, {2}, {3}, {4}}}, Pattern}]}, {
        FormatType -> TraditionalForm, GraphLayout -> {"Dimension" -> 2}, 
         VertexCoordinates -> {{
            Rational[5, 2], Rational[-1, 2] 3^Rational[-1, 2]}, {1, 0}, {
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
           2, 3^Rational[-1, 2]}, {
            Rational[3, 2], Rational[-1, 2] 3^Rational[-1, 2]}, {0, 0}}, 
         VertexSize -> {0.3}}]]}, 
      TagBox[
       GraphicsGroupBox[
        GraphicsComplexBox[{{2.5, -0.2886751345948129}, {1., 0.}, {-0.5, 
         0.8660254037844386}, {-0.5, -0.8660254037844386}, {2., 
         0.5773502691896258}, {1.5, -0.2886751345948129}, {0., 0.}}, {
          {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
           LineBox[{{1, 5}, {1, 6}, {2, 7}, {3, 7}, {4, 7}, {5, 6}}]}, 
          {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
           DiskBox[1, 0.08660254037844385], DiskBox[2, 0.08660254037844385], 
           DiskBox[3, 0.08660254037844385], DiskBox[4, 0.08660254037844385], 
           DiskBox[5, 0.08660254037844385], DiskBox[6, 0.08660254037844385], 
           DiskBox[7, 0.08660254037844385]}}]],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{86.19140625, Automatic}]}], 
  ";"}]], "Input",ExpressionUUID->"169a84f2-2ee1-4c5d-a752-0ef423688434"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"IGEdgeTransitiveQ", "[", "g", "]"}], ",", 
   RowBox[{"IGVertexTransitiveQ", "@", 
    RowBox[{"LineGraph", "[", "g", "]"}]}]}], 
  "}"}]], "Input",ExpressionUUID->"397a384a-7391-4c1a-ba3c-02e1c782886d"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGSymmetricQ", \
"Subsubsection",ExpressionUUID->"a523d1a8-0391-401b-b0d6-93ef8600d3d0"],

Cell[BoxData[
 RowBox[{"?", 
  "IGSymmetricQ"}]], \
"Input",ExpressionUUID->"941c40d8-78d4-489c-af18-e5ee8977a179"],

Cell[TextData[{
 Cell[BoxData[
 "IGSymmetricQ"],ExpressionUUID->"12660ca6-aa34-4980-a5de-4bb7dad0e5d6"],
 " checks if a graph is both vertex transitive and edge transitive. Note that \
this property is distinct from being ",
 StyleBox["arc transitive",
  FontSlant->"Italic"],
 ", which is the definition used for \[OpenCurlyDoubleQuote]s",
 StyleBox["ymmetric\[CloseCurlyDoubleQuote]",
  FontSlant->"Italic"],
 " by some authors."
}], "Text",ExpressionUUID->"dfe4376f-93e1-4dec-901c-009066ee044d"],

Cell[BoxData[
 RowBox[{"IGSymmetricQ", "[", 
  RowBox[{"GraphData", "[", "\"\<DodecahedralGraph\>\"", "]"}], 
  "]"}]], "Input",ExpressionUUID->"93527d18-6b80-4eef-92ee-7ead962ab1ad"],

Cell["Make a table of symmetric graphs up to size 7:", \
"Text",ExpressionUUID->"f14c6a0c-66c0-4fa8-93da-c359c8d5991c"],

Cell[BoxData[
 RowBox[{"Grid", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"Graph", "[", 
        RowBox[{"#", ",", 
         RowBox[{"ImageSize", "\[Rule]", "50"}], ",", 
         RowBox[{"PlotTheme", "\[Rule]", "\"\<Business\>\""}]}], "]"}], "&"}],
       "/@", 
      RowBox[{"Select", "[", 
       RowBox[{
        RowBox[{"GraphData", "/@", 
         RowBox[{"GraphData", "[", "k", "]"}]}], ",", "IGSymmetricQ"}], 
       "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"k", ",", "1", ",", "7"}], "}"}]}], "\[IndentingNewLine]", 
    "]"}], ",", 
   RowBox[{"Frame", "\[Rule]", "All"}], ",", 
   RowBox[{"ItemSize", "\[Rule]", "All"}]}], 
  "]"}]], "Input",ExpressionUUID->"ea4e6295-fe16-4400-aaf3-56a4ad3e7fb7"],

Cell[TextData[{
 "Some authors use the term ",
 StyleBox["symmetric graph",
  FontSlant->"Italic"],
 " to refer to arc transitive graphs. Arc transitivity can be checked using \
",
 Cell[BoxData[
  RowBox[{
   RowBox[{"IGEdgeTransitiveQ", "@", 
    RowBox[{"DirectedGraph", "[", "#", "]"}]}], "&"}]],ExpressionUUID->
  "87c98bc2-6a8c-4512-8e27-f37f2c439c41"],
 ". All arc-transitive graphs are both vertex- and edge-transitive, but the \
reverse is not true. The smallest graph that is both vertex- and \
edge-transitive, but not arc-transitive, is the 27-vertex Doyle graph, also \
known as the Holt graph."
}], "Text",ExpressionUUID->"9a0c2f6d-befc-4b69-b840-dc5e281d486f"],

Cell[BoxData[
 RowBox[{"doyle", "=", 
  RowBox[{
  "GraphData", "[", "\"\<DoyleGraph\>\"", 
   "]"}]}]], "Input",ExpressionUUID->"010b20e4-7ff2-4aef-87b2-b867e8ba12a0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"IGVertexTransitiveQ", "[", "doyle", "]"}], ",", 
   RowBox[{"IGEdgeTransitiveQ", "[", "doyle", "]"}]}], 
  "}"}]], "Input",ExpressionUUID->"74a8b58e-1971-4cb7-bf32-d2c90283f107"],

Cell[BoxData[
 RowBox[{"IGEdgeTransitiveQ", "@", 
  RowBox[{
  "DirectedGraph", "[", "doyle", 
   "]"}]}]], "Input",ExpressionUUID->"b93016eb-9dcc-4e58-a807-60aec8ff7034"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGDistanceTransitiveQ", \
"Subsubsection",ExpressionUUID->"2ab306f5-f0e4-474e-98c6-514302c65ce2"],

Cell[BoxData[
 RowBox[{"?", 
  "IGDistanceTransitiveQ"}]], \
"Input",ExpressionUUID->"80118dca-92b7-4851-98b5-f67157ef02c4"],

Cell[TextData[{
 Cell[BoxData[
 "IGDistanceTransitiveQ"],ExpressionUUID->
  "2f534a7b-f2b6-455a-8b00-2a0cedd5eb98"],
 " checks if a graph is distance transitive. In a distance transitive graph, \
any two ordered pairs of vertices which are the same distance apart can be \
mapped into each other by some automorphism."
}], "Text",ExpressionUUID->"16881e2f-ddd9-496a-b2a2-9e4147ff759e"],

Cell["All Platonic graphs are distance transitive.", \
"Text",ExpressionUUID->"1fe0dfa2-e883-4052-885b-712ffa65b110"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IGMeshGraph", "@", 
    RowBox[{"PolyhedronData", "[", 
     RowBox[{"#", ",", "\"\<BoundaryMeshRegion\>\""}], "]"}]}], "&"}], "/@", 
  RowBox[{
  "PolyhedronData", "[", "\"\<Platonic\>\"", 
   "]"}]}]], "Input",ExpressionUUID->"256acacf-4016-4b2f-be7e-a6af15cb8700"],

Cell[BoxData[
 RowBox[{"IGDistanceTransitiveQ", "/@", 
  "%"}]], "Input",ExpressionUUID->"9122c2a4-8577-4f91-93d0-23b7febbea85"],

Cell["Some graphs are symmetric, but not distance transitive.", \
"Text",ExpressionUUID->"59affd57-e10c-4ce2-928c-7762c2170888"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"GraphData", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<Circulant\>\"", ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "4"}], "}"}]}], "}"}]}], "}"}], 
   "]"}]}]], "Input",ExpressionUUID->"8f17ad77-f391-491a-9b82-7d2b6ee15eac"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"IGSymmetricQ", "[", "g", "]"}], ",", 
   RowBox[{"IGDistanceTransitiveQ", "[", "g", "]"}]}], 
  "}"}]], "Input",ExpressionUUID->"50bb1d88-1af5-4fe2-9a5c-5d62157d970a"],

Cell[TextData[{
 Cell[BoxData[
 "IGDistanceTransitiveQ"],ExpressionUUID->
  "92d5b1b5-7935-4acc-af76-61bc10bfc00b"],
 " does not exclude non-connected graphs."
}], "Text",ExpressionUUID->"a51d71ed-a285-4ae8-90ca-5f1dcaa25a02"],

Cell[BoxData[
 RowBox[{"IGDistanceTransitiveQ", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {Null, 
        SparseArray[
        Automatic, {10, 10}, 0, {
         1, {{0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40}, {{3}, {5}, {7}, {9}, {
           4}, {6}, {8}, {10}, {1}, {5}, {7}, {9}, {2}, {6}, {8}, {10}, {1}, {
           3}, {7}, {9}, {2}, {4}, {8}, {10}, {1}, {3}, {5}, {9}, {2}, {4}, {
           6}, {10}, {1}, {3}, {5}, {7}, {2}, {4}, {6}, {8}}}, Pattern}]}, {
       FormatType -> TraditionalForm, GraphLayout -> {"Dimension" -> 2}, 
        VertexCoordinates -> {{0., 1.}, {2.2824, 1.}, {-0.951, 0.309}, {
         1.3314, 0.309}, {-0.588, -0.809}, {1.6944, -0.809}, {
         0.588, -0.809}, {2.8704, -0.809}, {0.951, 0.309}, {3.2334, 0.309}}, 
        VertexSize -> {Large}}]]}, 
     TagBox[
      GraphicsGroupBox[
       GraphicsComplexBox[{{0., 1.}, {2.2824, 1.}, {-0.951, 0.309}, {1.3314, 
        0.309}, {-0.588, -0.809}, {1.6944, -0.809}, {0.588, -0.809}, {
        2.8704, -0.809}, {0.951, 0.309}, {3.2334, 0.309}}, {
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
          LineBox[{{1, 3}, {1, 5}, {1, 7}, {1, 9}, {2, 4}, {2, 6}, {2, 8}, {2,
            10}, {3, 5}, {3, 7}, {3, 9}, {4, 6}, {4, 8}, {4, 10}, {5, 7}, {5, 
           9}, {6, 8}, {6, 10}, {7, 9}, {8, 10}}]}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          DiskBox[1, 0.07608], DiskBox[2, 0.07608], DiskBox[3, 0.07608], 
          DiskBox[4, 0.07608], DiskBox[5, 0.07608], DiskBox[6, 0.07608], 
          DiskBox[7, 0.07608], DiskBox[8, 0.07608], DiskBox[9, 0.07608], 
          DiskBox[10, 0.07608]}}]],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None,
   ImageSize->{115.35546875, Automatic}], 
  "]"}]], "Input",ExpressionUUID->"1ec6bc03-716d-4384-b460-1445349008d4"],

Cell[TextData[{
 Cell[BoxData[
 "IGDistanceTransitiveQ"],ExpressionUUID->
  "77da63f0-6b04-463c-88c3-ae02b9c0c4d2"],
 " works with directed graphs."
}], "Text",ExpressionUUID->"02238804-fce1-455b-9815-540b3681e13d"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n", "=", "11"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"RelationGraph", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"MemberQ", "[", 
        RowBox[{
         RowBox[{"Rest", "@", 
          RowBox[{"Union", "@", 
           RowBox[{"Mod", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Range", "[", "n", "]"}], "^", "2"}], ",", "n"}], 
            "]"}]}]}], ",", 
         RowBox[{"Mod", "[", 
          RowBox[{
           RowBox[{"#1", "-", "#2"}], ",", "n"}], "]"}]}], "]"}], "&"}], ",", 
      
      RowBox[{
       RowBox[{"Range", "[", "n", "]"}], "-", "1"}]}], "]"}]}], 
   "\[IndentingNewLine]", 
   "]"}]}]], "Input",ExpressionUUID->"1c5662fe-aa70-444f-9917-91ff4e6a21af"],

Cell[BoxData[
 RowBox[{"IGDistanceTransitiveQ", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"263153ee-3966-478a-8ca0-6ec216302cf7"],

Cell["\<\
The following directed graph is vertex transitive, but not distance \
transitive.\
\>", "Text",ExpressionUUID->"ff41e03d-9f52-4999-93fb-147fe0cfad87"],

Cell[BoxData[
 RowBox[{"IGDistanceTransitiveQ", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3, 4, 5, 
       6}, {{{1, 2}, {2, 3}, {3, 4}, {4, 1}, {2, 5}, {5, 4}, {4, 6}, {6, 2}, {
        1, 5}, {5, 3}, {3, 6}, {6, 1}}, Null}, {
       FormatType -> TraditionalForm, GraphLayout -> {"Dimension" -> 2}, 
        ImageSize -> {115.8717385589066, 117.}, VertexLabels -> {None}, 
        VertexSize -> {Medium}}]]}, 
     TagBox[
      GraphicsGroupBox[
       GraphicsComplexBox[{{0.34976171058064925`, 1.2255319568291356`}, {
        1.413995414613136, 0.6201844019202133}, {1.064535728718509, 
        0.006106020172212401}, {0., 0.6106768958732157}, {
        0.35786617576683977`, 0.}, {1.0558009715504355`, 
        1.2310610454021789`}}, {
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
          ArrowBox[{{1, 2}, {1, 5}, {2, 3}, {2, 5}, {3, 4}, {3, 6}, {4, 1}, {
           4, 6}, {5, 3}, {5, 4}, {6, 1}, {6, 2}}, 0.07060609101566313]}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          DiskBox[1, 0.07060609101566313], DiskBox[2, 0.07060609101566313], 
          DiskBox[3, 0.07060609101566313], DiskBox[4, 0.07060609101566313], 
          DiskBox[5, 0.07060609101566313], DiskBox[6, 0.07060609101566313]}}]],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None,
   ImageSize->{83.6022073089066, 83.}], 
  "]"}]], "Input",ExpressionUUID->"7ca86726-daa2-4eab-bd02-588814cdacc1"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Homeomorphism", \
"Subsection",ExpressionUUID->"7a752d23-d8a1-49a2-b7d6-f5271ba608ec"],

Cell[BoxData[
 RowBox[{"?", 
  "IGHomeomorphicQ"}]], \
"Input",ExpressionUUID->"97a05ba0-f8ca-4534-8d77-71607f5619e4"],

Cell[TextData[{
 Cell[BoxData[
 "IGHomeomorphicQ"],ExpressionUUID->"51929af7-429c-4ab0-a331-e2607ec085ae"],
 " tests if two graphs are homeomorphic, i.e. whether they have the same \
topological structure. Two graphs ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["G", "1"], TraditionalForm]],ExpressionUUID->
  "24180247-c496-49f9-81e1-af3c1bd1ddaa"],
 " and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["G", "2"], TraditionalForm]],ExpressionUUID->
  "a219aa66-90c2-4938-a9dc-b8635f4b80fc"],
 " are homeomorphic if there is an isomorphism from a subdivision of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["G", "1"], TraditionalForm]],ExpressionUUID->
  "4a7bc177-8c1f-4232-a4f0-000757cdfdbf"],
 " to a subdivision of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["G", "2"], TraditionalForm]],ExpressionUUID->
  "6be953be-bc08-4b5a-9afc-32feffe55a0a"],
 "."
}], "Text",ExpressionUUID->"96e52786-29a9-4956-8e86-21b420167f77"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGHomeomorphicQ", "[", 
   RowBox[{
    SubscriptBox["g", "1"], ",", 
    SubscriptBox["g", "2"]}], "]"}]],ExpressionUUID->
  "d8f787eb-f776-4a91-b470-85cdd5fb45d6"],
 " is effectively implemented as ",
 Cell[BoxData[
  RowBox[{"IGIsomorphicQ", "[", 
   RowBox[{
    RowBox[{"IGSmoothen", "[", 
     SubscriptBox["g", "1"], "]"}], ",", 
    RowBox[{"IGSmoothen", "[", 
     SubscriptBox["g", "2"], "]"}]}], "]"}]],ExpressionUUID->
  "f41616d2-0618-4a5a-9db5-e4f17b017d30"],
 "."
}], "Text",ExpressionUUID->"08d1e2b5-7527-4584-b015-f68bdbda7909"],

Cell["The following graphs are homeomorphic.", \
"Text",ExpressionUUID->"f2445c43-21ad-44b4-b036-765d39514f4b"],

Cell[BoxData[
 RowBox[{"IGHomeomorphicQ", "[", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4, 5}, {
        Null, {{5, 2}, {2, 3}, {3, 4}, {4, 5}, {2, 1}, {1, 4}}}, {
        VertexSize -> {{"Scaled", 0.075}}, 
         VertexCoordinates -> {{1.5, 1.5}, {1.5, 3.3000000000000003`}, {
          3.3000000000000003`, 3.3000000000000003`}, {3.3000000000000003`, 
          1.5}, {2.4, 2.4}}}]]}, 
      TagBox[
       GraphicsGroupBox[
        GraphicsComplexBox[{{1.5, 1.5}, {1.5, 3.3000000000000003`}, {
         3.3000000000000003`, 3.3000000000000003`}, {3.3000000000000003`, 
         1.5}, {2.4, 2.4}}, {
          {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
           {Arrowheads[0.], ArrowBox[{1, 2}, 0.09545941546018392]}, 
           {Arrowheads[0.], ArrowBox[{1, 4}, 0.09545941546018392]}, 
           {Arrowheads[0.], ArrowBox[{2, 3}, 0.09545941546018392]}, 
           {Arrowheads[0.], ArrowBox[{2, 5}, 0.09545941546018392]}, 
           {Arrowheads[0.], ArrowBox[{3, 4}, 0.09545941546018392]}, 
           {Arrowheads[0.], ArrowBox[{4, 5}, 0.09545941546018392]}}, 
          {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
           DiskBox[1, 0.09545941546018392], DiskBox[2, 0.09545941546018392], 
           DiskBox[3, 0.09545941546018392], DiskBox[4, 0.09545941546018392], 
           DiskBox[5, 0.09545941546018392]}}]],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None], ",", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4, 5, 6, 7, 8}, {
        Null, {{3, 4}, {4, 5}, {5, 6}, {6, 7}, {7, 8}, {8, 1}, {3, 7}, {1, 
         2}, {2, 3}}}, {
        VertexSize -> {{"Scaled", 0.075}}, 
         VertexCoordinates -> {{1.5, 1.5}, {1.5, 2.4}, {1.5, 
          3.3000000000000003`}, {2.4, 3.3000000000000003`}, {
          3.3000000000000003`, 3.3000000000000003`}, {3.3000000000000003`, 
          2.4}, {3.3000000000000003`, 1.5}, {2.4, 1.5}}}]]}, 
      TagBox[
       GraphicsGroupBox[
        GraphicsComplexBox[{{1.5, 1.5}, {1.5, 2.4}, {1.5, 
         3.3000000000000003`}, {2.4, 3.3000000000000003`}, {
         3.3000000000000003`, 3.3000000000000003`}, {3.3000000000000003`, 
         2.4}, {3.3000000000000003`, 1.5}, {2.4, 1.5}}, {
          {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
           {Arrowheads[0.], ArrowBox[{1, 2}, 0.09545941546018392]}, 
           {Arrowheads[0.], ArrowBox[{1, 8}, 0.09545941546018392]}, 
           {Arrowheads[0.], ArrowBox[{2, 3}, 0.09545941546018392]}, 
           {Arrowheads[0.], ArrowBox[{3, 4}, 0.09545941546018392]}, 
           {Arrowheads[0.], ArrowBox[{3, 7}, 0.09545941546018392]}, 
           {Arrowheads[0.], ArrowBox[{4, 5}, 0.09545941546018392]}, 
           {Arrowheads[0.], ArrowBox[{5, 6}, 0.09545941546018392]}, 
           {Arrowheads[0.], ArrowBox[{6, 7}, 0.09545941546018392]}, 
           {Arrowheads[0.], ArrowBox[{7, 8}, 0.09545941546018392]}}, 
          {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
           DiskBox[1, 0.09545941546018392], DiskBox[2, 0.09545941546018392], 
           DiskBox[3, 0.09545941546018392], DiskBox[4, 0.09545941546018392], 
           DiskBox[5, 0.09545941546018392], DiskBox[6, 0.09545941546018392], 
           DiskBox[7, 0.09545941546018392], 
           DiskBox[8, 0.09545941546018392]}}]],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None]}], 
  "]"}]], "Input",ExpressionUUID->"818efd88-c2fb-41be-b49a-8f06a29219f5"],

Cell["They smoothen to the same graph.", \
"Text",ExpressionUUID->"520796a6-a9b7-4161-83cd-b925e5ab33c0"],

Cell[BoxData[
 RowBox[{"IGSmoothen", "/@", 
  RowBox[{"{", 
   RowBox[{
    GraphicsBox[
     NamespaceBox["NetworkGraphics",
      DynamicModuleBox[{Typeset`graph = HoldComplete[
        Graph[{1, 2, 3, 4, 5}, {
         Null, {{5, 2}, {2, 3}, {3, 4}, {4, 5}, {2, 1}, {1, 4}}}, {
         VertexSize -> {{"Scaled", 0.075}}, 
          VertexCoordinates -> {{1.5, 1.5}, {1.5, 3.3000000000000003`}, {
           3.3000000000000003`, 3.3000000000000003`}, {3.3000000000000003`, 
           1.5}, {2.4, 2.4}}}]]}, 
       TagBox[
        GraphicsGroupBox[
         GraphicsComplexBox[{{1.5, 1.5}, {1.5, 3.3000000000000003`}, {
          3.3000000000000003`, 3.3000000000000003`}, {3.3000000000000003`, 
          1.5}, {2.4, 2.4}}, {
           {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
            {Arrowheads[0.], ArrowBox[{1, 2}, 0.09545941546018392]}, 
            {Arrowheads[0.], ArrowBox[{1, 4}, 0.09545941546018392]}, 
            {Arrowheads[0.], ArrowBox[{2, 3}, 0.09545941546018392]}, 
            {Arrowheads[0.], ArrowBox[{2, 5}, 0.09545941546018392]}, 
            {Arrowheads[0.], ArrowBox[{3, 4}, 0.09545941546018392]}, 
            {Arrowheads[0.], ArrowBox[{4, 5}, 0.09545941546018392]}}, 
           {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
            DiskBox[1, 0.09545941546018392], DiskBox[2, 0.09545941546018392], 
            DiskBox[3, 0.09545941546018392], DiskBox[4, 0.09545941546018392], 
            DiskBox[5, 0.09545941546018392]}}]],
        MouseAppearanceTag["NetworkGraphics"]],
       AllowKernelInitialization->False]],
     DefaultBaseStyle->{
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
     FormatType->TraditionalForm,
     FrameTicks->None], ",", 
    GraphicsBox[
     NamespaceBox["NetworkGraphics",
      DynamicModuleBox[{Typeset`graph = HoldComplete[
        Graph[{1, 2, 3, 4, 5, 6, 7, 8}, {
         Null, {{3, 4}, {4, 5}, {5, 6}, {6, 7}, {7, 8}, {8, 1}, {3, 7}, {1, 
          2}, {2, 3}}}, {
         VertexSize -> {{"Scaled", 0.075}}, 
          VertexCoordinates -> {{1.5, 1.5}, {1.5, 2.4}, {1.5, 
           3.3000000000000003`}, {2.4, 3.3000000000000003`}, {
           3.3000000000000003`, 3.3000000000000003`}, {3.3000000000000003`, 
           2.4}, {3.3000000000000003`, 1.5}, {2.4, 1.5}}}]]}, 
       TagBox[
        GraphicsGroupBox[
         GraphicsComplexBox[{{1.5, 1.5}, {1.5, 2.4}, {1.5, 
          3.3000000000000003`}, {2.4, 3.3000000000000003`}, {
          3.3000000000000003`, 3.3000000000000003`}, {3.3000000000000003`, 
          2.4}, {3.3000000000000003`, 1.5}, {2.4, 1.5}}, {
           {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
            {Arrowheads[0.], ArrowBox[{1, 2}, 0.09545941546018392]}, 
            {Arrowheads[0.], ArrowBox[{1, 8}, 0.09545941546018392]}, 
            {Arrowheads[0.], ArrowBox[{2, 3}, 0.09545941546018392]}, 
            {Arrowheads[0.], ArrowBox[{3, 4}, 0.09545941546018392]}, 
            {Arrowheads[0.], ArrowBox[{3, 7}, 0.09545941546018392]}, 
            {Arrowheads[0.], ArrowBox[{4, 5}, 0.09545941546018392]}, 
            {Arrowheads[0.], ArrowBox[{5, 6}, 0.09545941546018392]}, 
            {Arrowheads[0.], ArrowBox[{6, 7}, 0.09545941546018392]}, 
            {Arrowheads[0.], ArrowBox[{7, 8}, 0.09545941546018392]}}, 
           {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
            DiskBox[1, 0.09545941546018392], DiskBox[2, 0.09545941546018392], 
            DiskBox[3, 0.09545941546018392], DiskBox[4, 0.09545941546018392], 
            DiskBox[5, 0.09545941546018392], DiskBox[6, 0.09545941546018392], 
            DiskBox[7, 0.09545941546018392], 
            DiskBox[8, 0.09545941546018392]}}]],
        MouseAppearanceTag["NetworkGraphics"]],
       AllowKernelInitialization->False]],
     DefaultBaseStyle->{
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
     FormatType->TraditionalForm,
     FrameTicks->None]}], 
   "}"}]}]], "Input",ExpressionUUID->"3008316f-7e26-4dae-8946-39be620478f5"],

Cell["Any two cycle graphs are homeomorphic.", \
"Text",ExpressionUUID->"a86d31b3-e60f-4cd8-937e-72b7525e8147"],

Cell[BoxData[
 RowBox[{"IGHomeomorphicQ", "[", 
  RowBox[{
   RowBox[{"CycleGraph", "[", "5", "]"}], ",", 
   RowBox[{"CycleGraph", "[", "9", "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"341ed8d9-f298-4432-b40f-333b84e1a30a"],

Cell["A cycle and a path graph are not homeomorphic.", \
"Text",ExpressionUUID->"8b25a4b3-5299-46b4-b2a5-a553e54654be"],

Cell[BoxData[
 RowBox[{"IGHomeomorphicQ", "[", 
  RowBox[{
   RowBox[{"CycleGraph", "[", "5", "]"}], ",", 
   RowBox[{"PathGraph", "@", 
    RowBox[{"Range", "[", "5", "]"}]}]}], 
  "]"}]], "Input",ExpressionUUID->"71761f94-4961-43b4-82da-66c15fd97d4a"],

Cell["\<\
A triangular and a square lattice on the same number of vertices are, in \
general, topologically different.\
\>", "Text",ExpressionUUID->"d15eef81-2463-41f7-8ba2-ac29d1e8371d"],

Cell[BoxData[
 RowBox[{"IGHomeomorphicQ", "[", 
  RowBox[{
   RowBox[{"IGSquareLattice", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"IGTriangularLattice", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "3"}], "}"}], "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"c7fca3ce-e0ef-48c1-844b-9a02d869a9e3"],

Cell["\<\
When testing empirical graphs for equivalence, it is often useful to remove \
tree-like components. For example, the face-face and the face-edge adjacency \
graphs of a geometric mesh are equivalent, save for the tree-like components.\
\
\>", "Text",ExpressionUUID->"72a93037-ed74-4be0-822c-33a6d930505f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mesh", "=", 
   RowBox[{"IGLatticeMesh", "[", 
    RowBox[{"\"\<SnubSquare\>\"", ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "3"}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.734105777386374*^9, 3.73410580883463*^9}, {
  3.734106088377783*^9, 
  3.734106111787649*^9}},ExpressionUUID->"62fe3189-8e8c-42d0-8a8a-\
dd3ed40bce46"],

Cell[BoxData[
 RowBox[{"ffg", "=", 
  RowBox[{"IGMeshCellAdjacencyGraph", "[", 
   RowBox[{"mesh", ",", "2", ",", 
    RowBox[{"VertexCoordinates", "\[Rule]", "Automatic"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.734105993128723*^9, 
  3.734105995656621*^9}},ExpressionUUID->"069a3515-5058-43b3-bd99-\
5d847a557cc0"],

Cell[BoxData[
 RowBox[{"feg", "=", 
  RowBox[{"IGMeshCellAdjacencyGraph", "[", 
   RowBox[{"mesh", ",", "1", ",", "2", ",", 
    RowBox[{"VertexCoordinates", "\[Rule]", "Automatic"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7341058265564747`*^9, 3.734105826712364*^9}, {
  3.7341059787952213`*^9, 
  3.734105988460093*^9}},ExpressionUUID->"aa5281ef-3bde-4695-94b8-\
1830d2f26a70"],

Cell[BoxData[
 RowBox[{"IGHomeomorphicQ", "[", 
  RowBox[{"feg", ",", "ffg"}], "]"}]], "Input",
 CellChangeTimes->{{3.7341059986416597`*^9, 
  3.734106004917057*^9}},ExpressionUUID->"db4d6b1b-909f-444b-9d67-\
28761a8d267f"],

Cell[BoxData[
 RowBox[{"feg", "=", 
  RowBox[{"VertexDelete", "[", 
   RowBox[{"feg", ",", 
    RowBox[{"IGTreelikeComponents", "[", "feg", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.734106007560931*^9, 
  3.734106035890065*^9}},ExpressionUUID->"7d8edb20-f015-4a1c-87a0-\
e616d4f0befb"],

Cell[BoxData[
 RowBox[{"ffg", "=", 
  RowBox[{"VertexDelete", "[", 
   RowBox[{"ffg", ",", 
    RowBox[{"IGTreelikeComponents", "[", "ffg", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.734106037180825*^9, 
  3.73410605685756*^9}},ExpressionUUID->"ff96f04b-66e1-49d7-ab63-\
8659b32b3084"],

Cell[BoxData[
 RowBox[{"IGHomeomorphicQ", "[", 
  RowBox[{"feg", ",", "ffg"}], 
  "]"}]], "Input",ExpressionUUID->"14b2f4ef-5b35-410f-8b49-5f485fcdc137"]
}, Closed]],

Cell[CellGroupData[{

Cell["Other functions", \
"Subsection",ExpressionUUID->"803eb768-6a7c-4416-ae42-dcb05e126a9e"],

Cell[CellGroupData[{

Cell["IGSelfComplementaryQ", \
"Subsubsection",ExpressionUUID->"6d60aba6-1bc2-4982-a245-15d3c51630ac"],

Cell[BoxData[
 RowBox[{"?", 
  "IGSelfComplementaryQ"}]], \
"Input",ExpressionUUID->"7e9077f0-63e7-4d0d-b8a6-3285c3238da8"],

Cell["\<\
A graph is called self-complementary if it is isomorphic with its complement.\
\
\>", "Text",ExpressionUUID->"0341029b-390f-4526-8e96-3f1b87f62294"],

Cell["The 4-vertex path graph is self-complementary.", \
"Text",ExpressionUUID->"13d000fd-f95a-43f7-bfa2-90688b0a5fb9"],

Cell[BoxData[
 RowBox[{"IGSelfComplementaryQ", "[", 
  RowBox[{"PathGraph", "@", 
   RowBox[{"Range", "[", "4", "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"a23f4d5b-b519-48ae-99f2-282d0de5d042"],

Cell["Find all 3-vertex self-complementary directed graphs.", \
"Text",ExpressionUUID->"81882024-5186-4f7c-9d1d-b2c5e8ac3818"],

Cell[BoxData[
 RowBox[{"Select", "[", 
  RowBox[{
   RowBox[{"IGData", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<AllDirectedGraphs\>\"", ",", "3"}], "}"}], "]"}], ",", 
   "IGSelfComplementaryQ"}], 
  "]"}]], "Input",ExpressionUUID->"d6759887-f72c-4e54-9da5-48cfe20be01f"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGColoredSimpleGraph", \
"Subsubsection",ExpressionUUID->"a8da82a5-fbfc-46a4-97c6-4942ddde9647"],

Cell[BoxData[
 RowBox[{"?", 
  "IGColoredSimpleGraph"}]], \
"Input",ExpressionUUID->"1f0d57bc-a858-4c35-8e24-f54f8c59f248"],

Cell[TextData[{
 Cell[BoxData[
 "IGColoredSimpleGraph"],ExpressionUUID->
  "3b625818-3469-4c19-8fbd-4a1ac7edd0c4"],
 " is a helper function that encodes a non-simple graph (i.e a graph with \
self-loops or multi-edges) into an edge- and vertex-colored simple graph. The \
coloured simple graph can be used directly as an input to coloured \
isomorphism checking functions such as ",
 Cell[BoxData[
 "IGVF2IsomorphicQ"],ExpressionUUID->"8be8598f-f194-47a5-bb83-6d4bcc8ace67"],
 "."
}], "Text",ExpressionUUID->"8a18393f-2052-447f-a2c2-b2fac16f800d"],

Cell["\<\
The vertex colours are computed as the multiplicity of self-loops at each \
vertex. The edge colours are computed as the multiplicities or non-loop edges.\
\>", "Text",ExpressionUUID->"5d07c03d-9986-419e-a4f0-0ff75896e9bb"],

Cell[TextData[{
 "The following graphs are not simple and cannot be used with ",
 Cell[BoxData[
 "IGVF2IsomorphicQ"],ExpressionUUID->"3db5f482-1935-4f9d-9c10-d4d2c6b41fc3"],
 " directly."
}], "Text",ExpressionUUID->"0418a2be-cf38-457d-a7fa-d0c6e03b6c07"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"g1", ",", "g2", ",", "g3"}], "}"}], "=", 
   RowBox[{"{", 
    RowBox[{
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{"A", "B", "C", "D"}, {
          Null, {{1, 2}, {2, 3}, {3, 4}, {4, 3}, {1, 1}, {1, 4}}}, {
          PerformanceGoal -> "Quality", VertexLabels -> {None}, 
           VertexShapeFunction -> {"Name"}}]], Typeset`boxes, 
        Typeset`boxes$s2d = GraphicsGroupBox[{{
           Directive[
            Opacity[0.7], 
            Hue[0.6, 0.7, 0.5]], 
           BezierCurveBox[{
             DynamicLocation[
             "VertexID$1", Automatic, 
              Center], {-1.125128563071181, -0.26980865897674017`}, \
{-1.4063852032689548`, -0.34956498993139373`}, {-1.586231625136188, \
-0.2661870895300691}, {-1.586231625136188, 
             0.26618708953007086`}, {-1.4063852032689548`, 
             0.3495649899313956}, {-1.125128563071181, 0.26980865897674217`}, 
             
             DynamicLocation["VertexID$1", Automatic, Center]}, SplineDegree -> 
            7], 
           LineBox[{
             DynamicLocation["VertexID$1", Automatic, Center], 
             DynamicLocation["VertexID$2", Automatic, Center]}], 
           LineBox[{
             DynamicLocation["VertexID$1", Automatic, Center], 
             DynamicLocation["VertexID$4", Automatic, Center]}], 
           LineBox[{
             DynamicLocation["VertexID$2", Automatic, Center], 
             DynamicLocation["VertexID$3", Automatic, Center]}], 
           BezierCurveBox[{
             DynamicLocation["VertexID$3", Automatic, Center], {
             0.664440747183117, -0.664440747183117}, 
             DynamicLocation["VertexID$4", Automatic, Center]}], 
           BezierCurveBox[{
             DynamicLocation["VertexID$3", Automatic, Center], {
             0.33555925281688137`, -0.33555925281688564`}, 
             DynamicLocation["VertexID$4", Automatic, Center]}]}, {
           Directive[
            Hue[0.6, 0.2, 0.8], 
            EdgeForm[
             Directive[
              GrayLevel[0], 
              Opacity[0.7]]]], 
           TagBox[
            InsetBox[
             BoxData[
              FormBox[
               PaneBox["\"A\"", Alignment -> Center, ImageMargins -> 2], 
               TraditionalForm]], {-1., 1.0106430996148606`*^-15}, BaseStyle -> 
             "Graphics"], "DynamicName", BoxID -> "VertexID$1"], 
           TagBox[
            InsetBox[
             BoxData[
              FormBox[
               PaneBox["\"B\"", Alignment -> Center, ImageMargins -> 2], 
               TraditionalForm]], {-7.044813998280222*^-16, 1.}, BaseStyle -> 
             "Graphics"], "DynamicName", BoxID -> "VertexID$2"], 
           TagBox[
            InsetBox[
             BoxData[
              FormBox[
               PaneBox["\"C\"", Alignment -> Center, ImageMargins -> 2], 
               TraditionalForm]], {1., -1.133107779529596*^-15}, BaseStyle -> 
             "Graphics"], "DynamicName", BoxID -> "VertexID$3"], 
           TagBox[
            InsetBox[
             BoxData[
              FormBox[
               PaneBox["\"D\"", Alignment -> Center, ImageMargins -> 2], 
               TraditionalForm]], {6.049014748177263*^-16, -1.}, BaseStyle -> 
             "Graphics"], "DynamicName", BoxID -> 
            "VertexID$4"]}}], $CellContext`flag}, 
        TagBox[
         DynamicBox[GraphComputation`NetworkGraphicsBox[
          3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
          CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
           SynchronousUpdating -> False, 
           TrackedSymbols :> {$CellContext`flag}},
          
          ImageSizeCache->{{-0.7049476348674659, 
           132.9229004409899}, {-62.23930669098991, 57.31381534020776}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False,
        UnsavedVariables:>{$CellContext`flag}]],
      DefaultBaseStyle->{
       "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
        Hue[0.8, 1., 0.6]},
      FormatType->TraditionalForm,
      FrameTicks->None,
      ImageSize->{130.68359375, Automatic}], ",", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{2, 1, 3, 4}, {
          Null, {{2, 1}, {1, 3}, {3, 4}, {4, 3}, {2, 2}, {4, 2}}}, {
          PerformanceGoal -> "Quality", VertexLabels -> {None}, 
           VertexShapeFunction -> {"Name"}}]], Typeset`boxes, 
        Typeset`boxes$s2d = GraphicsGroupBox[{{
           Directive[
            Opacity[0.7], 
            Hue[0.6, 0.7, 0.5]], 
           LineBox[{
             DynamicLocation["VertexID$1", Automatic, Center], 
             DynamicLocation["VertexID$2", Automatic, Center]}], 
           LineBox[{
             DynamicLocation["VertexID$1", Automatic, Center], 
             DynamicLocation["VertexID$3", Automatic, Center]}], 
           BezierCurveBox[{
             DynamicLocation[
             "VertexID$2", Automatic, Center], {-0.2698086589769875, 
             1.1251285630706513`}, {-0.3495649899317138, 
             1.406385203268681}, {-0.26618708953031345`, 1.586231625136078}, {
             0.2661870895303107, 1.5862316251360784`}, {0.3495649899317115, 
             1.4063852032686817`}, {0.2698086589769857, 1.1251285630706518`}, 
             
             DynamicLocation["VertexID$2", Automatic, Center]}, SplineDegree -> 
            7], 
           LineBox[{
             DynamicLocation["VertexID$2", Automatic, Center], 
             DynamicLocation["VertexID$4", Automatic, Center]}], 
           BezierCurveBox[{
             DynamicLocation["VertexID$3", Automatic, Center], {
             0.33555925281688403`, -0.33555925281688403`}, 
             DynamicLocation["VertexID$4", Automatic, Center]}], 
           BezierCurveBox[{
             DynamicLocation["VertexID$3", Automatic, Center], {
             0.664440747183117, -0.664440747183117}, 
             DynamicLocation["VertexID$4", Automatic, Center]}]}, {
           Directive[
            Hue[0.6, 0.2, 0.8], 
            EdgeForm[
             Directive[
              GrayLevel[0], 
              Opacity[0.7]]]], 
           TagBox[
            InsetBox[
             BoxData[
              FormBox[
               PaneBox["2", Alignment -> Center, ImageMargins -> 2], 
               TraditionalForm]], {-1., 1.0106430996148606`*^-15}, BaseStyle -> 
             "Graphics"], "DynamicName", BoxID -> "VertexID$1"], 
           TagBox[
            InsetBox[
             BoxData[
              FormBox[
               PaneBox["1", Alignment -> Center, ImageMargins -> 2], 
               TraditionalForm]], {-7.044813998280222*^-16, 1.}, BaseStyle -> 
             "Graphics"], "DynamicName", BoxID -> "VertexID$2"], 
           TagBox[
            InsetBox[
             BoxData[
              FormBox[
               PaneBox["3", Alignment -> Center, ImageMargins -> 2], 
               TraditionalForm]], {6.049014748177263*^-16, -1.}, BaseStyle -> 
             "Graphics"], "DynamicName", BoxID -> "VertexID$3"], 
           TagBox[
            InsetBox[
             BoxData[
              FormBox[
               PaneBox["4", Alignment -> Center, ImageMargins -> 2], 
               TraditionalForm]], {1., -1.133107779529596*^-15}, BaseStyle -> 
             "Graphics"], "DynamicName", BoxID -> 
            "VertexID$4"]}}], $CellContext`flag}, 
        TagBox[
         DynamicBox[GraphComputation`NetworkGraphicsBox[
          3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
          CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
           SynchronousUpdating -> False, 
           TrackedSymbols :> {$CellContext`flag}},
          
          ImageSizeCache->{{-3.239306690989906, 
           112.61795316942276`}, {-74.25173376142125, 70.23497881342918}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False,
        UnsavedVariables:>{$CellContext`flag}]],
      DefaultBaseStyle->{
       "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
        Hue[0.8, 1., 0.6]},
      FormatType->TraditionalForm,
      FrameTicks->None,
      ImageSize->{110.37864647843287`, Automatic}], ",", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{"A", "B", "C", "D"}, {
          Null, {{1, 2}, {2, 3}, {3, 4}, {1, 1}, {1, 4}, {3, 3}}}, {
          PerformanceGoal -> "Quality", VertexLabels -> {None}, 
           VertexShapeFunction -> {"Name"}}]], Typeset`boxes, 
        Typeset`boxes$s2d = GraphicsGroupBox[{{
           Directive[
            Opacity[0.7], 
            Hue[0.6, 0.7, 0.5]], 
           BezierCurveBox[{
             DynamicLocation[
             "VertexID$1", Automatic, 
              Center], {-1.125128563071181, -0.26980865897674017`}, \
{-1.4063852032689548`, -0.34956498993139373`}, {-1.586231625136188, \
-0.2661870895300691}, {-1.586231625136188, 
             0.26618708953007086`}, {-1.4063852032689548`, 
             0.3495649899313956}, {-1.125128563071181, 0.26980865897674217`}, 
             
             DynamicLocation["VertexID$1", Automatic, Center]}, SplineDegree -> 
            7], 
           LineBox[{
             DynamicLocation["VertexID$1", Automatic, Center], 
             DynamicLocation["VertexID$2", Automatic, Center]}], 
           LineBox[{
             DynamicLocation["VertexID$1", Automatic, Center], 
             DynamicLocation["VertexID$4", Automatic, Center]}], 
           LineBox[{
             DynamicLocation["VertexID$2", Automatic, Center], 
             DynamicLocation["VertexID$3", Automatic, Center]}], 
           BezierCurveBox[{
             DynamicLocation["VertexID$3", Automatic, Center], {
             1.1251285630711807`, 0.26980865897674}, {1.4063852032689546`, 
             0.3495649899313937}, {1.5862316251361879`, 0.266187089530069}, {
             1.586231625136188, -0.266187089530071}, {
             1.4063852032689548`, -0.34956498993139573`}, {
             1.125128563071181, -0.2698086589767423}, 
             DynamicLocation["VertexID$3", Automatic, Center]}, SplineDegree -> 
            7], 
           LineBox[{
             DynamicLocation["VertexID$3", Automatic, Center], 
             DynamicLocation["VertexID$4", Automatic, Center]}]}, {
           Directive[
            Hue[0.6, 0.2, 0.8], 
            EdgeForm[
             Directive[
              GrayLevel[0], 
              Opacity[0.7]]]], 
           TagBox[
            InsetBox[
             BoxData[
              FormBox[
               PaneBox["\"A\"", Alignment -> Center, ImageMargins -> 2], 
               TraditionalForm]], {-1., 1.0106430996148606`*^-15}, BaseStyle -> 
             "Graphics"], "DynamicName", BoxID -> "VertexID$1"], 
           TagBox[
            InsetBox[
             BoxData[
              FormBox[
               PaneBox["\"B\"", Alignment -> Center, ImageMargins -> 2], 
               TraditionalForm]], {-7.044813998280222*^-16, 1.}, BaseStyle -> 
             "Graphics"], "DynamicName", BoxID -> "VertexID$2"], 
           TagBox[
            InsetBox[
             BoxData[
              FormBox[
               PaneBox["\"C\"", Alignment -> Center, ImageMargins -> 2], 
               TraditionalForm]], {1., -1.133107779529596*^-15}, BaseStyle -> 
             "Graphics"], "DynamicName", BoxID -> "VertexID$3"], 
           TagBox[
            InsetBox[
             BoxData[
              FormBox[
               PaneBox["\"D\"", Alignment -> Center, ImageMargins -> 2], 
               TraditionalForm]], {6.049014748177263*^-16, -1.}, BaseStyle -> 
             "Graphics"], "DynamicName", BoxID -> 
            "VertexID$4"]}}], $CellContext`flag}, 
        TagBox[
         DynamicBox[GraphComputation`NetworkGraphicsBox[
          3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
          CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
           SynchronousUpdating -> False, 
           TrackedSymbols :> {$CellContext`flag}},
          
          ImageSizeCache->{{-0.06532231598990279, 
           158.7645410659899}, {-63.23930669098989, 58.28533653037081}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False,
        UnsavedVariables:>{$CellContext`flag}]],
      DefaultBaseStyle->{
       "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
        Hue[0.8, 1., 0.6]},
      FormatType->TraditionalForm,
      FrameTicks->None,
      ImageSize->{159.69921875, Automatic}]}], "}"}]}], 
  ";"}]], "Input",ExpressionUUID->"030173ad-6b62-4a20-bd19-9a9b3f5ee848"],

Cell[BoxData[
 RowBox[{"IGVF2IsomorphicQ", "[", 
  RowBox[{"g1", ",", "g2"}], 
  "]"}]], "Input",ExpressionUUID->"8373a2a4-baa3-4436-8ba2-b7f9ed936aac"],

Cell[TextData[{
 Cell[BoxData[
 "IGColoredSimpleGraph"],ExpressionUUID->
  "d434f327-77d2-4f4c-9a5e-f6757253893e"],
 " can encode them as coloured graphs. Its output can be supplied directly to \
",
 Cell[BoxData[
 "IGVF2IsomorphicQ"],ExpressionUUID->"c285d9c7-0f1b-4a69-aa9e-a60a9a4c05c3"],
 "."
}], "Text",ExpressionUUID->"f8fe07c9-fb48-44a1-92d1-2ec9e0d961c5"],

Cell[BoxData[
 RowBox[{"IGColoredSimpleGraph", "[", "g1", 
  "]"}]], "Input",ExpressionUUID->"91d70f19-6816-455b-80d9-48bc165ca6cb"],

Cell[TextData[{
 "Now can can determine that ",
 Cell[BoxData["g1"],ExpressionUUID->"d4e69d89-201f-4d2c-802b-fb678bdf8817"],
 " is isomorphic to ",
 Cell[BoxData["g2"],ExpressionUUID->"c909d024-b77d-40f4-832c-0e35c2f5d867"],
 ", but not to ",
 Cell[BoxData["g3"],ExpressionUUID->"f76a290c-78f6-43d8-9788-c78bd0d09d1a"],
 "."
}], "Text",ExpressionUUID->"c72f17a8-cba6-4f5d-bbb3-a8c643466612"],

Cell[BoxData[
 RowBox[{"IGVF2IsomorphicQ", "[", 
  RowBox[{
   RowBox[{"IGColoredSimpleGraph", "[", "g1", "]"}], ",", 
   RowBox[{"IGColoredSimpleGraph", "[", "g2", "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"01d20403-6fcd-4c6e-a389-24bc29ff56e1"],

Cell[BoxData[
 RowBox[{"IGVF2IsomorphicQ", "[", 
  RowBox[{
   RowBox[{"IGColoredSimpleGraph", "[", "g1", "]"}], ",", 
   RowBox[{"IGColoredSimpleGraph", "[", "g3", "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"a1ad597d-ca9a-4608-b822-86bdd534d14d"],

Cell["\<\
When searching for subgraphs in multigraphs with this method, be aware that a \
match occurs only if the edge multiplicities are the same. This sort of \
matching is useful e.g. in substructure search chemistry, where a double bond \
must only match another double bond, but not a single one.\
\>", "Text",ExpressionUUID->"781853e6-779c-48a3-95fa-3094a8e1bf34"],

Cell[BoxData[
 RowBox[{"IGVF2SubisomorphicQ", "[", 
  RowBox[{
   RowBox[{"IGColoredSimpleGraph", "[", 
    GraphicsBox[
     NamespaceBox["NetworkGraphics",
      DynamicModuleBox[{Typeset`graph = HoldComplete[
        Graph[{1, 2, 3}, {Null, {{1, 2}, {2, 3}}}, {
         VertexSize -> {Medium}}]]}, 
       TagBox[
        GraphicsGroupBox[
         GraphicsComplexBox[{{0., 3.6739403974420594`*^-16}, {1., 
          2.4492935982947064`*^-16}, {2., 0.}}, {
           {Hue[0.6, 0.7, 0.5], Opacity[0.7], LineBox[{{1, 2}, {2, 3}}]}, 
           {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
            DiskBox[1, 0.1], DiskBox[2, 0.1], DiskBox[3, 0.1]}}]],
        MouseAppearanceTag["NetworkGraphics"]],
       AllowKernelInitialization->False]],
     DefaultBaseStyle->{
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
     FormatType->TraditionalForm,
     FrameTicks->None], "]"}], ",", 
   RowBox[{"IGColoredSimpleGraph", "[", 
    GraphicsBox[
     NamespaceBox["NetworkGraphics",
      DynamicModuleBox[{Typeset`graph = HoldComplete[
        Graph[{1, 2, 3}, {Null, {{1, 2}, {2, 3}, {1, 3}, {1, 2}, {2, 3}}}, {
         VertexLabels -> {None}, VertexSize -> {0.1}}]]}, 
       TagBox[GraphicsGroupBox[GraphicsComplexBox[CompressedData["
1:eJwt0n8s1HEcx/GLZpySftksK9aPNRtSTefHejcUi9muH5zhWJtqSFwz/Vgp
4xoj0c6vmkmJ4iRU2NX7Ri2byqGLUM7duR+oKMrlNtW9P5/ts8+++/73ej7c
Tpw9kmjF4XCC/t3/b324wHDx2TQuLP8/48jNrwr3vfAogGM5syCl/2Bv+Vbh
0pJ1wZmiKYypLSr91jeITVnBvgL/KfS0n5M2v1Rg6Z2htEsfjDjzVWOrTulF
qZvWeUOMEdseS07/Sn+N+0zGjUl9BnTkjfbzXRHdTbudFN4GDM0QeU9JWvHj
3FjSvWw9yssXhE5l1bhvsaI3rEuHnFSvH1/kuRChEztaRQ+hbnapySdfA9W+
aqnqmRIDjcc01hNa4K2PbA+eH8SOukmR0EMHaRErzLx1A8hNVkmupephYMfP
iZG1CrwZL9n5+J4BdmbH3Wg19GJBmY3LrrdGCF29qWQm4w1ulR9WH9NPQaNA
6WD9vgs7T175mDE/Ded/1Wz7Y6XH+HfmxmnDEPLz+ruXhydxz1XJq4fvleg8
I18ZIdOitddqXkL5IPp1CDMLpRpche58YUg/ptRGJQmlajQ3XIuy6XyHdkEe
BQLZBLZXlfZeeNqDSq9TxdxRFY7dP1q4Jqcbsz5tUJnsVDgsHs98ypehjG8S
yRTd+CAn1dbEH4eA5K8LcX1yLIv+nphuNwGq2+7Fkdtl2BbheeiFSA1pt0W3
xLzn6HDK34+r1cBw1N1zPqMtaEreXnk5dhJcV9if/72lCcVLvGzeqA6q+wLm
3FvqsCZ3MVIQb4Bm7sHXyrQa7BwICfutN4KC9oA2tkcK7QWb2V7htCeI2Z5a
2hvy2N5XqQdYsR6h1AuesF7N1BN4rKeQesNn1ns/eQDXJPLwmbyAooK8eJMn
6GGe9pM3qGbenpBHMDOPleQV9n4jry3kGY4zzxyzxTvkMO+O9pY9oJXtoaK9
oJLtlUB7whW25yLtDbNs73rqATash+0dSy9oYL0E1BOKWE8F9YYS1jubPEDs
dfIwQl7ApZa8OJAnMDNPIvIGBxrJWyB5BE/m0Y28wg7mNZo8QxTznEXeIYd5
/wuhYU7e
          "], {
           {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
            {Arrowheads[0.], 
             ArrowBox[BezierCurveBox[{
              1, {-0.6796738226668951, 0.3924098644778713}, 2}], 
              0.08660254037844384]}, 
            {Arrowheads[0.], 
             ArrowBox[BezierCurveBox[{
              1, {-0.18635158111754713`, 0.10759013552212354`}, 2}], 
              0.08660254037844384]}, 
            {Arrowheads[0.], ArrowBox[{1, 3}, 0.08660254037844384]}, 
            {Arrowheads[0.], 
             ArrowBox[BezierCurveBox[{
              2, {0.6796738226668931, 0.39240986447787535`}, 3}], 
              0.08660254037844384]}, 
            {Arrowheads[0.], 
             ArrowBox[BezierCurveBox[{
              2, {0.18635158111754296`, 0.10759013552212814`}, 3}], 
              0.08660254037844384]}}, 
           {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
            DiskBox[1, 0.08660254037844384], DiskBox[2, 0.08660254037844384], 
            DiskBox[3, 0.08660254037844384]}}]],
        MouseAppearanceTag["NetworkGraphics"]],
       AllowKernelInitialization->False]],
     DefaultBaseStyle->{
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
     FormatType->TraditionalForm,
     FrameTicks->None], "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"0cda3baa-a548-463b-8319-93bcbb19eeb8"],

Cell[BoxData[
 RowBox[{"IGVF2SubisomorphicQ", "[", 
  RowBox[{
   RowBox[{"IGColoredSimpleGraph", "[", 
    GraphicsBox[
     NamespaceBox["NetworkGraphics",
      DynamicModuleBox[{Typeset`graph = HoldComplete[
        Graph[{1, 2, 3}, {Null, {{1, 2}, {2, 3}, {2, 3}}}, {
         VertexLabels -> {None}, VertexSize -> {Medium}}]]}, 
       TagBox[GraphicsGroupBox[GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGBQBmIQDQNcXfN8LCt32UB4H+zZY0SM1ZZthPIZHGDqCr7F
Vc3Y8NHe4ESUutDbRfZJJfKKj+U+2SeU7zp+PXG5vbbQgqeH+4D8tcqv52iv
ts81Nuv68f+TfUPT8SRlj3X2/2N+s9sVfba/YdJ28mTUBnv3NTXbAp5+ts+Y
kHLUznKj/f0vJ4vfRHyxPxDV/+7Nvo3258+AwBd7hqAdcq2vN9qbGIPAb/sf
gRC+CrdZj/Dy3/Y7oOr3Bjd7rpf6Y58ANY9lMcuPg71/7C9A7Zt+5mQpO8Nf
+wSoe26+jZeyKfxr7wB178LuB/dkHgL5UP9M4VzYmu7/z14A6l+Y/z8cB/P3
w/yvAFG/H+Z/BYh5+2H+d4DYtx/m/x0Q9+yH+d8D4t79MP8vgPhnP8z/DyD+
3Q/z/wsoH+b/FVD1MP8HQM2D+f8A1D6Y/2Hugfkf5l6Y/2H+gfkf5l8APSUY
Ow==
          "], {
           {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
            {Arrowheads[0.], ArrowBox[{1, 2}, 0.1]}, 
            {Arrowheads[0.], 
             ArrowBox[BezierCurveBox[{
              2, {1.499999999999998, 0.16444074718311621`}, 3}], 0.1]}, 
            {Arrowheads[0.], 
             ArrowBox[BezierCurveBox[{
              2, {1.4999999999999984`, -0.1644407471831161}, 3}], 0.1]}}, 
           {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
            DiskBox[1, 0.1], DiskBox[2, 0.1], DiskBox[3, 0.1]}}]],
        MouseAppearanceTag["NetworkGraphics"]],
       AllowKernelInitialization->False]],
     DefaultBaseStyle->{
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
     FormatType->TraditionalForm,
     FrameTicks->None], "]"}], ",", 
   RowBox[{"IGColoredSimpleGraph", "[", 
    GraphicsBox[
     NamespaceBox["NetworkGraphics",
      DynamicModuleBox[{Typeset`graph = HoldComplete[
        Graph[{1, 2, 3}, {Null, {{1, 2}, {2, 3}, {1, 3}, {1, 2}, {2, 3}}}, {
         VertexLabels -> {None}, VertexSize -> {0.1}}]]}, 
       TagBox[GraphicsGroupBox[GraphicsComplexBox[CompressedData["
1:eJwt0n8s1HEcx/GLZpySftksK9aPNRtSTefHejcUi9muH5zhWJtqSFwz/Vgp
4xoj0c6vmkmJ4iRU2NX7Ri2byqGLUM7duR+oKMrlNtW9P5/ts8+++/73ej7c
Tpw9kmjF4XCC/t3/b324wHDx2TQuLP8/48jNrwr3vfAogGM5syCl/2Bv+Vbh
0pJ1wZmiKYypLSr91jeITVnBvgL/KfS0n5M2v1Rg6Z2htEsfjDjzVWOrTulF
qZvWeUOMEdseS07/Sn+N+0zGjUl9BnTkjfbzXRHdTbudFN4GDM0QeU9JWvHj
3FjSvWw9yssXhE5l1bhvsaI3rEuHnFSvH1/kuRChEztaRQ+hbnapySdfA9W+
aqnqmRIDjcc01hNa4K2PbA+eH8SOukmR0EMHaRErzLx1A8hNVkmupephYMfP
iZG1CrwZL9n5+J4BdmbH3Wg19GJBmY3LrrdGCF29qWQm4w1ulR9WH9NPQaNA
6WD9vgs7T175mDE/Ded/1Wz7Y6XH+HfmxmnDEPLz+ruXhydxz1XJq4fvleg8
I18ZIdOitddqXkL5IPp1CDMLpRpche58YUg/ptRGJQmlajQ3XIuy6XyHdkEe
BQLZBLZXlfZeeNqDSq9TxdxRFY7dP1q4Jqcbsz5tUJnsVDgsHs98ypehjG8S
yRTd+CAn1dbEH4eA5K8LcX1yLIv+nphuNwGq2+7Fkdtl2BbheeiFSA1pt0W3
xLzn6HDK34+r1cBw1N1zPqMtaEreXnk5dhJcV9if/72lCcVLvGzeqA6q+wLm
3FvqsCZ3MVIQb4Bm7sHXyrQa7BwICfutN4KC9oA2tkcK7QWb2V7htCeI2Z5a
2hvy2N5XqQdYsR6h1AuesF7N1BN4rKeQesNn1ns/eQDXJPLwmbyAooK8eJMn
6GGe9pM3qGbenpBHMDOPleQV9n4jry3kGY4zzxyzxTvkMO+O9pY9oJXtoaK9
oJLtlUB7whW25yLtDbNs73rqATash+0dSy9oYL0E1BOKWE8F9YYS1jubPEDs
dfIwQl7ApZa8OJAnMDNPIvIGBxrJWyB5BE/m0Y28wg7mNZo8QxTznEXeIYd5
/wuhYU7e
          "], {
           {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
            {Arrowheads[0.], 
             ArrowBox[BezierCurveBox[{
              1, {-0.6796738226668951, 0.3924098644778713}, 2}], 
              0.08660254037844384]}, 
            {Arrowheads[0.], 
             ArrowBox[BezierCurveBox[{
              1, {-0.18635158111754713`, 0.10759013552212354`}, 2}], 
              0.08660254037844384]}, 
            {Arrowheads[0.], ArrowBox[{1, 3}, 0.08660254037844384]}, 
            {Arrowheads[0.], 
             ArrowBox[BezierCurveBox[{
              2, {0.6796738226668931, 0.39240986447787535`}, 3}], 
              0.08660254037844384]}, 
            {Arrowheads[0.], 
             ArrowBox[BezierCurveBox[{
              2, {0.18635158111754296`, 0.10759013552212814`}, 3}], 
              0.08660254037844384]}}, 
           {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
            DiskBox[1, 0.08660254037844384], DiskBox[2, 0.08660254037844384], 
            DiskBox[3, 0.08660254037844384]}}]],
        MouseAppearanceTag["NetworkGraphics"]],
       AllowKernelInitialization->False]],
     DefaultBaseStyle->{
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
     FormatType->TraditionalForm,
     FrameTicks->None], "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"48facb5f-f71b-4e2a-9f0b-4e621faaa197"],

Cell[TextData[{
 "Use ",
 Cell[BoxData[
 "IGSubisomorphicQ"],ExpressionUUID->"8bcc145b-3a87-4dcb-b12a-5a0a3ba946e1"],
 " to match any subgraph."
}], "Text",ExpressionUUID->"10a1d22a-9171-4656-9b09-afce6cad22ce"],

Cell[BoxData[
 RowBox[{"IGSubisomorphicQ", "[", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3}, {Null, {{1, 2}, {2, 3}}}, {VertexSize -> {Medium}}]]}, 
      TagBox[
       GraphicsGroupBox[
        GraphicsComplexBox[{{0., 3.6739403974420594`*^-16}, {1., 
         2.4492935982947064`*^-16}, {2., 0.}}, {
          {Hue[0.6, 0.7, 0.5], Opacity[0.7], LineBox[{{1, 2}, {2, 3}}]}, 
          {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
           DiskBox[1, 0.1], DiskBox[2, 0.1], DiskBox[3, 0.1]}}]],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None], ",", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3}, {Null, {{1, 2}, {2, 3}, {1, 3}, {1, 2}, {2, 3}}}, {
        VertexLabels -> {None}, VertexSize -> {0.1}}]]}, 
      TagBox[GraphicsGroupBox[GraphicsComplexBox[CompressedData["
1:eJwt0n8s1HEcx/GLZpySftksK9aPNRtSTefHejcUi9muH5zhWJtqSFwz/Vgp
4xoj0c6vmkmJ4iRU2NX7Ri2byqGLUM7duR+oKMrlNtW9P5/ts8+++/73ej7c
Tpw9kmjF4XCC/t3/b324wHDx2TQuLP8/48jNrwr3vfAogGM5syCl/2Bv+Vbh
0pJ1wZmiKYypLSr91jeITVnBvgL/KfS0n5M2v1Rg6Z2htEsfjDjzVWOrTulF
qZvWeUOMEdseS07/Sn+N+0zGjUl9BnTkjfbzXRHdTbudFN4GDM0QeU9JWvHj
3FjSvWw9yssXhE5l1bhvsaI3rEuHnFSvH1/kuRChEztaRQ+hbnapySdfA9W+
aqnqmRIDjcc01hNa4K2PbA+eH8SOukmR0EMHaRErzLx1A8hNVkmupephYMfP
iZG1CrwZL9n5+J4BdmbH3Wg19GJBmY3LrrdGCF29qWQm4w1ulR9WH9NPQaNA
6WD9vgs7T175mDE/Ded/1Wz7Y6XH+HfmxmnDEPLz+ruXhydxz1XJq4fvleg8
I18ZIdOitddqXkL5IPp1CDMLpRpche58YUg/ptRGJQmlajQ3XIuy6XyHdkEe
BQLZBLZXlfZeeNqDSq9TxdxRFY7dP1q4Jqcbsz5tUJnsVDgsHs98ypehjG8S
yRTd+CAn1dbEH4eA5K8LcX1yLIv+nphuNwGq2+7Fkdtl2BbheeiFSA1pt0W3
xLzn6HDK34+r1cBw1N1zPqMtaEreXnk5dhJcV9if/72lCcVLvGzeqA6q+wLm
3FvqsCZ3MVIQb4Bm7sHXyrQa7BwICfutN4KC9oA2tkcK7QWb2V7htCeI2Z5a
2hvy2N5XqQdYsR6h1AuesF7N1BN4rKeQesNn1ns/eQDXJPLwmbyAooK8eJMn
6GGe9pM3qGbenpBHMDOPleQV9n4jry3kGY4zzxyzxTvkMO+O9pY9oJXtoaK9
oJLtlUB7whW25yLtDbNs73rqATash+0dSy9oYL0E1BOKWE8F9YYS1jubPEDs
dfIwQl7ApZa8OJAnMDNPIvIGBxrJWyB5BE/m0Y28wg7mNZo8QxTznEXeIYd5
/wuhYU7e
         "], {
          {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
           {Arrowheads[0.], 
            ArrowBox[BezierCurveBox[{
             1, {-0.6796738226668951, 0.3924098644778713}, 2}], 
             0.08660254037844384]}, 
           {Arrowheads[0.], 
            ArrowBox[BezierCurveBox[{
             1, {-0.18635158111754713`, 0.10759013552212354`}, 2}], 
             0.08660254037844384]}, 
           {Arrowheads[0.], ArrowBox[{1, 3}, 0.08660254037844384]}, 
           {Arrowheads[0.], 
            ArrowBox[BezierCurveBox[{
             2, {0.6796738226668931, 0.39240986447787535`}, 3}], 
             0.08660254037844384]}, 
           {Arrowheads[0.], 
            ArrowBox[BezierCurveBox[{
             2, {0.18635158111754296`, 0.10759013552212814`}, 3}], 
             0.08660254037844384]}}, 
          {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
           DiskBox[1, 0.08660254037844384], DiskBox[2, 0.08660254037844384], 
           DiskBox[3, 0.08660254037844384]}}]],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None]}], 
  "]"}]], "Input",ExpressionUUID->"42922d7b-db97-4dd1-873e-b77a79e1a5b3"]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Maximum flow and minimum cut", \
"Section",ExpressionUUID->"0b190476-19cd-4672-980b-9408a1bb1330"],

Cell[CellGroupData[{

Cell["Maximum flow", \
"Subsection",ExpressionUUID->"bd8f9c39-4fec-4e74-b67a-7cc0dce3a431"],

Cell[CellGroupData[{

Cell["IGMaximumFlowValue", \
"Subsubsection",ExpressionUUID->"f9071811-f1c0-4bda-8fe3-5e428720c8c3"],

Cell[BoxData[
 RowBox[{"?", 
  "IGMaximumFlowValue"}]], \
"Input",ExpressionUUID->"0229521b-c48e-4c35-8d3b-16605c6f13fb"],

Cell[TextData[{
 Cell[BoxData[
 "IGMaximumFlowValue"],ExpressionUUID->"6edb1e9a-db09-4840-b311-d5948e9cf262"],
 " is equivalent to ",
 Cell[BoxData[
 "IGMinimumCutValue"],ExpressionUUID->
  "1f7cede1-6a6b-48b9-abf8-91ce7ef68c31"],
 " except that it uses the ",
 Cell[BoxData[
 "EdgeCapacity"],ExpressionUUID->"5160fdef-c959-47a0-b684-c2f9c9e6e0c4"],
 " property instead of ",
 Cell[BoxData[
 "EdgeWeight"],ExpressionUUID->"94b2d03c-f7d6-4256-90f4-2e199fa3b78c"],
 "."
}], "Text",ExpressionUUID->"16d139f0-6975-4984-bdf4-212b6a839390"],

Cell[TextData[{
 "Edge capacities are taken from the ",
 Cell[BoxData[
 "EdgeCapacity"],ExpressionUUID->"96c5462a-fcef-442b-9dc2-cacc3d024d54"],
 " property."
}], "Text",ExpressionUUID->"61df8ce2-7018-44a9-8d0d-679dbe1b2b66"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4, 5, 
        6}, {{{1, 2}, {2, 3}, {3, 4}, {5, 4}, {6, 5}, {1, 6}, {2, 6}, {5, 3}},
          Null}, {EdgeCapacity -> {3.5, 2, 1, 2.5, 5, 1, 3.5, 4}, EdgeStyle -> {
           Directive[
            Opacity[1], 
            Arrowheads[0.08], 
            RGBColor[0.3, 0.45, 0.78]], DirectedEdge[3, 4] -> 
           Thickness[0.005], DirectedEdge[5, 3] -> Thickness[0.02], 
           DirectedEdge[1, 2] -> Thickness[0.0175], DirectedEdge[2, 3] -> 
           Thickness[0.01], DirectedEdge[6, 5] -> Thickness[0.025], 
           DirectedEdge[1, 6] -> Thickness[0.005], DirectedEdge[2, 6] -> 
           Thickness[0.0175], DirectedEdge[5, 4] -> Thickness[0.0125]}, 
         GraphLayout -> "SpringElectricalEmbedding", VertexLabels -> {
           Placed["Name", Center]}, VertexSize -> {0.3}, VertexStyle -> {
           RGBColor[
           0.7792314074074074, 0.8257191111111111, 0.9651546666666667]}}]]}, 
      TagBox[GraphicsGroupBox[{
         {RGBColor[0.3, 0.45, 0.78], Opacity[1], Arrowheads[0.08], 
          {Thickness[0.0175], 
           ArrowBox[{{0., 0.42880234979817766`}, {0.8729046959103667, 0.}}, 
            0.1287744093092715]}, 
          {Thickness[0.005], 
           ArrowBox[{{0., 0.42880234979817766`}, {0.8721007115726392, 
            0.8586516800763827}}, 0.1287744093092715]}, 
          {Thickness[0.01], 
           ArrowBox[{{0.8729046959103667, 0.}, {2.0419279145059956`, 
            0.00010764519335110245`}}, 0.1287744093092715]}, 
          {Thickness[0.0175], 
           ArrowBox[{{0.8729046959103667, 0.}, {0.8721007115726392, 
            0.8586516800763827}}, 0.1287744093092715]}, 
          {Thickness[0.005], 
           ArrowBox[{{2.0419279145059956`, 0.00010764519335110245`}, {
            2.9166144352044694`, 0.4286360965942635}}, 0.1287744093092715]}, 
          {Thickness[0.02], 
           ArrowBox[{{2.0432183440889897`, 0.8586027374141084}, {
            2.0419279145059956`, 0.00010764519335110245`}}, 
            0.1287744093092715]}, 
          {Thickness[0.0125], 
           ArrowBox[{{2.0432183440889897`, 0.8586027374141084}, {
            2.9166144352044694`, 0.4286360965942635}}, 0.1287744093092715]}, 
          {Thickness[0.025], 
           ArrowBox[{{0.8721007115726392, 0.8586516800763827}, {
            2.0432183440889897`, 0.8586027374141084}}, 
            0.1287744093092715]}}, 
         {RGBColor[
          0.7792314074074074, 0.8257191111111111, 0.9651546666666667], 
          EdgeForm[{GrayLevel[0], Opacity[
          0.7]}], {DiskBox[{0., 0.42880234979817766}, 0.1287744093092715], 
           InsetBox["1", {0., 0.42880234979817766},
            BaseStyle->"Graphics"]}, {
           DiskBox[{0.8729046959103667, 0.}, 0.1287744093092715], 
           InsetBox["2", {0.8729046959103667, 0.},
            BaseStyle->"Graphics"]}, {
           DiskBox[{2.0419279145059956, 0.00010764519335110245}, 
            0.1287744093092715], 
           InsetBox["3", {2.0419279145059956, 0.00010764519335110245},
            BaseStyle->"Graphics"]}, {
           DiskBox[{2.9166144352044694, 0.4286360965942635}, 
            0.1287744093092715], 
           InsetBox["4", {2.9166144352044694, 0.4286360965942635},
            BaseStyle->"Graphics"]}, {
           DiskBox[{2.0432183440889897, 0.8586027374141084}, 
            0.1287744093092715], 
           InsetBox["5", {2.0432183440889897, 0.8586027374141084},
            BaseStyle->"Graphics"]}, {
           DiskBox[{0.8721007115726392, 0.8586516800763827}, 
            0.1287744093092715], 
           InsetBox["6", {0.8721007115726392, 0.8586516800763827},
            BaseStyle->"Graphics"]}}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{218.77734375, Automatic}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"IGEdgeProp", "[", "EdgeCapacity", "]"}], "[", "g", 
  "]"}]}], "Input",ExpressionUUID->"7bb634a0-e15b-4539-b532-9f2d7bbf90c2"],

Cell[BoxData[
 RowBox[{"IGMaximumFlowValue", "[", 
  RowBox[{"g", ",", "1", ",", "4"}], 
  "]"}]], "Input",ExpressionUUID->"571588c0-eeb2-4e29-acbb-75764646e044"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGMaximumFlowMatrix", \
"Subsubsection",ExpressionUUID->"e2cc7ec9-7360-4fc1-b2ab-b6f50be3c341"],

Cell[BoxData[
 RowBox[{"?", 
  "IGMaximumFlowMatrix"}]], \
"Input",ExpressionUUID->"83fa5051-fddb-49a9-b24a-85c36e91dd56"],

Cell[TextData[{
 "Element ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["F", 
    RowBox[{"i", "\[InvisibleComma]", "j"}]], TraditionalForm]],
  ExpressionUUID->"9ea7e89c-0d28-4b3d-9945-035053e28a99"],
 " of the flow matrix is the flow through the edge connecting the ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "259574dc-79e5-4e33-8daf-04da1b5d474f"],
 "th node to the ",
 Cell[BoxData[
  FormBox["j", TraditionalForm]],ExpressionUUID->
  "1cb8c079-be35-4da8-a866-b078547bc205"],
 "th one. In an undirected graph, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["F", 
     RowBox[{"i", "\[InvisibleComma]", "j"}]], "=", 
    RowBox[{"-", 
     SubscriptBox["F", 
      RowBox[{"i", "\[InvisibleComma]", "j"}]]}]}], TraditionalForm]],
  ExpressionUUID->"f1bb83e3-038a-4f6a-acba-de70c3130459"],
 "."
}], "Text",ExpressionUUID->"1885ab35-3c09-46a6-afdf-367d9656566e"],

Cell[TextData[{
 "Edge capacities are taken from the ",
 Cell[BoxData[
 "EdgeCapacity"],ExpressionUUID->"7fdc0fcf-6d61-467e-91c5-408c208e635b"],
 " property."
}], "Text",ExpressionUUID->"b30e1c2d-16d6-449b-87ad-2cfe1cae7f13"],

Cell["Let us take a directed graph with edge capacities set ...", \
"Text",ExpressionUUID->"914b15b1-bd17-41d0-899d-5eae791865a6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4, 5, 
        6}, {{{1, 2}, {2, 3}, {3, 4}, {5, 4}, {6, 5}, {1, 6}, {2, 6}, {5, 3}},
          Null}, {EdgeCapacity -> {3.5, 2, 1, 2.5, 5, 1, 3.5, 4}, EdgeStyle -> {
           Directive[
            Opacity[1], 
            Arrowheads[0.08], 
            RGBColor[0.3, 0.45, 0.78]], DirectedEdge[3, 4] -> 
           Thickness[0.005], DirectedEdge[5, 3] -> Thickness[0.02], 
           DirectedEdge[1, 2] -> Thickness[0.0175], DirectedEdge[2, 3] -> 
           Thickness[0.01], DirectedEdge[6, 5] -> Thickness[0.025], 
           DirectedEdge[1, 6] -> Thickness[0.005], DirectedEdge[2, 6] -> 
           Thickness[0.0175], DirectedEdge[5, 4] -> Thickness[0.0125]}, 
         GraphLayout -> "SpringElectricalEmbedding", VertexLabels -> {
           Placed["Name", Center]}, VertexSize -> {0.3}, VertexStyle -> {
           RGBColor[
           0.7792314074074074, 0.8257191111111111, 0.9651546666666667]}}]]}, 
      TagBox[GraphicsGroupBox[{
         {RGBColor[0.3, 0.45, 0.78], Opacity[1], Arrowheads[0.08], 
          {Thickness[0.0175], 
           ArrowBox[{{0., 0.42880234979817766`}, {0.8729046959103667, 0.}}, 
            0.1287744093092715]}, 
          {Thickness[0.005], 
           ArrowBox[{{0., 0.42880234979817766`}, {0.8721007115726392, 
            0.8586516800763827}}, 0.1287744093092715]}, 
          {Thickness[0.01], 
           ArrowBox[{{0.8729046959103667, 0.}, {2.0419279145059956`, 
            0.00010764519335110245`}}, 0.1287744093092715]}, 
          {Thickness[0.0175], 
           ArrowBox[{{0.8729046959103667, 0.}, {0.8721007115726392, 
            0.8586516800763827}}, 0.1287744093092715]}, 
          {Thickness[0.005], 
           ArrowBox[{{2.0419279145059956`, 0.00010764519335110245`}, {
            2.9166144352044694`, 0.4286360965942635}}, 0.1287744093092715]}, 
          {Thickness[0.02], 
           ArrowBox[{{2.0432183440889897`, 0.8586027374141084}, {
            2.0419279145059956`, 0.00010764519335110245`}}, 
            0.1287744093092715]}, 
          {Thickness[0.0125], 
           ArrowBox[{{2.0432183440889897`, 0.8586027374141084}, {
            2.9166144352044694`, 0.4286360965942635}}, 0.1287744093092715]}, 
          {Thickness[0.025], 
           ArrowBox[{{0.8721007115726392, 0.8586516800763827}, {
            2.0432183440889897`, 0.8586027374141084}}, 
            0.1287744093092715]}}, 
         {RGBColor[
          0.7792314074074074, 0.8257191111111111, 0.9651546666666667], 
          EdgeForm[{GrayLevel[0], Opacity[
          0.7]}], {DiskBox[{0., 0.42880234979817766}, 0.1287744093092715], 
           InsetBox["1", {0., 0.42880234979817766},
            BaseStyle->"Graphics"]}, {
           DiskBox[{0.8729046959103667, 0.}, 0.1287744093092715], 
           InsetBox["2", {0.8729046959103667, 0.},
            BaseStyle->"Graphics"]}, {
           DiskBox[{2.0419279145059956, 0.00010764519335110245}, 
            0.1287744093092715], 
           InsetBox["3", {2.0419279145059956, 0.00010764519335110245},
            BaseStyle->"Graphics"]}, {
           DiskBox[{2.9166144352044694, 0.4286360965942635}, 
            0.1287744093092715], 
           InsetBox["4", {2.9166144352044694, 0.4286360965942635},
            BaseStyle->"Graphics"]}, {
           DiskBox[{2.0432183440889897, 0.8586027374141084}, 
            0.1287744093092715], 
           InsetBox["5", {2.0432183440889897, 0.8586027374141084},
            BaseStyle->"Graphics"]}, {
           DiskBox[{0.8721007115726392, 0.8586516800763827}, 
            0.1287744093092715], 
           InsetBox["6", {0.8721007115726392, 0.8586516800763827},
            BaseStyle->"Graphics"]}}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{218.77734375, Automatic}]}], 
  ";"}]], "Input",ExpressionUUID->"5d709cab-8401-4cfb-a9f3-f0e3d8518983"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGEdgeProp", "[", "EdgeCapacity", "]"}], "[", "g", 
  "]"}]], "Input",ExpressionUUID->"72c900ae-5f87-4d27-89ed-130ff91970f4"],

Cell["\<\
... and compute the maximum flow between two of its vertices.\
\>", "Text",ExpressionUUID->"0b857c17-89b6-40dd-96fb-7d4a68ae0e63"],

Cell[BoxData[
 RowBox[{"flowMat", "=", 
  RowBox[{"IGMaximumFlowMatrix", "[", 
   RowBox[{"g", ",", "1", ",", "4"}], 
   "]"}]}]], "Input",ExpressionUUID->"6f270f59-6c70-45e5-8692-46e0e5932124"],

Cell["\<\
The result is returned as a sparse matrix containing the flows through each \
edge.\
\>", "Text",ExpressionUUID->"8b2ad706-aa0c-4840-b520-3d29cc86ca89"],

Cell[BoxData[
 RowBox[{"MatrixForm", "[", "flowMat", 
  "]"}]], "Input",ExpressionUUID->"3d5cd2ab-e172-4add-93c7-3ec22c5e1977"],

Cell["\<\
If the input is an undirected graph, the flow matrix contains entries of \
opposing sign for the two directions along each edge.\
\>", "Text",ExpressionUUID->"75234b51-ed58-4243-afb1-7f78b36e35f7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGMaximumFlowMatrix", "[", 
   RowBox[{
    RowBox[{"UndirectedGraph", "[", "g", "]"}], ",", "1", ",", "4"}], "]"}], "//",
   "MatrixForm"}]], \
"Input",ExpressionUUID->"ffa935ae-5902-47f2-a8bb-a7acf25b27bf"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Minimum edge cuts", \
"Subsection",ExpressionUUID->"8393fd43-03a7-4a47-aed8-5e8996b86279"],

Cell[CellGroupData[{

Cell["IGMinimumCut", \
"Subsubsection",ExpressionUUID->"2beaad44-2dae-4574-b103-3ebbfb791570"],

Cell[BoxData[
 RowBox[{"?", 
  "IGMinimumCut"}]], \
"Input",ExpressionUUID->"dac82ea5-ca71-4385-9fd5-20ceffcb90bf"],

Cell[TextData[{
 Cell[BoxData[
 "IGMinimumCut"],ExpressionUUID->"bd155ace-4dea-4ce8-bd92-a20f3e5d49ce"],
 " finds a single minimum edge cut in a weighted graph. To find all minimum \
cuts between two given vertices, use ",
 Cell[BoxData[
 "IGFindMinimumCuts"],ExpressionUUID->
  "d76898d4-7f40-452e-9dc2-b1c2328057f7"],
 "."
}], "Text",ExpressionUUID->"100a7dca-a05b-471a-9569-6772df4ade7d"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGMinimumCutValue", \
"Subsubsection",ExpressionUUID->"9c1ed2bf-0081-49b3-a9ba-395aacbe875b"],

Cell[BoxData[
 RowBox[{"?", 
  "IGMinimumCutValue"}]], \
"Input",ExpressionUUID->"0d3233e4-ee82-4115-aad2-ab495ebd2346"],

Cell[TextData[{
 "Unlike ",
 Cell[BoxData[
 "IGEdgeConnectivity"],ExpressionUUID->"07493be9-bcb1-4268-ad18-5c7c78efbc29"],
 ", ",
 Cell[BoxData[
 "IGMinimumCutValue"],ExpressionUUID->
  "79a7242c-14aa-4f62-b484-4b4359f1ae74"],
 " takes weights into account."
}], "Text",ExpressionUUID->"4531e260-f4ef-4d02-9909-710017fd869b"],

Cell[BoxData[
 RowBox[{"IGMinimumCutValue", "[", 
  RowBox[{"Graph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "\[UndirectedEdge]", "2"}], ",", 
      RowBox[{"2", "\[UndirectedEdge]", "3"}]}], "}"}], ",", 
    RowBox[{"EdgeWeight", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"3.5", ",", "5.6"}], "}"}]}]}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"927c5513-04ab-4151-a56a-b4ab78782b5c"],

Cell[TextData[{
 "The minimum cut value of the null graph and singleton graph are returned as \
",
 Cell[BoxData["0"],ExpressionUUID->"6cbf6ebc-fb9c-495f-be17-fa6bc610ec5e"],
 " and ",
 Cell[BoxData[
 "\[Infinity]"],ExpressionUUID->"13604236-ddac-4bd6-805b-1c80ac2d5f1b"],
 ", respectively."
}], "Text",ExpressionUUID->"544f53b4-2369-4cd0-886a-fec7dd078de8"],

Cell[BoxData[
 RowBox[{"IGMinimumCutValue", "/@", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"IGEmptyGraph", "[", "0", "]"}], ",", 
    RowBox[{"IGEmptyGraph", "[", "1", "]"}]}], 
   "}"}]}]], "Input",ExpressionUUID->"1c9083d5-b77c-4d9e-b5dc-61ba9eb0082a"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGGomoryHuTree", \
"Subsubsection",ExpressionUUID->"2cd20380-d619-43dd-a3d2-af05a5e1781a"],

Cell[BoxData[
 RowBox[{"?", 
  "IGGomoryHuTree"}]], \
"Input",ExpressionUUID->"1c3092cc-140a-4643-a212-ac5acd9a5f28"],

Cell[TextData[{
 "The Gomory\[Dash]Hu tree is a weighted tree that encodes the minimum cuts \
between all pairs of vertices of an undirected graph. The Gomory\[Dash]Hu \
tree has the same vertices as the graph it characterizes. The minimum cut \
between an ",
 Cell[BoxData[
  FormBox["s", TraditionalForm]],ExpressionUUID->
  "1ed0ce10-c3fd-439e-a0ed-ec7a0a17e209"],
 "-",
 Cell[BoxData[
  FormBox["t", TraditionalForm]],ExpressionUUID->
  "5d447a46-ecd4-4c50-8762-54102d058a87"],
 " pair of the graph has the same size as smallest edge weight on the path \
from ",
 Cell[BoxData[
  FormBox["s", TraditionalForm]],ExpressionUUID->
  "d50f14ba-bc50-4372-8a0e-8a4213a4358a"],
 " to ",
 Cell[BoxData[
  FormBox["t", TraditionalForm]],ExpressionUUID->
  "6cdc3f60-6bcd-4bb4-98eb-09f4b8241744"],
 " in the Gomory\[Dash]Hu tree."
}], "Text",ExpressionUUID->"72bf7db4-adc8-4f28-a3f5-3821ba715ceb"],

Cell["Weighted graphs are supported.", \
"Text",ExpressionUUID->"afd2d996-aa24-4954-9109-94040d86c9e0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {
        Null, {{1, 2}, {1, 3}, {2, 3}, {4, 3}, {2, 5}, {6, 7}, {8, 5}, {5, 
         9}, {5, 7}, {1, 10}, {3, 9}, {2, 4}, {8, 6}, {4, 5}, {2, 7}, {10, 
         3}, {4, 9}, {6, 5}, {8, 9}}}, {
        PerformanceGoal -> "Quality", VertexShapeFunction -> {"Name"}}]], 
      Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         LineBox[{{
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$2", Automatic, Center]}, {
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}, {
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$10", Automatic, Center]}, {
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}, {
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}, {
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$5", Automatic, Center]}, {
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$7", Automatic, Center]}, {
            DynamicLocation["VertexID$3", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}, {
            DynamicLocation["VertexID$3", Automatic, Center], 
            DynamicLocation["VertexID$9", Automatic, Center]}, {
            DynamicLocation["VertexID$3", Automatic, Center], 
            DynamicLocation["VertexID$10", Automatic, Center]}, {
            DynamicLocation["VertexID$4", Automatic, Center], 
            DynamicLocation["VertexID$5", Automatic, Center]}, {
            DynamicLocation["VertexID$4", Automatic, Center], 
            DynamicLocation["VertexID$9", Automatic, Center]}, {
            DynamicLocation["VertexID$5", Automatic, Center], 
            DynamicLocation["VertexID$6", Automatic, Center]}, {
            DynamicLocation["VertexID$5", Automatic, Center], 
            DynamicLocation["VertexID$7", Automatic, Center]}, {
            DynamicLocation["VertexID$5", Automatic, Center], 
            DynamicLocation["VertexID$8", Automatic, Center]}, {
            DynamicLocation["VertexID$5", Automatic, Center], 
            DynamicLocation["VertexID$9", Automatic, Center]}, {
            DynamicLocation["VertexID$6", Automatic, Center], 
            DynamicLocation["VertexID$7", Automatic, Center]}, {
            DynamicLocation["VertexID$6", Automatic, Center], 
            DynamicLocation["VertexID$8", Automatic, Center]}, {
            DynamicLocation["VertexID$8", Automatic, Center], 
            DynamicLocation["VertexID$9", Automatic, Center]}}]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["1", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {3.161359973357035, 1.2162508097745013`}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$1"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["2", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {1.9529951830072467`, 1.2551871062310962`}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$2"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["3", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {2.6480528723442407`, 0.5158289226283623}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$3"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["4", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {1.8531982794011037`, 0.4768707479298022}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$4"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["5", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0.9436434707201796, 0.7970125180276176}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$5"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["6", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0., 1.0626763999734785`}, BaseStyle -> 
           "Graphics"], "DynamicName", BoxID -> "VertexID$6"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["7", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0.7998403488481416, 1.643390440440366}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$7"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["8", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0.2864415440872574, 0.1599641142379301}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$8"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["9", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {1.3993071717561287`, 0.}, BaseStyle -> 
           "Graphics"], "DynamicName", BoxID -> "VertexID$9"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["10", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {3.801633127672021, 0.6369245331251476}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> 
          "VertexID$10"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        
        ImageSizeCache->{{0., 216.1484375}, {-55.99999999999999, 
         51.03424322090206}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{217.1484375, Automatic},
    ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzFnXl8rVV571/JOWFSsM7Wqwexzrpbq3VWjFic3Yq219vGWuo1B3urpuq1
jcPVRlsJojaiNiCaOgSRMBg4GjgQhSAQhoAn6MlBAkQgIBvYQhg2usHV57vW
81t77U0498/m88mBvHn3Ws961jP8nmGtvPmwjxz+3vcf9pH3veewA177ocOG
D3/fez58wCEf/JA96ntIVT3ktKqqdh1Q8f/B/tf/iV+n84//8N/8/9+I/9kU
1htrodFshMZaI7QTleER6ZWvx//0hdbaQhit1+I69oj/9tm/9TAxuxzfiJ95
ePrMsfE//SG0l8NQWnv8rg8OhoHOx4enV3wu//h+5cf3CY35Mf9oPcyutvzV
9TA7Ws/PF9fT0/3Lj/aFlemR+MrA6Lz9lBYZwloYrSVKhqZWyo8lPuwV2q31
0Gyuh/VW4sLK1FCaaXgm82W/br6E9lqYGhks+LI51Icnw8LcRProwERobrhA
6FoVRcYt52l9IqyXTHlY+syXnaf33X9/uPnW9bD0y7Vw9oW7wvd+dEk4/oeX
7BF/vactfCize2hiLjQhu90McxNDnW0b2HiKzzsX7r//9+Hm29bDFVethbkF
m+KHl4Tx7/w4fHx8Jrxv9PhNYeunp4ySD37uxLwlE/U0ZW14JrF7M9OG6aEq
M2G9hwmf7Znt51fdGH580ZXhBFvQ0VM/CZ/88mnM1h9n25f/jQRAiK03rh0e
iIJJp2BiaT3uNTu+OjNc7sFmZ/udd9/bLXf9iaJPFhTd0rwz/GLlxvCTi68M
35+9NBz93UTR349+L1G0Vzj8X44PH/v3H4QvfXsuTG27OJx14XJYuvKGcNMt
t4f2fff3Z7HrsGd0riHa8kbVJ2HNJuca2/t/jzo5jB13ZrjwZ9cwUKIxEV99
1Gn8/e8LGo1rJ55xafgKXDs60rhnpHHPMPKlgr4LdoYdu6Dvjjjsw/JGtYqN
Gg8Ne7pHJr6Zia9PLm12Kbv+pmb4xyOmmSR+f+jIk8LJZ10ORYnaJATVBwtq
b/3NXWHn1TeFcy/5ZZg+YzF85fhzwv/7yunh/3wmU/vPXzo1fOlbZ4ep0y8O
28/fGX626/pwY+P28Lv2fdWj41D7hObieBbw2tBEWG60Qmt91XRwIBuF+aZv
aV/47e/uC+dfdnX412Nm7Sem6Qtf/u6PjRHXQ1Witqre5wu77fa7wrKIPPOy
8NXvnRs+lYisMpVfPDV88T/PDt85bSGc+dNfhMuXrwtrN9/OVNX/yJrdMjM1
4PYgqd3o3GoWu738vWtvuDX85w8uDP/w2ROM54k89uxH8z8P63e1qvsTeX/n
5DVvvzssX/PrcO6lkLcYvmbkffqr2+LHRd4/feGU8IVI3kXhTGPi5cvXhxtu
/o2R166e6kZkZW4yDEVjXgu1Wi0MDo+F+ZX1hzlVd93z2ygtJvCZKuNAOO6k
n4arfnVz1U5U/bWouuPusOvaX4f5S6+KUvAfJ8yHf/natvD+f+1Q9dGjTglH
TZ4Vvj2zEM4wpi3+4lfh+l8nql7t0yLLfNZUPU87+rUfxs2497ft6t407Tt8
2t+s3xOuXL05nLdo026/zD56rk/7/TwtqvT5b24P35q5MMyeZ9PuvC5Oy3AD
Pi0kM0UaNT2D0TM/3sHnMynYO/TI9rq6J5HyNFeT9nojrJnvbEQ/2npKQeEv
jcKfXrYSTrFZJr4/Hz7zHz/cgMKzohSw65Expl6te39XvdaHZwypmhmFvZ1I
bMWlP/8Vu51lm8VefMVqVPA7E5F/JJlsrYTJ4Xr23fw7MDQelptJJh/vVN9x
Z8t2uRHV5tSzfxaOcao/8G8dqj/yeTNR3zgzTJ56gVF9RSTjVzfeFqmuO9Vn
XbAcKcZyX7bzun2dDFQFj2LszKyFCT+Y+xnqV92RqH6Ki2poLYfhAkPUBgbD
YH2gA0EGhQGqP+hawM22gJU46rEnnhc+M/GjOKMWgMUa+8b2MHnKBeGH514R
LjGesYC7W7+t/qcv4PRzluICEP0rfrn2UF+AyU5UQONJXgBrxFaYE6t+Uy5g
U1gYF1qphcnFtT3c6jaXZ0JdaxqZBV6YdUsLuPPuVli5rhEdwA/mdoRjp88L
nz3mR2G4WADmFyfBDmwzQtn01bXbwj22A+/2qTERLMAUMVx57a/38wVcfd0t
4Rsnnx+NmhbwCXOtGLO77r63ujUt4MDSBwwkSgcnFuXA1mZHsstoyoH1R5m/
aOnaqD1fN3thhhfGl2R/7utnRFNy+k+W4qsYQfi+1UdGySAbhbvmhlv3d7Jx
25gO87mZbDN8cQuvvv6WqtFLdgcUjM43RXZredL97kTH7/bF/XcVc13aM84P
rfAKWYBWowfz6J5tU/jmKefHz7EuMywP98c4POATLtlwgsiFGZgrrN5NDyQ3
e9qxeZG7ODFYQhhxGR+OXp5mLERKbP1s3d/4ajAm5y2uRA/3aBc4UA0GCGpR
31/fckf1CH8fJIGqf/jIjrljRSAf3lsrRbobZA5Pzof1CDLXw8LUSAaZ9YnF
7O2GfDEYeKY3OUbGH+OUma2KPplf4b1AEY90yvgdfD/yG9uzjcP5YshtRdV1
JWV9kYuzY4Ndfrc+NpvhriiBGThOpjSk8TinBLSA7+QxYNOE2fnXF90GwATj
LR5BLVvAe6vd1raxkHGKzZcoGZldfQBPAG9MB7i0xT7eKTFDGj537BnxV5/6
yjaEv3qMD83v+JgBky4DxO4aeKmuKXliNqW1mC1NfXQ6rLFdrUaYGRvMhmmu
EUSQaWK0jsxsAOwJThCP8QI8xpiisI9zgsy2RF034JkJAtqB0Xnvqm6LuL40
0YnfWqGDNVeypR9fbA754MggkxowrJ7oxBg0ihPwHCOIO3+8v4/1x6IbTMvE
2J5FCGAWvrqyh5jFByGmE7qOLzTf649NGSKr+TZQ9SSnBwREKAA9SCeA9Q+d
HkQNIGuBS5ZgdvaCy6+O7+3s2a31zm4NWBy50hS+rRe71X6vj05cwqwmmdUB
Tg3ajGTynN8bTsjAlEgLt2DanbnDbvOsYXr3824pXp4aeoAUD00uZSl+z4aa
fe+TnRLM1IddljBXaOwTfWh0DdP1b8d2kDnB3c8cme9IlAiyri1Oh+HBgVAD
str3QH04TC+sCkhfuOOaqBf89FcbK7l2vAxezHse4CPg/ZERUGsJxZEloPjl
iZ4/9VFAAIzAVpqMa07ixUKd/8gfY58NP8VfWfT6ZJ8TpUJJeoE2Dt+Uqlos
59wcoxPMEqOAB3DW7yzVdmxaaitkCi7HSfLYQLLsJDEO5qKE2mBnzAoY7uI0
8fN9Ypw6kSWj8JrpmKOkQj+/PVc9w2clMDdjEJ8b/yRNqAmO9AGo2syqaVO1
kGZ9gc+KJjMbo6DtWNm/8BkIsgtFfKY/Bj3ziI9YPP5UnxikjMfAhkjWgK94
FpDy+WniP/OJwV/YOEYBGAFL37GBwj3bZ0WMhc/N7T7dXyV0hTsl0sXzEgow
5Hlp1hcWFha4wSgIHm7w0I316zn++ByXNlIRtpZnZNVqR5hRIlReAY3Y1lTn
polf5BOjN3BD/vfmW9ertxY69Cm3tAboa/6YwFLY3uLfZ/nEiDlwrESWCOwZ
jix/nCZ+sU8Mkpa7JQQgslL00KNIf+yPgZXC5MaUZ/vE7Bjw1SbrwoZAN4O7
1dmlke2TpYg/PdKJwR79+7fn4uiGgzAT1Zs3Vq7n+WOSLglff5+ISbsC+COb
RUBQgD80FqsB+Dsz0XOg0wMCZkUWHWe8BvJhw4Qu7Z3qTRvo3PN9VtIRQs32
bs1fJe1CEGRmOHMGKSIEMyWqZrspOfXsy+MoJ/zokkr4DO0huNboMPQNG+uh
DAYsgPcxOWSMQ7v/2KdgYcBtC1WzMiIFxJA4iG3dFIF+GMYsWfVYHx6pBHDw
HLOKrXz9Bgr6Z8X75EokaEj48/x9cB0JxV5ch6RhcU5L5Dw5L/iOnPKyYR9X
zEAopnBrp+Ewhe/IQqG80nf4gMPjV2S+MAl/WggoOQlzX10Qj0WY2Fc/KInq
i4kDhvmWyc8TfNbvnn5R1hRT+j/fWKGlipgM0hAyebffeY/b4b4YSx+3Abwj
wAfendxNjDn0OMyOXdc77NgUk7o8wylcvnz9azZQcpOyl/hjVq9RbDtf6APj
D0ji9CI7oh2Q3XSi4wAfhRyOBMSA1hP98UnbL8umy8Tw1Rur+Mt8TlJhOEob
zM1WQnTkD4+e+kkWYCI7EiYguhNKOvpiUtsBULWlx4xBhHkPpaJKvf6YPwOx
kaLqQmxGKMYHxHZ892xfdHtq7iBzggyN/NP8pVcdtLHufsJHEDAzX5SXRw75
Mg+5vpMm1FLMrscRkLN77v2d9ETZH76NA6/cQDs/LQ00QIb16kVepDVAGt8q
J+yLaR2GsJAxo3gJkkO9l2+oeS0pZGt5qswBvMgHRgSod5RoDIEFuWJ9Jrvp
+KobFONoJZxH0I2ndeDz0o2V7nX+OAdCqTzyUh8YzHbMBuAM2gBnxyU6nuSj
4EXxdcxr7HqqPwYRCwqZA3hJD6dc5URKO6dFJkMrhJc7KSA2tuGjR52SSUGf
2C5s+rElKX0RYzE40frTfWRMveiwKONFEpt7Ovq2Y9cNB/sI7bWFMDkxGSYn
J21C/t0zTE5NhfGhmgcig2F80n4/sxhTZiIUDpPpRnMywitqKHtp65uNsLq6
at9rodlqf76b/uPcp9geZSzLqMg2z81pyhiVqvoaf7beqU0Y2UpQjoWUYA2V
lAAfQglkuAcYnuzAUEmpsL4SJoYHujK2g6NTYS3VIqsjEvWybDgU/DNkGXhM
mHhzzEMpBGDfCK4EGm4q4llDX2khDy0idPsembAdGQ8TExNhdFC7UA9j4/Zs
aoFdSPTuG+Ef4RKVMPAnW08oQH6A8Iq6pTmWKMTydEgvhQPD286L/ijJoIf8
1Y454D28UFqrD4bBgU5KuKqNhpV26OJGX9Z9QPCznRWEPXiMGPoZTsWciZBs
mbZdXMlZkvqc7CTllBzoURbVmrY7KGYRe8d/HxVnA3GgbgBA8vPMRIRHLQQx
whmAkEHzaC0SR6UMdpItJ+zDytr+yqKrboRgfue0i0TY0mQnpTO52NDj1blO
zaw+vtjDKAGF03+yVD3HGcWOKV4FaMGoP/HRrrAdFSg1o3pIfLy3sWo+Jy5G
51JhtsfAVf0uKCS3WTU+jDoVU4B1qRDhSeEWFSNKDo92TmKJMRh4BqzhERYq
4ZaoGIG8yBoTWSGAxNSlAFJAiQJ4WxJAE7qUDN8zppIIb9PXes5010bncx05
p/BTqvtziX/CNmBdthieGJh8rrPwalvjsGsj6BkrpPCpxx+oAIZ+EB+vrt1W
pQrqXmFtbjSr3IIJW7ubpSmD+6ioRuAjVnjdjc24YhQfDlB+giNwhkIZaBeO
wTk4iJ2Eo3AWDhunE9P3jzJQii8bhPiyYYgvG8hGEg9G8TVzSwIHOLaHr2pt
aT5MmcmeX21VD5KF7+JoApwORD1q2BxrG/IXUADQeq6P1uPTDvJh2FbKmNR+
k2l5aJSS7q92mB1xqzY0E9YEDRJ7n+bsxbTisVBFVBLVxJigqqyZtcMDCTW8
gUdQCs/gHdTBS+Pp/m70yXr7l5ceN4X5sYEHFba+WJRmqYZiXSE3xwhGWTb2
kwBTqYkeN/sKfwzUQSxAi0WIirxaDEEw61u1p4xvSkjWB7r0OSGWh0cVQALR
LSQQXUMC0T0kEF0sJZBdQAK/+r1zMDubs7lth/X1Vmi3m2FhcnijUkKfWxtk
HAsANie4wH4u7Lg2YieStGSEP9bNOmXOCF+f56wjRSPdJQblY0pmlB7+ZU4h
2JgcE6pjtjfxbVN0r8eceF6EyCYqaSv7zfxNdpxUR9rrPkGr42Vz2aQ2PBUa
vlbBACaUX0nNJ/tEP48FYb/xZMTtJO9oRsA5IPtmZYYTC57gIyEpHgPn3B5G
h5YGnlMRpYAo7NMDD15cmC8yUkxshIgLvEUGhcy2ufh9fYLFXADtCE5mgalb
rYcF40vrebs3+XYbUbFsCSsQJII4wBp7hl4ROuztrIEMAngys+wTHVIEyOgp
OsuijLyt3axRsZfARAlIEulK6xOPUvhTcu/oqQ5cUACBySevYlgug1CEFOBO
ILOfjxtsi8cGOhyhP+xt/rt2czlMZLA7FJbbwT+3d9RarA+8JwpCnVAlIhHc
Jtu6j3MB4EHKFg2nSIlrhA44iPUiOrZ9fFc3F1ThIceg5Ak2Dx47mIqlKAUZ
PVhAGQPUiqQT6TgxgjwOBBOzPsI/3l6bjZihNjSFWCi9tb66GKYnx8Pk3GqV
u/daCw4vamFmrZ0yQfvE3BRLYUksjWCbpbJklg4LjBWSDZAl+g634Brcgyi4
CVfhrnE5JXu9hLMJkvMqbUIlcNAxZaeoM7DFCkiTh98mDy+QCS8xVYBSMQbl
Q57NpFWqMy2OdxnaXJUyjDUQmTAQZtfaT3YmkC9BqpFupJwkCVKP9JNRRhts
5XuXomEbimNCiZgcpYqiYUpGytCW+YaSCR10a8A8J3ABT3ToROdrnLZwMRe0
s1M+OjplZf8AsmS2Pv/NszIHcFCgUNJ4h2tNK1PZagyNz4ZGy3xDY6kIBKNu
PMtfh9/sB7YPG4gtxCbiZbCR2EozVfs4OMddkuEHdBIT0YqAk0KeMZImy94f
lNevDLlxqXqJr5/F4Nq3er3YOJeTLj2eV1iFRBtlB2Y2oCXbyZ4AGMgrGbf+
Pju7VpgZrnXVs8cXGtk+Pt+Xj/PFkOP+cIPIGG4R9wi8I79odrEjASdEesn4
MSuogoQNvprWHwyf+bFk17yyuil6d+U3bRkvdSZglY4o6hYGAHKORD7U3EKG
JKgsfZKIni279B7AJZhjy/lAfBtP2g7LG7SrzS03q4N89cAPwC+wAwYiXyAx
oAwZVsDtcGfz2RWkFvQFUKOCT2IeosAVVPu0i0zfWFsLjUYjrDWa+5Qc6ctF
QMMxnolI1RRlUlE8kuyK0Hv86TN9GKASNbAPHXlS1WnkOiuuA0n8B38PAkEg
/HSor52fgVxEbLAONQWB0vSEyLIjxc4TMPIIT0+OiQ2icMJHaaZjKIPW6gRU
/dcgWKX22fbafBge6PbZ1cBwmFtZz3tW8EgpbkMF1SucRygBjZ48J/FBKkkw
rXSscrZkCEmOmBhnBrGDs+f9PCZMPuD8RfQF5cwiDLrfpHOIIYCj5Brw9ZIN
PBp8T8KRGpSQF4AMETb9V1gGplGgv+RNORZLV2rcDQ2ZZu+UGhws+uQH6EmN
b3qv8eOcYpSHyBaJMIvxysyg+zLjqDTgG+SNenyuiqvoLK6MkoF4BHjBClJY
G/aPE57lEukFy0OFHDEEsRdmgMAJs4B5IGmBuTDh6feRGUVGaNODsmXvMD86
kM31fCPlrdrGKvVW1EbnJDDqJkEUI+7+1tnVq5wfxF/Kt7Lua264NbMQe9Jx
tTtVN8I3gQaOKNLYmH0cIyHAh/zjOE3l98xoqPEIZcCE85MaXTH3tNKSWiJ6
2uZyRIvURrKRsUu709kyNt/U4+ZC53zD4nro72YD8QQ0mR91V5Qqccd4DxcR
AM24j/XRgMigHlhh723xx5gjMAHSZNsua0tgj29kKaYp8s5uXeJPAz4C0EpJ
MzMXYhDVDuAUtu99u1l8e3XGIX49LKyHzJPc52K60dDitRjo0Jzm1l/t68fL
q6zIr8nKPy6T3s6kqwaG2BCiwzPzWlo8200ljYqjfexPfITosU1CMAcqCwEG
imaRR/ljcJwem5Advpv15wajBPQ7p1E6nfXji82u9Sf1YmxqMK/xxePlkDa5
YDC6ulH4HYJMA4vRpYWyP6BgDJhZGsFzPs0o5GGlYRh+RcIT3qrzaB/9Mk/r
wzezo1t3t1rFtCnU7ay204z5wNWqcGrmvDrEP6EmUOY0ny4BBd/h3syzdtXe
QC+gT4Viyq7Z/jlM2BzjBHwfz1EHMnKP7ZmOuqaJxNBulpirR9Uoofrul/gY
/y2SKzRoQE2VKHUQ4AIWd16ndgagHKjEsHNeJYidZ+AJVYqUszZxqeQ6yt64
I83Lkw2SqTTPnvG6MX13q+xs5OT/fyPVmcjZBMamM/H1/gmisa1e6jTTLpde
Jue0ROQPjtDq8Ap/73teObbYNcOH2Ivo/Tn8l5SFvCMQS5bDpjssPt4zmuDR
+qCFlPG4Wlie3M2Sa6NhtVzyWhirPdiSife3phJbbopQLgH1s8hSMSFko4ld
SbdNnnS7MOqviclBPrAKqGZyM7bExikOYY8JxZWG/qmXRfELpsx/q4WvL2Rc
UhsaDWMeP3X5p2yLa2G20Vl4jjZrRJs9C1eHIcnqN/onCDw9U4Vt3lKIHbYW
m1tkzVBtLDMW2l5RFlzWBsfyMl84hlzNOagwqq76pxpBMAP23rt9GAzs7PhQ
UTzbi0WHrq/igOLg5LIWno/91cZs7+Wb1Ah87dqtosMbhPpixQsrRm1NG4LK
4155vkGWDKdsgvvnPgKBB6OaelaKrBhBjTexbSVHVsmvK6M5fcbiYf6R1upc
95HLjMX6u9q2x+dWQqvdCsuzY0KpxgCxxbF+XjK94ZJFhaZkClDOB0t2vc7f
Q+pdLivVw2XwcaEGqNQzAGfVNmhY/TDJIbpby+vJ1dGOXlbqTSVp7mcCq55t
U/+iATtv5ktH32J0R1U4nX2tdEqCHBbYeaMcFhuhZJVqPPS3KUGqdhdQlkFV
GQACLR7TXmb27zAtpDEX1W9wYqnSCTsDyWF2YiQM1FLIWxuoh5GJ2WAQ2mvZ
lbCIOpIY1STm7T7q8uy4FL8TiNQGw/RSjEQqnSLCK/ampNBt4i164JSqlcFF
31XEL7vxzPYrK6hmfgydacQ/lfR2Nyu93Xeq6DOO5mZwaBDQmFPC852Uh7Yf
tNadSNoU5YlAmoDaJn6bvyodInXzQh9ke9HBuGPXDeqXxXsKBtlOq8lV9RJ+
emL3cjA7KcdzvQfl+3Y1cZPRXxM0ba2E8bqWORSWW1rPXjGFI8cliHdczAjd
gFlT/6kKQGeev9MztKnrRB/LbaApssEFsUSLFNQ6i+cVCDB35Mt5pP8WZCvR
tWnVgFq0NnS5iPWFvNDxxXUVcjjbiRB4LkdcVCcUof0L/FViTXXM2HY+yx+r
D5HElTH/7a6wlHYE4Ui50pbVtYC+aH/49bEnnufitSked1icnwuzc4sU7DcC
M/WJJSU4ANOStnf6M1IvjErTkZonyi5ng67Kb2G1Sa9sjYXf+UOddIwbKro1
1lnOjMWEJ3WT/oXJlDa6+IrV3MTeReP44t/6qySqHQXkIODKotfbLLYyjmWs
cs7FV77V6SGNIHljvzi+uiXRo/T8nUVrl/mbzE3j4eryUpifm0eyMzcbsxlp
jM03RCmYxW1EpcZZULw6VUwY1Nyr9iEWYcD9LU4pnlIZCwIgQpMDSkpTMKrt
SVq/X9yH/NVa7GRn6qNhYbUZ2u12WFuaLdxlzNLIKpOX8vCzEoFwXWdjLA7V
cjA5CfZuY7lv8scy92k/Lj+wm2R4nlRwpXqL2wDGB/eRsWb+zhLi4TD1FI3M
dC5OEJt1WGjluoa3GaT6FW0UjqYi40QzEbaa6w19CsHJvDjkTp7LT1Ym0IEw
oLBmKYV3ST1QPKCV45+/eGqyxpvjW8AafS2M1fMVCYP1WsfgDwyF6cW1fPiW
NC52mJ/+lz8TyFvYcW2lDgsMmSAQ2UTiOekm3lthrqnT6/wjJFCUQGAhZn28
d8/X2Km24lfUHQdFNFGSlDVJlLvBUQBlsGGmzkkR+sPqTDoZ6cc6Q7vVCq1W
e28fDK4j4dQdzJ7JwghjmdfJbTi0tesEC9iK8rSMPolM4f1G885D/COomzKH
/IoDYU/tXmGny21npU5cZsJak0EyydMKMW8kU0m0GhhQj0Ju37AQ2ODWPj4w
XpKak2187mtD7igp8MZf+Hsi3eQut2YhWnKleCcaiwUzaJbiOTVY28HXFNzR
gQm0haaT5McrncMsW+Ju/c1dSnagV+BX8AsjQLCWjHtBoakiGVH7yLq1OjHS
yMRUX5iaYnk0tkzNLkXkqBQg0TsjlIf6UU8kCxUUQqPHy2GSNx2kxO9R7gaI
+EHSQpX3FJD/pO2XHewfoVwncMuvKbA+vWRDX04Z02T3Sh8N7cFsUigw96Dl
I5nIDwXBm265XWg4lqwdbKsQVbY2SndxGYS/5UlSiKIaSCZCkIx0ExRxmFeN
iiinsv8URUm5K2Lg3K18gK1GCVHSc7JwFOJg1zO6165zEdvOWcqjIRbkKsC4
JmybfO1wkYIIUZttxB/ktbfDwuRoGB4ZsZdGR0epPoyMhNGJOdBEJfFn70Ck
Zf8wOR9KCBBWL2YXLjN5eLqvBdghSSdRTVZZjcxn5MjhJMpwB/lH8PiKP7CA
JPQSN6v9/ZOIulyZhVpSKVwDTUsk1Q3qafdBfWgsy7BXlI+CNKJ0wy1d59So
nln44f6rL/eRUAdV/++3PWUJneYNJH6yUbg6G16pHYJ/ZeNhBjb9WeWKUgUZ
oSVzJBQJ6xFyds/Yrw2luEO/EWVRG0lHPujTIMdZ2incMezkjTf6e9Q9PJWR
r3qQgwQ6ma89yB9TflTcYAGOEjbwUeiWTBH5gcTU6mD/JOEb6QMYYspXhjIw
gM4EU1XlNdEbcpVlrzxmEReEbdEpGFpzmNQ0PDdrELnK8f1i5Ubl93W2DHE0
oygdIdcoJGArSk630nox10gEZXuzmKXLx9TxYbgMSWrRxlxvi6ahcxKJAhWA
HdPwWn9P2TMzzrmvXqDe75IQ7072sxzYbHMYOtCGuAqT8QmL3BwTZYUCl5Ct
wtYWHh1NwaPjCo1epaRIYOG0yMeW5+OJUtBsJXHofHJsmDtBdFyBb/u9HC56
qaq5yaJ6SphJ4Sr4hagyoc/sBpB/bntgi03kRDoLRWAJr80Tvt7NMpUElaO1
+YBoA0iVmu6Re35H277aN8qTlMZ9peWxG7I4JtzqlMI1yW3BGFBoKqvkZio2
hVIS23tEj88lysNOo/02lMwJrx/To6ekvHe5nr7K31PMSlFAuSSkWobEpE5I
jjSkQgwzhzpZW8bEGDEKpslaZMBM9wP7CxI1qy7SmYN0Hrls46nCdFqGyI6V
p8qANxe7nsoMwhXFkLb3W/wxVVgFZ9NnLgpoA7BToHF6p3DVHRXzK6LitLLc
IotvpaRJNt6sYvZ4BjGwS7QK24BC24gY1oLcXnkiB1AABlVy/hOORnBVSsei
WZIQo1eBBRZaUNYeq623OyreHqPihOErpQLYXewo2WPDcmI87MFo0+lj3Na5
DBZKHG2rcpud1JccicVnXeoLMwjvdNjrS55h5hYXXTXAISk117L1WHAFeIRr
CjLMACsuAT50R9Zt14LsRaAICaXaYSG8toPQgG4sMjfmr17idCnYB1g80/Wa
PhdpnPSafgUkV5+TuBj3PCuduvnkpnU5wFucKrisuCF7/xR/S0YVf6coJBs5
JBAbTdLHOKI9Qg5QYFJnzTvultjoshWLFSpBDAQBf1ceemI0WMEb2l9lD830
V7qbAuerDkV4QipDB5hVLscr2Vp1ULw4q4EV904nnRLiPsS1RiN2/RjCU26M
FB32FAdsnku7hv8lklhJDk9WSclRg3+uhqlJ44QeswBuxd/AVlVoL3YOkcT6
Q18lCU/ZKKYE7L3NKSPykgUwzigD2BPNJw+S45TQXNSJnq5WlXG/0nE/HwWQ
DQBFrUwOtLloBbE0TTcWrusQlLwXoXVu+jPS2bjy4D/kYjTLw0AYfF9epZtQ
YLqSGxgQ8uzKRAEx5KRMnZ7qH8EG6GIeRflJJzy/3h/annNXDmKg+2pKHWDh
ZQkFPEZy0TLzNKXfpc6KvVxdu01lD8kjrU3CnQB/VKG8uAUVOdntkBoRkGc+
SyOCDhhjMb7YczWNMrrSCdCLffYp/pGNUgEJ3VU6sUVoMzPUSUjPr+mazUaY
Ko7cLbVUE0qOHG0Fy2Gy0Vgxg8IBgJ9MnvFLfgviFfEYE17gNowE6hcKG4aR
AdWUp8XLXgUdSAc7qRtIFwb9pU8FdbLj9t8D/SMxV3Bsd67gZSUvynJnFSYW
c5cOgf+gHi+tq/wAYnDHVZUFTebGuNgaBGNU2mPbheM5zoI7Kc0de7XTzd1z
/D31McCSRxcbkA/XmxIC5XQNCKKjcM90VlfC9OYIKGC9vHv5nQx/Lcw1H6zg
LyHAhTAQZ4lSW2IntlcXHsZLrggCCM440aX1Ep3xLi5Ihy7U0bBj1w25/aS8
D8z4psx4V9xy/S26i2ejlMArepaaD17UyPiWS53oXWqKW2QLlLpRso4zc0IP
2AfyZOVZWdiENLTyoYrujgbV8NQk4Te1DfpjXeBGmGTDy4dT3uoN+1/5YEus
wvDUcqfFYbJTAl5c/2snSbloCmRy0hgrYhfDJF2XtUAT5XeBq7JPQY4SNkih
DVq+yx9jl6WE5pflvkH9qlsQ2BPzH9Rtp7oOpMaO8JmwvLoaFmfGdX4ktm2Y
1a60KKXKaJh5lVsccgRqPBWBeArahNRIqQQw/QeqhJQXrZgPeLc/xp0rvWgA
Uy6LtuDeqP9V5YL6ygUV+bRamPYmWgl5UT3B7CkgJSF9XI/5wPKgE7zx5OK9
rSmjmpP4Us9E9FWqsguUIYIGItUY1ZMGeHW5jL07zW2DUwbCl8Pk6HCo1wfC
wEA9DI1OBltNNei0UPRhFArNCphBo5yE7jULHIPFLGzx9wAB6BHhsHK7PY2s
uoqKVhpfMox/VGE0e3MCB3frzIN1KpqPXF1eVoPAXzlJiuttG3LqAhPAMUAC
0fIuEZ7RpKQ6Uk/P6f/2j8e2aNtF8k2iGzXUtX0pIXCDJ+07jis0w7gfJxoY
nc+Nl/kExQDLEd2yKbaZOVvEJKD8B+i6bQ3BpG626WkF/bjTuFH0n3bYQcM+
ndsiq3RlYLPVDs3V+TBc6zoGJZuLd4UofjrUn6mrgGa3N7k+I+/y9tpZXCP9
0oL6ZQunYTcRTTyv404K+Q8pifbTFyPdt/iOFa0ImdNGKe0RBPg337oughVm
kZAvsQAEdimuGaQr0lXWlSDsRu2YH/PfEWzpWBr4gDx5ksBKJw85MTE44Ccm
7Ls+NBrmV7x3bXPMTih2Zz/pzVfAxGbquSnNW51w2kQQnfIyK8JVUiIYbAGt
jZosP+5Dq7PbA/0ElV3S+2NKUbDGFYtnORl0XYoNSPvKDUPr9g30Df9DAWmL
E0U1UfBHPZGf9DEw99477PW+jDOxQjoFjzeh61wdX+q5MLya61r4N9SovHeL
zwN82CT57ygvxV2KmIaL0tSPdWaw/yqHIdTkKm03lJnWuRq6QN7pugB0FNzX
x4CYQF2d78NZf8obBz8s89FSE1y8Sjfx1uOOdN+8rswR3jDVeYMPKOUzL1/J
wqBwJFHL+4KA+X5dez4ZQlQgVVI3fqdzJtpgJ0YhMOourQB8G/LMNkzPYbRc
DteXEFz1Ci11LwTzqMwCYfx6wYInOAvA1CVjYb59+hCfBHzo8NRv3k33NxHc
llcVAUqJ1BDMI3c7sXJP7JbcBPICkpHn1J3QHG9QywJ7hY71yh8ZB0oyOpFf
3uqonoLJ4tTtyG6pE9AGWyjKxVgYlsg3oQgvcaFZ8m57RacnGy75RPn4Wp4c
3FsGdjF3DPhH948BHyyluoiBQTs4iAGkgBHIBX1SZHdRWgAY6ShcRf9uF7PF
9xiAoa5E4VDbKOGt473L96wLl/3m1n0jAX4CuvMnBVpLOViMgdTKWlhb5RTr
yspK/Hc13ZZrIyT52RKtAYYMMQMPYd5RIZwtKVvSiRSjAWiADrJ0FIwwCaAz
BJwdJoHOEiCd6BjVJPNPrgihZ68wjoSM7BcuaD+XEt4X0zftlmG62hM5E/TF
3nOkRtdYCQtwQuFwfx8Gl1+N+bFO0qk+HladK89xrpAvBk7hpoHZlMmQONwA
pVsy1gQO0EFOhTSwuELBFV9FpEU2Aq/CcRqCS+wX7VcYV9JJ2HU0E4QAvqLW
sCVyZf8ooegPpoYSBRwEVtIyQKkFo0C1lLwlkkAxDOMAtty92B3oYsfKFBEx
G0kkM/MHOSN1YoBkz/udkSszuhBEKZu2/ymHJ0U/Ru4e+ISPJ3FMpoFyAupH
pI7K4aRwYDTk0aVEKodaFniPaJssL+6XZg5UFuvNMVKcFX3nbDj2liDUDNQB
kV9bYjSFTPArXuFV7BblHoZgKIbEK5FFYyqmZGpIACajtpAGiZBKnhvPxhJY
CktC/THtLJUll2dVcCAP5Lduk8dCKnbnm94WY5ZiXiXeuGvtg87vtfnxgt8D
YXp5Pf/5BtQGwUGVEhOeFCNZniFUCBfuljwEQofwIYQgOoQS4URIEVaElu0H
zyDMCDXCDRPwnAg9wo8S0N2E6LDPiQn3pRTqnlE8Bkcm/Vb/5ZIXDpsyxkQi
lClB0rCWKtYue28KXVDD/j695YNFED611HTAeWBXGk8OAUODwQFpYoAwRBgk
DBMZB1LzGCwMFwYMQ0bSHCeJKmPoMHgkw6k1YwgxiBhGjnNSmsFgsmsYUDOk
b3MuLOoSFbPBo+OjOawruPA0FwlMt+7Z5BuhNGSiIzaqPHMvxD86I0Jzoega
jIcjclKd7cBuEb0O+7Pm8mwYqvW0Ynf+eJFHOJ4g2hynlNvH3HSXdFI3BacC
deqMteP50tKdxEbnNiaO8DSzW4fQVpifKBuuS1VRNw4c1jkiDCNFJN2AqDMo
BKrv9VHxz8grBlHUm6zmkkq+Dz0CO4UEHWtW4r1n+Zgot/pHFAkZc1ULkv/h
wPbf+YD4GQQGO2OqmGDQXtG4kj5HdvhqLU+HegyQhunC7hx5mS3yY01diTg/
Vhc8lvioRQ+vrFwcPoKrc1TFwUZtTQln79NMCR0+M9F9JJF0EcYI4GTy/MAj
OKZuy53HazOl8C0lkp7rXCPXqgZk1g1IMBOpIosuRjOVrd6Vqbov5uzBDqa6
5V8ToXOL20B1dxelgfF8+9pgmFlaiydJGstzOhYeubrSDpUTVnPCgHEouHJj
GAODcyqPKJNI6Vb5L2IE3PzX02UB5eXNqAmOUe1XrZWZfJeMovWJhQ6Y9AvF
VTTHkugME/aa3KcKMDgnniPz+msgwDRSTvjFXIZOlwxirEiJqlmOO1ymRoc5
vGH6XrN/+8Lg8HhYTNWV6opEyfOcLZgMtEZSjo7bhugGX7U4ctj3HQUxeEZy
lwUxQAm4SAzkf8VD1/wgWEqygnsoKKgqqZQOkYkqivGWBnM74JrhzgzAJtw0
JRf/Qydq8ACzqsLPTJgoVXdv8RtUCNTVBqfzUYCN3ICYyqHE72RNUi7Ui839
UUqVw+ObjgBjnq5RUI8+l028qZiE6AArYv5Ik4BKcDPUQe5Ok6h5CH+rdBHy
wXkhpe6V1z7xjEvz+UZmwFuyawYUNQMOD3dOa4T/4aIX+zLwWWrJQRW4KcdG
UUJdlUtQpNpuyF7S9YJzyu25qTp0ejwTeof+KNNLCl3jV8qQYhDMMOhGdJ3m
4Q+nHFxMQisQwU5uLEoHp9Ba3NDv0yQ6lkdjL0aPkTCC5oW6bsCRHzCjrNgA
HEdOvDzAC64G/pCFj7qaAlUHI/3eV3xu3nckxuyoktzqJeVA3kH+DKQEFCcA
1zSgMaAmp5riNH7KTSdn6fBSuZFWft7TtbrgD54bessYCV8CfGXe8sYFutJI
usQ5/LDWQT4H8FVt93Dn7At35SS3+vMMB2V/T4RL+oU+Wc0BtOYZx2TjHOmm
LS8x9EebqSIT36CbO+9u6b5HtdIbws5dFYBKyC4Pu5G+pIHgGk3jf7hPh/GJ
SRWgACMpL+sSDy0RNjzfn5H6BHvTxVIeNGObiB7jHKlI4SLZHz2obohHVaDR
BEs30mAGCTr4lRkHmW8sEfLUOT6devUBmcifDvikcpUnLfrjY7r8pTKELWa4
dMFAw1vfoF+2GSCOblDaLXsIUSE/hBZnShnFSk36SKeSpIAYLmtWVgxh969K
lg2kS99cOQ1BKeYAs6BzImkMTwYnvTnWr5GIuUoD26aKalBBb5A5sv4aFcxO
GOuHkeOoaVPd4G2OyTN5DDSXPZZKwCNY2DlMmDpZMb+YYQ2ZRN4PTKe/E6KE
KFphMVDGmrgO7C6962VfEUYA94Gj4suP17zR145oKEvKN7Gn4UQJIzYYP9Y5
fr4p7gQsIrXgxYfgRyfe7ITiYtSuhkSR4VCnAokpgrfOvdlpSOw5vlpDen/6
W5xQYriyJInK2ZpUEI/n5A1fGM6oytY3wkfgiJKo3lVcL2SZnh3JMrGX7bd8
DFkV8BMN3eWo2AZMne4B8a5ZXU6HxVNZlcQIJkQNo0Rh5BPwbMXpdgwqMgi6
1BUd3ll5qNNK5CCjtLWT+NelSQRooJcvdB+b152LRD5KLnmXnY73EjxKUnF4
1GFlOnQPGUFBcS8K0kfoQAihvxLhzWHK8nO8A5BC0URVUhqcyFoQ2vaMBrIj
LrrHR/MOnL/00YpTasVf3eRS0hTB1icWH+aPdQiVtFNxdRgGkHCajImMhzc8
KA+uKxg5Da4DLboYBsUoDuUjMExAXcfvvwmvKkfjb5LVc1xpCC2da9ozdw8q
7GAUbAUNW3GYg7uHaeaIcIRgQcej2G6yCeRwlVY9pPuTHJjOnTqet357zytF
20ptdK58RTHPyvRwDmKWvMXj0O5XCPQVRQ/PrJav/I2/MqfLY1PIE7/e1v1K
GcQNTiyVr7zbXykvbp711rO3lq8AVZqds8P+Z1rje0nlc/VlZW46TE5OxfNJ
e8R/+8PU9EyYGOpkbgaMI0rHJjuUD9rFaWrdtYGqNp4P+sR/39z7mc4Bmf4w
Yv8aSBkZDiPjs/GATDlP/P//5j97XT3kvwAvcY7g\
\>"]]}], ";"}]], \
"Input",ExpressionUUID->"61c4df21-88c7-4830-8787-e204fa09650b"],

Cell[BoxData[
 RowBox[{"t", "=", 
  RowBox[{"IGGomoryHuTree", "[", 
   RowBox[{"g", ",", "\[IndentingNewLine]", 
    RowBox[{"EdgeLabels", "\[Rule]", "\"\<EdgeWeight\>\""}], ",", 
    RowBox[{"VertexShapeFunction", "\[Rule]", "\"\<Name\>\""}]}], 
   "\[IndentingNewLine]", 
   "]"}]}]], "Input",ExpressionUUID->"94e51169-00a7-4855-9288-008c6642e63e"],

Cell[TextData[{
 "The path from 1 to 9 is ",
 Cell[BoxData[
  RowBox[{
  "1", "\[UndirectedEdge]", "2", "\[UndirectedEdge]", "5", 
   "\[UndirectedEdge]", "9"}]],ExpressionUUID->
  "ef718001-01a9-4403-8ed2-8c7a900ca8a3"],
 " and has the weights ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"3", ",", "5", ",", "4"}], "}"}]],ExpressionUUID->
  "6341a615-69f6-4398-b5ef-79493f0c5c92"],
 ". The smallest one, 3, is the minimum value of a cut separating 1 from 9."
}], "Text",ExpressionUUID->"80b8b896-1864-4bd3-903a-63e4269c0715"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"IGMinimumCutValue", "[", 
    RowBox[{"g", ",", "1", ",", "9"}], "]"}], ",", 
   RowBox[{"IGMinimumCutValue", "[", 
    RowBox[{"t", ",", "1", ",", "9"}], "]"}]}], 
  "}"}]], "Input",ExpressionUUID->"2d05dc94-6dab-4f6f-9e38-feb1980edf04"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Cohesive blocks", \
"Subsection",ExpressionUUID->"749612d1-1d4e-45fd-aa81-f377d962e463"],

Cell[BoxData[
 RowBox[{"?", 
  "IGCohesiveBlocks"}]], \
"Input",ExpressionUUID->"3576fd08-efa2-47da-81a1-06093f1e63a1"],

Cell[TextData[{
 "The following examples are based on the ones ",
 ButtonBox["in the R/igraph documentation",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://igraph.org/r/doc/cohesive_blocks.html"], None},
  ButtonNote->"http://igraph.org/r/doc/cohesive_blocks.html"],
 "."
}], "Text",ExpressionUUID->"35c28e10-0ecf-4124-b128-24bfba50255a"],

Cell["This is the network from the Moody-White paper:", "Text",ExpressionUUID->
 "1e4c02e1-254a-4808-a67a-a64d5c6b06db"],

Cell[CellGroupData[{

Cell["\<\
J. Moody and D. R. White. Structural cohesion and embeddedness: A \
hierarchical concept of social groups. American Sociological Review, \
68(1):103\[Dash]127, Feb 2003.\
\>", "Item",ExpressionUUID->"d5cc0943-a833-42f4-9e03-78eac2ce4477"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mw", "=", 
   RowBox[{"Graph", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<1\>\"", "\[UndirectedEdge]", "\"\<2\>\""}], ",", 
       RowBox[{"\"\<1\>\"", "\[UndirectedEdge]", "\"\<3\>\""}], ",", 
       RowBox[{"\"\<1\>\"", "\[UndirectedEdge]", "\"\<4\>\""}], ",", 
       RowBox[{"\"\<1\>\"", "\[UndirectedEdge]", "\"\<5\>\""}], ",", 
       RowBox[{"\"\<1\>\"", "\[UndirectedEdge]", "\"\<6\>\""}], ",", 
       RowBox[{"\"\<2\>\"", "\[UndirectedEdge]", "\"\<3\>\""}], ",", 
       RowBox[{"\"\<2\>\"", "\[UndirectedEdge]", "\"\<4\>\""}], ",", 
       RowBox[{"\"\<2\>\"", "\[UndirectedEdge]", "\"\<5\>\""}], ",", 
       RowBox[{"\"\<2\>\"", "\[UndirectedEdge]", "\"\<7\>\""}], ",", 
       RowBox[{"\"\<3\>\"", "\[UndirectedEdge]", "\"\<4\>\""}], ",", 
       RowBox[{"\"\<3\>\"", "\[UndirectedEdge]", "\"\<6\>\""}], ",", 
       RowBox[{"\"\<3\>\"", "\[UndirectedEdge]", "\"\<7\>\""}], ",", 
       RowBox[{"\"\<4\>\"", "\[UndirectedEdge]", "\"\<5\>\""}], ",", 
       RowBox[{"\"\<4\>\"", "\[UndirectedEdge]", "\"\<6\>\""}], ",", 
       RowBox[{"\"\<4\>\"", "\[UndirectedEdge]", "\"\<7\>\""}], ",", 
       RowBox[{"\"\<5\>\"", "\[UndirectedEdge]", "\"\<6\>\""}], ",", 
       RowBox[{"\"\<5\>\"", "\[UndirectedEdge]", "\"\<7\>\""}], ",", 
       RowBox[{"\"\<5\>\"", "\[UndirectedEdge]", "\"\<21\>\""}], ",", 
       RowBox[{"\"\<6\>\"", "\[UndirectedEdge]", "\"\<7\>\""}], ",", 
       RowBox[{"\"\<7\>\"", "\[UndirectedEdge]", "\"\<8\>\""}], ",", 
       RowBox[{"\"\<7\>\"", "\[UndirectedEdge]", "\"\<11\>\""}], ",", 
       RowBox[{"\"\<7\>\"", "\[UndirectedEdge]", "\"\<14\>\""}], ",", 
       RowBox[{"\"\<7\>\"", "\[UndirectedEdge]", "\"\<19\>\""}], ",", 
       RowBox[{"\"\<8\>\"", "\[UndirectedEdge]", "\"\<9\>\""}], ",", 
       RowBox[{"\"\<8\>\"", "\[UndirectedEdge]", "\"\<11\>\""}], ",", 
       RowBox[{"\"\<8\>\"", "\[UndirectedEdge]", "\"\<14\>\""}], ",", 
       RowBox[{"\"\<9\>\"", "\[UndirectedEdge]", "\"\<10\>\""}], ",", 
       RowBox[{"\"\<10\>\"", "\[UndirectedEdge]", "\"\<12\>\""}], ",", 
       RowBox[{"\"\<10\>\"", "\[UndirectedEdge]", "\"\<13\>\""}], ",", 
       RowBox[{"\"\<11\>\"", "\[UndirectedEdge]", "\"\<12\>\""}], ",", 
       RowBox[{"\"\<11\>\"", "\[UndirectedEdge]", "\"\<14\>\""}], ",", 
       RowBox[{"\"\<12\>\"", "\[UndirectedEdge]", "\"\<16\>\""}], ",", 
       RowBox[{"\"\<13\>\"", "\[UndirectedEdge]", "\"\<16\>\""}], ",", 
       RowBox[{"\"\<14\>\"", "\[UndirectedEdge]", "\"\<15\>\""}], ",", 
       RowBox[{"\"\<15\>\"", "\[UndirectedEdge]", "\"\<16\>\""}], ",", 
       RowBox[{"\"\<17\>\"", "\[UndirectedEdge]", "\"\<18\>\""}], ",", 
       RowBox[{"\"\<17\>\"", "\[UndirectedEdge]", "\"\<19\>\""}], ",", 
       RowBox[{"\"\<17\>\"", "\[UndirectedEdge]", "\"\<20\>\""}], ",", 
       RowBox[{"\"\<18\>\"", "\[UndirectedEdge]", "\"\<20\>\""}], ",", 
       RowBox[{"\"\<18\>\"", "\[UndirectedEdge]", "\"\<21\>\""}], ",", 
       RowBox[{"\"\<19\>\"", "\[UndirectedEdge]", "\"\<20\>\""}], ",", 
       RowBox[{"\"\<19\>\"", "\[UndirectedEdge]", "\"\<22\>\""}], ",", 
       RowBox[{"\"\<19\>\"", "\[UndirectedEdge]", "\"\<23\>\""}], ",", 
       RowBox[{"\"\<20\>\"", "\[UndirectedEdge]", "\"\<21\>\""}], ",", 
       RowBox[{"\"\<21\>\"", "\[UndirectedEdge]", "\"\<22\>\""}], ",", 
       RowBox[{"\"\<21\>\"", "\[UndirectedEdge]", "\"\<23\>\""}], ",", 
       RowBox[{"\"\<22\>\"", "\[UndirectedEdge]", "\"\<23\>\""}]}], "}"}], 
     ",", 
     RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"d3db889a-9c0b-47e4-ad6d-129912cc0182"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"blocks", ",", "cohesion"}], "}"}], "=", 
  RowBox[{
  "IGCohesiveBlocks", "[", "mw", 
   "]"}]}]], "Input",ExpressionUUID->"a7f5aef6-dd66-437c-8ca5-31a4baa2fcd4"],

Cell[BoxData[
 RowBox[{"CommunityGraphPlot", "[", 
  RowBox[{"mw", ",", 
   RowBox[{"Rest", "@", "blocks"}], ",", 
   RowBox[{"CommunityRegionStyle", "\[Rule]", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Directive", "[", 
       RowBox[{
        RowBox[{"Opacity", "[", "0.5", "]"}], ",", 
        RowBox[{
         RowBox[{"ColorData", "[", "96", "]"}], "[", "i", "]"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", 
        RowBox[{
         RowBox[{"Length", "[", "blocks", "]"}], "-", "1"}]}], "}"}]}], 
     "]"}]}]}], 
  "]"}]], "Input",ExpressionUUID->"366e9ee0-74fd-44f1-901f-a0ada66b0d9e"],

Cell[BoxData["cohesion"], \
"Input",ExpressionUUID->"ac22a0a8-35e6-4d40-9d21-ad28eae8cb0d"]
}, Open  ]],

Cell["Science camp network:", \
"Text",ExpressionUUID->"16bdfe71-763f-4315-be54-cd124ee2408a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"sc", "=", 
   RowBox[{"Graph", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<Pauline\>\"", "\[UndirectedEdge]", "\"\<Jennie\>\""}], 
       ",", 
       RowBox[{"\"\<Pauline\>\"", "\[UndirectedEdge]", "\"\<Ann\>\""}], ",", 
       RowBox[{"\"\<Jennie\>\"", "\[UndirectedEdge]", "\"\<Ann\>\""}], ",", 
       RowBox[{"\"\<Jennie\>\"", "\[UndirectedEdge]", "\"\<Michael\>\""}], 
       ",", 
       RowBox[{"\"\<Michael\>\"", "\[UndirectedEdge]", "\"\<Ann\>\""}], ",", 
       RowBox[{"\"\<Holly\>\"", "\[UndirectedEdge]", "\"\<Jennie\>\""}], ",", 
       
       RowBox[{"\"\<Jennie\>\"", "\[UndirectedEdge]", "\"\<Lee\>\""}], ",", 
       RowBox[{"\"\<Michael\>\"", "\[UndirectedEdge]", "\"\<Lee\>\""}], ",", 
       RowBox[{"\"\<Harry\>\"", "\[UndirectedEdge]", "\"\<Bert\>\""}], ",", 
       RowBox[{"\"\<Harry\>\"", "\[UndirectedEdge]", "\"\<Don\>\""}], ",", 
       RowBox[{"\"\<Don\>\"", "\[UndirectedEdge]", "\"\<Bert\>\""}], ",", 
       RowBox[{"\"\<Gery\>\"", "\[UndirectedEdge]", "\"\<Russ\>\""}], ",", 
       RowBox[{"\"\<Russ\>\"", "\[UndirectedEdge]", "\"\<Bert\>\""}], ",", 
       RowBox[{"\"\<Michael\>\"", "\[UndirectedEdge]", "\"\<John\>\""}], ",", 
       
       RowBox[{"\"\<Gery\>\"", "\[UndirectedEdge]", "\"\<John\>\""}], ",", 
       RowBox[{"\"\<Russ\>\"", "\[UndirectedEdge]", "\"\<John\>\""}], ",", 
       RowBox[{"\"\<Holly\>\"", "\[UndirectedEdge]", "\"\<Pam\>\""}], ",", 
       RowBox[{"\"\<Pam\>\"", "\[UndirectedEdge]", "\"\<Carol\>\""}], ",", 
       RowBox[{"\"\<Holly\>\"", "\[UndirectedEdge]", "\"\<Carol\>\""}], ",", 
       RowBox[{"\"\<Holly\>\"", "\[UndirectedEdge]", "\"\<Bill\>\""}], ",", 
       RowBox[{"\"\<Bill\>\"", "\[UndirectedEdge]", "\"\<Pauline\>\""}], ",", 
       
       RowBox[{"\"\<Bill\>\"", "\[UndirectedEdge]", "\"\<Michael\>\""}], ",", 
       
       RowBox[{"\"\<Bill\>\"", "\[UndirectedEdge]", "\"\<Lee\>\""}], ",", 
       RowBox[{"\"\<Harry\>\"", "\[UndirectedEdge]", "\"\<Steve\>\""}], ",", 
       RowBox[{"\"\<Steve\>\"", "\[UndirectedEdge]", "\"\<Don\>\""}], ",", 
       RowBox[{"\"\<Steve\>\"", "\[UndirectedEdge]", "\"\<Bert\>\""}], ",", 
       RowBox[{"\"\<Gery\>\"", "\[UndirectedEdge]", "\"\<Steve\>\""}], ",", 
       RowBox[{"\"\<Russ\>\"", "\[UndirectedEdge]", "\"\<Steve\>\""}], ",", 
       RowBox[{"\"\<Pam\>\"", "\[UndirectedEdge]", "\"\<Brazey\>\""}], ",", 
       RowBox[{"\"\<Brazey\>\"", "\[UndirectedEdge]", "\"\<Carol\>\""}], ",", 
       
       RowBox[{"\"\<Pam\>\"", "\[UndirectedEdge]", "\"\<Pat\>\""}], ",", 
       RowBox[{"\"\<Brazey\>\"", "\[UndirectedEdge]", "\"\<Pat\>\""}], ",", 
       RowBox[{"\"\<Carol\>\"", "\[UndirectedEdge]", "\"\<Pat\>\""}], ",", 
       RowBox[{"\"\<Holly\>\"", "\[UndirectedEdge]", "\"\<Pat\>\""}], ",", 
       RowBox[{"\"\<Gery\>\"", "\[UndirectedEdge]", "\"\<Pat\>\""}]}], "}"}], 
     ",", 
     RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"5b7b8b67-2690-4aad-823e-93ae63347f15"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"blocks", ",", "cohesion"}], "}"}], "=", 
  RowBox[{
  "IGCohesiveBlocks", "[", "sc", 
   "]"}]}]], "Input",ExpressionUUID->"8a3e7e12-4e1a-4bab-b21e-514d2cddd8b4"],

Cell[BoxData[
 RowBox[{"CommunityGraphPlot", "[", 
  RowBox[{"sc", ",", 
   RowBox[{"Rest", "@", "blocks"}], ",", 
   RowBox[{"CommunityRegionStyle", "\[Rule]", 
    RowBox[{"ColorData", "[", "96", "]"}]}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "Large"}]}], 
  "]"}]], "Input",ExpressionUUID->"6034ace6-37f8-4ca7-b073-e11116107fd9"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Cliques and independent vertex sets", \
"Section",ExpressionUUID->"16b0bdb7-4f87-4da4-b22b-de80d3b848a1"],

Cell[BoxData[
 RowBox[{"?", 
  "IG*Clique*"}]], \
"Input",ExpressionUUID->"6dd4c876-058f-478d-b99e-91d50fe50e59"],

Cell["\<\
A clique is a fully connected subgraph. An independent vertex set is a subset \
of a graph\[CloseCurlyQuote]s vertices with no connections between them.\
\>", "Text",ExpressionUUID->"d5b207cd-3916-4de2-b477-c56ec6413bd0"],

Cell[CellGroupData[{

Cell["Counting cliques", \
"Subsection",ExpressionUUID->"0b60d56e-9dd3-402b-90c5-7d690798509e"],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s ",
 Cell[BoxData[
 "FindClique"],ExpressionUUID->"2f35dea9-7d99-4ff1-855b-ce47d759b5d8"],
 " function only finds maximal cliques. IGraph/M provides functions for \
finding or counting all cliques, i.e. complete subgraphs, of a graph."
}], "Text",ExpressionUUID->"625b1c77-e1a7-439c-8142-c8c9249aac02"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{"{", 
     RowBox[{
     "\"\<NetworkGraph\>\"", ",", "\"\<CoauthorshipsInNetworkScience\>\""}], 
     "}"}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"c440a45d-2782-4602-b5c6-29e0cad2bad2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"VertexCount", "[", "g", "]"}], ",", 
   RowBox[{"EdgeCount", "[", "g", "]"}]}], 
  "}"}]], "Input",ExpressionUUID->"7295f3a3-9ffb-4ca8-83fc-533cf55c6d3a"],

Cell["\<\
Simply counting cliques is much more memory efficient (and faster) than \
returning all of them.\
\>", "Text",ExpressionUUID->"0a1bc067-7d4c-4846-bf32-2f1b62ef6a91"],

Cell[BoxData[
 RowBox[{"IGCliqueSizeCounts", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"c34452ac-b313-4a3f-9a8b-14d8f62c0e91"],

Cell[BoxData[
 RowBox[{"BarChart", "[", 
  RowBox[{"%", ",", 
   RowBox[{"ChartLabels", "\[Rule]", 
    RowBox[{"Range", "@", 
     RowBox[{"Length", "[", "%", "]"}]}]}]}], 
  "]"}]], "Input",ExpressionUUID->"fdd27353-f440-43f1-a13f-901c01e5340c"],

Cell[BoxData[
 RowBox[{"IGMaximalCliqueSizeCounts", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"6bfbfd1c-5f02-49de-bfc9-762b9119420d"],

Cell[BoxData[
 RowBox[{"BarChart", "[", 
  RowBox[{"%", ",", 
   RowBox[{"ChartLabels", "\[Rule]", 
    RowBox[{"Range", "@", 
     RowBox[{"Length", "[", "%", "]"}]}]}]}], 
  "]"}]], "Input",ExpressionUUID->"af0dab1d-9910-4a67-8d8b-1f1361d6b83e"],

Cell[BoxData[
 RowBox[{"IGLargestCliques", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"ef898861-f689-4a02-a613-450b90f13863"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cliques in directed graphs", \
"Subsection",ExpressionUUID->"2b77d9c1-e9bb-4e82-b965-46bf38f9084a"],

Cell["The clique finder in IGraph/M ignores edge directions.", \
"Text",ExpressionUUID->"0762d628-dacd-4781-bdef-811839b450a6"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"RandomGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10", ",", "60"}], "}"}], ",", 
    RowBox[{"DirectedEdges", "\[Rule]", "True"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"b6122baa-0d65-4f5e-8cfe-5c8f3597c3f8"],

Cell[BoxData[
 RowBox[{"IGMaximalCliques", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"19c06280-57d4-4715-9d71-aa1e01ddbfc1"],

Cell["\<\
To find cliques in directed graphs, convert them to undirected and keep \
mutual (bidirectional) edges only.\
\>", "Text",ExpressionUUID->"6fd59783-9a74-4e8f-b410-618a0743622c"],

Cell[BoxData[
 RowBox[{"IGMaximalCliques", "@", 
  RowBox[{"IGUndirectedGraph", "[", 
   RowBox[{"g", ",", "\"\<Mutual\>\""}], 
   "]"}]}]], "Input",ExpressionUUID->"621a5b0e-f75f-4ce1-acea-2e2f9c3b3dc1"]
}, Closed]],

Cell[CellGroupData[{

Cell["Clique cover", \
"Subsection",ExpressionUUID->"f8f90ad2-6a32-43d6-ac0c-69cde202c2eb"],

Cell[BoxData[
 RowBox[{"?", 
  "IGCliqueCover"}]], \
"Input",ExpressionUUID->"4f0aaee8-1bbc-4f65-ba61-7c8b78530ef3"],

Cell[BoxData[
 RowBox[{"?", 
  "IGCliqueCoverNumber"}]], \
"Input",ExpressionUUID->"551a90dd-ed49-45bd-8241-f7d3551efc17"],

Cell[TextData[{
 "A clique cover of a graph is a partitioning of its vertices such that each \
partition forms a clique. ",
 Cell[BoxData[
 "IGCliqueCover"],ExpressionUUID->"8d8e96bb-7e09-4cbf-a0fa-57292b3bd862"],
 " finds a minimum clique cover, i.e. a partitioning into a smallest number \
of cliques."
}], "Text",ExpressionUUID->"65eb9838-acec-4347-a9c4-f7f44d309309"],

Cell["\<\
The clique cover number of a graph is the smallest number of cliques that can \
be used to cover its vertices.\
\>", "Text",ExpressionUUID->"da3751f4-0d0e-4790-a81e-aaaa4ccc4afc"],

Cell[TextData[{
 "Available ",
 Cell[BoxData[
 "Method"],ExpressionUUID->"72783d9a-416a-4ac1-b3e8-adcebcd316f9"],
 " option values are:"
}], "Text",ExpressionUUID->"708b62d9-a1db-4338-8e07-65dc472059ed"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<Minimum\>\""],ExpressionUUID->"2ac2c7b7-4de3-47f4-ac38-c75dad160998"],
 " finds a minimum clique cover."
}], "Item",ExpressionUUID->"f2344bc1-5a4b-418d-9233-26429cc6b9b9"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<Heuristic\>\""],ExpressionUUID->
  "39aed491-53d8-4013-8a70-54e0b763c674"],
 " is much faster, but the result is not typically a minimum cover."
}], "Item",ExpressionUUID->"eec66094-8a64-4b9a-affe-5a6085900aa9"],

Cell["Compute a minimum clique cover of a random graph.", \
"Text",ExpressionUUID->"acdb8241-9cf1-48a6-93da-43941e3e62d5"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"RandomGraph", "[", 
   RowBox[{"{", 
    RowBox[{"10", ",", "20"}], "}"}], 
   "]"}]}]], "Input",ExpressionUUID->"23c3a128-93b2-4305-a9e6-9c25b14b2568"],

Cell[BoxData[
 RowBox[{"IGCliqueCover", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"62602048-163f-415f-9b9b-5b9c9dd44545"],

Cell["Visualize the clique cover.", \
"Text",ExpressionUUID->"3c5f553f-f749-4611-9fd8-87087c8a38e4"],

Cell[BoxData[
 RowBox[{"HighlightGraph", "[", 
  RowBox[{"g", ",", 
   RowBox[{"IGCliqueCover", "[", "g", "]"}], ",", 
   RowBox[{"VertexSize", "\[Rule]", "Large"}]}], 
  "]"}]], "Input",ExpressionUUID->"85887793-a0f0-4bdd-91c0-db0df0e7bef6"],

Cell["Find the clique cover number without returning a cover.", \
"Text",ExpressionUUID->"4208c2e3-ccf4-4f0c-9be0-50f532fc1c40"],

Cell[BoxData[
 RowBox[{"IGCliqueCoverNumber", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"0fcfca23-f4f2-4923-9f1f-45a8e214dfb0"],

Cell[TextData[{
 "The clique cover problem is equivalent to the colouring of the complement \
graph. ",
 Cell[BoxData[
 "IGCliqueCover"],ExpressionUUID->"3117d1ea-ae62-4175-83c3-d03627fe537e"],
 " is effectively implemented as"
}], "Text",ExpressionUUID->"db15baed-d738-4b5f-87a2-39ca11af5023"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGMembershipToPartitions", "[", "g", "]"}], "@", 
  RowBox[{"IGMinimumVertexColoring", "@", 
   RowBox[{
   "GraphComplement", "[", "g", 
    "]"}]}]}]], \
"Input",ExpressionUUID->"0bacfc1a-9c0a-4a61-9b15-998b88cdca7d"],

Cell[TextData[{
 "For difficult problems, it may be useful to use ",
 Cell[BoxData[
 "IGMinimumVertexColoring"],ExpressionUUID->
  "defaa51c-a763-45af-85d4-43d2fd12f490"],
 " or ",
 Cell[BoxData[
 "IGVertexColoring"],ExpressionUUID->"ffbdd906-6e88-413d-aec0-35f12a7bf976"],
 " directly instead of ",
 Cell[BoxData[
 "IGCliqueCover"],ExpressionUUID->"a564e1c9-a24d-41d7-81e2-0910ec9197e0"],
 ", and tune their options to achieve better performance. See the ",
 Cell[BoxData[
 "\"\<ForcedColoring\>\""],ExpressionUUID->
  "43e4278f-510e-4d93-a1bf-d3929ab4d086"],
 " option of ",
 Cell[BoxData[
 "IGMinimumVertexColoring"],ExpressionUUID->
  "25d4bcc5-d1bd-4d72-a01f-f4c15325ef01"],
 " on how to do this."
}], "Text",ExpressionUUID->"401217e2-c783-4fc6-b1a6-ba92f16b7de2"]
}, Closed]],

Cell[CellGroupData[{

Cell["Reconstruct bipartite graph of co-occurrence network", \
"Subsection",ExpressionUUID->"333b0c2d-7035-4aec-be5c-8c2eea39a527"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"ExampleData", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<NetworkGraph\>\"", ",", "\"\<LesMiserables\>\""}], "}"}], 
   "]"}]}]], "Input",ExpressionUUID->"9faa9554-5915-4e20-9b8f-dd75e9242440"],

Cell[BoxData[
 RowBox[{"ExampleData", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\"\<NetworkGraph\>\"", ",", "\"\<LesMiserables\>\""}], "}"}], 
   ",", "\"\<LongDescription\>\""}], 
  "]"}]], "Input",ExpressionUUID->"e30cfa85-21f2-4332-981a-82c1d8a3c6e1"],

Cell["\<\
The maximal cliques of the graph can approximate the scenes in which \
characters appear together.\
\>", "Text",ExpressionUUID->"66507963-915f-4c87-92a9-d597d5044fa4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"cliques", "=", 
   RowBox[{"IGMaximalCliques", "[", "g", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.677478709419025*^9, 3.67747871258996*^9}, {
  3.67747876255849*^9, 
  3.6774787656231318`*^9}},ExpressionUUID->"825fe700-258a-42b5-9a42-\
b40cf6b77ec8"],

Cell["\<\
We can construct a bipartite graph of connections between potential scenes \
and characters\
\>", "Text",ExpressionUUID->"8890e91f-0a06-44a4-8c06-14ff092b9b13"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGLayoutBipartite", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Graph", "@", 
     RowBox[{"Catenate", "[", 
      RowBox[{"Thread", "/@", 
       RowBox[{"Thread", "[", 
        RowBox[{
         RowBox[{"Range", "@", 
          RowBox[{"Length", "[", "cliques", "]"}]}], "<->", "cliques"}], 
        "]"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"VertexSize", "\[Rule]", "0.5"}], ",", 
    RowBox[{"ImageSize", "\[Rule]", "220"}]}], "\[IndentingNewLine]", "]"}], "//", 
  RowBox[{"IGVertexMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Placed", "[", 
      RowBox[{"#", ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"IntegerQ", "[", "#", "]"}], ",", "Before", ",", "After"}], 
        "]"}]}], "]"}], "&"}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", "VertexList"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"3bbe4e66-3e58-4d39-86d9-011ce1277555"]
}, Closed]],

Cell[CellGroupData[{

Cell["Graphlet decomposition", \
"Subsection",ExpressionUUID->"c2668b93-46c3-4f32-82f3-af25df3d1862"],

Cell[TextData[{
 StyleBox["Note:",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 StyleBox[" The term \[OpenCurlyDoubleQuote]graphlet\[CloseCurlyDoubleQuote] \
is used for multiple unrelated concepts in the literature. This section deals \
with decomposing weighted graphs into cliques. If you are looking to count \
induced subgraphs, see the ",
  FontSlant->"Italic"],
 Cell[BoxData[
 "IGMotifs"],ExpressionUUID->"122ccc77-0060-45bc-93fc-327aeeeb17fe"],
 StyleBox[" function.",
  FontSlant->"Italic"]
}], "Text",ExpressionUUID->"1a0a4f17-b28e-48fe-bc5e-76c2d5e7d03d"],

Cell[BoxData[
 RowBox[{"?", 
  "IGGraphlets"}]], \
"Input",ExpressionUUID->"3fe5d9e9-bd67-40b8-8a25-a24f8881abd5"],

Cell[BoxData[
 RowBox[{"?", 
  "IGGraphletBasis"}]], \
"Input",ExpressionUUID->"313a2dbb-1088-40ae-ba11-6c95c3dd9ee4"],

Cell[BoxData[
 RowBox[{"?", 
  "IGGraphletProject"}]], \
"Input",ExpressionUUID->"e3d0db0d-8e8f-4cc8-b65c-a86084172a17"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"IGShorthand", "[", 
   RowBox[{
   "\"\<A,B,D,E,C, A-B-C-A, C-E-D-B, D-C, E-B\>\"", ",", 
    "\[IndentingNewLine]", 
    RowBox[{"EdgeWeight", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
      "2", ",", "3", ",", "2", ",", "4", ",", "4", ",", "1", ",", "4", ",", 
       "1"}], "}"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"EdgeLabels", "\[Rule]", "\"\<EdgeWeight\>\""}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", "None"}], ",", "\[IndentingNewLine]", 
    RowBox[{"VertexShapeFunction", "\[Rule]", "\"\<Name\>\""}], ",", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"GraphLayout", "\[Rule]", "\"\<CircularEmbedding\>\""}]}], 
   "\[IndentingNewLine]", 
   "]"}]}]], "Input",ExpressionUUID->"7e0872b9-a5c5-420e-acfd-973bf5e91a98"],

Cell[BoxData[
 RowBox[{"basis", "=", 
  RowBox[{
  "IGGraphletBasis", "[", "g", 
   "]"}]}]], "Input",ExpressionUUID->"4a90ab7e-c62b-4f4b-bf82-71245bdb248b"],

Cell[BoxData[
 RowBox[{"IGGraphletProject", "[", 
  RowBox[{"g", ",", 
   RowBox[{"Keys", "[", "basis", "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"ffe91814-90e7-44a7-9377-d3801244e951"],

Cell[BoxData[
 RowBox[{"IGGraphlets", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"7ecea603-1c38-490f-82c9-d3439e5933d7"],

Cell[CellGroupData[{

Cell["References", \
"Subsubsubsection",ExpressionUUID->"c75d5064-4bd7-4a5a-ab2f-09b1e9b69b2b"],

Cell[TextData[{
 "Hossein Azari Soufiani and Edoardo M Airoldi, Graphlet decomposition of a \
weighted network, ",
 ButtonBox["https://arxiv.org/abs/1203.2821",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://arxiv.org/abs/1203.2821"], None},
  ButtonNote->"https://arxiv.org/abs/1203.2821"]
}], "Item",ExpressionUUID->"33226a7d-b670-4a9d-a5e1-f9f21a6ead4b"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Layout algorithms", \
"Section",ExpressionUUID->"b4849aad-4822-4c27-9f52-bcf827281ea6"],

Cell["The following functions are available:", \
"Text",ExpressionUUID->"0af4fc5c-8cfe-40f2-9f26-7d49b090031e"],

Cell[BoxData[
 RowBox[{"?", 
  "IGLayout*"}]], \
"Input",ExpressionUUID->"36651920-f30a-4bdb-b5f0-717366b80fdd"],

Cell[TextData[{
 "If you are looking for the Sugiyama layout from igraph, try the built-in  \
",
 Cell[BoxData[
  RowBox[{"GraphLayout", "\[Rule]", "\"\<LayeredDigraphEmbedding\>\""}]],
  ExpressionUUID->"a7491fa5-b34c-49a6-a36d-3694f5dee9d6"],
 ", or ",
 Cell[BoxData[
 "LayeredGraphPlot"],ExpressionUUID->"382b4c07-6ff4-4147-991a-f294ccf02369"],
 ". These are also based on the Sugiyama algorithm."
}], "Text",ExpressionUUID->"86b86371-2bc2-469f-b002-b2ce5cd1e25e"],

Cell[CellGroupData[{

Cell["Common options and examples", \
"Subsection",ExpressionUUID->"830ef229-53a9-42cb-b4e9-b339848a2d49"],

Cell[TextData[{
 "Layout functions also take any standard ",
 Cell[BoxData["Graph"],ExpressionUUID->"b85a7fbc-2123-4e05-bf11-fc34c1d875ff"],
 " option."
}], "Text",ExpressionUUID->"af6e4a89-90d8-4f43-9d63-44caf3d278a0"],

Cell["Many layout algorithms take the following options:", \
"Text",ExpressionUUID->"d1a634b1-8dd7-4a82-84f7-8d288bacd05c"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<MaxIterations\>\""],ExpressionUUID->
  "8c0ea791-f05b-4d0a-8db3-55c038a723a0"],
 " controls either the ",
 StyleBox["maximum",
  FontSlant->"Italic"],
 " number of iterations performed by the algorithm or the ",
 StyleBox["exact",
  FontSlant->"Italic"],
 " number of iterations, depending on the specific algorithm and settings. \
The option name is the same for all functions to make it easier to \
interchange them when visualizing dynamic graphs."
}], "Text",ExpressionUUID->"0cf49c41-bbcc-45c1-8313-e86f694a2e42"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<Align\>\"", "\[Rule]", "True"}]],ExpressionUUID->
  "121b78ba-ac3e-407d-9ce9-459238b3cfeb"],
 " aligns the output horizontally. Examples:"
}], "Text",ExpressionUUID->"d7177714-d7e3-41b7-8e05-f8778b3ecea2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"IGLayoutFruchtermanReingold", "[", 
    RowBox[{"IGSquareLattice", "[", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4"}], "}"}], "]"}], 
    RowBox[{"(*", 
     RowBox[{",", " ", 
      RowBox[{"\"\<Align\>\"", " ", "\[Rule]", " ", 
       RowBox[{"True", " ", "is", " ", "the", " ", "default"}]}]}], " ", 
     "*)"}], "]"}], ",", 
   RowBox[{"IGLayoutFruchtermanReingold", "[", 
    RowBox[{
     RowBox[{"IGSquareLattice", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "4"}], "}"}], "]"}], ",", 
     RowBox[{"\"\<Align\>\"", "\[Rule]", "False"}]}], "]"}]}], 
  "}"}]], "Input",ExpressionUUID->"71d6abf8-efff-4732-9e1e-a51fb131e789"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<Continue\>\"", "\[Rule]", "True"}]],ExpressionUUID->
  "c50e1b84-dfe3-423f-ba67-28f904ea4b4f"],
 " allows using existing vertex coordinates as starting points for algorithms \
that update vertex positions incrementally. We can use this to visualize how \
the layout algorithms work \[Ellipsis]"
}], "Text",ExpressionUUID->"87ee959e-de55-4c27-ae33-21754b338d90"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"IGLayoutRandom", "@", 
    RowBox[{"RandomGraph", "[", 
     RowBox[{"BarabasiAlbertGraphDistribution", "[", 
      RowBox[{"100", ",", "1"}], "]"}], "]"}]}]}], ";"}], "\n", 
 RowBox[{"ListAnimate", "@", 
  RowBox[{"NestList", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"IGLayoutGraphOpt", "[", 
      RowBox[{"#", ",", 
       RowBox[{"\"\<Continue\>\"", "\[Rule]", "True"}], ",", 
       RowBox[{"\"\<MaxIterations\>\"", "\[Rule]", "80"}]}], "]"}], "&"}], 
    ",", "g", ",", "40"}], "]"}]}]}], "Input",
 CellTags->
  "DeleteOutput",ExpressionUUID->"465afc33-3f39-4698-a39d-ef3aaf8f35c9"],

Cell["\<\
\[Ellipsis] or to visualize dynamic graph processes such as adding edges to \
the graph one by one:\
\>", "Text",ExpressionUUID->"4e8f1ad5-d92e-4f38-9c8a-8e0473e5a590"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"IGLayoutKamadaKawai", "@", 
    RowBox[{"Graph", "[", 
     RowBox[{
      RowBox[{"Range", "[", "25", "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", "\[UndirectedEdge]", "25"}], "}"}], ",", 
      RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]}]}], 
  ";"}], "\n", 
 RowBox[{"ListAnimate", "@", 
  RowBox[{"NestList", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"IGLayoutKamadaKawai", "[", 
      RowBox[{
       RowBox[{"EdgeAdd", "[", 
        RowBox[{"#", ",", 
         RowBox[{"UndirectedEdge", "@@", 
          RowBox[{"RandomSample", "[", 
           RowBox[{
            RowBox[{"VertexList", "[", "#", "]"}], ",", "2"}], "]"}]}]}], 
        "]"}], ",", 
       RowBox[{"\"\<MaxIterations\>\"", "\[Rule]", "15"}], ",", 
       RowBox[{"\"\<Continue\>\"", "\[Rule]", "True"}], ",", 
       RowBox[{"\"\<Align\>\"", "\[Rule]", "False"}]}], "]"}], "&"}], ",", 
    "\[IndentingNewLine]", "g", ",", "\[IndentingNewLine]", "30"}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellTags->
  "DeleteOutput",ExpressionUUID->"c3f288fb-7ab4-431b-8dd0-7e6b7f706b55"],

Cell[TextData[{
 "Visualize a planar graph without edge crossings using the \
Davidson\[Dash]Harel simulated annealing method, and taking starting \
coordinates from ",
 Cell[BoxData[
  RowBox[{"GraphLayout", "\[Rule]", "\"\<PlanarEmbedding\>\""}]],
  ExpressionUUID->"cfd6ada6-1272-45f7-8be1-7ed8eb8ab70d"],
 "."
}], "Text",ExpressionUUID->"e42590a9-d4e0-4371-8efc-9bb12bd11286"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"Graph", "@", 
   RowBox[{"GraphData", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<Fullerene\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"60", ",", "1"}], "}"}]}], "}"}], ",", "\"\<EdgeList\>\""}], 
    "]"}]}]}]], \
"Input",ExpressionUUID->"d8eca005-776a-4e40-8ff9-4c6526bbb70a"],

Cell["This layout avoids crossings, but it is not pleasing:", \
"Text",ExpressionUUID->"6efb0742-04d6-4bf2-8b84-60bdad127e91"],

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{"g", ",", 
   RowBox[{"GraphLayout", "\[Rule]", "\"\<PlanarEmbedding\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"e19cad6e-870c-4cce-8187-560890d0649a"],

Cell["\<\
We can post process it while avoiding the introduction of any edge crossings:\
\
\>", "Text",ExpressionUUID->"f084f1af-242d-471b-8bd1-3a2ded0e5dfd"],

Cell[BoxData[
 RowBox[{"IGLayoutDavidsonHarel", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"IGVertexMap", "[", 
    RowBox[{
     RowBox[{"#", "&"}], ",", 
     RowBox[{"VertexCoordinates", "\[Rule]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Rescale", "@", 
         RowBox[{"GraphEmbedding", "[", 
          RowBox[{"#", ",", "\"\<PlanarEmbedding\>\""}], "]"}]}], "&"}], 
       ")"}]}], ",", "g"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"\"\<Continue\>\"", "\[Rule]", "True"}], ",", 
   RowBox[{"\"\<EdgeCrossingWeight\>\"", "\[Rule]", "1000"}]}], 
  "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"629fa14b-e7fb-40cb-af7f-2e2fdc5e5d6f"]
}, Closed]],

Cell[CellGroupData[{

Cell["Weighted graphs", \
"Subsection",ExpressionUUID->"43ace6d6-c07f-4e1f-9714-2f2c06230028"],

Cell["\<\
Several of the graph layout algorithms in igraph can take edge weights into \
accounts. How the weights are used during layout differs between them.\
\>", "Text",ExpressionUUID->"301d7c4a-39ea-4942-a592-71af06099c5c"],

Cell[TextData[{
 Cell[BoxData[
 "IGLayoutFruchtermanReingold"],ExpressionUUID->
  "d84dbc44-a29a-41e8-9053-6790612afff2"],
 " multiplies the attraction between vertices by the weights. Thus higher \
weights result in shorter edges."
}], "Item",ExpressionUUID->"cf382e78-e0f5-495d-816e-6b4386ad472e"],

Cell[TextData[{
 Cell[BoxData[
 "IGLayoutKamadaKawai"],ExpressionUUID->
  "efc575c4-fd15-41c8-8872-455eecfd19aa"],
 " produces longer edges for higher weights"
}], "Item",ExpressionUUID->"4da957c5-5afd-4106-b239-5cedb10cb56c"]
}, Closed]],

Cell[CellGroupData[{

Cell["Constraining vertex positions", \
"Subsection",ExpressionUUID->"42d5ac91-2188-4f0b-a731-60b058aa209d"],

Cell[TextData[{
 "Graph layout functions which have a ",
 Cell[BoxData[
 "\"\<Constraints\>\""],ExpressionUUID->
  "cf026107-b2b8-4ab7-8b54-023a80b4a402"],
 " option allow fixing the position of some vertices, or constraining them \
into a box. This is an experimental feature that may change in the future."
}], "Text",ExpressionUUID->"d6ee05f7-2c1e-49b7-97fc-771e91b9321b"],

Cell[TextData[{
 "The value of the ",
 Cell[BoxData[
 "\"\<Constraints\>\""],ExpressionUUID->
  "725403e3-66b9-4063-954e-602208a9c2df"],
 " option must be an association from vertex names to vertex coordinates, or \
to bounding boxes."
}], "Text",
 InitializationCell->
  True,ExpressionUUID->"19422100-f56c-453e-a966-5bf43af6c4cc"],

Cell["\<\
Fix the positions of three vertices and highlight them in red:\
\>", "Text",ExpressionUUID->"95e378eb-4ad4-4bef-bf53-9e350eadbb21"],

Cell[BoxData[
 RowBox[{"IGLayoutFruchtermanReingold", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
   "IGShorthand", "[", "\"\<1:2:3:4 - 1:2:3:4:5, 5-6-7, 7:8:9 - 7:8:9\>\"", 
    "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"\"\<Constraints\>\"", "\[Rule]", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"4", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "0"}], "}"}]}], ",", 
      RowBox[{"7", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}]}], ",", 
      RowBox[{"6", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}]}]}], "|>"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"VertexStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"4", "\[Rule]", "Red"}], ",", 
      RowBox[{"7", "\[Rule]", "Red"}], ",", 
      RowBox[{"6", "\[Rule]", "Red"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
   
   RowBox[{"Frame", "\[Rule]", "True"}], ",", 
   RowBox[{"FrameTicks", "\[Rule]", "True"}], ",", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.82345349512206*^9, 3.823453630846787*^9}, {
  3.823453667241349*^9, 
  3.823453762669774*^9}},ExpressionUUID->"2fc28d40-d2e6-415d-9464-\
37033e8085ee"]
}, Closed]],

Cell[CellGroupData[{

Cell["Drawing trees", \
"Subsection",ExpressionUUID->"7b6d868d-54b8-4f6c-85c1-fc8e2545db23"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGLayoutReingoldTilford", "[", "]"}]],ExpressionUUID->
  "481b318b-df29-491e-9bcd-ee12684f96f4"],
 " and ",
 Cell[BoxData[
  RowBox[{"IGLayoutReingoldTilfordCircular", "[", "]"}]],ExpressionUUID->
  "94c4c9d0-5b1c-455d-bb47-a5d0deeb258c"],
 " are designed for laying out trees or forests. The following options are \
available:"
}], "Text",ExpressionUUID->"d5c6c009-02c4-4e64-85bf-32c9444b3696"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<RootVertices\>\""],ExpressionUUID->
  "a2c5935c-655e-4fa2-a072-1a525191abd7"],
 " allows specifying the root node(s). It must be a list, even if there is a \
single root node. Multiple root nodes are meant to be used with forests. The \
roots should be selected so that all vertices of the graph are reachable from \
them. ",
 Cell[BoxData[
  RowBox[{"\"\<RootVertices\>\"", "->", "Automatic"}]],ExpressionUUID->
  "aab14f82-753d-49b5-94fd-390ec77d0a7f"],
 " chooses roots automatically, preferring low eccentricity vertices in small \
graphs (fewer than 500 vertices) and high degree vertices in large graphs."
}], "Item",ExpressionUUID->"4ad13fa3-4d4a-4793-a48b-0cc95fce7288"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "False"}]],ExpressionUUID->
  "4b4cd110-b399-477b-8d6b-4fd2f6c1c183"],
 " ignores edge directions. By default, directed graphs are laid out so that \
edges are pointing away from the root."
}], "Item",ExpressionUUID->"6f133d6b-5bdc-4cee-bfa7-66ed4560b99d"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<Rotation\>\""],ExpressionUUID->"53900392-8cc6-47f4-bf07-40fad45aa5f5"],
 " controls the orientation of the layout. It must be given in radians."
}], "Item",ExpressionUUID->"24eb238f-9420-44d8-adb8-72851d37c0b0"],

Cell[TextData[{
 "The following options are unique to ",
 Cell[BoxData[
  RowBox[{"IGLayoutReingoldTilford", "[", "]"}]],ExpressionUUID->
  "573b23a7-87d2-4264-9406-9be6a2b6f414"],
 ":"
}], "Text",ExpressionUUID->"f1278973-22d4-4663-93fe-2c41b1c40074"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<LeafDistance\>\""],ExpressionUUID->
  "9c5286d4-bff5-4d7a-989c-9074762199d8"],
 " sets the spacing between tree leaves. The default is ",
 Cell[BoxData["1"],ExpressionUUID->"f8c1ce31-b876-4ac8-b14e-08abe54b2637"],
 "."
}], "Item",ExpressionUUID->"1d9ce8ac-9fa3-4f48-a5de-67fd3bfa675d"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<LayerHeight\>\""],ExpressionUUID->
  "a27513db-2800-4fdd-9468-8ae2188ebcc6"],
 " sets the spacing between layers of the drawing. The default is ",
 Cell[BoxData["1"],ExpressionUUID->"40d3109d-b937-4924-a01e-3a8e15c03bcf"],
 "."
}], "Item",ExpressionUUID->"96bc2faa-a803-441a-8be5-72b8b4891638"],

Cell["The same tree laid out in directed and undirected modes:", \
"Text",ExpressionUUID->"cc62ec8a-2344-44b0-adad-bc5737305410"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"t", "=", 
   RowBox[{"IGTreeGame", "[", 
    RowBox[{"12", ",", 
     RowBox[{"DirectedEdges", "\[Rule]", "True"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{"{", 
  RowBox[{
   RowBox[{"IGLayoutReingoldTilford", "[", "t", "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"IGLayoutReingoldTilford", "[", 
    RowBox[{"t", ",", 
     RowBox[{"DirectedEdges", "\[Rule]", "False"}]}], "]"}]}], 
  "}"}]}], "Input",ExpressionUUID->"d073f34d-dbff-455f-bc01-c7734a94f548"],

Cell["\<\
Lay out the tree radially, with successive layers places on circular shells:\
\>", "Text",ExpressionUUID->"6912d3c4-1079-43ea-be14-0edc4e2894c3"],

Cell[BoxData[
 RowBox[{"IGLayoutReingoldTilfordCircular", "[", 
  RowBox[{"t", ",", "\[IndentingNewLine]", 
   RowBox[{"GraphStyle", "->", "\"\<Minimal\>\""}], ",", 
   RowBox[{"Prolog", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Thin", ",", "Gray", ",", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"Circle", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "0"}], "}"}], ",", "r"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"r", ",", 
          RowBox[{"IGDiameter", "[", 
           RowBox[{"t", ",", 
            RowBox[{"\"\<ByComponents\>\"", "->", "True"}]}], "]"}]}], 
         "}"}]}], "]"}]}], "}"}]}]}], 
  "]"}]], "Input",ExpressionUUID->"9a1e0369-5414-4ada-9eb9-08d09dba1ae2"],

Cell["Use a left-to-right layout, with tightly spaced leaves:", \
"Text",ExpressionUUID->"f2f11d32-9cd7-417e-91d0-e40d531971d7"],

Cell[BoxData[
 RowBox[{"IGLayoutReingoldTilford", "[", 
  RowBox[{"t", ",", 
   RowBox[{"\"\<Rotation\>\"", "\[Rule]", 
    RowBox[{"Pi", "/", "2"}]}], ",", 
   RowBox[{"\"\<LeafDistance\>\"", "->", 
    RowBox[{"1", "/", "3"}]}]}], 
  "]"}]], "Input",ExpressionUUID->"cde7ec1c-9c78-4c01-b08b-53b6da912645"],

Cell["In an undirected tree, any vertex may be chosen as the root:", \
"Text",ExpressionUUID->"98f607d8-3fce-4d0e-999c-bc6ccd400bc6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"t", "=", 
   RowBox[{"IGTreeGame", "[", "6", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Table", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"IGLayoutReingoldTilford", "[", 
    RowBox[{"t", ",", 
     RowBox[{"\"\<RootVertices\>\"", "->", 
      RowBox[{"{", "r", "}"}]}], ",", 
     RowBox[{"GraphStyle", "->", "\"\<DiagramGold\>\""}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"r", ",", 
     RowBox[{"VertexList", "[", "t", "]"}]}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]}], "Input",ExpressionUUID->"c43f35a5-88bd-4e09-b2bc-da73ff486653"]
}, Closed]],

Cell[CellGroupData[{

Cell["Drawing bipartite graphs", \
"Subsection",ExpressionUUID->"7535ef6e-9459-4493-af04-9bee2e7a0e9d"],

Cell[BoxData[
 RowBox[{"?", 
  "IGLayoutBipartite"}]], \
"Input",ExpressionUUID->"ded628a6-3c08-4426-9334-7b9876d5f883"],

Cell[TextData[{
 Cell[BoxData[
 "IGLayoutBipartite"],ExpressionUUID->
  "bdbb2675-0241-4f97-afa8-5dcd2d1bd06f"],
 " draws a bipartite graph, attempting to minimize the number of edge \
crossing using the Sugiyama algorithm."
}], "Text",ExpressionUUID->"d7f8cbda-0fa2-42d0-8c9d-4592c9083eb2"],

Cell["The available options are:", \
"Text",ExpressionUUID->"67835348-e663-4dbd-9240-1b5495205784"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<Orientation\>\""],ExpressionUUID->
  "550bf8de-4320-4315-b7f6-e8863f3828e8"],
 " can be ",
 Cell[BoxData[
 "Horizontal"],ExpressionUUID->"9556448d-23d4-4d7e-adc2-00fba10e1e3f"],
 " or ",
 Cell[BoxData[
 "Vertical"],ExpressionUUID->"a55087ae-7228-4a75-bd4f-7ae6bb4233e0"]
}], "Item",ExpressionUUID->"fe6e2160-dcf2-4dea-8581-7ba39c36f3f2"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<PartitionGap\>\""],ExpressionUUID->
  "cbfc8867-ac20-445e-bc06-41d12627eea0"],
 " controls the size of the gap between the two partitions"
}], "Item",ExpressionUUID->"5c9ed2af-06d8-4d23-bb64-75e7c7d2673c"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<VertexGap\>\""],ExpressionUUID->
  "8b818e05-5d66-4eca-9cab-aadab5b061d7"],
 " controls the minimum size of the gap between vertices in a partition"
}], "Item",ExpressionUUID->"04e49d86-51af-41d4-a12b-4b91a0c8b817"],

Cell[TextData[{
 Cell[BoxData[
 "MaxIterations"],ExpressionUUID->"5dc94975-6189-43d6-9932-5e047c06cb03"],
 " controls the maximum number of iterations performed during edge crossing \
minimization."
}], "Item",ExpressionUUID->"4974a08c-6e35-4e2f-8975-ed63240a96b8"],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
 "\"\<BipartitePartitions\>\""],ExpressionUUID->
  "4e12a0f9-909a-4205-8208-e254c2838d88"],
 " can be used to explicitly specify the partitioning of the graph."
}], "Item",ExpressionUUID->"f6419198-3756-4fef-858e-cdda090e0c03"],

Cell[BoxData[
 RowBox[{"IGLayoutBipartite", "[", 
  RowBox[{
   RowBox[{"IGBipartiteGameGNP", "[", 
    RowBox[{"10", ",", "10", ",", "0.2"}], "]"}], ",", 
   RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"e7a2ffb6-3f8c-46cb-9313-0f7504ca7e83"]
}, Open  ]],

Cell["By default, a partitioning is computed automatically.", \
"Text",ExpressionUUID->"342004a7-6551-407e-8e7c-f92a97a96797"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"Graph", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[UndirectedEdge]", "2"}], ",", 
       RowBox[{"3", "\[UndirectedEdge]", "4"}]}], "}"}], ",", 
     RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"IGLayoutBipartite", "[", "g", 
  "]"}]}], "Input",ExpressionUUID->"73ff6310-0a1f-47dd-95b3-60657bf1a4c7"],

Cell["The partitioning can also be specified explicitly.", \
"Text",ExpressionUUID->"234cd149-67ef-49e2-a4f8-9a080d64555d"],

Cell[BoxData[
 RowBox[{"IGLayoutBipartite", "[", 
  RowBox[{"g", ",", 
   RowBox[{"\"\<BipartitePartitions\>\"", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4", ",", "1"}], "}"}]}], "}"}]}]}], 
  "]"}]], "Input",ExpressionUUID->"ebd8d663-c71f-4203-ae34-69119afbb288"],

Cell["Draw a bipartite layout with curved edges.", \
"Text",ExpressionUUID->"2cb83ae4-3d81-4874-9c2c-00c2f4a43d6a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"snake", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x1_", ",", "y1_"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"x2_", ",", "y2_"}], "}"}]}], "]"}], ":=", 
  RowBox[{"BezierCurve", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x1", ",", "y1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox[
        RowBox[{"x1", "+", "x2"}], "2"], ",", "y1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox[
        RowBox[{"x1", "+", "x2"}], "2"], ",", "y2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x2", ",", "y2"}], "}"}]}], "}"}], "]"}]}], "\n", 
 RowBox[{"IGLayoutBipartite", "@", 
  RowBox[{"IGBipartiteGameGNM", "[", 
   RowBox[{"10", ",", "10", ",", "20", ",", 
    RowBox[{"EdgeShapeFunction", "\[Rule]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"CapForm", "[", "\"\<Round\>\"", "]"}], ",", 
         RowBox[{"snake", "[", 
          RowBox[{
           RowBox[{"First", "[", "#1", "]"}], ",", 
           RowBox[{"Last", "[", "#1", "]"}]}], "]"}]}], "}"}], "&"}], ")"}]}],
     ",", 
    RowBox[{"GraphStyle", "\[Rule]", "\"\<ThickEdge\>\""}], ",", 
    RowBox[{"VertexStyle", "\[Rule]", "Black"}]}], 
   "]"}]}]}], "Input",ExpressionUUID->"17b3c93f-90f9-484f-9376-3054472914db"]
}, Closed]],

Cell[CellGroupData[{

Cell["Drawing large graphs", \
"Subsection",ExpressionUUID->"9d0f4b9b-476b-4f1a-823b-39c3fa2bca91"],

Cell[TextData[{
 Cell[BoxData[
 "IGLayoutDrL"],ExpressionUUID->"b8258126-fe7c-49c4-9a76-4b62fd307af1"],
 " is designed specifically for visualizing large graphs with high \
clustering. The following image is created using DrL and shows a ",
 Cell[BoxData["36000"],ExpressionUUID->"bda04e1e-95a9-47bc-b248-ec7189c12bee"],
 " node network of collaborations between condensed matter scientists."
}], "Text",ExpressionUUID->"252f8403-c676-4403-922c-1d7f6f4ef918"],

Cell[TextData[Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
JZ2dnfrIaj7aUcQYVY/4cF6XXiJgyOTGiRokMwyrQqOukbF8I2GFmD9YNLak
bFdXV3d398knn0xSRG1vKZ95aNLW+6aFDM+yPnKmnnjpVxmXO6r7/KpSjAk9
4jLO2MLi7Xtu2GThqDaGdiWEIaiZ9gwZg7WAX4h3S07v6ow9ClJa2RYGAfGS
TUL1vycOh8PhOAaQd22NFqkMXB0PcEiJGznr8rwd9IMlgtBDW+WZWyiGH0Dq
jodQb6ZNmzZnzpxzzjlnxYoVIqii62LvM2bMEKHV+yoS4nxf8EBCLMOO8FG8
N6PohoqYF/eR7+1TGYvNxNQK9du1dO1Uq7alMUEkr9pknoiWi7STATJKrAMN
xVvf+talS5dCzFRy/vz5xGNifE2cOFHFqKcwk4mx94zIIRM6GuXmC2xY6DvG
AknO6W9oRYa8PRxkGSOyvHTu1GYzNyqOTGiFxQ3SQqpOnQsd9Pbtj+3e/4uH
v/t82CqR9kxeIOOZ9I7uRKkCSnR9/x3X7L11M3yeXepB0hisPzI9hkng83lX
KvaxVZimBcqd/01oilqa4DEz01SCzOk2y4VBK8mf6XA4HA6HgXjAcMtIjk41
vzokqjDdcbm4tPDJmPGDVQSRdKE/s5xtNgpirVVbDaoccZCPQkSru7t7yZIl
5513ngg8om7yInZ1dYn7oXUpIQmZr+rJ6kiWcSXkVPQa6ynvMr3pngc/+/DX
cWaqSZiE0BWdO1Qr4VEy1L1i32FfeiPyqaOoqWoP9DhK3MtivDJhRN1XrVpF
2kkNgiwaeoT/WYOGbpzWFh6onksaGb4P5wvCvTrSdZpQcLHaURSYKibcoiXw
6szVouESddcZlFWCBVRxcKLStJB471Erobrfev/OW7/6COOpvTR0LKQVVkjb
2lJw1W276uK9WzeLtO+7/eoXxdu3bs6c3DBdpE59Pkdo3qVfvY9VBsG4et4E
q46QsbcURhpe23YHcaXZuR4ugZDD4XA4Rgvyogh0wsPVnjzq6dKloV+deLdC
+6LR4964U6NvW+JCpgrIiBZKqHvGo5ip7Qij0uCT1D9x4kQR9enTp19wwQXz
58/XR7EvMSURP72fNm2a/sfpClOFvc60hJhBaHCcy34ZJ3GdOK4zLnftMnv2
bLFNldFBUZVDTkQR4e2Z0bMTUVE2YKkmcbbrWOQSNBG+2jZp0iTRcnVfpPeM
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
CAkX5SZrH8SSb/H5w+RFxf/ykd3veMc7Pv7Q1//0a4+JdqIhR4CtMrgfxer/
5Ks7P3bfI69PgJdSFIV1WlXGePiBRy949Z8vffV/vvZ69NbX1tOEyiLzmDNn
DmSVr8imQuRjHCTuM/odpRSLrkV9RRcWZGEHUj2q3xaWMqtH+86fP1/dGdN3
vVqrzewLMXZ1mW87gqTuquSu91+i171Xvw3ertf9174D84rpD2JaTbZhXlyu
K23fvf8Xeqn+9evXn3rqqbKJiHiFH1ra9rZ0lSVTv+BvZ72tzOUXrk9qneKC
sYw0Nj7hpAa3sBqjk6Jm2FcWlIov3YRYFpFqtzytrbJqEvdmeRk8zHY68gWM
sRfy9qYzaOFQ1NMw8wwKM8mUALOlHqAjgJlsps9HTwXP5w3+/OMTMOwHPvEa
aeelj1Va0g+obeG0jsPhcBz1GAK1jB2oSrGWTIlMdGqrvL0eZOTDq8lHHnyW
VzAsn6+k0dPZpuNDklbemAM7LxBvtKSRdmpu/eojn7r3YW286Z4HP/nlB9RO
mRVfue8GtfO1WNqf7372h9urPKlLiEecZuoOM7qHXbao0nyd9SC1BQKVGTNm
hKthwgeMIRix4YmPDxw2BVUQV8f1N3HiRKqypOuoeYlpPbyU6vM//4uH/14E
Xsx8xYoVIpNirSLw5J/htM6cOVOVqCUkmRTIiIJvH/aukT/4xCXG2Hl947O/
Y0OK5x/Zicqbf5h1P9VaGzQbJctqyHZ1n2K1IO8otpLlsbRBCM+UqXTUEdky
CCTCb9lCnbKY1LU4zZJk17O6f8/m3z8ci5oydr2ev/3qh//kveoCvlYyZDIr
QV4abA2YPJqlrffv1IvI0J6engULFsia0JgTU9meyz/PFcVKuFhbmTuC05q/
Gs0+xXUcB3HQdhHGaZSKzuzChQu7urpoPJolmzjgXHAUZh+wL9g3CuTujVBL
s9+UlBFjP3jzYY7KgGduH+uO6PquPe+59a7z86ZKU9lbxo7O/7DU01CCltQj
XHVhJU3NB4PlCOUiRAwWkvZB5e3cy0PzCHM4HI4RgqFRy1R3pFdvT0Zj0A+d
jD0Ka+my9eYy5XmkCu+593q9GhkU5bzdyHCV9hz6p7eIK4q9mygd9iU20paC
kmrPffdvefDhW3/6s93w9u//6wPG3ErGuZzbm/ago+/aN8Dqz/e0nspuNYZi
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
+fWti1d3eabktEcYOEOWQ6U0Pcfi3axMVamgVBloHMUbjjeZuEEpXOOJ8H8h
7lU+SAs3fTc7bF8ldh0gVUlqBn0jcQ88LE+2Xdzefu6RMnZKuyai5Lu4Q5/K
qYj3kNPslypR35Im9cU90wss3ysubvdm4upAxOf2nhKTX1zXi3UN3Sbe6/IX
Sg7BEpoPc+4e90b3pVzKpVwOrRJwfb8EzoLFvbwrppsSs8WS6H495Okidi3d
5xLmgH0GeD/y2MplK64PuO5t3+dO9LlgC+wLkJZUDMCQR5FJEU0z2QeBPF5h
s7lv1D/JZJ+21hQAR2/51XSTHJqntk/VSG0v2Aa0f/3rzZLA2VensT58Qwgj
Y05ojIjZZKeAOqgDsm1+ZKtaHIEG5Vo4CQqwaJjIHlFC0Mw4mUT93lBBD6rT
1dAAH7jxYM0k0ak+0CN41g8MWWLD/0hK+1lD9nx7/LoLRurJNC1p0FfC+61w
JTMAEnbJW29897bf3rf7v9Ztew4MrMtX2rYBwpIi5Eub34qjANpNOyWt3Wyh
uuJD1j5y3DNqgJwiMFpMxslSAfgnW0ZalL5fWfTUZ5gARVCl8ZgAYNBpJJCS
yyElSeEUMO2MGTM+//nPg2+pA5JkRMBLs0rR7SCQeCoVtDFBkvPjZWzIcwh+
GoYp8SDE570OxXJslP9jVLLSjh/JFg4KpPRcxLpMaHWqI6r54wSqbsSgmHZZ
MYyCDwxBtUbsMioDp40sdn6M0zRnrgicPjN7zAPtTJw4kXloaVsEbjfyl90X
NrQvauzgoMwhX9XkNFDX2fAM0hkQ+KRJkzATHt/SvGVrq4KZpnnivDx7/Vue
m/WXTDLtcJYXrGxr27iDd/PquorhvDmNkXZKpj2d9y9sTXdJ3yRzfAKaulTQ
HEgvAtIgM8Cvadyec3MLXmJg11jNLHgbbDrzTS/N6YHuEmaazzo8mk0j88DY
4TbPKYHMAzCn8XxOycHVhyVy9GnUzbRwonNQt3fIcES4yGXsvB6Ag1ssoMHI
puHdOBz+mrp29SBaft1KCLW1/+Kzb3RfyqVcyuWNLwVd68VK6Vucu+uHqcoj
YXq7VjHAm3NvAHwJkkyUYsR1XeUcdHn9DY9uagC3px1fOmyj2zm5U6MFQTvd
5lGuYzniRvslSjuHZdMYgRVDzU8M0y+VL1XHu2OPCTHHjbrfClZUZEUPRFzg
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
Ae8pky0gp0LlRh3gfNClz6AYi7QWDgQIXNjQrr9UbrZSkzrG1WlUVIcdXSIx
F5Isa0M+9QlLC1G6POC92h1Cd130RhmbPklCl4IzMqLphvGJpmEyCsBZDbe2
vnquAUNoqanX2vUOBn7aaadx4tRdlFcjQ4lqxtUyRhn+VqCpjgU1axePUqGR
kf7sir956Bt/DUZVl9IlAHk+XnvshUFBZ0yoqt57BNJ6pjTxOFYkY2Lm1WCk
k5JJ9NJT+FVLisIwaYSrghYE0oyRdui/KxcGewKeAdJf+MIXvvWtb3GCaJxd
1m1/bt3255V51AKlANdva9/A1SX1y0UEF4zohnx7g01oky4xA0bR+kdgvAps
Ugd7ENuE/ptiVasnDBNVdFwL4wPVhmWL9qxUMY5OaxjFxqIqbj916tRTTz2V
E3f66af//Oq///X1H3py0Sc3zzv2d5um/3HTeBD7f85/55IlS55YcNzv5r79
/8098rnZ/+PZG94qjO847yj6/M36tq8vb4nVNArzydRxygK3M3UMkNnzP8Vk
aspxHWoPRkSS98BYzjsIGJ+D2/dLbs9k8yDsV0zeFdV4HNjJ9K/8NRhaOilG
fjaQikQz1q+O15ouQqVHEUykqFy6h695KTb/zmdpBZ5yKZdyOdRKMbqgbIrX
wTMQ/od8d3om7xYXUgA6CkKbJYoV+Onhx+oF7Vnc3pN+vdhI9beIxkO50V5F
f3LYO+IlDY3A7emBWHjk6emVFWnHwkjhaRhtzvvF4/N/uUWatNlUpaZLxVTX
RTdyZDzsiedddOG2RRcC3dmR7aofGCooYNAzL5EmZFh49Os4NZoVICEbWYCh
h1Z2iuxumQmt7Tc1rJrjFOmtcqrpG6CFd577e2Ye+cKsHgwgFFeDGpyjt9NQ
Uxkv/OTD0S7pLmYXyeHCezGkXmLdnhKtGQ4bJTnH8gH9V81brz4bQ+qEmlJu
wGkGot588/a77nr+iivaJC8NyJaQvjf4VKl5/wVCTUbNvtXV1RFaS3/ojKkw
6TCACjwjoV3DxLNpSClFPoPLFnTYMEO2SPxQtFy/vWsKaua4rqGHUz6M5lLY
Ggq567B1sAJdowi1yGTRcCxVesI1rZvdPhiESDUjUidPnqw4DOPijCgyQz+1
SphhajpqzyDtMCLQY11d3fjx46lsMLWxunpu35ItdFu9FzCq1560HF3i7MhP
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
UROeCMvSvn2xqtXx/J8nROXnmhEJJoP1KBMjk6HshU6wTpXMyfJuWQCVEk1E
NXJ3EIJtVdAVuVsexeYq/Aieha/MzyrqeN9opObWQMm5dDHKbYJij+BfmbYT
PvFZC1gylNirV69YhkeU7dDRfHRWolqLytLUF1SsSErviqxTDQ2/vnz56RMn
Hmfh4CbLBCsgq4N872JykpK2wsD9UTOOjs6LrPses2pRpc4Pj1sLUmOpZf1l
OdbXvM4o9bSuDR0XKmboxUk9nBXdPrWqx2dE3aolEwdgIMG4UlyCKYNzdOQE
/NAKjzskwh1qva7P54/k/sfL4zpt6fcA+DCvej3tIDqiJCRLmpfSbvl9+q2K
1sFOKjOQnU6gtB59+OGHQREgPQCJLkrBVCA9RakgN8nYica1ME/MQ4FJimeB
H7m5ueBJoB0YBsTC4yAWvslXrRiwX69evbp3765Te5ICWKqKozwfBAgEBbWS
AmUAWMqUQnzKQ0wdU1IpCeHlADEd8CQPDhw4cPbKTWxkZlStk6WcFOgdvV7K
QEj7hBZma0AtBJakRrt50kEnipfIBbzNU/QCDQ4cpQruazQZIAWSdTe0svNP
V3f9OVWePXs2Mdng0CBsqcDqNAiND2ZLTExkCzN+/HhQOqAObDxmzJjMzEzu
g+QXLly4bNky/or4XX2ptvrYq8D46dOnb968effu3Tt27Fh15GTRjgOgZdA1
NaW/iJmSksLPS9m/5lN94nWKR8VpFpl8QNf81BRUX1T0KYidklMqXdlqmzmt
Ys3ygyfmrNpMvQTndJY2mPzsFA0UVX5OWTHpL9qHwaBnK4Yf7UDd1TMXVGvz
q96O1gT8Fdne9vgMG9iN/e90gMn67pRFNF4fHxdLM+DVGBF++2rI5G8c4a6q
HRHcvqeO+wBp+11R9uilpXzYzZGar5u2peD28YWVbup1dqy3WVE0I4HdMfti
7VIPZ99dN/qba9euLS4uZuDZyLSqbKLqa7Et0hCYhmKI0laq7lMSBjMjmerz
UkyaNImYFECuVyuourucSAzdIN9m7uo0YyG4XcG1Ooc95xX0XbScGUkmK+dM
p3TZ3T3uVOSiQEa6s2B5pCgmsIEpeFc3RsMoGcwIcraTJv0S/NwR9LWtkqeE
AK4gwYBLsYxLhhmpZyh61ye1RwB80+C7hr8gbg/Q/XpgQAiqxwTt+tgVPyx8
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
MQbYQGt2YDAIn57Kg4EIQGauXfbIx5f3+XPdSwE/IjpAO2BStE8JWghwFTUC
hFS3AkvkqwHCaQAgb4nhNcFC5NHWQj2ntsR614rbDb106623th2uOnysZknL
LB1g+Rc0C+Cs338aKA6Kk0AGgKcjZN2+U/yluQIIs3///sZXBWECdEHd6sP5
BspOnDhRipIDU7pvHJySI7KSNHnyZJCt2m+gftm6LcOHD1dVDggHcnOSfwHe
yAigaCqSv1E2crqmLlqTe4BxKsTq5t0AaWA5l1c8sx2APWTIED1YAbEURS0T
kpSbm4twQcspIbd5ZdWOQyBVcKl0l1RBs43TyoXkBLpTmrg9FSO1rKzqudba
3UephdaWb9hm1SB2/l20aJGiRM3OIzW7jmi0Qy+m1y3t3r07lSrKuYnAOGjn
Yywk3QcQqbgL3HSZfNxA4fbxF/frB0niMeBpQRJBJHEjg2egd+/eCCk0nmYg
AdXU1GzYsKG2tvbYtH8BtPNpHfNP9F1iTO41D4/WUFx43333cUx1RtflOaE9
2tUjFBj3il7MalwuHSjSJQ8DT7VUjZqN8RZocM6zofM1LxTnAdVSxADdP5ck
pyDjeXEVZfICUqD+2nyrKudC2snDxo3WPZxsbkLRSIYF5K+YAMCmMSrJmeU4
qQ8LhVCX1ji0gWHkfeFA4la3AJgl1H5Lz85so7xPCZQjlZkwW327RoZBokUt
hlIivwsEc7tBKDSV0TlIsz3qMl6qaJlaqKJk457c4pO9epXJbEAhKsA18mQR
ifDWxqRmJtFkRd21li0kCqc9aqgidonsZC7HzuQZ7WaoKliE96GLFn574Co8
et0OPi6vnqEQ1ewqmtINwtOh++vxuaak5wI5zhHbh8iQjtLTLXnespDO1Jn+
x6W3i9vDQ7wDFE+H6x3k69fjdqca5p/0qj1pzgva6WozkhkmXW8Pbn/xxV8c
PPjvsbunUj1dTNCkXMM/D5gnzXNhexhofmp/4oSs6QUXZrTvCMiRovdQ0Dlq
y6e8cGHCS89PYbyEMM4Y6R49zmmU73ylw5F7ms7eFuJWppsFYngtHmVfF/Nz
rJkNmXXb1xCRorp3L+7Ro8RRlTdeQjD9UtVOa6aiL6fqIFr1VGH52PkVWaW1
TxdVgQZZW1kEwb0sAVRhI2WYdxdVPklWJangtV1X163IIPuxCFyvLgG51I6A
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
1wPUZVYfM2YMkDulx959tOHA8418Dr5Qv/c4CH/76Cu2jPgsABVECrIlJ8hz
R/kdh9f0fynz42dG/7EMMKDrQYMG3X333flL1tAAWgLs5yQiAwdGSqV2/poz
+qu5I79i0FLkCHC+6BeEP2XKlAULFgC8N2zYsGrVKg7AvZwB0nMMDk8FikoO
pk+fzjdtRpQAMwvdqYhGTp48eeHChU1NTXwjBRQXF69L0pYtW5buOdKUChF7
RtxOG0rWbEooek4Z1oo2IBf07Nnzjjvu4BbL9sNzQr9A79xELWf4lzwMHQNC
1xgBSelzcnKQFKhlye7DtNnwrAgs3DWkm5dHXooQxDhInglW5yeDSb2aRelG
QS1UYVynu+66y4C5gGQedZ4fidmR73hWFfrkL+XfZT1uqL/3GndqkD6Q43iE
ePh5KXhteYx5Gt054u1Q1uZf3iyDpXLS90szFR5sLWSYhTgPzJaenYdT3T6l
8dyOW1A5oaxOPTzf7q9Jhco3P2WD5/FWpubl4q3XIo5Xm3olqKcX9J0D6uJF
49XQsEcXEhka9amRj4tygo3KjV25DlQpCK1ZIOgaP/UnshDJrOTXYmIx0kTw
3LrWkIfjUfklY+dX6CHlaqK2XxIt3fkpnDaoGnJpUxtj5FaSNAWuTRe1R/pw
IXBF0LRVWB5OZ+rt5UwQz6dDX07OLxoFaGcJi78sXMV+ukOryvPQnnVpp6NJ
Bxgu6G+mEv8tTVw6LWQ60zsnnUXyPbv5uoriDuJ5h5LDvv31mD/4XcOejTkw
PNYvbA+ULOQW0ocHvXKEUFn6dO12nPRUtndp96aXUDFeao7B7a8tvmnh6Ku0
P9RQkFmUn1qYqw+xNOdhFdc2VWNyNwuYLW2PyDns6tWx20hVH9rMAyxVwgiY
xfkcKLyMG7d76tST4vasrP3aPRopW39VC7GzWshoUROsAlTtJq8LipO2Gl3W
r6cKywHtmcXVLI4yJRrhTp5G6ShVzrBGyEtMBo5ZUllHXJi4ir9oFVB8woQD
48fvA5AD/1hbwcNkFmAz2/NxU5jz2roHgTztkVCRblICCy6FgPY5BsCHoOHt
cCvZLjsUEmlKLElRDBTLrgT1hlmhdwZspSXaoLpxwC3m2CWVBpPHmONcDg6h
X6zj8rSDB+gLpYEKNC8BwCzt9dGW3h/7dpJc6LWPBc+4KS97BkWp0AY26HOq
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
oovRBhYkPQeKqshKWbdrxKqpaKmqkrlnpGiqqqhfAT4jlC4apFDGKZINGJDR
v/86quf6tV7LGGsY0dSxV8/cahtKSb8QblSPrPRz7rRCnRnl/w5/KvnrjN2A
ia5BWHO9Onh3ZkJi790R2RwMsK4BWpD46Z3PeKlQhIwE3sA5QAhjvUI/iAgU
gSIMzMRGYk5SeShFR+4kk1tIAzZrJaoXa/VngARqAoEoeOQnTmouB8/o+Prp
p58mZ7hoa782e4c/BbUuKtwKNc3M2MCufg5wDrABsdQcQoPuqLZq6hA7d9Sx
Y0d+JZluQNj4L1SrMLQTJVJDpbJK2rOPn1x/rHHp5p1wI9Q9e/ZsYH7F1j2c
AaoBS+Ac3E1OTuYnABgU1w378uXLJ0+eDA8rugfa4WTOL1y4kKug1tHRDVre
OrFv2ZsDoGWIPWP3YTVPiouLI1riDZc5VlJt2KaID8mGSyA6TyDn+ClqmJiY
SOkb6i+yM6NRdA/tUzR8fjKlzbXkL59Z0qqkdnxJzfiNxxryDlWD4qqgz4lu
1MdATpl7jgDP3M7a8kM5ByqB52sTnmYH2ktqTsPtpaWlZWVl27dv3xHdqqqq
jhw5AmwXHKkrrL+wpe4syQpjVHQoZXP1qcgawfLlzAKYMugHhpkOd8r9UuKJ
tx9qnPU9gB/CP724ZcOM765YsULvN3FxcUxDmApxwH05VfG/dgLIGweL8v+C
u8wEaa5QNH+6OiEadeqHXyrmVydlTBg5NiAp7VDTDNKQp8r2BkLlWtqe6ig0
FXJQi15RwOyswvl5mxfklyzeuI1qkKdzAQ4Up5OMCSbtTZ0uwwp7oDqNimrG
F3NekF8wZ+Om+VxCO+QNIoEdDi+UwKz6iq2X94X3wqUxciNP3mJOaqmqTr6x
ibmE+Q6vGzfFi8DtcLkKM2qdWQ3qzKunKas9Eh2FGM8d0csZjMl+VR9W+oa1
M3Fdku6d/twoFfKza6z33Xef3uapmPp1p4e3fCehVUHXBxWt22uZRlmQCp/8
aj6Ct0FXVfZTk9PIHUrmJW1VQFs0xTGJVeM0wIemtaqb0q8qQAsuHd54e/nt
468ifcfNqKPjFbEng34+6K5RWzBnU5c+Vrp+99TdrCHTvIHrzh9/b7g9Vh/m
w9LczYQ3BFSStOXzWG6P7Gci9M4jtRpKD4LlqZuScPu0EDgphIozsZs6M+S2
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
VH4lln+qdqktbuP2FtGXmh7APO1blG+r8mcPCWgdrFh+4NAyCVwpgT2JJqWK
0I0EFCJBAI33NgVuvjdqNBo03oN0XaiGgf1KSnpF1zRbNP2J6rHrCsYFMuUV
dlMu+bkqSlcc+jdN+MNipasDFOTQELQiKatv3zVwu7EwQjApC1WJke5RAYv9
qmr2OpxXwcaYQaTURQA/GXFPMNZeVdG91ZD81SohKw40RNVaSp0cPc+QA6Uo
kA8aO85flBe55ktX73zEtV01bTTysv6ytBsZKkfSiooEjGukzOr4xzld7pMo
GLgZ4iUEEILRnAy5duDAzH791npTPLf+/depQk+5LhOzObNQHKQLBVeZncio
bmrsb6rKyMuAq8qQAvygcWSgKM9oSAswKG//ZnRTdved73wnLi5v9Ojia/H/
HhLl3Kg2sMTe4U+xQ4aHR794KOH5fSOe3hPXtkuXLiAlkDxgwIC+ffsCxjB5
p06dOICKd8b99b6EvwddpAWYnJ86d+48dOjQEN4INuNXeAYY4xJ+AkHB5sGD
B/NpqFAuBLDBb8DJ9JzkJ0rhPHUzuBI/6ZqbIkB6ftWZjJMLSJhJB5W0DvtH
PnMw/jmovl+/ftxX+ZAnSUOJK7fthYT1hQ763lSMqb+kaBq+BYZ1qAKcL1iw
ALyEunkss2fPzs/Ph8aXLl0Kxq9atWr16tXHp/Q69mZPiJ2UnFfjZcaMGQA8
twmKA9vkAMaTA7gOok+YMEGvkut2VazecWDq1KkTJ040ppK6MSNHjuTyqNpM
xFiVenK5rs5TUlK0gWXuQAUg802bNum5MSJyrz2flZWlcj5TjMzMzPXr10P4
nIm4miwooP6RIKdH6kpKSnbv3r1r166KigoAvqGhob6+HnSvrq4G49/n6TEK
5BXLph5dNqnsZC17oPQbYx57L7H1u2N/dnHyyxHdmNQ2NzY/+V7xY3zeyPzB
e0l/eONo67q6/j7hoxP+CVZnPz7pny8nfeHd8Z87OOYr/E1M0zSo1AyBNgOd
wue8UMChRtYgq68YiWFg7VJpBg9GN7haOw5eDZ200PZ4DY3kq9UzyTRrtSka
XZeyuARQBzJV0+JyVcd9i1+KbqTnJ+qwIL9k2ppcOh/KooZcQn1IRnqL4KtL
SBTEVVSVC5kvGJuY/mFL39a8bsyX20c3qsrN8mJSjaDWYrfjvJ5P3lzXGkim
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
oJuinFD6vriYlOHP5o7vw7eLiU4xjOhql8VfKwd10rW7Ui/GiKr4fkwEOOLw
Ry8dhirH4kDaSqvEbzFbNRsHRIdOHUHo+KUhaTjmMgYpundY1HtDWM1sGBPQ
vtdSKXjX81jQrrlN3u52N9D+hZw93sNNg99vWMLfuP1r2j7fduNLO5a5J9ze
cCrdpN5J7G1LWpbfObtzcE3jVTtv0mAJjG+tOzl++vRz1651S09/jH2V5YIp
pVHp6TqCsafyeRX8NIB1gqBihl7cxXXt7pXW6s4raONYKtUClW/Yj5mnnVII
cqe01imGuusKq3UgyVVIQ2JjkgaX7waMM76qkCl5elZwdSivKtkAaOenrk3b
d6xiewrcfj32F7n9vgu0Fw/5CwYa4VlP7CFsqzaV/PTS+ocMi57KsQ2ozb9B
/MIIZfuoTqMyJHOEshGR4EoQtWXTrwI5MLIoBtedo84eFcG5auzyhEJ42ZuU
nuskSEUgy0/x/i66kYwqq4Sj6osRnUK8DNVm1DLVabx1VHvfdQHnJlzdSBwM
tQtG/3jey58G42bMNdbS6bGPnxnfTMfObAY9Z9OtBBdVoAeKyA/sqy2wZkSX
jFGRgZjEDuKM+ED1jjFP3ohry+fjaa34bB0VCRmpCJ1Nx9Tt27fv2LEjPAOZ
A+SgZps2bQAhDkI+gLcWhZxbPqIVSDNq1CjwCRpXSQbmHzhwIGmMWQ/FwVEq
vbyZXQzwrNywI3Xr3pQte2JjYyGxU/NjTr8zUlPNIUOGkHLf5GdA9w+mtf1g
aluurq4IMwvgjQQqkFTP7skHEOXqCdHt2vpn5PZjeX1riwdAsGQOKIKpgHdu
bi6kyk52dnZZWRnf7EOA8K2eWI6/+uCx+f+DU8gqa/chymPUIX5qZwo3Fhw4
lrPnCMWGQikDfA5LC6hkJckDWmA5sErBoFnQFKrkmxw4iwahHfxJCZkvkJ6D
pISEQW6ji1JrfnKhhQv3gO76YIxMJaLeKSkYV8yKbqtXrwa2DfBEhsxKFi9e
rC1tBNoPHofDi4qKNL+leJSZBLTGunXr9DCjN0i2zZs3czp58g26M/VI274f
+Ne6Vs8wlFNvkFyRWnCEO0IFoWtuty4raRnjKPEYUHIl9vwF/DPlocqgO5mQ
lf4k9btu5pxObhzhMaAReBTheT2Zq6vDPEhPO9wy5inqL/Ho8hySUsc7SuAN
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
5RyNM/+xadYP90z9Huj9zdivaLgacS164jdHl97YHHuFBCxgaRAyKUixCKTk
hIykspT3BhybkZGRnZ3NdfC/knYeJEfgPfASWKsWh5SVNKxs+fqc4kRqeiXw
Ee+c69aBxkHpFJ4a6XgUPEyCqvQDkqkm15WQ5+7cn7erGTROCVesWPHq1r2L
6pvA5M2tRZ27VwG/gdw8BSoGePObv7uleN8heVfWrl1bUFAAUCdTcHtKSgow
/vjcZ47NeZo2BOpv374dJC/h5LxooFWJU1JSkp6eTnzKIE0NRaVN5JanBeTJ
pCcEg2XeLGiTt6lQ2lUbHUD1GJ2ZUjVSkNWTpqY1eBe8Kf4e2pl0sH61Bg4k
RTPSt5kCZDtXwqzgmu6kLaf0htKlgq6JyRtxs0Ovu0q5LQn9WdtS1WNUpyfQ
UTeO6EGORJBpSqIb9WrUH+NXp2O6V6D3Al/5lSHKdbQeh1WSEZwr4lbgr/E1
d+nzDB3Evyoa1KlTU4hWpX3oezzF6pVDi11JJklHKieqQzsfmTMsc8uW1Zs2
F014Kue5RwtefKI5fignFAPcfnjOwOZ5j5MLiL1h5tP88rd1wZP2TMpDBfek
PXB2zm18v4FCn+vvTAW3e/Q6Gdvr/ekR2fu5qb1KB/6SEezKK69kOXCu8taT
BX00AnJbk4ronLp47g1Vi3q6v+yUFMZkZzRnN4ZEaQ307qRMDzjNOK8AXG1z
r6s7qsBHFXQnoBCHB1Vf4UFVa7RIZbJbmzojO3e2iqNqrWsU1hjdJQdUADnc
cHeGnTChhEM71uTkKo6AZFSeEeEEYbt6NVrOdkVBf+aQ+AJo/4+ErhpHnxWG
D8vAzyS1rsnaaRW2qxvmqvPjkbuuPbsqxgQ8TyJgdaKJ2zlAwnxffOYg4Zy8
OZxn5SQCUVoPZsknw9F6KJtRi7FC3K7SC1AQVKMrN90qBfpZhajgIhGveuzq
cotvFWtLRSVi9NPmRCUWoS+jkPJSLVL5pbQUjxN+KYY68CAfkCoFYNxmccEV
JcN6d+VBknVLUW15xyLjyJFLObVqd6TiYmCJ5zo1MoVgoa8GoMifxgyO52SP
cXBz18C6SIruLVWMBPZmJP+MHqtNROtRUlbt3yWDyw0jqOWi3Fh5MncVWXtd
U1D9LjGJqHmuDg/jvJrzondXN/x1tHfkJDLTH+no2pW3DG5/u6JP4ezrz2X9
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
B3wU6Cosf+gPJEID0ly0pDs4pOkGDb8SNGkXTC8VvesOWIZ2/tLNaGrtggHP
dDZ6oIbM9Bkyej8qVebT4KL6JHpT5UE+PZfADDIqwilmJxGuaFSiYbIfLN+7
pEwL8ys4XKlRDK6ouE7Z6I3qjEkAxUVumSCRSZ8iae6dtGFLSvU2Go3lhjo5
JMVvWePjncvu4LPac7Asra0tqaYO1E3L8Cztr4o7heSb4vdX0QBub0x6pqbt
CcYZrt93332MG6rlk+aG6UOrZkQ2j2h5TjbOepbVFq+M0m4e0/vtqX3em3YL
y/mNI3qYIFUGyXfG9NSdNGMRTSFdgDb+8v06QVBNR3U50CSKZIqRAYzZljlX
QyqFY6plKkRSV1PGM83N1Cx1c5lxXmVCRWrMIGPGZI8enaWupr/6VJJCQQGd
0ngwjPJ5Gd5Uj1FWL9+dZmh6U+2qNtBVFNnVIlUtAl1JKi+dtjKV488WGH/m
mhgXQrf/gBbNn0jM3jV0pZRRVSay2dRewG9QKgsa7GBFldP8HDRnBp/zlLD/
5OkSzqN2nRFnqcdTp+xdPA64C86JsK+3ZGRmJwCTPnLAVNh6MKLonl84H7ii
1tzI5MzRa7LVYxdYAgu1uJQG3BEjgKv8hGtL5t0owPN7l5mcx3XSpM17EONL
Bal2twoqEcep0X0BqSYZuMhdlnLO1a7R6JUrSqcpsBo+amhrMuloFmTa8k0x
ZJFs5WvdKWTgk1GEbo30DR1cTrs7ICankQMNjoyO/DVNJRK8CPXSiSx0VNvc
dYpBSYgDI1Cza4K2gDRf8qgrig9lU7mIupN13NrseZlFrlmY12z/n/zkJ2Jy
tfHJTpm/Rky2vLdc1MgeVjLk0opnI+1AOjSOeFgjVrWk3Ddh7iB9IihdESSD
/PUMy60NI78G/ge0g67VnhK0M+8A1EXIEr9wXa0nTriuNRbRNAiV3UiOd/eI
SYrrEjmqzuT6hZndilNHFy9ib2kZXk27c9H6e5i+mU+L9jxSU/XgxsoHKACF
XzvsnnXD79X/UeCgllKSoDYOgAR0QXYdky85OfUvNwz7tUopTKzM4yCorVsf
aWh4es/Ee4HcHODt6k0rN9WuBg/rngZIDwAAG+zc+cTp04+e3tOPFGpr+9XV
PeQ2vWSPnBDt7JSIuF4Wd7LQyFQdYGCG8N6MQEQ7X7pr2/jbXR0QDbiiaySd
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
IYn47Ut0qcmM1FVUll85YzlR/4Tq61iKxykwY5ojJ5FpfJqCOBrhjl6bPyol
V/pH/gYeBhUfObfqOlC3JvoT0UCVuwoG3bJnUmPSbO7MUftQvazKq6B0K9Cu
MbLsNJIbKCpvDrCVg2nKFwjbHwi7fwri3CZs12w2uAJuL6q9FL0k+U8QHt8H
7Z9wuIsWzf+hN6V/V/DDuZPSX2YYPiWXvX5BbjNpZ+25Xsm0OlFPBrS8Kilm
5erokMj9TEioviZ14r6wQ1I5IRl2cvISikrmMWqpxhDmk0kRzKfVHUs+dlgv
PKp2kCCHiugkIiIVfCrLBQ9zKHIX0gsXZXeX/Fy7dRXkJH4U0xI4oRYkSzlJ
X7IaAsMm+a5OnpCydhK3lBVIYKv8AdyliojrC+1hdVcqGFYDX4LZ3Kn/ljX5
Z9KtK0+gDCBAVyUB34toXCJN7VjVEtchrHrv/HVPQY0XxfsuEJSKCJ7VHleU
Lb28eoCKNYToeq8IDIE17fei6WjXIyeAtOTUK7/fF3LfDO1dSqtiTGnzvxkO
itwlE7N4yvPtAFxkTlFP3iblLWRntyoq6khR1SOSOHTEiKzcxDU34z7FbJvz
xoOZr342+/XPayTrVgUnWaN6Z47sxTRESehOGngyv6QP75ky5Hl5b+RsZ65J
y4gv2TuoZF3vNW8/R3fiLy9X1qCMrGkyyQutmdxJUyMLTYYJ1FSPS/8jHBIz
izhU41GbS5IZ533mQU5KS7uUl3cXzzNTM/OCVZiOuSu7O7nobompHwQI9ujc
uTMXtdTTBUzFsEc3DP/mtm29zu1vt3pDZkxBBbMwiAggAagGBpMmAFKHj/qd
UbsDmEFMUJPCdtLcNqojqEbX7a+99poq8aJ3vcMws6sDY8zBgwdXDm93LjLk
0kUCQJVpqQvzvioxhJbhoDaFZqr6o6eEx+f9on5py9oFT+4Z9183bl5eVv6B
oE4/SkCvg5P+Ye/4v9HgFOAHulM/vCJu8IaJIWaSyvhhgf/3Y1P6VU/qfzSM
3qV2j4+PV0C9N+IZCkxz6bKzLPqtTZOHkhRQmbskqIg7JSVFzROeAk1pHkuL
0RqqiFRuXbVh0zJ9oRJNkhlqRMEodkxMjH6g9A3EFWBt13DgIo3Pr/6VWCaA
bCmeBqpkoQ68LI5A6xN1OadOFygtX7Zs2cHD+YePFnJdRZqQ59NjZzm4kpub
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
JwX3kYW1ThDOMsJgpjAmL3OhoZxVuaUQW8NPtWiSBz+7J+a1fRPeSB36gjSS
xFcbSlk9c4QevfUVkp07U9x+6kQyeJjpEjxpUwPage5q45AI0Q5uiC4d/FXK
I5EazWLJqSOPiOqJrxoPL8hK6TQ8YGg3cknibxontWJ6JY5Mj3JQMNW6WuE6
9ZKw3c5AaflLAYDBByb8AKhAgYsGfAn4l1ldu3zdFsk3+H399ddBOzLpMUVy
LqCSRkbhJ3B67/i/kToGiC6yAoEALZaVVQLdlWrK30ggzV27Xtm2rZfcdEr/
Sku7VFQ86yJLhVtS0KyPHKXXI6Oz4x/aMfZxUgZsqLQvvyWYnNJqiiirpGrG
JC7f4weFFeBbxc5kmlF1svDkxfykHllLuy6Z8C9zx/5I+m5d6qhEoVMnwDag
PWvGD1y8cJGS79v3BvUVq/Pg7t2v7t//pqzjAOyIiIhh4QCYBHbSIESmbJQK
pM0BmOSivo2iw4Fo2lSCHhWV679VNQ9l5joq4grxAf/5RxozdlSBrlO37F2z
eTd/8w6fprSxsbEUhhIK+0Hg0raAZkMs8bN+mJ74NHCX3FetWlWwqENuwt+v
jv837lKq6Rt2zj5+cc6Ji/N31qSnp69evfpE/KvHp7yydOnSpKQk/q5Zs4an
Lsd0FIpfndD5WlzXm2ntQsf4j9FsD44bYeX/tVv30Tg0o/zwrCZ2rX5m56ru
oGXdwvJLNWkuGXJ4myJqug14mIvV6S9xuJtDU2hySyCFceHgDggtL88kDetG
D01Km0sEKs2gujcqk0hG6qYMjezWEv1E0p7zBR0F7dtXdHXnhTRJhDUv0F2C
R3eaVAyjqF3CQY8DxNRbFjFdNVNN2SCF0DKWa1Fu/+dD4Cke5zPks1WlnJj6
MKVgrcJB2hkeV8mNGs3NKaWrUwxxLFf0gOA4YByH2cyRvYDuS3J6gIeJrMcK
xkZS4+vji+Ag/oYhrZgduFg24NdFfUPEODpxk2dePR9OuEhhlIfoGtW9A1Vr
lO0QuOWIx13tZFWJ14ucA7scXAr2g91Gyrwo64VleSFNpPJBT1cOb6cQQINr
XkrFgjasp3hfqgA1lbT9aJ1V3i4rqyW4WvIHylA6++mihKcow6iU3HdT88gu
f2+vj8XtEkgGGEaNmtvArSJEIAq3FE5y8rGIKMDtgQ78bRSRvyt8Arg9UGD4
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
Vmc5S5l5GyI+Cx5rivm0+pzr3/nGrt3PcIDPlbAxrQekmtQRLHEmL0SFASAR
0ArdqSCABLAESgQSM/0tKtqwIL8cAClTOujo3Jr2QHd5rYHiYAAQi2QOkZGR
oC8+HB0Dye6i8anufkCnJC4RItH0Vlkx7NHyoV/nW1NRhKeYcwHYhRFvyLsu
hZ3eJ8lU2btsG/4l0CCkIPbT3lYbVaLpw1014Lz3XiVl4pMyuWRW1xWeuEAd
xd5UStVZ2p+/JEgcH5cgXWf3Ol5X/s+t8+d7nT/fW74dGgF8npiYqCHqyJEj
pWHURpVchNyauEpyyFNqekjeSNmITDsYmeqTF9helAjOnDRpksSGIHbyAnwC
RAG6nMvxKKk7yVIkeWN0pXQjLnAr8Jmz4761LO5fl0/8KYUM7GFBtgDyqeFw
YNzz18e34QCHX5nQqWHRyIZt753aOJyqyfNZXHuJY+nSpcenvFI3/Q0SARtP
nDjxcFwvntK/0vXi9jeL2vGXMtRk9Lqc3qU6+sXZs2ezOrg+uUtgu3o+qi1N
So3oZm6g0DKu+2hAFV2olGQ7VJA2p6aq61dP6n90Sj/eqZ1T/0famz8TDrRh
YjiQr0lxhZbhV50iegKNT/eQzkUFPD4u7R9JTR9J4lu6Fn1Deb4r6MBgRAXs
kJ+yRe1B754EGhqNOW1c9WtaToIMFGqSK3vR/EReR1VTCAJjFwWUU4t1Hq8+
lCJ/gtrgdn43BWg9BhMSVKmGemmk79Ah3atfExGU8wd061RN13XE1DWhu4eU
nDG2uN+v1g/+7cahrUv6P8mYZpqSujOyaX+qzMFRUTTuVhfvpU846NhXwnk9
Ruk0yg1Q2QbcQXYtY5sXFnYoKurIRTmW3fOilXQ/R3D1xJWivr9kZSFBDWVO
HPP3WdP/7jbcnjftF4y9RQlPrZvbklwKZz55Jrdd1uSfaZnFL89K8sy0yF99
MAXSdcn3WjTD7c3d2ejgCQTSXPG4OZ4JnKiamqhJkHMvgO330mX/B8J90P5H
DAMGJE2depSDEw/O5849z8ltMQNsbMfTwoKeBmoSXd/mX4kTBd2BJbXi9+bw
PkhZHZvbVoW/l5fGleldamdJgjIHCjmcj+v7zZzpf5U04TGvS0czvt+3OBQL
S9VeV58T8nRTnSR5O+iXX4Y+vlwwPMMgg+GxFe9fyn3hRnkHcHtRyTz31gO+
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
UJDwvawZP9Aij3x5cdwiNf5qU0A06SLHjx9/PuYLYdz+6f1Rz+0Z2500uTVh
wgSKRMF4MCoqaurUqRs3L782sRPQ/VDsS7K1z5gxAxAOTs7Pz09LS8vcWZ2z
5xBQHySckJBAHRMTEzVKrZ32+pQpU+Li4siRNPenvngp85mj099euXIlManX
tfFtr41vR4HXxw7a/UHskYR3Lk/oCto/MO75fZHP0mKUmVcjbueXc3sXv7xx
MZtLNlqYpYeubKkIbcVFNWGou7xGZESrUk6qIIcM1RweDlSfaKTPiVzxnPMV
yNqk+J2ORN/ju+D3x+Eg/wy9QushEKDOmOifUpW6TQOY5zo9hxdKTKLxMZbO
flphPqnRQ/hOwb06s5AcQNfGXPcz93sXwDMOkKxK7HwFTC7OF+7KaQnL6EcE
kmKA1WTG7QDVyxm11MwRnKuXzsCiaNppzrx4kOIRTQIZa0eDkMX2dzuB21V6
lz/W8TDYyHN0kiJMimPlG9oxyWlMdqTgNqKut6U7ll2BwDm/YBLJ3Jh3uOIi
xe1OlXACHUt3hNWo1w20nGkaAdHmLKPqMp+sz/pVXU6bi0Wdr5R2o9jMTdqF
yZD2pXBwkcXLUoYTuFXSO6ri9EBhRgATgHZl8kAOhYfNhZNqxQixhPcCJJVk
/l2K5f/f4vbmetH3wycZgOsDByaDUekqU6ceBboD12U+F6LfS5cIupN65l78
2O4U6NUEXpCa9+Tm0e6lPzTH8K5n74yjrvudxfAk8o1vjOv7Tb0bqDCmJo/r
DkA7XyVLDOA0n2H1oVQOgDdIWE0VxhYgMfC74Uxe0463rld0v7mn2/Xrr2fn
zmQQm5vaLWF1R0aYmas6AN2F90lrYhWby75CNK4fOpoGer90eTjovaioI2MI
awQgPWNackocOXLCqKJGt0p0yp91h6qVooBZEMgYCHgTxQmMxYSCfEdFdcUV
zGoaKeLNe+3n5SXPJiZ3Zix9//3ChITaDxZcBL0vWnBx49DWUhaYl/FVpJet
XbGz+JzzmWn5afuPg9t12PT/svfeUVad6bknbv01akm0Wuput0O773W4cz3t
ub4zXnOd+tq+yd2tFjkJCQUEAgQiCpAQAkSqSM5JQBEEVeQiVM6ZDEUoKhCL
TBGFAAFrfuf8XN86AxItudtjeS32OuusffbZ+0t77+97vvd73ueVbC95xm5T
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
QKXyf0gBOF35we9zC0iBnyB5wXbqwM5pg7rI9tG/FfyfO+BZR8+wqis/nAYx
3p8mcdpQ8TSlHjiN80l83/g/YTiQxKLXkgMBJacMVSN/xKDG+G5kbfCwSwzG
e6JlTFzxN28TxS4d/kNSFj8DILW/aRymHUxWVjZZK1jBOQzHFJhnT1433+Dq
pnEvVr3Xyksu57S7PzMihqNBWOPwJ9ndU/N6UlqyKChanJO3IDd/IU8OeemN
pbaME1JuAVeRIJCm7N1fNI1/8dqRN3Ye711Y26v8ZG9t7NtP9dp98u27da/f
mdr5yuK3G5K7n92XwmdDSd+cPcNBnjVx3cCZgKWEhITqsV0AovwEVmn5NLpN
aflyCgNsYx/8ybfaJm9HN1G9vqsgOgMzUaQrE1rfiW8FMgTeBDYyVyk7L+VA
M/vuVZ12ruxAu5HFi9FNYzt4D3gG+FTnXF49uWiS5RyDtJL48oJKPuIoDgK2
U8t285HnYGwprpJXrzHfsJtCayAuqFjxQ7LTpi1e1SB8JP7Va/FtaRxA+PWE
dlTKlLmwT58+VIEcx0Q3YCo3lGZxKqQYvvqNnE/uHKTNwe1kR7NryKVI1JHT
TFZlckXvI6z1qOwPNwhYzsRBzwLQODhcZM5GmZ1GUSQDaalwTi1A8hSPf7Xh
0+zK41A1KgJgJkGqZmiAu/d637v71o2ZPY5N7nF442sH13fjXy5XpkYDuHJA
NIvkfED7zSvvHLs88W5ph/tl7e6VtrtR2JkLr+V3NAgpdbQ9jRewfWdq1Y7V
Ng6F9Kmj2FZfD2jeLO44V/GtWy7p8NjznJAyH+YUXEtJ1Pwxbi8XypLSvV2z
MPu8R3bLdCA8LQBp9YUkXEmb0cKsGVnlFsXb9YjUgYLOQZoHl4AkfRF4lsyd
11PpUXbA7Utzy7QSUwAXhZ1l60suP0fdYBfjJHNqSzHkqKR0elFhsPxwymAw
EU+mByBHOYQy8F1ukDDvPMKNGhkk2rxUU9eJRkjvqCEfxlCt1MvuXeuK0rUu
BMhTdW2UgjnZ0YMgqOMabVzeERlxUKUyhx6NMM6hNOBQZnUmOc1bwEGXjGml
EL6c7/Lyl4uLO9+7F8HJF+a1Lh4UISaRZk5Om1u3unOc7y1bfv5kdKOQDIKD
lq8bkLJGyMGACBT5wjA3Mtjlw7SIUdjW1y8YGwPQAqVrb/fD/iMkZR4+8mVW
08cw/pu//WZvSqzXczhC+npVP0JE9NEFe4ADFmgzLZodTs3F5y2QwfTmDtb1
FjETz8D4Mk3DGYDPXajiRTOaqridf/lLfXJff/VvVabl3ZfMcPFyrv6bYGbg
NwDY6HUukjrl1xzNJjt67Ni88eMLmKHfvdv305sjAd5cCHj+dPeAe1UvR5Th
S3opDsm3vRBXBcpKoLJImRCr8y/dFJi/4Xg64wWXkGCE51O/Yc26JM3U9EV0
fQbrXL9xMh86ujWDX1o/9BXdITVB6MWphUSVQu3SUnc4QfMILcNp1E6P1yDA
TvsEgSzDyakew8/jU/s3zhhwMOntIwkdwKVCX4Nx6KYEmM/p/x07ba6iJLQz
Y1newO/mD3rOWYxDgN24xiKVGF1c4NZEtda/vWvMv1eggL8YwhhZ6Mk3DOvG
JxCHKJt2+z+ObpQ8yLnLY3T91ACUWsKVVhCZy6WRDkHja6KnqydTgDfzDi5U
8FzzF+0vxVrZBF1fHR/1NTNUNylzLe3DhYyGukQFbQp2Sob9Njic77L3foek
Ilr0kyICbpwpKnApnMsB2OJ2/o1csuiF2/N+53JCS3UOI4FHR/24qrzdmoJI
HB+OFBYvyS/8GMzMxzDoQUFFt1ZGamrEdEAdyB0j2ly79taNG72L6vpUNvaq
ONl7e/1bOxp6Ze0auv/AplNnMpsOrzi3f9nuqp4HD3Wv39oD4AfqOxj/pzfq
O16+/P6p05kXz2y9vPdjRbkFfqAgkAmgvbg0RXYxWEufU07QOqpDpeRtLuGn
zqQUCdwOeleOT5qBTppOAUgN1AeYr0n6s8OJPxEwA4wBeABR4PT67dV8QNRM
JVwI2L+/14EDfdx0FHV+4QyCpNhX1sYngWYX7XOvaSufHG136gca95NvEtRr
VfY1SXlTZOkD2u8ktALogsbBujcSI+KNFEANc1qecwDYU6dOnTVrFrXQQM3J
OpbyE5Q+efJkIDQ7tQmv1SW+npiYGEJ5KtJC1tRUa7/LGV6ubyw3gjpyPlOn
5ORkALDIFsRLjvzkTKValJengjQv94iG1eJNCTnNFQ3Kr3S/XqI8QkwNOHj6
8oSLEX77zaHNm3Fjla+nUjQUD2He+L6Fcf3ln08t3nm0acLhw/0+L20Pbr9f
2u5+ebs7Je0NyyXbR+F6bj0p8DxXbl9FmamFeB4Mzzf1AsDT4DK+VExiyuCi
DHdTeSJ2qte+DG73xqmWb2wm6mXrUULeU73I6RnAnxzhdVaN01UYQ5FqJJew
ocCL6o50Bby8FIOXVwfw8JerNqTJK0niGge0z7tGxrOn27iSp+7o46MOPGXT
0K3qEWlaDNInnRDojX26I2mNse6lEgjVUVd/RhkcpSnJiB26TSVknSCQOKC9
7ESv/Jq3SERIr5OpfknPPfec9PXvf//78mdIkDI4gujHRI4WW5qlzkcuuQa+
paGuNapLYtcYYm+pYowSxDo0MXjR+GRHqezZzM7Ysioe63rmWE+aRkql2FGo
3LOi4hXnMuSVl9cOIH379pu3br2ZmfniU089BVyfd6xp2v5j84818dHjj61F
c6zJANFbNAtxbO3x15u7/6X4xLiQsfobwulYaJSe/o9ME/x8obE9JP7Az69O
jf5CGB+L5abuO8rnK6b2ePuNbL9Zl4Rwf2Nvq/c6NiLqA9uXaRB9ock9LBgF
1wyfQPMNTBjhuiSxcFVIJFYoyZ+Cc722df2mMzEksUlJ/1CDxeiZuk/SfYG3
gdbnLkbQdd3RTRGcfHRj/dFNwfCiYzsXunwW7M/+VVjY8datPmfWDTqZOh6w
TX/C9619g+6VdwC6G4aV1Ix3SU+inKNOOq4G6hNqJCYjLtHPqOjIkYiA5LFN
FJUCGJnIJUX6NIp66XLexabcg4lvn54x8MS0AfSl4A1xqUlxsux340prA3E1
U2Y457CjbowqMWT0zDPPUFP6YYG96SjzHnA7yFmfI7tEGZ4uUzpTMHKQsT9c
09QOr06O5dFC5UKq7WB4U3aa4p+5N+XJK0nPMlSBV4Gmkj0k/TKyGH7UKYDT
Da3lLijIRzXUlMu4FIMu2qFNnwUp/ZSBUoGHaTot7frqMlpVlLQma4YhBjX+
JV/uiKI0jqSy2V1NNgyTjqXBnq8YmlMPDWhBZ96oSbSPhFjmKfemfPtywo+o
IMO68i86XepQqcer3lspW7stz3jNYCv8VTXyR5SfS0hNrzHh8ZEp/Wsmv0MZ
wEiMXxXDIljdSKBWBzgkRjpypP+uE33KT0ZAe3H92wer3rib2OZGQnvQ+Nl9
KaD3fdUbd2/veaih9+19gy805XL888QXrtW2v3zl/dPnsiOki70p9UlvJEU3
gL0sEfAkwE9eNxCOI2oVcg6gGkQHzJ47dy47nAMIVBfRYDrcJoDioOhGCWUI
g95BYmAwA+XsHffHfDRTU0e55ZywJKfU6JwUQDC2c+cbfAxyZFR6YJL+rZ07
d5a/5KPFT5UhyZH24RLd3IQxPD88hyJbCmDrgUuBgkL31157jauW5patKKwi
IzAtYDuw9zlh486DaeV7rse3+zSpw4FxL9XEdQM/T5o0adWqVQsXLqQdNC/T
gCNHjpwzZw4Hp0+fDlIlEWpNc2kYp8pkRBmcB4FyVf7k1mt/1gdZzhJHALdM
FshuzJgx/OQSIDr7FFIOFfDYGZaBXEmQeyTY5jYxtyLNIFPDTaQA8nMOrHvl
Wn7HfWkvFZ27GRFUPHqeFPhLhU9Oo/yAbe4yRcqf0K8seYizIedHatozWWOm
dq+03d3SDtSd+Q4fRWMov4x05g6S+bnRehDwwKhaQ9WA7qRDA3p/DX6qkV8f
Cj1SOQh0v17Qac/qiNKmD5irOaRJXgqhaP7l1eZx0jNUnGyT8pyoyqWTC/v6
Rao3yDfPHo+Kxnkxtmqc8lsCtvSNdsFRNGuQL9K3MGxO9KiRdHoVa0nc4Hf0
ITLrfErpDQx1JF3cDl8rtIYFxdvpgrRUKwjPvSBBCfMuVpKgHtw0UWZtVWHj
9rITb+Uc7K7Qgfq99GYSL7V1aHQy1ptO99IIPZ8q0yeTNf9SWYZsg1zoRiSF
Rhp8iPchrZ1z6LL0RXJ24AqyzrN0v762sfGb2An6M1SNzp+fpAk2YH9Oes7+
y9vv3IlM5Wg0F1Nyc9sCni9ceI30lbkAqy86fYPP9OrjoHc5M7FIJhjShfT8
u+XNv+IjtgkkGXH7l9GAJfo+OgbTw6bUR5z86C1wFQKMj4RIOH1jQMqaf3aa
j7evu/3GXYnDvCwcEZb7iD4iu4cfp4ejL7V46AkM4kjibbP4reagqyGiQRBN
8kIPxmYHaHdmAUrnDWKft8+UDavKFF6rsljUYJq89fRamdlzt2ybefT45ouX
c/kA2sHM6Vum0/PQCWhho9OTWjM5NT398MmZGzKZnm/f/pqgi94m/f3Xwe31
x9LlwNDPXM5tB3T/dPcA0gS66yhEGegq12+cTI4UoLZhAx/9Op0O6PYuaVyD
gxQaulAKT58j7UeYWlu/wZWC6oQ+AOlDyX1JXCXhDzdkvb9mq2JfAlQ7fMsg
K+ZH0U2StoLhir2Qi83I1rJlS24KGJ6SUABDBXGyANukXNwMm4Z3p0WuqJKL
ouXa/DUBKeru0qo2K+XO9Me0J78YNbmXv/+7tYkdT07rnf1Rb2VDXOGVZKI0
sUvDNporrRKTBNX8pcIwZWas0XVLr1vtY0Xvfr90+A8Zs0iKfCkPmVaUtgEb
g9v5SJgkd2UKOIGDzBqYO+QPek5Z4+AUJph3aqBBntNI3zqqRKThzmkC9/f8
or+4NPH3bse/CHQBJwA1C4oW5xd+7CjPxgCqXqJlFrdrxjeukASSyBzn3V/s
GNEmksLEd3gqTk17JydvQWHxEs7ZNbIdf4FepMQLh5QWB79trhhQ0vD2hpK+
uyp7HNreXWAJer+Z1LH6YPqBQ5tvJne8s/it6rNjqs9+dG3fovuJrY5N7nFq
em9Z1oDASDydKFXbyPWAN4oEylJtj1yM+gSCkpLNOQa+pLTU0SDyasIYcUbv
PIkx2l1D0Bw2LuFk4I2rIVIOqKZ2Tmn2Bn/UzVCdTBEUjUmySi/qo8qFKg3K
itGPlZMV7vhldPPhUbsbPKk5l02vSWCkapyUeXlB5cqi7ZRBj12+aZ+JEyey
v3579Za9RwDzTIuY6QBowcCASRIBk3MECEriHJwc3bTn675K0wUJTVkNYDmy
41rdKvUu5OkS8lFrnqgrE1srbF49tgsfLgffAlZJBKzLv9vfb03rcZwslKPR
aJ+QkKBwIo+Hhnf5RdwaftIU6k8eXN/tRmHnpq2vHEmdBXTPbDjH5bQh6RhA
lgeD6mu9l1vFvrZl25CSGMCXC6kyT9GNxPbXE9rxU2KVOqXUQuhONal71Xut
5MkYHZUHCVjOJTtXduBjvhSYEtJoPGnMWZgokWn12pc/L23PXIOsd6/qVLMp
4kZBgrQbBaYk6rUGg63qQ/QtvK3OCDjn76Obi4PytxWGpWxUjcb3wVOqVK0h
Ziuc6QRc2rmkFP00tUUbLU4GiNqkijUZJ5c2Nx6Tzz9PJt0I5xvzSGlHmSQ6
TAUATKZyJnWc4dvYFrLm+FaLlRdHSRnjfaTklS/KLFqwraDg9PmSczvKjr9l
jCS7U3swZRtDYFOxul6oRno1SiwF4H2kqIwjql0pLMzgIpxmeCUF3k3tTkql
KR2smEwI88HgxfAhqZIE7Zl5gLmK5lVFTfY+uSufS1OTF8NZ+qGTeY3Xio+W
A9GvXevZ1PRGaelLNHV+fvvbt9+8cOFVTgNInDvXbfnpMxHc3nhd4C1uD5Aj
HGSUpAqUR5gkaJEkENDLo0GXZOBfGRnnC1HW191iacZaSucda1p46tpj3P7/
2/YvwVwKd/Nhtwufrq8F3WMZMpY2lFn3DZ55ELXCSg9QbsL5TzT7TYf0H2Zt
GXeY46lrEmrq1vHNq2RpdQMnF15zegbVxZVM0XatQC7oHehef3QTiJ1/Dc0g
lqYrYGfcuPxRo7I215wqOv9ZfuM1cHtJSRfJ4Wr6GR5CPx16xabyDvfK290q
6yJ5XvQOXOf85hBOm85eyAJ7K2+u1JiEHNmDEgvXvfsyH20paphQF4H0ug2T
jtStP7jofU9wBdP1x1Ebs0euzzTEBhW0D5RjY69oHxh89ukeDYFhKIoA4H/w
gx/QXH5zpmDbRVI582J1hSKD3VsXWvnwrqLapJr3Oahymnq/0sKz32mZ1e8Z
zdTqsdBR34vGEKn84PcPJr19fFp/cLskUuqo8dx15+APq0I+jcltNcoJA7Hq
xPoCk7J6ayHgCH/9Y3QzVApXqa9eOOR7IG1OlseiR6RTBq5i3ATYg/YvTHyK
yYVyEH8V3WQHcZpkTpq6YPDzl6IhWTnONylrBWJA4cLIGvSR4bdn/uD2pJaX
x7eqHP6i6nOA7ezc+cJR2kTGuyMUBTCgEn+JEAQ/4JY3oxv7YJucsX3OT+11
dWIbpwDK0AVJQ+VWuBw4lJiYaBBPANX+jzpHQuokdiiuf3tnQ09x+/5j7+84
/uHxj4ffnNr18I7uB/b2vp/Qik9d4uuHJ74S5NbZ0W3QkDSkRkkYrBVOBFgq
tyj7XdOu3qMiXlKgUtLOwQ9aTam1hk3alhNoWFpPO7khUJWFEazqIKB7KZVl
X+dBtWI46MqO5kptiWQkdUGcL8+ZioAwlXMnU45TbKqmz6myNpScnwoPAhHj
4uJA4FR5cHRbXbor++gF0Pu4ceNGjRqlaZpq0jhgVNoHoL77w/Z7R0dmE14i
am2c0YfZkDwQ7eTcGtLfN6YT0y69esma0jqLUaFduXhaTFIWtaZVyZe6AMuv
TGxDmWlwDpIdyFnh9/LKlWf2LOVf0CyXk5pRnGhGg40ChqXNU2by5aHlOaTw
kojIlHajEfIn9Cuf9O6Vhr5XjvaVcqO1H8xMLs6ArDvl53kDRfPI6S1r9F5O
4y+SpR34a23lvjUVe42vRBUoj+lwsxTVcYJGAzINkbVOZcHnlHNvaper+R32
pb3EY0Pj8HjQLLL3eVY5n0YgkdrN3eu2RCTo75W140Pt6GC53eSiyV2PGwPy
UiMKryXZ5Rinybzgara4qGfvqi+JSza6uNJuOrnY5+hgZSAJ9u2lVThknxPk
6WlksFQqHflS+CS7uqSDOZuCM1TZno2+V9lY+iVlFTnuKGAH4pqChE81gaWB
GX1YdjoFmLs5F+jOadtqykvO7sg99KbmHVdgXSHVk8jJguRM+k9XKxgvgMr8
1NZhKzlbYchQN9iQf4wvjEFy712bFpOrh2MIVwcy3WaD9qNTA/te18dlS9Iy
eq3a58/elD193TbGTXD7lppG+e137vS4fbtHVdWrUjRdL3bMAtVfvPi6Wu6B
LQxQCWgk2Bi/1Szzriegq/8cCYyUX8lpUTH7ESb3J5rFPb463vut5i2WJPNE
TFCnx6T3f63tN25sD8k+YHJvEUN0fyDWwMPXPvBv7MNmsnLXJbGoFSNtJsxP
w8khES3n4Ql8gITP5bwmq9PiP1k9cc26pJq69atS477zne9IPzMkMViX19yw
yOzbIdBR0I9p8AS3M2pszZi1eesMeR16a2oDp28ZMyZnwYJzKSuup237LP3w
Sf6yG6FT4l8trnoAKYjd1NT9XlX7y7ntSBnEHiM1mcW1gHb3NUcbn0jeiLZo
uiY6k4J5/1gzozuwnHKGqHmBvKeL/eoBnfjIrGaAY0eHUwNYi9L5i4JJevkn
wnxDJIys7vwaRuwDDcBEshrG9RKl+5IjJIBnh39/2LzZAjLqKb8+SjLh5fZY
Zok0/ksWyg4ogR6Rf4wS1OVhgmwBupfinwG035vyZMWI36tN7Lh2SFf1eE3K
SY0mJsUqAdhgaaMs2T4uXtgI6gkIpAFsmpsY1ziZJ0HIp01VJqqOpQqhUy9x
smYuBjUQI2Ml2YHbM/s+7QNA8VyAcCqngxhJFQ/9AVMArXOBxG70T0aZlK3d
8mveqqp/o7KsbfnQF6reayUQdaZgCC2lZkiQ6VhqaVHJ4J+p606Z47JK4rNL
GdBT83quL35bTi+oSRQELCRBYZhRO5VYYX/nB233jOoAzgFYggw3lb3DB3hz
NS4SVefQhJe3N/Ta1dDzfmIroPuuqh67TvS5eeJtoPuOXWllFSs4hw/ITRLL
moJe64r6iOXEFRaDMtDaqnaoQw5+A4v27dtX6giXcEQ+tgwEqqwLHo3jt+wm
7oXB5Z3LKM6jlV4/X6nv1E7RbOcmWuw5jRmECMf5DieIclVl5wSOKABOYdS3
4RKSMpATR5S+cZmAklNrftJinmw8UGkktGpG3dmi8zcLTp8HzFNBysCjpYcp
AMwwUhEaf0KrO/GtwJ/SOags3+RIMST/S8ymhDtGtDk5b/CSnFIqRRaKjeiN
Sy2C5d/5ESdQGEroCgLpc7lWdArAEQMD5eYvrNy+Su1E0TW3w/ULKfoSafxL
TUIePEOCUl/uIK1dGNf/xPSBJ6cPvF33xv26V3l+XDDimSQXiVi0LXWhzNKc
KAPgfP78+RRSsj0FUOCRHSq+smg7cFHn0/j4eNpZN1vJ6hSDNL0d+iYfWPcK
CVrf/Wu67lwZuZUu0FB+GlOLveZr/lqW8Jdp0/5+9uzZy5Ytu18eIdVzHwXG
rrxQYB9CF/gokoqpPkv0HkrKGHpJO7x2FY4LoSkkpW0b3UhNeX+1trRO0GOo
yi5ylnMux9tFQwVtyIsyUDByV0HdCMs8QrSVU2+y4F/dujlTsjdvDcNH7uz/
Qe9qiEA1ftWN0d1V+qIce+lzvgtaRdTPmfPhT2a8H8HwC9Z3WrSxC2Wwt5cG
KbwnEYdXjnAJ+xpYAO302KQvw9N/6Y05yGziySef/P73v8/lSpm5wEFrGIBP
/fb/HN008tOkvr8SKY0ernAZbaKpjR3lcWgiF5qdT83fmg9uJyPGMipbfvF8
yYXruy9UXb3a06XSkpIuTU1vANf1EuUc6S6icTZK+AAfIEhncFxc/e3mjSOC
k69oXBULfRmie3SEygdM6I/x+Td8+xfC7bHcp4ezk47yaLn1hy/8VnOkYFD0
A77YYRXJc3xZHnjaVVIN9BgnvLHTAUolbgcoKj4jc4ZL2OEnaFNdcaOp8qar
E0sXweuflTOv/lg638rC0Ge6UOgCn6aD4cPTlyy5sWzZreXLbxQUdOA43Qh/
aZ5VAoXehjTpzBna6AfuHnjp9r5XXJoP0P3i5Vz6hG2Zs2/tG3Rj1wA7DboX
uX9Cd3ozsDHJ0uvmz404QtrvkRclAfeCn2WVA+kBtEJZBgX6NIpkiCXxsBK1
IVAF1V+/cTLzhTPns5jjkKCyitIIdVzlSE7/7wCkZR4q2CXepoS0GGWjMDIM
SVDKjaKUYdCRTkNFuFP0lqSgIIBqkFrjFS23IsoRWMEoPebJs1PbX5reVugO
3DWYkbYpu2I5/LQt33TU+YOeK3r3+9xWcDJTANKUr8IQpn8uLePyq8IO7BvK
0LAjIAp2jHXIDdLBSsdV15ENrsoY2jG6MWLu/ugPd4z6scMx/zLeyecX6mtf
Yt8oqMYcvxz/ozuTWu4a8++N7MMjxPiSe6hH2YleyzNeA5CXvfsLAzU6s6CE
CqFreRu/rTCttLhy+IucQAEALRMyiiYVVIHTwO1rC3urMgdq0scTwHB0fu+j
83pL5wZIFJUs5cPP7e+3Bs4BvQBgEdJ1ab/i+j58a2+/Ftf20I43we0121+/
m9QmKSnpxo3ed2/03L29JxBdjRFFORjoyV0NSZADUAokbGhRKfQCDM7hKjAY
UG38+PGgLDIdNmyYcu4UTB9bwAMVF+orUqeHIM3Ie0R9qZQRlySfk0UI/6ou
jTGGuFwQy/1y/ULrtMIdKrGIsXUylSltveLi4iSuADXBfiRo0wlEQWs8GPLk
qSYnCPZUhgQ3cibFWFFYBWjPrt9BguBJKfRCR4rq7AMsfS+hFR/mUC73GBeM
fUrrdEByPpdQSNIEtzuR4aDByEiZrMXq7HAJJVexh+Jxf6vHdrkyoTXPjJMX
znRtQqEVATa1kArCtfzLU8c3JzDpkOuuu4QLVbQGJZSvQrvljO3TOGMgn9sJ
keqA22kN/iVNkaS+xhzhp3NV8vVRmTt37sSJExX/YY5A6/E4kZEhMFxKkL3D
1PLAuJeoC+WRYE8KLhy4COKqjc+e7BquJWVh+eWcdpUpbWwu/lo84S9WT/mv
ZD1z5szrhZ2u5UfeaE42fpM0JMrPmRLeyIJrrZGAkDsi3uZx1SfUnpYnRJdP
xWEkaJGavq58C2jpZumU/qF5M2aEPZvMQ/sZ6fF6rQpZXeVUFkZZFVNQ7N3F
Ah/LOyWRil/MbO1ygOuSdFBGiA6x51yU9D0iR0UbXPzVL17cbqaujeqapCc+
yFzDu7IPxjlSBJ4cdSBynDU4KTvaarTSS32X2e4IIh+VIYaxwLZyiTmohGlr
0u5hqAUnKfxLmyuhz0ZdQjzWuZtz809f23rkNKUFflNx9jlSeryq/OSOOek5
gIQgMqPLKmWQuOuqPRvXxmISCQPSAMTzIh/Qi6L0gRvwVUCXsOcLVT7MqMWX
4PPAPXiMz/9NbP+i8j5faHIPKi5fBbo/0ex/amgkfavDgx17cmwsVLPWIB+b
WuwlD5DHyEJrPBvQPW1tor6ogS3PDqkBC12wo0OQ8mEUCfCwcBfc3nAsnRef
gzqi2lEYIJV+YMSIrfPmnUlJ+QzczjtuL601WxSqPymTAjoiV/DPn3/3woWh
UmQzsubo97oxfaoG6rw5/7Ns8YtKnShUZXw6ukFJfTIuONl4H9LFOQ0kD56n
Y0kd2Llx+oDGGQPS339d+UdNGV6otC9p0gFqq3fxkd6SwjA9UXbGrlJQrecO
DbW195Pb+nxbW7qA31mMgT6F9xo9jMrBJTQsxXZI4kxBOJfT5cpdJDVhuYDf
qYdEHWF/UGLPHfAss4YNw7qJ2/ncnvRtYbkhPNT7FfM7eNlEbKTM5SXDflv5
TYMSSj0NI53+Yg5hnOAg5So2Y1bp8B+SkbGxdOBiaJB6rYyz4VEUmtCZkX0w
fMWI35N0qgiMsQhVjykY/DxFYugHqpUPfcEgUIzInMYj90l29xWZr+thyjkq
yGmfp6g8S4zCnC/mBPOAPYyRSkb8q3gLuEiPSwAtV1laxs36OW+B24O0S17B
InYY7+S3gyiAauLYnRVv7qrsUV3d+07tqwer3qg61Xv7qV7g9sYZfWbNmvXZ
Z31vfz6wqCE+vby/Wh/gLhfrhb5aquXAgKBkmHMaBzXOv/feexJCRo8eTY2A
Z3qqgjf0gDOapFFc5aV7F6i7ipfyDaQKiKxoQxrZ6DlBZlBCBc0YODnkooC5
qEbSNSWn2AJgg6IafpQzmVwANbWX0tqA3qr3IrFZ9Yw27qQCLLoYsO/zYARY
fur5S9YU0sUOKkKRjH0j1KecPA+G5vQZ03PZgD5S+o0wxb/UjuqTMtfSXDQU
pwUTsXqVRrOiCpR85MiR3ln57YYt4zi3hgTVNuGgGI/W1nIranWqyMlByYc0
uXBpbhkTB2cfStPrdFw7dcCRKQMUltHyT9XUXNJnllzKJ73LR4V/sSg3lGRB
zgkJCQYCWFe1P7VsN+dzAq8kDWtbUU0geoQSM77rvjGd2DFUFkklJyePGzeO
YtOwBuSS50++tABtKG6/V9aueOEveME5rWd0o6GmTp06Y8YM5qTXCzpdzevg
hEtqlnqtNJTl5Liu06RvMAhytxfS+ZE7C/ikK9MPxQC+zuW5d5ysZyunqejl
qpzXatinLxLfGuBP2Ok8jp8UhtO0QmghV4RWJ3o5JMrauJC0N7VLmLAYyUtR
Wbrf2LjMlN8ZAf8qeEVrU3I1ZxSZdHroYKd13WFIOqIeWzJSGAUM8GHHy7WG
OjU1BgIBrQMNPb/SB4FlpI1IP1YH6EDLJM0wBaC7ll1jv+0EiurQwrxBzmjU
sddLl3rN+3/ZexMgq6o035du40bXrdYSoyytrqquejV0VU+v+8W9cd+L7tt9
b5c1WA7MIioyJ4PMM5kJ5EAmmWSCiSLKICqoqMxjzvNMkkwyk6ACCiIzJHbJ
ZLzfOT9ZcW4mIlVt1a26wY4TJ/bZZ+2111p777X+61v/7//lllUd/3XlR/8+
c9n6CE+m6cj8vHLXxLedbHyrZjO3krPUdT9/vv/bb/enqGJyjZBgCVBELObR
81Qbews/PmMz6Vh3k7g90OD/JBqeMuDz2Aiqt0zo/wdsvyNju1vsnK71cXUa
b7xww8MGVpcM00L+pQVQby0OL3QPIkvXJe3EPslATReSli7P4mOYV3G7biPs
Axr5diLPRrcTRMuNmpRf+AJo1k7AUG5Gc9BOq/IVvVBaWnlKSgldAZ2byurg
cPsT8ec3o5u6u1KpzTA3fza4nasYopQeSRuCMjLS48k5NbWUXpHejD7Q+QX9
Ht0UHQvlVH/+eEG7EwXtdkU1ZCKf2SOPPD+Kf3VTkpYfomPYwwuw1Vcxt1j9
dmqnuI3sGo0SfCvhzn1UoUXTOtnqVKUlWeOJwVtlyBtcyX0qqCOw4Y04LvgH
yav0pVhZyMSbYhQMthMZt4PY+ZzOulP/UDV49dh1WAlEID2z/CuQVeoTvg0O
d8SRruNVbJmA5wXS/xjdKsd8o3rcvUGNR8Fzl78tLenlUjLGGcQcdLFj6k+2
TfmRHGkGQbnZjB0ZGVUvvvjRyhfyQPWuufNUUBEKpoiH5GRd88CN5AmMf72g
l/6GZq4HrtrRuqaubGxc1dgoAQZUw3VBOydrn7q4vcemTb2liPAwqH5MMi5R
XhmJQCqtQu9FvURlHZ/f1+fqhX7nm/qwc/ytoQ3vfgbaD2T3XrRo0csvv3zo
0Lg9R+J2bO+pGolmZGC5vGhKC0IGfelyCEIG5sl5YOdqVvtP13favaqHQTzB
ewZU4i/wGBVvTIjY/6kvrar9XMBmsEiXRSQq0FCXcm6/PPN2raOcSy0k1XOE
nDkiPYMiyZpWsJ2ZTkZhtRjYaQI7sh20LRuFhxolJCRQSO6L9nxyA11vntjJ
BQ5XQDTnKgzo7XZipcsqp5CGm0IBKJj+sGzcQVkTOpByaWq9LekRtYMM5UN9
+eZcbqL8B3LjOVFXUCYPJSEHfXiDZCIPgAx8qUeB28MlwLo0Aploi+YSOoNz
UWlF2hmcA5KV9nD9nRXqITdg8JvVm14r36AvQ2na4MrM4WSrYV8OvDrtXIir
yPmh8Bwnz4qMYdtemAxaNgHN6IoMTc2skONA+hUN248sGAssp/yS2XjpSObK
iK6yezOe3DO1e1n6kKppIziLR1FajkZ4rnipJqIkmZSURPXVxjxf3hVYbvdI
hnyfLe1yvqJranSbNWuWuN01BRdWNOeqweibTpG4s7SVF+JbQ4ERipV45f4a
VU1HZv1b+Yu6VM7/VcOrHWX6GbRIT6jAwaPDcTyy3yYTV/dIQDfltCv8pbOn
y47G79MYbkA6SnW6uONnuL20s64ZFltzgSsmlNDg3Zyi1K0lpxYCdTmH6uUq
p6P/lAoPSuxqXVeAnQFLeK80gRQXyZOMHQwEukEBucXnCiNw0OVvvZ88i33G
HUYfjrAjblf6jAvRgeuE5Uqc3T5nUXhXNDhCTflWIZNSVUaVjvzk7/8wguSr
Hr10qf/Zs3F0mLW1j9PUEZJM1OTOQeouUHdTrS7WNU9rodT0WHAS4t2IYW4s
xBeLz1XbFu0Es6QQ6HdqpL21/T633ylubxNjcm8NqsNz29ogL04Wrrc4PZa4
3oIn02L56bZryjMBvbdgs8c+zzzqvFMWyWhB0mbYV81J11eBKN+A9mUrsgHb
hpATPdL50O8deW4EGBgoTg+gSZy/tDA7/aez0le9pKTjmTP9amoeI/G63Fmq
gdGRcgrXIoHy3Xok0alqY+GiJLYrVnGFjk4un56tU6dWpqdXKAjGtagCxZAY
IwtddnfZnF8UPffTnVmDPsPtz488OieiAKknDucayUgaiV5CZKJmo6rpriNw
aQ+6UqCwjLMPIbfWb65LYSik2J6fjhRK4uv05DzIGYox72w0s3JRlTRBqlHr
in4EUpIkwFC1kud/pvwX51LNi+UPn159n4NFxei7+Sie4DqFvldSSgTq9u3W
hUsDwqvG3sPxkuFty0ZGfBxWrclZu/5ZI1VJhjEEiXwMDUdGhioedieXcwWE
nh+wwbdqP4ZbZfhjROaGAnicNYjDwTkg7S0pPwCizJixYcGC408/3QAEkuRM
gjPZbZmMnMm6c3Py90kMPCAlCTTjg9uXlH4mwQ2K2HBkcMORp5R51H+B4XL3
9MHvzx3e2NjLsOwUYFn5gJ3vDAK3b9sWZ4glAYNechI5tAOTp451/Hzq2nZu
b+9Lzf02b+5zflqn488M3HSN3L4vs8ehmf0/mDXozTff3P1+Xz7AWkCRoYIA
6nyDjgB1CqeDvgA/kt6pEVCHgm1piDu7uvOe1T3lXUjmocx6rUYmJvERroir
/PLwtR6zrw4eR8jNb3G7DG01YQTe4BMZHRo8+YscwtxqWnHt1IIqkrkYoZq9
7ALFHgXetI9hVQXbrp4YzYq7w0/xLXUUnGuidBLEKeBYWlX6EFdnniJv3zQc
1JxrsHvuUd3YB+vHPcR3w4R2uk7IPbYkPmDcd7GrRHEfMJVkFLGkHYzWBI51
yUPTMfdFwhJpKDPNSGldjuHxpr5Gz+QvZwo6OHMKp9t6ks/5SyEXZ2HUnX8L
kiLuqBRSbK8/hdMoY9rKD3FSo5IhrUFKfYR5gzjukociMLQSGF4yjO6x4mQu
t6i07vWKBo4A2t9OjgjLbHxmwq7XnmYeEVYc9Krg5+XaLpdrulCREdFtfHQj
c/5tfL0ziB38DLYnGWUm8/ToZmApKkg1KbmTGr2V5bQ7H3RBhLrQt8uxVHDG
tTN9w52X8bRwhPRUgZ6hesGDG1/rpAnFIHQGaLD7ovdQR1F3J43wxllw6i1n
Wx9My0APSTdlRFRp8+JV+jpS1r78sP629Kj8RfsoCG8HNSy6UTAwLc+AM1mL
RFaST9Rm1/VJVUwxvBMEJR0Ub3TsUN6WlNrrOCiDhb+UnmD85S8Jn9qjSC85
06FNcQbjT7nyKw2e0+WjcpA0rkq7WmroJQk5yj25AOHkxTjUbKSMxe2k4eoX
L/YDt0fhes8rVwd8dHwsSP7KlX58Nm7s2dDQ4+TJ3nl5D4q9Nb9r+uaItsfb
rifhSLHdCTLXpA9Emhb8llj7eawafJtrISndv4Xb/8/Yfg/38U+vba0nCIHo
7vQwKMME63qLxGGWGsgzsVi9BYxvAfXDmxIOxuJ204QFKboFOgfS85qwI+yn
VJqvQey8fXQCTQdW7X9ndYjOJianMwS08yktX6Cui+gRdKoHqIZcQ0iUlnbi
pT5d37XulXZSEzW5q6CiT40EeANSa6clh9VrZwIaNaFoYZasYsBNTRMkE/26
bGoZAPwrVs1gx05PJBzs7fufj+OnaipkRZ+paCT5OC4YgINzjTdneCMRu/6n
tIyGccNVfz266feq577sF+Exl7DDDGQYrfT3RDeuzhEZLHoGSfn+h+hmDFO7
fXngZGXkCzK/uP5fr+T+S+mIu5S7YdD5pPzhU6t+KqeX4wBp1dKMA6U3AXUU
w8tjd7rBjTAlP7kuJwLgOWKkKklE5MkORZUSQ0Pp2cTDwJGTmXfw4Sd1dLRl
U0xGOXd2NL2ChdR7UYoBZNI4+Xt18d9itOUUrns6605jv/J9JrrvIsLbaX+l
TKJUXr8NBqqJj9zA7XyWlvV/o6iPMWUiCKSx18Xzfc/s6elFOU6CxYW9GxM6
7EiNqFIziuki6kqBTJ6dGX+tjyFlZmwCpW9PeXRb0iO6QJ5v6nN5f6/mrM4X
9vfb+37/fRt7g9svZ3e4kt3xk6e7HTw49sKFQVvfH1y4eSy4PSsrKzMzUzdY
ILp6F+SjAyDYzzBG/Lu2bphhWBuOjqn48MKy+m2Kh0+YMAG0pi8hR2gHsg2h
6q2XnmhU2cV694G4srWphZFoSK/EiuIhUosNoqrRW89NyqYvqqxpLiRC1stP
b1bayhA8/Cu8VwBE+7yafmwyZzpHNzk8qtYo1kdWTEOAoAYqMpATF7KJQJ78
awQxVVtF7yrDk4lkeA37in9Kpyc3WskAPd5HdiRjKMWpHj5Y1OUPbpCWcxcC
yESej5ErlVFyIcPm4q5puOas8sqXD370evXRzasad75aVr+kdkt8fLyi8cBg
w4xSHc3RtLBwXXM0pVJcSGSowKCEHNlHlMTFEQMxcK5Wbsq2KbHjucyOzBap
nWowFOaNqkYKALTeM7U70J2qMSVZvuHt1Zt2kSc5GIyYTMiW+Yvy/rpqUmzd
e2kTcPuZks6b33hk25JuoHcnC/zLNC2C9mu76DXMt5Z2179UIpWkxJPAHeGG
kpvel/K0pdtxy7zdLvdwdefL3n35J4p6KS4qqhSFaoqX/qGICtWXNhZ8VzUs
aFWgFzVmnJ0MPTwdnZR18pTKrkensvCcHsJA8K+dg48r+0qnUloDV5FAMo8C
j2pUckT5XBc3jUDNEbG9hHmOMAobrc96MRrKkuVb2xo7DBOGpTYwn85N7CiT
G4hAbJzupZU40z6vdBi9epBoZuDj9ZHNrgYmNVKm0kXe8iPnBe0VR5vJnGtF
RvDTfXgFTpzodTWK2/l55XK/Dw48xr3j308/jQPbt722qY0MkucjbYYjjJKy
YmTqskMFJasfO/akUVDZMazSjcUeY0k1AeTH+sD+5iDu1vaHtf2uje3hKtc1
uQc5Rx5RZpe+jzcWmQmPX2vqS+x+C7+M264pUjrV/dOYYKmhSE5+LQ/vEZiT
UyR4+HKpDUshecVcelu+cjrITd8ZOpwD765Ruf3YieKSshf5AK1lXDvNZ0fl
xvzCF/T6LCvrzOdkYYdTxR11XNJ7EdDIVehYQsghenL62BASjnxA4JqySaxb
6IoxT6yZ0DMpqWjy5EJdQY1wp4+S5JY1654B86ugrlYkf0UWCCIeYZEQSK4J
eq60FjpPnUm1bCuho16NIirGKiWBtH9aRmDPPg3FN42pD6xLmS5r2osyoDgd
UHledjr/3n333aL3wI0xsJFKOEElUsO+ZEslvBz4FGyvGf9N6qKLq00RQbzT
vgYApqnJUPtMuIqjjJZwTU8KZrrwoRUr+BdXj7r/ZOpDwCRujYvmNAJgSf0E
5dkN+U0xtLd70xnyHC+MSyjLQvcx2bAh9LmRU4y3Qr2iGjJ/TvkB6ldnfpXP
mey21Ei2A8mcC2geZ4iXRKEVnX2ABMPrktK4lVWfCZgAkxrf67/zUJxOrBGI
dTi3vuENigFu3zKps3J/nKVYis62m5O/v23Kj4BPjNQg9rNn+0VCiKY9Dm4H
6gMmxe0XDvS7eqHf1f09Pz4Qx/6/T+96MeexD2YNOnBgZPP+CAF+/YYRoDsJ
ElrCwUgiWJ4KSeBGJpJvDDp6q6Rfw5GBG48O3Lmzd+0HM5mAAI0k+SgZHcTG
lW13aZ7WEw9zjwSWmm3BzNRR7ERJJL2TUnBFy3MXNINzblHKwPKpQ5Wd0Sav
sySJyZCb6DPArZSwZGxKKsW+RkgKSUrukRQFbg250c4Ug78ojx61YmPt/9zZ
S1ntL2d1sP1dapHczhGFGSkGmQD+ve8doxuJAzlK7g1lpkgUmNYOBmrp6OJk
isEsgINjx451pYN7unVyF24KsyqOuL5ASmoaVjSMAiYHm4PsOF+gfcihouqV
j04WHz+TV3NsE9h4ad3WFQ3befAML8vTsnNKZKpCYXiJeB0omDQeMmEKRhWU
iJHXzXF1fpTK4cRACSOZ7cYpXJoi8WKeTmvHJVT4JwfyNL4ABSMZ1XS2aHRa
gDoAvvi9E4srN1I2rfTGhxozZgxAfetbjzLRML2UHuVSRbDOkUkPaL9a1/nt
pY9RbGrqSk0ITOYTTmHkz7Cv9qwWY/JxFZUdWUBqs5DYR4JkrqQYmMCVDqk1
3AiaSE67mlRqXhmUyidfe3JgmLvgKDeGvpdHVDEBem96RbsgEqjNpfOUC4UU
0nVGfnKv7Z30qaFI1FS2GA1ImdVjdDFU44ah+ow0bcAmBVS1FzFS6GAVQvWp
TmbUVIZpLWlAX4YwhQi0VjHQMF4zghiKzrhO1EjtR35STbp60kguVV/CRrAd
VKendrSA3mqq3NOG0ngozJx1JYtK614r37CgoJJmcUTzsRfA0wgA+IsX4+gb
Kyu7cgTUffVqRCiS7/z8h0A7H33UQxxu3BkpuLm5D/ARbDiMOnRec3GN4yx3
gjrNdUG49vk2rUyXQbjmt4Rxt7Y/mO33g9uvy3LXLfT26BYUTb9wMhgs5Ldd
UyINGF7ze0jWwq7eJga9+2AHI7/JeHfC6dJjtLG7WmfcT14igSjfS5dnrVz9
NLhXzROANIg9KL3kFTz/3uFcYyHRS8iloeuL4PZ3VvOv5ouqqkfLy7uUPP+z
yvm/SkkpSUsrF3YGH3m6LP0ujZSnaUK5AP4SQBrQmT4n4PbU1FJp5xoZ6Jqk
0xhaSLLNicL2x/PbcRYd3e7swYefHc65lLDulXY1Lz1kN6g6lkYPeSzBoKHi
jdE95HVTcvG2oo6KwyhESUqZOVq26YFdtvASQc7Lb7rTCUvXj31zjfLs8mro
eBXFlaWvY2yA9KoZ635oUCSdaoFectcNPEpnfnhzzunt2WBdjpNtyfC2lWO+
Ybgo144NrmRJSK/CA92ynl8uAUtGqhr5y5NTInKLirzJkKEd1H4kK1EfpaJ9
FDfjXlAMEutl4Hq0whogEPCAo7b+ZVIuayf8BUAdxL4h8Tv1Cd+ui/8W6dnX
8L4l5QcAA82eZOUKrxZRiqFeiswN4JZerrpeytbmGyTMhxwqqxceej/v8Af5
dRsWk1iKr76rejvqi+Gyu1wC/t24sefWrREuNBhve8qjfu/ZM2T37sF8g94j
sDOK4WfPnj1nzpwpU6bk5OSA1vZmPJmZmZmUlMTI7mq7sSOVUlGIW70dpSz1
y+OvpWX9N77ff8vBvtvfGVq+f+r7J6Zs2xZxgaTMIX6rcEi1H4lJoK+QGxtX
ASeQQE149nm5NFlLAlfFTjISVWY/d2LfmuxRiq6Qj6xjh3Whlw6DUllsKG4K
DUt6cuMxcHbAWVq8jXbkE0IjkDNFNaytFBdR6LmMjuenRdjpgiUeKtX5uC7P
nmR+vmvHPGCwGFcNuEfOF9SlVDVFr2GOu2RgSCMnCACtPVO7g3JpKE6heOBY
pmAc5BRqAeYMmplSa/SHZYeSUFQdq7muuVFHUGtt/evvHVr/7vGqsoNbkpOT
gcppaWmTJk3idgPdz2V2pHbKsxtVk/LI6uEqJNMV1wksReK1IjEnKoJE+bmi
ln+nS2wauhXboWAqbXLcOQIInLorF6NjL5cwlBJlfr2iofjgiSW1Wzgoqyco
qzSt67NndYReJVuGlpwwYQKwn79Iw4NE2Yy6lZ6e/m5+/71rekmO0qfVeda4
ceOUwVRxUb6TOkXsq+iiF4zUGuPHOcWzTag4/QPdiNZyew9jnxk3VpEivVfY
oVX18nC1gkfU9URDKdlVKu1LX0Q+SiyKqF27VJRS3RV+KvlIOWVOap2W90Xm
GjocqnxadLg24pvvFBcyZpMaa/S91pp/yVwLmJFQ6PlnjP7+sxN+bFwkRmES
M3AYY4WRxWFIG5EkTEYWOljXtTUBKcLASCT3RjCvbDvjCwMQyaRHqjDAmyX1
XaF4qkAbyjLSj8BITxRVx1VXk33sQemNjb1c4FayoKDgYcD8pUtxZ85EuDTg
dtKQ/vjxnhcv9isr6xwGBcpcWtqJI66AK/KpF1XA7cCSTz7pyyegHVUfW8Mt
WTct0FQs0f3W9se7/T4XTYLJncfJCaaklMCfCT6qX1ik1sb2WNpMm+sZ21u7
sga2WODeBMElPUTCRPiO6EanwZvOay7g5PiSZdNWrckRl9ItAMiPnSgSukeC
pb67hgELfM5bDNZV8IRNU7NupMb9oRvUcRW8DXR3BVP7Bue6nCedGyRAZ6LG
izYQNRtloQDdRfLqt4uoFW/RgVRWjEZyMrxY3YnPyrHd3xjahe9V457UyFy/
sD0fOiWKTafk4qCg2hDP2tXZ4UIURsuMEl6GJZIXJEtcY7UkQ5cqaGeXEmjJ
tm3b0sWpBkYjaN6/5557wO18qBFdq1Z3jquvq1lehgwHHWIUSzR6oPYZ9QrU
7xIAS6EsLV9QUvYiwy5DNr2x4U01yFN9W9ihivFFG5EqQAqgLcp98rX8nqoW
UBKGCSUIQgwjnZg4uHp8j/WJfej2jWOoZA0ZqktDi7k6oJwyPbwMZ924HB0i
U4Ox95zKvEPcTjklz4hgdWHT3uvqNm3iwC0clc8MIjI2ZQDwXJHLCZDIgQyr
R90P6svNn11QNEepGbHrmantdzX0BtUrTg54MOy4zBMVLNXojgSOnPJYBOat
7nm+8fHz5/vv2zfsnXdGNTUNj5jfp3Xan9UL3L5t+yo+zz77LJgwJSVlXHQD
CynqoiAM2TY09Ni8uQ+zGAZ9qfii2UB4jhDdd/fft7b38g1vf3AybdOm3sr3
AYpUzjcZJyoaw2aoKSY+zHSAZKQkQ2ciVlkjeUTWsrFXdXU3+Usat7kj+ZPj
1iVE4CW3TwFtnQ1pQBnIcp/U9DaBQpRSj/RHVnySZ0+Rc2ntju8KvJOPqy3e
R2dMfFM1Lud0nofZqYE3VDq01HcjzvOwSaVwQUf+OemVxCelQI5LqE9CSaTT
jxo1ituhWCWQmIvS4FsndwHxBsCp2Du10ylAmR1XRgw9rEGeI/I6JDgVvXu8
+L0TVLx86tDa6aMzMjJAswZdbZrWk7PImceMN0uB/REjRnAQjM1xaUVCUwpW
kTGsatoIb6veHBqcOSLfCUxOq1owI4RSTtpky6TOu9OfUOGf6QO30kUul3tG
RTfrLrueZN4dVxnIRH1Ixd7B+dSCSSgPLekVnORy2vb5Nysry/kF7UZjRiIg
LH1s54ru/JSxw19Oro01oB+6MYt1cOa5MoToP0c3V0wUgZH4IT9QDgl3WT42
3YJijC70yJ3jElSWJqKhuCKnaDpwWOF04y/TeircBoGaAPIVdbGTVH5Bifjl
ox9nPqvVQtUavVDtAynknHUl8/PK+WmAYOenzq99Pg0aZf507M4XlAjgcrPi
fzJz3I+UfNTeriawFEolDqRWqnVA2e6NbjpMMVSpKqMvFaMVOSsgrGVMorva
m7qd0uxq/Dol4RmQD0YCw9G64qxiFUMDqICyabHRffj/iW48wNSacdm4ikYt
NIItmVCAvLwHc3Mf0I1UcqkSx8HpT6M642Z+/kOFhe3Ybw25hTEtSMXk0EIi
OxYLfWHQ1VvbH/j2+zG2uxlTAOTGc6iTRWt7uJPEmylVoGw5qYzNoU0rY3vs
I92CVxNk3tWED8dliLkQwCYrRpKMVmLV40tKOvJC0WPw/vLGrc97TqpMNBBS
cXHpfF5VqYZCWTZeWLoLXlLNHRUVjwASlD3UKs6OE385M7GOnHTL9C0hwBDd
GplIGqSP4q2Xg82+IUqValSnFxi5K/spwLl8b8pTveDB8rm/fH9p2vtL0+n/
FeOiB1MJhwtVvfgACfy4FsmJnE6RaA3rxXF7S6celDzEsFB5xkjWBmbVayAs
ZNjBUi8aUCKKnByZ865g2sdyispghplW/l1vVlNSR/5SUUfapCMRQ4MLoBrJ
lVww+IgkZO3nepKSXsNyfuELTLhE+7TzmnXP8PPgxunHj6ze+kHStiNJIH+S
KdHPRStH/ALca/RtenijZeVN6gdulz7qynL5sJ9VDP+5xjTDoCh6LIVSsesQ
GtWJBri9ety9agRxRBULaRJcq+6Vdg2vdtywqAPf5E9FdEdVViJCgM9uy9gd
pDmosnZIQSajp9KFjQkdgO6uINSPe8gZBGU7NeXhnRt6MVUhmQQwKl5YPFfd
bEZeA2tGAtZE43UmJCQ0b3ri6s5ul5p67svs0dzU99y+3vy1K+1xkExmZubW
t1eC26dNmyahffLkycAhVUdEjHJFwO3btw8AI4GvwEhchQRgOScjgvz09HRy
kLcguUipQxV1lItRozLYAwEMGxK/0zj5ezJblOyQXaBeIvlzW5kFKKSjt6YY
Y9/Tw/goBU9u3DIVJyREGbJWzOkpbGRuMuViNLFqxzY+kXfKWxZoLWJU8SoF
c9FEthIpyV+5GM3Lgj09AozzxRMuHFVL0KdLOVBqLRZV2VKNHbLlujKUDEXq
BIoMfZgbJrTblvQId0EHT5pLGozumdSL6ZWFl0ZlvB7KzIUyi2qerthIld+o
alzRsF2F9uqskYmJiWQFgK+bATYfw/NJ4ZdXDFxdM0QeCAedsEgmD5LjPBuc
RQ7kqfA+FfSFKk0bXJg8QO8DSsh7ZPQBnopna7ak51caPwsYr+4oj+XG+PbK
7EgYM/KsdZShrS6QNAluB0eM+kT5s7OzlYLnRAsjd31sdKOdeT5zcnK2bFtR
VbNIYhKgfduSiHnfdR+nxq6bqIrjQ+IDoDuDoav56Roc9ZJ6px2ADkTQrpCj
UbY1iRvWygUFHh6aUbfcoAHF1ekYNSip6+W80ggd4n+HG63KSUlFfAxCqr3I
bhbcvmZCTw0Reu5I8nGdiy79+TVFeU1Hn1tVoLVKUgqJdZdw1cllQc91JqK5
e27S/10+/yclc36i45jK7ZRZYqrL32HTxu6Q5MhCyzCyiLTJ2b88Xclllxs0
lNWM/hWPuou2egooXOxLzebSgEEMaXkKL5uU0bBkd9/SPf146XjCKX9V1aO1
tRGiHZkzcjEQa4EvLu7A5+677+YsisrQD3Q3KAkHXeKnwG2uefyJPWLN5i0E
9GJRTSzLNwCY1in99/cJ/G5tX/r2e7h9wbqucVtYft1poweDj+oX5hyeQBMH
EaQWDrAtsgrsmjbXMLzgX8qcaQKFBmzpu6PbiE4ldBH6s3PQN5F9XdSN0QbG
++hk8buH1tkZakzWUKDnpmLmTtt5eXnNZRW6LuZxug6FIumsjBMqIZxuhA7N
GBMcsQNPTS2lUwXEyhsR61pOuSXkcOjZ4Tqf7p4+mIvycT30wHtrwO1r43tR
QpmBjA6y6MHtlfN/xSfCqCloV/L8z+heVJUnf3d0MuWiWsW5nIQNdYBd5qPY
gRjDM2Az8lNzukx1aYrU3Sirqs0ooUkm2uHtb8mcxMByPVWd6dAOZqK8jOuq
umiJmd0JHHj6ZyGcC806DGpJZhBRyZPhkvRULTd/9rsH1wHajx9d/d6h9e8d
Xl9W8RLDKAgW6L5h/MOn0yOuhfUJ39446bvai2hGcZ3kanHj0pqqZbXVLrNK
pJcHRRrDhTjdCCwpV0slz5NhRFgyOkEAVHCtzcnf3/hap1PFHU+XdNr8RgST
0PIk1rwGfLr49J9fyvlzRn+KwbfIRCOznHmJr6oxiwEA7dtTIgRjZZkdRrUV
B9zOh/LoIsfgxYC7KbHj2YyICGF9wxunTk0439TnXGZHQPv5fX04yEWV5tu7
d+iFC4MOHRoHbn/22WfX1g3LbRgZogJNmjQJdCG6Zmd7+o93T/tbMBIQzrBK
CiGqsDdx4sSkpCRQFkeWlvV/q6SfBuegeKnAixqV+nQrla813rssdnUSpAIk
mwGeDJ6lId0oXWUNG8s3Nqo3LreByQWjs7Y4ZzrGiLRtXU9hn2aUrS1/gx3B
pDGkdBRV0lOakGVTJ0QVKU36yk5qpDW8qS7D0n60b/PIaUiXsWDnoDnaILBi
M70V1BXU95ny7JzyGB+wqMUgTXHqoKKUgWqbcDA5OZmpk74GAlGJYdSCg+rk
u0JByWlwmiUtr2Jaca3TCnAsqIabyw1NS0vj+anJHgXYpllUzuFugjB5EnRE
DRr4QcRSZ1ueHK6uSZzcggh5QVJ/JgXOX2SM0Bqkp47z3/lowfvnmEFw3JC1
3B0e2i2TOvOAGSOAFlDbx3UlezDxs37KTpE4Ysgkw79SKU7X0UMI6vIWBePg
jBkzPviw8MTp0srqhRkZGQrLy/2m/MyDnF9opOWWKejEEfLR05mDRlumr/Pp
5TFWlt8nnKaWdK0pRhII/YbLPUFdyhU0ztKTlOpTKRkgPqKK1dhJ2j3agKrj
0sMzxCQnF9NZCXTtiklGp00Cn1jNJkYzoU92vkwzzllXMnt1obZ9ujU5jWoI
sG+AaWd8xjWjYK4r5T73txHcPjcy9hlEyd5egQIl3YS7riNrIHLdllOCM6zD
CmMN4yDjjku38iRVh6DFzk7tcGZqZPJFLTQE6SrrcEZFpHqqqMBPbhC1mL+y
a9HOPg1HBzYc+Sy+M+WvqXmMMZ1acHWQj4FduHpBwcN8gBlgCUmeTiu4lqCI
ghmeiXoFC2QsgLkxNBLqSyEQw1w3WSwEurX90W2/O5KMSFjVI7VJfVTCZPC6
ZJhwULHTm4fuAW9rP4+dn7b2wgiMmljMr2k9xGAKipH8NFiqqlOuZ/FO8boZ
j0kpKjlyaiQyVtIP8A2iA+/x8mpJ1jisGymIl9efbsc4zqo7yifRRk0O9AmA
9ilTyrS3i43Jgf6Kjk77tj6VdH2knD//2Ny5RydNKqB3pY9VjoYLaeon2aFn
PsPth2eNqK/vXlnZlSuuGvekdA4GaOk6AVUasZqNneoFD16s7gR6jxDCn/9Z
8ez7qA4o3birumqq92ioVvbt2B0I+JeSuHCp4V0BHI/IeKEdqJSCYHzTIK6E
ciH5nCFMXmhh+3blFrmWoF1rvwudZivyd9FWXy3nPtXj7gW6qwPJT0d/BiBN
oNIkHFkiQfEKngelGwLJmHpcXaNQ3dgHge4RYZCJf7lj6k/0BtWsXVq+gOnb
sRPF7xxcS85TC6pS15cZdJUS6mWgNppqk5TfGqldYBhBf0qx5kI1o3/FQHkq
844TGbeTFbeGj/ZezUSqrDNk18V/q2rsPUFPEjgBCtJuyTguHHKUJH+aomb8
N10yEBVocJOurxKd7rGST5T+1lZ/aVoktGXdhsUnjuae2PPWkQVjz+3rffly
JOyIMYkUV9+9ezAHge5TpkyZOXPm+g0j1tVHYtAIy5XOA5JRSBAOoP3s9Lu2
pv5QxoKoCcQFaiJD/m2a8Q96vS0u7F25f9Cy8gHagXmntLiqygga4dvonLTe
5omddD6VUhsiUinxYVgZVRw1iupnGhFtPnS86tBxmQYcpzBnz/Y7fbqvPGQJ
5IpsUADDxytVrdw6J0paoI6uF+huIB9eVUCt/d5BchBTkSf7XBFMa4O7BZdG
aTnUAoQmn9kycys5zt3n0rIvFJaRl05ru0BASSS6n8uIUM2d3FFfSlI1bQRg
2OCtUtaBmkYvVcFb0i8lVLlRuj75S/fyW0kZysCTwGNAJqNGjeLqQ6MbjcDd
19xKy8THx5M+ProZrpSfqr6XTx36/qyRB54dKU1FLM1Zznn1CKb6WuadIDj3
oVXF7dPLNnBdQbWPNO2Tmpqqh6yC8xSei5LAu+AaKBWh4upwyg1zCubChKUl
H5tFV1axPW319o7Vx0+Vvn+kICcnh2JzIdlrja93li1vgC3nPjr8hvDH8rFp
HN02fZCcD7pQwl920WI/6ZQKiGmfd94hL0UJUC0AsvLUQlEIi/wl59NcnKJW
Ek1EGhJrITF+qEIECnxpbeAIiSmqf0kF0exgYOhYGwWPFgWjwLLK7e3tojVY
GVPMu/Ny+n9dmPHfeMAsg+RPeS8q3jBGqCdj/G6HPDYGDo6H+N0Ug0twBITP
NwO367y6k7jEUD3q/rKh93FpO14lIl0KMeydcUAC/ZLbRL0WrO5WvKtv3aEB
5fsGbNsWcUSlkWXLc/songQYcqNIysi0iUIvFSkptgwEyvzJJ30//TSOb47E
aty1AEKfZ3Jvc03LWr6x23WTxUKgW9oyf3Tblz7hEq6rZRQic7XWbP88TchQ
pNuiqunBAv+FW3DNMEJB7IPd+irhiL4bYSohSUaLPe9R8KLVBYZJOv0M6bW6
k0B/VV5MgOW+qBqkdnVFCOnQCormgNuNZC165P3VWVLeHW+uYJLXXOQpkBOn
GQaag7zyvNR0PsJXNu3D9tUS/0g5dWol0N3VTKC764kqZelJGomIGhWN2Ttj
KP35uoTey0c/vnJsd/D8oWeH507s6wIlfbi+nwJpCqBaQtWLD4APSXOiIOLN
SoZMKKiOcmHgQz5BqtFwRYETroyG4ooKfLk4G1johvlQdJHcVAPTV9SoT7LW
OS4R0X61bM4vKubdbzce1Bo16agDrJa7IjCifccRbUoyECSfayxS3cXhUsUP
5Y6pggROIRzJONGpTRDTkNwILNHNUCDN3O29Q+s/OlnMd+Pk79VO+AtRohMH
tSVpIo6oCMRG5mJmGVBsTl5IrN2bTdI7SDsEgaLM/OuUREOW6JHBCFxN/sY/
ldgsq0TBbScytE+ERZ91p95VqtCT5nRaOz46yWqwDXxUVcS1W56Z2n7r5C61
9a8f3bbw1zMf53N5f6/LzXH79g3TTi6peP/+Ec3NAzn47rujQe9NTcOTk5O1
QEqGoXgkU9+bgzsz/hp8np6eTibqRSsyuT39x81Pf31v9t9LFQZp1B+O2LuW
lMaFsESgIPIBE4pDVNdsmNCO0irNbcRJGVN67Umfpmo6C3PrvY+6PFQ0bqrc
tOWNqkbFRti2bOl76VLcqVO9tYeroCJYMl68mIrnihYDoSkyD0KmpupDygCh
XiQIehoyH3jmNVlLbVKUUuIKRfXpFZY7TwQNctyJBlnpBmhrUAYfdYn0Kltq
WCaBcyWKxIzmdHo77iP3S/ETCdI0sreGnDW5y1q3cSThsKP9n4fWB0yUqG1f
Er6zFSrCTQEGc8eVEuKg60EcNGoqLcNT4b8UozIz0juB2w/PGnHgmZES17WQ
S1uSMiTPn0urP8lf7KuCPqt268yqTVTZxlR1Rw9WVSU5hQvpKqvXACfSbgpY
SWVxoUe6uBNJ12hUjE9JScnIyOBB1c9a+XpamBnolm0rQO9TopsylTRL/cL2
O1dEGFNO9wKPi285S1JcNIMb20v2C6+2yjBkpY+DUSF0vdRKI3Q3DC5lCPZ2
Hs4wieOn8f4MO8J9lFTPw+MSm7NXXUUCqU+gbhhTidweoagubrJPr0sOxrOW
SaI3lotHpBfz8y9XIauK0XcXD7tT1K3MCzv6RlH9h6KbzuC8tq6D6DbFAERN
tdu4pEs/yUHjmFNalWqUcWCgZDSUPyO3U5sbWSmDo3MujWybyMnk1tPCZEJT
aMdQHJ4uggZUKNJW5eHftKl3Q0MPZ9OUk/TkA1AHMFAAKujaPTDDQZnjlJOS
K6N35UqcYo+5uQ8EuAKwaYGCPs/kHouX2FFG8gYoK+zfgu5/XNuXhdtdlHGB
RlbVDXyWA06+rrU/mNmNyXuTD9Vt12KetrkWYixcq3UxYmsd+DDOFMJxhWVE
9UJ0kDNdCpmzowCOc2fefdD4h8eLjh0v4q/V43usGPPE+rznQOy8vGvje+VN
6sf7q1soL6nBN+lamQjoj8kLrnyuRGj+VaqLN33eikf4cHDSpAI+GmnpClwq
pccQnMuZoftKT68gmbYOjtiPKaJOIdnn+PrEPpSKxHyvmdCT0h6ZFQHze2YM
VWpSPRN6QgW4lGQkT1VWThV1vFrXmW9KeLKwAx/6YU45tfLfTq36qW47QanS
3o+O7kRh+9PFHV1w9PtidadP6yPql5Rk4fruC1Z3E43b7ety5aAgo96phHC0
Zvw3K8d8gxaTw0Pi4GZFek+UjxTiXNMaqjuKk10sloJSPe7eU1FxdecdSsHI
EVXojPKoJ8PMhWkCt0kmpPRj0vCvKi61Yx4A5fLvv17b1Exm0Nma+sOz2W23
pPxAZrvkT4dXI3g62WHT9qXvmF4MbAoRKyLEPi1QF/8tBo76+u5VVY/qvywA
UNlGV1wGI9W8wTBOSSTNynAQtJPG2jGnIE89KJ0kcu7FzHan0iLei04KjIFo
CBLthGZoiCKwFqhG8RND3gC/J0yYQJr85/++cM4/7NkzpHl/33dn9GVna+4/
16/47+AWIIpAS0ax9tiB0W3s2LGcrviG2AM4tHHSdy/l3P7xzG8kJibq2sm/
FU0D6w5HcDu4C2AJ8jSIj56GQErKIFCRyiKrRFKNxA8jYcnHMEASz4kq694g
YB7QsXLTZnA7V1G+5syZfnw4iyOyQaiIojS0kjCAjUtQRwkwXNdoREaScj7C
w2NES1qYG+0N5dLkqfI8JRQJk5gEMtgNB2PcK5d4aArJM2Soy61BBFSYUV5e
lgUIU7s3xeBc6kJheFSY5VlaWt7FCxJPmjSJZjR+q+qX8fHx2oT1eDX+EbdD
apC0Bz0LxLckpqbiZJoOBMvN1bitJgwlJ3M1PDWAex+5LnD9/edG6rNAsfWr
VReIs6ij8rm0ic+SjSAPhIqTbU32qHefG12RMSyrpG5xXQOzABU1RekuZJAb
mTN3IGdyEOhKL/exISu59zYdT7v6PDSFpHS+p02bdmH9o83rujrBNODXvHnz
cnJyDMY0ceJETrc1dASmnGJC1UF1kSZbF4mUsXLxgpdaKrgtbNgv3RO0GCsX
IDGSNuEBliemF7m0PaqpRj3Pg6KRbEpXqVWuiygPLRVXud2QIvTPFNJ1HHsn
b73uNpLQOK65SdFjPZ50zBE/25iSf4KmetHQr4HbNZtrKmeo1YfLaCmqtdjJ
8KgorCSrUKnGYC/ipxYnF3MVyTESq+IM5OaiOWMiYzcpeWJlKtoZGklWBWO9
fWlhhxWZ+ZzlMmsgHVEYWtVIedxT5vIXL8ZJUQOr/9mf/RnVod82XDjIQUk6
8INy03JySJOX92BhYbv8/IcKCh6OhSitIVBrk/t1oQ74xHiR16UcxP68Bd3/
WLb/OEkmFq4Lmz8PjbfYbmxyD09gIMPfjLyMLtimD8GCbzzZjHXfkMwTjssQ
c6XJGKl0AkZQ5XV2h4rzF90OP5evnL567UxedmDw8tGPr8udVVA0h1d73yuT
3l+aXlg813CiSrJoJ1eJhdPpJ+Uz/5drGyeqKw6afWFpJ06ZPLkwMTFPkh49
gPw61bSk88khefXVX/PhX03TQvdgwVB6xWvtmTFkZ9Yg9oHuu6cP3p09mLFM
L36RJJlQizXrnnFS4LwjIh1Z0A7IvW1Jt7OlXQTwlJZTALR8jMqhU5K9vQGS
wO2kZNRQN/hkUQcDZ1+qiazvb9jWq35bT0VUDFdkSCal2l2ZDSHtSAbCBGN7
LX1s2a95KRL+29FKK7QLtS4Z6HcghVvbvg6DDDqnrymig1opOd/Ky1SN/CUI
/P+NbjIK6l5pB3SnkNWj7ge3c0RqKNmKr85MbV+4sWp5fQ1jq3QaQ6tQ8Q2J
3zm8Oee9Q+t5GLRKGU/QYHwGQzF+rphNHg77PCSUX+ke+ZCqU7oQAGjnw1U0
6ipOqEaZwcTJxPHIxXFV0BUeUdZGw7K+ZtKEwAMcocobxj8MdGfHcV/lDS7B
cWYoEktOp0dqrQlRA+P2lEd3pHYTkEuS4awIbp/7j3sznryQ1WVfZsTmDIzn
A4YBv4HA2RHCgYWUl9m5c9CWLRGSs1Gfhg0bRoZFKQOPZf3o6syvXpl5hwZh
CT9qgNACwkKuy7eMd4nH5GAQUhkyqs1odeR0YJviinoBqB7PLeDSzkq0yRcm
DwC6UzUjPXWPbnJjDMxqbqr/acA3rqgunPyljzDVDGxqacwuwUi856bwpuvN
Sms7C3CipNCit9KptMQJTjFAleqOWgidz7qyI1znp04N+ioqayO5iFaiVKrx
uHDgjEmeAGh2+PDh3aKb5HyaVxkZgbFhT0lPCXXIDcx5I67SAroe949uU6dO
5Y5LOJGE4+PkjVBekkaWM3Mkyu7j1hs3lstp4VeqURY3daTNDVHkAoR+Ewa3
OvBsJId1mzcvfOfYmw2N+ZPjXH1QdtJQZZxr7F2uS0tK+DGsgAQttYZcyFBV
3siqtEzf6OY86/zaR8DtBlpNT0+fPn16UlLS4sWLlU4iQ+quvpNqnFzLSaKO
MHouGEjX1nD6r4iWE2elHXW+UG5UTw0BKm89O06pXHkxB6VN5QiRfwiCzGRt
y6TORtCjE9BDQaaHliI2/UCdWRiVmyGGx8nVIvLkW5cNexL9uRh9XN8xDpQs
UO0nXIX6qtIgfmaQIo3yYkYJ5BKqQDhyubDr0oArXE4ZlMH0IJdz9LTk/Gvv
qqAZnaeaZnpXacjSfVuLkzKPFENXL7XLjGaiFzB5Uv7ZqwsXFFRSZe6FDMbI
6FD3BFP4q1cVbOxfW/s4o4xSDMw+uAQX5YocaRO1mSt5wb+ADequjYtOXl5u
bu4D69bd3+Z69vY2rUzun2cm1SzZWun9uiSEW+KQfxTbb21sl14iXPehukm4
HptDC9311mX7jYjugcRuCGAnmJ9XpFjcLminFiDwWEZZrEuIRnU22TLKoQTB
+e9+97tLlk1bsWoG/Q+9zdKR3XZlPwV613pWXDr/nYNri0rmqRm4dv2zIGFp
zHZHxcUdSks76SCjxUAzgjEjOEVGDf9K/JByQw70GGJsrkt3pKf8woXNCxde
sHOjm5o0qSAhIVfELuHEjZ4N3L4r6ymdmBgyVo/vAYA3QzorcuAvph55Bc9r
uwgi6naJlPBkYYczpZ3tMBUn1wNIuS0RKRctnn0fH6rGcZEGvejp4o6nijsC
gzcsitjltr71KPuuQko++bvopt2GE53UaPynhLo1SUAN7Bpt7wbjU09MrQDb
U8uJ8Njlbwej6nH3ns66k28uylhGD6xGOokrhv8c1OpAaWQonfsUWpFeohXa
SLJ03Y0JHZbWVKXlVUjjsRFkKTBiypnhkVA/jQSud6uGYUgmA92G9WidIqXK
6HXrjTAoiTMaF46d4DDiM6DwIefS8gV8NKqLul0Kd3Hf0Ld6vAoSpAMx8gpO
5AbIJPFE+T+RedOYCM2elBvj21+c1u7s1A4gENEa6GXXrqe2bu0HFAegjhw5
UqTH98SJEy9kd2nO6sxfAKrXs/+p+M1/WVU9GDDDT1Bc0BXR/Lt79+Bt2+Jk
44CdyIRvkDMTTANOKTDINITjunPqlSAeDmLXckhEQRq3aQ1OCb6rnusiPt/A
cpW9HfQ5vb6+Ox9t45K9waJaSqXKMF7bOMIG8a0YRghK7ZR51MxrySmkMuDC
Jy7E88YjJJ/WJQAtrjo8Bj0T3f30QdYIrOwhUxv2hU+K7ZPStRtbRnBLSagL
iTmF6ut3KdHaOqq7YpAgcLI6hzwM3OWZMxtnzNjgX5yreLsehVQHxMtV/EsN
Fj1MnRfomasM4OTJk5kLOB0D97pGwIlclzLLiJDiwtXfeXbU+8+NbMoZvi9n
WEVGhLjuQxI8TAOPXZl3F27E0qqVFqcOEre/2bCJzJkr0W68L5xFGnKT/u20
i3wMqGSleD7NTRILraRFOkz6aEaRvKtLlIpLXKqJhEx94YUXzhb0OlvQ84PS
IfvXR9gvNNGUKVO473tW99zyZlePcAuMfOEyH81iQCXyMUKxpGv+FYUaGNr5
GiCT3sA1SuWkdIThdMrPw0Cx6UMMakAdjU5lMnOoGf0rnjr1Dw03YHQAHYjo
840HzThivwq2ZF+/mzA7oMC0m+ueLmva35KnXtKyUEhgl6iWmjwWTUOMpyGI
hs5ZjGiudIu6NZ4rdOySLtkqLE8TSc53cYcKajhyiYF96eXgZxAyw7cEFcY1
SaEM7sbys4OlJV2zMDaKnDRJpHb1dLAvFVbJE1OIjOMAdfoBEDufq1f7X7zY
Txc2qsC1KKQeYeKKr0U3fQBFRPxFXWgKoQWg/dixJ/mwc12MFEzuNzBshuhL
sUrvnweobp6WfGv737j9prhdNKuf6W3XIuf+1isswU3184oRXCduEroHF2ld
qt25Qc5trk1A3GGSGyoSHLGt4FtLM1euflqnEl5DGeO8XEuXZy1bkQ2u3rd/
ZdM7q+hq6AfeGt51Z9ZTK8d21+me/oSuJtjG1+XOWr12pvoqEleUo5EyYXeh
KrsBl9XXpeMyToTgLUB6nRDpnXSQp6NLTMybP//D+fOPJScX07PNnXt0zpwP
6DSkfGsnITcuQcEE7eTJiavGPbn36aFS3CWc+6+eR/pO6n/KufI3DG+kE5zB
LJSf1YGXa6lOWT73l6Uv/Fy5A1E0taYYhuqT0yJJgCbS5qB4juORPHklYrQ4
kX7iyoLJq4vsFcnKcBvywznFlWIjWSu5EyhDFN70NmDF6LsvzvgquJ3+X/Tr
bMvRx7VgboTKe0rTG6PEYlM7g62QkgFRdY6gDaJfoQYxbVAOJYZBNCKMwTEN
lKMfmRelFqq+uFjgwoGTJhn7Np1O0MYiV2GSAWtRad3CklqGy/LKl6tqFgW9
96Atr+8eUIF9y2a9lBCUHa1HoW5Zzo80OP+P6Cb5gXxA7KfT21ELxv1NiRHH
Q+3kO3YMbGoavn37APCPceFBeuD2/Vm99mY8KYMdnLO0rH9+42iOkwDEDoYB
yTCJ25r6w+3pP9bmqS1URMedupRzO59PZ/5nPjSjbqqqYcvWEExyCq0X8d6N
BpbVbiml2aUE/hXGGMvSCZS+q5zOdY1HqS0R0A4+B6iD9zQCg7soLRc9ezaO
MZrxWpu5CnvSuQ0ub/RPRXvUTqTlR0Q3qxziCnEik6CrWe2ZDRkEU9URHWzV
/DF4llfR5KinJ9/kprg9Bym5UVkLi+cy+6YdVDv3jnOPSKzBX36L0Zek31Mp
+SdGAg0aOD5FOTkb587dqV1a9jXf1IUTyZ87q8WbE50x6Qar+D/lVzqGLSUl
JT4+3ihUPCE0LJewDakaufHtTI36UrusrKymmSMOzxpZMuUpKSukNJaWV3Fl
xCmMDjV6YatTqsn9nVmjOSJdSpdhclDdXRcD57CGQzKaEjd9dHSjMLSqExwa
k1r/12sbzUViMqSocdGNs3iqqdeFym4uLP665gk+YHVAO3VPTk6+UNXtXNkj
+hcogCNuFHUr7iqXhgJTI31haEOdIiWxyF3UYZOOgm5QiovdjstkmlYU2KH8
tIAB15z9OetRpXx62YYpueWK8/PMSGUxDIfCj8Y2pS+lC9UQrcuP2JjL6dOk
2COdCTtkbrglfUtdPDKmBt01Q08IYqKemPI1DFKa6w1oKONRFQLt/9bXq0ho
pGC0EgelkOk8roeFPkEuUak5I2FVlWCQvO5R2ru8C8YicbpBaatefODkyn9z
QVZrEjvcd1cNGF80FtHOdAWXL4vb4yg5Q7PXovxf+cpXqK9yMWAJ47aLRrQc
6rzGgCUaEbrz/Xm0gS8EYCKckCAovX+efvsN8Nit7Q9hu3nzeAu4HmRY/oNT
s2By/7you7FSjbJWbvxExSrD+GR+IW5Xub1NTLwnS+XpOqhSd4OiqtxeVNT+
o4965OU9mJ//0JGjI8DtvJVLlk1jx8Btd911l0rs9HKS3/ILX2D0pM8R9Go8
V1KG/cLCduXlXehP1if2WT2+h3ZaOwFjN/AWk1KDv+eyoxqtsiT0LbLZ6SIS
EnIXLmx+9dVfA925YhS3H5HfbhwK6RZ0U9I/dIO1K+PqeZP6yXJ0mqDTKP/K
ewy6i9ULHqx7JRLIT+a5WgEkcx3BYKl8U1o9PdVvFzmrG2BXbMQoQ51aWTkh
Wu/F21SQKYBLBhxRiR3cnp5fSUrydJnDuYnSmmSonz643ZWCr3/967SASmLG
vTIkX9XYe05m3E5vTJ7WzqFBuo5kG1tAF1oD2AmYtXHpl0SpZK2L2B0OFCVQ
YF9heZvCkCXGUgHkaLRxGA0OrUoRur6sVV+2JFXWcdiwrQ5P6sOc25F9fkcW
iFdlD41gGrs0o7leUDP+m8xWDJUoW8YnwQUFFYSMFSiok72vcU93S+OYC+PP
ZXQEt3Nw88ROoE0jCoHbAe3vvDNKp1QlQfhrwIABSUlJgBYqG8B2ZmYmRxIT
E4cOHcrB7cse37H8ic3J39+S8gNlscGHABsDJ53JulPE7mdT0v8lsjV6EVeh
7nqhKu0IQjiVeceZ7LadoxsV5B5plFN1hBNdd1C0kxfWgDXqb7gAociMUTWp
BZBMD1MNyMZAZKQ+e7afbAENvIYGYIfy0wJ6FigAKBbVO5VvJ31y7E+ntbs0
LTIJopxGRHKtgWtpk6epw3oBFWFHdRoht3hezoxsiuLS+WUVL4nZvIqEIo3e
chucCHBTlPcnHwqmaI+tqveB9eVRGTNmDEDdaE0K1HBcPrbK5Kpxql1Pz0CR
ZJhwd7innMVP7vi4ceMM9jR8+HD5VApp8s0Vg6rkpsVdmM2taNh+dHaE61Kc
Osh3TT8OmtfbLS3Hh1ZWkq6m5E8TVWeNjFjsZ45wSkICreWU1pbkLCri+6uZ
RQEcfRY2bVnWuHkplaIwZ0u78Ii6nCGfkOfHCaZTHmk8lASIfqX2EXH7p/Vd
/AbJf7ghYd3WvXvX9Nq5IiIoxKQgCArx6rk0tvG1SMV1mtYZU16KjjD2ABqF
KINKjHRHTu0lvRu9yzU1OzcKTCH1s3D5RvFS9R6pe2ZRDdDdRQo9O1wCdpFX
87vqCvoNWQYfzkDZkpGlhVzTTYgGRW7/M7pJyZM0bnimoKFEkZQRkBupxUZO
qYklXmqZsWD0zyqwiZ8VgfRavomu2RmtQNKglhkHGoZ1jVTKaao/zBUlsbu6
wZAHbq8c8w1XGYzTZNwKee9OpuTaXbgwKGp1jysp6ahZjCFYuRuaTowhbgdp
GHqGn+wbvFUJArm+AdJcFyBp0rwx0GoRj6nNNdGP1sdb4K5b2x/gdjPma1Uc
g3Polx4hNzbb6z5+YeHGmemN13FiaWCyucTesWl8R0zJd5jwqi2vcyt/yZkx
JQn4yeumTuwnn/S9ciWuoOBh8HZu7gP6e3KuBHi6C3Z8SQV19GZFJfOA7sIh
XnDeSrGoRmlmASdP9qarOfxsRNRFyOSMXraMHAlFqygDKQOoppdITi5OSyun
e3GxD+g+cWL+vHkfTplSRh9r9FUS0wsZnzTEqtDlUxK4eFXZBC0YGnXtkTTm
qJeud1LFvPvrF7YPfvdqebGpr04+rmZSYJpCnCz2FtIraCli5y99M51BaCrX
luK6KpXliB0a51oq/6WHFFRzlpKYWjY4RU8oUbrqNEElXg4hrUFuXJdCgmPp
kG15NQ+5LscVQ3Aa5Zho3Fgt7ZJ2HAUMp5iWVzElt5zi8ReNo7ykLglGJHTC
4mxFHM61pA85wuoX4Kq08J5MnDS5qO0cQZAp8tTzrmHiX57bkcUHxKuSYazo
hDHWDTlKyg2J32H84ojuiurh6DIpApG3r/1TXpCi3+Ygq1Nhloi9Pa2dbnTA
obP7Ol2+0Eulx+nTp8fHx0sPFoGf29v78v5e+zJ7SGmWID127NiZM2fOnj17
x46B58713717MCjOAZFTgIiAcwqsqjMHr878qqD9Us7tb6f9FZCGxPxFrcEb
Sk9IDqHRqAL4n7mMtm7nOM6S+Cl00RHPiYywjbcADKmuoHQRUkolUkxGE705
nD7d9+rVOD4AeJGtMEZsrKiIDgXscJYGW+3w5AOKFmLpNsgjwekqukuSZ9P3
1pBGlJA8nQ4IWdWo18ZOtjr9cVZYVVFEKGj1c2clbtWPe+jt5K4+G1RWMowc
KrkxFJv2pyTGx5FixOmq63PvvFPKYPLtCgKlknisvAw1otZSU4DcNdmRmKRc
aNiwYbJc2EaOjFjRy9KHGDXARqPk5nCyqMPp4k47Fk0Xt5PMR1RHGCrF4yQ9
xpvovVahkUzkI1VkDAO3vzNrlAsoPaMbbeUqgwtt+rxzF3TZdsHFuUBVzaIt
21akpqa+vfQxcbuOsZruDTKlg4O+D5J8uHRzxaNRxN7lGnqPfK7UP/pJfc99
a3uD23ev6kE5aROnEt4jvUediShLS5GMpKBXjiZxDSYuufItVdvl3RC4VgcW
aR6CW5cOyYSmYIJGNeVlKTvpCy5LxwdDwQTphfqkC6qNu8QRbrdqNnLwAj9c
s4/zBSMg2Oe7eqiZhX7Ynl+zOa1KGxqJWIK98Tv03nL5ktxI7LmuqBqSSZZm
YOAYi4qiqlRM+XWUlvEVIt+p50brlZZ2AmZbPMZHjU4628qTlMOjcxnX4giV
pXEMge3yjVFlpcrwKS/voj1NBbnbb79dbozidQru6UwnzGC45Ag/Scwlghpk
a7TWQsX6Btt1oy9pk2xBem+R+Y2zvbX9b9luwE4JcF3s+lvQ129yizW536A8
XvcLfVRDAFbnoRLd2QkOs4FOL8UryMjEzlstSXBrFdjzihnAiJcOmM2Hn3L8
jPvA+6Xvp0Ef9IjXMKuR08AZAnK9XSSN0zkwBaipeYz93dMH78oebJxQXnN6
A70XNSADMjVZG0tUvjqg/dVXf71wYbNgTzsAvZn9s0FzZIYoaRtiPVBgugUX
KH8S3fbMGHI4KgWpeownKjDoZo2oSO3LD29Y1EF5E6l9Sr6UlXWm35Pn86Po
piOSnadBoFRrd8mA8hgTyjjazggkC1E1o/6xlc/9ZeX8XwXwb0nISo8hlXMM
+WeMJ6n1TkbojUmvYjw3UaOK9CRVbpSUKR/1daC7nEn6Xk6Rpc+JpSPuqh53
LxWUvGQsJBfHHSmM+i1TZc6+oy/sPcLg5ZKudipZ+moI+0g42VGmWBuUWt/G
pmc4EPnrT/rTa6HqHY806Ysr9N4lPVA84lebdSf4oealh+peaWc4FXnyWkQV
t5SrH/QPOZ0EwA8xqug0sMRFa2wMT2CA2jEPbJ7YSUdCxlb2z2Z05AOAB5zr
aHmuqTO4/erluCsf929qGr5rV0T+UZoHYEDc3tzUd//+EQBCMHDF0ebKDy+s
atw5depU/r3U3A/cbmQfqdFkS734aC4GwwvaOWJkSTCtajMGP9X2rjy7MxRO
qU/4tu6HRpNnR5FAQJ3cb+8s7emciOrrShkC/ej4AJRaVFr3ekUDqMxQqlx3
8+Y+IPbGxl7eF+MrqdzCvoIkCktyevCalCtCPuqWCDWdrWgf1oTuHESFOjJU
usfVeU33YjyefMOw6rKqIKSEGbIVfJIPp5DAcDz868xLmRqBLvdagSB9LYHT
Kv/zrysszt2MCgooZV5GGtIrfEe2pExISBDJ02L8ZVgop1QFSf2rpkUi3lJH
5mtGJlV9sShloLjd5y3omZMPj/Tpkk4n1z8B6gb2u5AhxPW2ytLnsXSthDKX
pg1mjvBUdCMflR7Z56JO1rT8c5eZ1vGc+Bry3inEJOOFWghl5QLpVMtGBclN
3hFFJTc9OyitazE8k+ScmJgIJm+ufPR8eVe+Y3G7n8u1XZrW9dmzuifvwpQp
U3SICKL01I7HRqO3ikCqDirnIquHR0sDu7N7KRycRbNobOe4UcaCcCLfnMXT
KAcvrIz4qChmSwIXDV30kcEoO0XJYukoUv6kJ2kl8AXUiUlTCU2qF49nUTY7
QFmX+q7SMRpHzyjhKvRSDGeI8nB00tcao4QXPfnXo5sjqXYhYTzJeGw0NzHK
tG3blmT0+UbcMwC364bOa3TqaWjoUVcXWUZRjoZ+Xi0m6UC6XOk8xb8cp+l4
JbX5q1qv69bFixGK+5UrA3hC9L0CUBlJkJIAzgUYGtg1DGp1Ny6McAtAYuAV
DrZpxY6IxUs30HJ3CxT31tCrBek9NsEtafc/wK01CA8RdYNk0H+Qvn6TWwDt
N5gXhEdUM7g4PBTPzYdTQ7okrlCRWH5XyDCW8HPb/6oAyVkKuWt+Z5PQzkE1
qSSn6aDqghrHyYGfclE4wrf6gbzyDKyhU1W3/AfXNtLL/VAlhi6CI9pyOSJf
RUs4f2mf11tHX9Q5c4689tonfFJSSqReeKJGae0kmoWNVSp6t4QuKZLzkhGP
rhr35J4ZQ48+N/LIcyMpjD2qLkjK0dMvGfuJUwDSQHe6YrkfDCj19d1Pnepz
8mTvysquAn6uCFSmz1EHQGlHvXKccci3D079ri/YMtRCwUyKyk7pCz/nI6Vf
S7U67crIcAoHE5bn8XG+YJxr5YUdoeKX5Y59c41yW66DkK1iO7a8xFEuoZ+a
Da7uQcnwtlVj73HdQf6k8u+iaKcbigwwymQUVqeuLwvRBoEWcpkE7baDsTyU
cHfTuq4uutQaY4W45EGB1TEwxLZDg8+DUTgZdjdO+u6Z7LagU7KqX9iejxR9
xUW1xVEvhSm0zwvs5T4pTiK8ZCwDzlWPisAVoRFjk9KIG8Y/3JjQ4c3ivq8X
9NKvbWN8+y2TOgtTGcXA7WAVMPzl5rgrF/oD2qW4Rwifzf2A5QDyGTNm7Nw5
aN++YQCVxZUbKz5srvjwwrL6bSDVA9m9d6c/AYSbPHmysuTaooFVjZO/B5gB
LO2e9rfi9q2pP9T2S56AMTCVzOQgpFwX/61TmXfwrR+f9mfaSiK0Zl7yVPXF
GPEa3l2kkE+ixL1pqO/hmnHHtyS/Vr5BD1OD7JCSnEkjIBQPSCjiL83m3Hfj
8MrhUQCHhgouA0G4W9u7M5EgKQ/IpKgcBM3KdTGCqmF6bHx+atXXCG/4S1cf
uHe65Sp96YTC2inKTXoKQ8uriyinnZ9qy0hnso7OLCgJbS5JPikpafz48eSs
3wTfoGj+VYOFS3OK3p0y5Llfso6540r081O/VHWEdE8wHCrpxW/H1z4GbqdI
cpVJbBhQY9pKUKF4FP7x6FaYPICPJCvuoHRuCknBekQ3mepMOvZk/R0zO/KR
JPYv0U2QbNQhQbIrKSSjYJRWzaIQakozuwJKXEiFk7NlEb/UfWsjLCnei8s1
EfWtC5XdAOrXyDNdDuT2S0lJAe3PnDmT6YAyOy5dufSpu7cFc54i45pG840W
S9NBMY6EwNDSuWk3OyLqQi30FSIrJ3pkonaNek22qtYDuwLn8jrveFG7JiOA
G92bS3PHaXyuIh9G/24SCGU1DhjuwfdLM4XryPZpAmP6OlWt9DCSTs+/9M+u
b7oyqx+9XiohnmCsUciZBRslcanU4BeujEs1VLSB4xqpQgQHXw0nyz7SQcRS
tR9djRgTxfwUww5WFzDV5i9ejIjJHDo0rrBwU2FhIxcCUYjA1W8PIU0BFSJ2
TeJ6sLa5xkLnIKdwImfF4uoWFPQvNLm3oLi7CdpjE8g3uC48u0Hmt7bf5xZL
8Bauh+WSGwQz/V1sscIyPpx/em1rgclNoORp6+lhLE/e/dgIrS0IM4FR445G
9disfGtCDClmwRxhR/RrVCbN7CtWzVi1JkdnE+WeSGM0VfXGedl5l9fG91qf
2Ec/U3kvcqQLC9uVlHSkj1ox5olloz7zS2J/5dju4FtluOx5NAJrqKd34irM
YiZOzI8KyDSnppaqhSt/XsBGJzN/ZVc++hYZuE1ePeU0T44vH/347ulD1iX0
NpQqg45WAm3m6jE6NNjLSYem55e8TeHr6p44fbpPVdWj9l0iVYk9bJRWMjnl
UUw+WLx1YqW/Mk4rCYLKpe6lXNGJg+ydoD+gH5Mepmwg8/FL1unHqgXec9Ul
Tl5bMnl1kS6xZOXswxDYmlDkYboMrQaCAFsWpZFbqYWsdUVvxP8qp6kmZ4gc
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
TWcpZ26QjFWKIbq0RXy86xSG6Tt55k6Tf3IzeQHCzRpMK6w4FOo7ya8SlIry
JJ2ufPM5NdcI3p6761Bhs2C/09U0cxFhyqQmF0r3K+72nqt/Pri9sfev5Kwg
9uQQ1J3vua8cnLbllYxToxc35ior+v16PqCvrjV4PtCdTT4J8pNdnaWdseuv
mrc8YqskGRTQNQtxJSVha7JSg95DzwddPAUwtal0yD1/eVmfX8WRMHRyv0qj
YgXKQDzpwSWWG1Rm2sne6tPfXnFm4DojG5uYVe9A9DeevDaf7JC5E9EyAxC2
RmpJuHMLLmK5IoETAM/ADdhnA4zX3XbGMw9e8NjQ1hsGn7F/65kZszJa3XLL
LZs3V7juQRRPPNHhra2XBjUlcVB9PkJD0tMIfMo+J80koNcXXBeQFqASbFNx
aL2nbVBTysBMDaCKAWo2hJOff/EQcl/Be5TVkyb7JFNSwxcd20i7yEoMLNQC
FrYcDAhBPco+QA6LQmWI6wAM0XsPnfduHlnwD3axKRIjbSBWTkzBVB1KD6Z9
8sS08UTy7JIyMAy5wuWEgLyldmVwF25/CkAjhfVv7pg/mXf1/6qfeVLDrJPq
duytfmF3MGcy33Bnm4D29QNPWzegFZSSYgstlDx5H6eQ2aG4iM7nuuY1iD2Q
ntlfbrnED82/QaQeIn9hIaXw/02+Kvb2iRWB2aBxPqRNV3dvuKqryKopJD/B
ZJ7HFzxPPSafc5o3aYRwIhR/afOW47kQrwQetZZCspOzAnefeqrT0UmnHx1/
2oFxZ3IZ4NtL5h3srxre8b6ZG+kUcby1rECDPWcFUeeiRO8BYzpUBchZDaEn
Dz9nTkHgnYQ4glPyD24/2NSWb28mrZmQblvUzkx25MiReWtqtq+qen51xeTe
Iqxq0gD5R5rt8D9cd8mOFX3erGudWTPhfWqTuXfewfxTiLenLaW06Q/T06bP
yZEUVZBTQsEpW1pU9fbd+cyrW2Uywl3975o3Yrx80nmkIoebDqch5fbTlnBL
LH0K4oy+hQ2uq6RamY3mUgqc1lU348TGWScumvK1BTd+df7E37+xf6WvS/9s
vTWXzpAX7CqsISNPNlwdar1GN7QZZnZLmWiZ1gtykKZEdrAQyR0gGuUqpIP1
mf6lXZnT8/R5gnBUwZxJA7DUkiOZcdc1zCbdY76Z9OkAg94zbiL5WELlP2sl
3WQcjSc/i4+YkOsIM9kykNXWnl5d3YpvXUvDY/4Ntt8z6jsB+S0BzHsCp8+9
K/rSx6a7FNL7cXKRn20/i+22y09/eXLP4PafaVW/H55Pk/OsP9g+/xFN7ie0
MIyf0OzE0RLtFxyO8dLSmxXa196sSX3+mD6kBF4N5wqxJNiTGKkmJpRY8h7l
7RYVlMCmkMp5N4sfTXoYAUN1faJmF1tBMXcjhOQsrp00UvbVnrmn+jT9m8DK
5gKyTUrGbaLugHF6AKsA4sFBubk0Zdr8/I3mjao5p34gkDq6qEAPXFlx+Eof
xXc1PUZjYxurjeztVhZQ63VBXOwJc+WOHlkw8bU9tS/sWJjysHtbTTCJMOnQ
lakZul44+dYQf685hrXb5IiU9NggyXPOKweD24PeA7ORfMBgC6/ZKcKVpYoY
6tWMCQt3gPwV8B/0PmZJk+XRdOzBzE1XfhlBPbXa9+75AfnB7eYXwgJa7kxl
csXKGC3OC3kWSySGTgOWwLJk6oX55gShJVhrLkFLk+Hyvr+2euBXRKrCI0r9
DBmydOjQKv5iN82vmfpINfDP3TUnrpjznYB2AwFEkYeS4xlWdmy4/q2nx+eT
bAVdFUsRf4azJBFvzpK8a1E4KEIEivAovKvmsnvrK16QhAePvFMJq1Rw+7Rp
04JJJkyYEGgk4tLToyqyJBs3XhbcPmTIkBzPzqOPXhIkjCFzz8qNNS+8fuey
9bl0cF3wD12ObPvqznyj9gxGb9oyufqtiy8MJlyz5oIVKyqOdQGEyPA23A/R
eRgkA+EItguq4jUEHlQCx9LcI7gS6CLCaY5z30vlpJyI0NyuyTjjurDV59J8
8RjlcjClYjbnIJxzscpTA5wl81d+UnqB9ETATAm5iAqnK9oXMz4QyPaLVIwp
tPSmk5dM/Xrj7BMbZ5+0/PXvN716KPWQPmRf7RlpAJlbPTrodHbC5JM80wnk
QvjYwDljcnIzg8BSTg0I5aCJ0vaRIMXLjeDPUIlRIdnSADp37pzZWXnEZHyI
ruSx8l/Ic0Fngj9TGNFIg8nrx3QJti/TAcz/1B43hCQwg8COtghCSxPjhX9x
pn4HrjnznfGnbxxSwe0WLw7f8HOHb/j5Mg1E+8nlqkd0SgIAW/DfVCBGd+6O
00RZHyGJmXoz/8rPFDX327t379wLDo98uD9kPzPQp+4/LzUm+FSOZF/l5Gdw
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
rwrEdsDBMIWxJAGi50SwClZn0RI5ES/UvDIo9+YF592y8PwcJ0VSCfGz4Lz6
ze3nLbpgX+0ZR9e2PrLpnLff7iBG6q5dgw9sa/PO9lMPTPjS0Y2nH910ztFn
zj64+JTDhzseeaf9s9ecFATy1lsd8wlof2dbxSIaJMBAzQs1Cbp16zZgwIDs
B0etX3/xunUV+UR+hcAJUfHsw5Z5HEQOEQAKfBIUMhgAYKBrhGMMyooCyYqb
Ex+/p20+CLdcbsUnwlgOerm1fnXB7cF+JdITSZkUIz9Zs3PpQKzhw4cLrEP1
BZ2GLdGsKimpWaZW86AtvuffFI/zI6kZbBOmYIbfsVXLb966S6wcCiFC0lOD
SbamJPlGVqEPYyaYArDSpzZY5nkOYsWnhTDRWzhwFkddy0mEktK0RDFgysag
TgFSUUTCSeLkHpN/HhYPVrOPpqu714/pct1112WalsphqL/66qvvqWufT46Y
tWWWdM/KjQHbedB59NUjOm2Z0C3o3YNLVgQqt1zffev13XPE2sTZzVvK0KdP
nzwjcU4xlJJD3egr8iysqqRKc6d8RU1AIHD+EUUDk4Ucn59OjiWP5JOHS4g+
WTEgpx4QzoN4Rc7igkEJnOQUTwGLPrwdk3nA1b6rKiGlhHB6bGjrp0a2vW/1
42lyeXa5Vt++ffNS5KZSgcHtW+ZfQp8/FT5w4MD8m8LkxeGZS7YRqT43SPYn
Owz+KSe6e5GOAZJRtWmQplcxhScjaQ1r8ODBnTt3TlbeJnomUGtuOc3A+iZd
l1yFez6jR65OzoXrRPHJpXMOIc+bdzAfOpM4LfjnSWmtsMTREyNJdI9kmxrO
LVhiSD9mTVZPnkaYZ22WlDQ6NySitOQ8I71iyrxw0KWbJ3QNYn9lSk8y/jsn
9bi7+1k7buyRgyKAU1NPPqklo0aO8OZGP8vt0/DxGjY2tglo37SpS3HXSuEL
rZ2NKygCj72lc2ixVTJNszGWoDYwiTgy2az7k8uwGJFa9ZjyUFjzvvzlLy+8
7JstJWXk88E46gM2heFa+6GJi4H9M5/Tn3T7KPotnyJb5kMTFJN7IbR8wB3B
1RabyqywRGuSxmy3pSCSg8HnHFpTGyccY4JlA8iTIG8HzRnTYT6qIiXxE6dR
Y/Er34Gyz4y//Olxl3P5zJueGT0zUQYdS9hkw/kPBujmRHEi0qskT8t8NE/g
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
yslZW+a2zadjx45b72vXMK8Ft3+4sf27TS3sgrRV0FTwj8hT6eazB2E4O3v2
7JlLDBgwIDAg+ARRJGVS1cN7YfiQksgx+eblzom5BGXI9OGcS8EjO4N/8Paz
odPnvoD/3FrhxqcQqSFxeATh6g/skXSkFB6oMGvM38wc/Z+Jz6SoFBvAwJLK
WaBUmjd4dciPlitTjypK8sIc9IcAJIyd/HDdVDgWR6qa+mMHeTWEScqUKiBC
gCEHPvo6NhdVbYsLdSO6Lx/WVWoDl8MAzyOY07Dx/jVbYiXlKfTo0SM/8iy0
YerAEEhz5XdqsmZ833WTavOkhB6Is9DT8iAkzCqqHSQT4V6UM2tqVtDE8Hp2
+EupXp5XOkBGsMa7WmAeIxoZPv/NMePq1o5d0cz2sfglTFLoQfoPflGOTNMR
GkpjWqcQdKCjMtlyegYxvAscGMEmrGCLgJJAGZrSb8mVWGexTJNed8+qdTNW
rNGLsj+tiuPdXPO9YHWssyJqBLenuaaP/E9N9/zndXP/y/YlHdasvbdxzax8
S2eQR9Ai7jTgzJyePewFKaLIcmZgPPZwzUc3tPlgYosQJYuPezmg/eDoc/gH
Us88KeEGRNezXxrB4PaPfoHb2xwYfbZMJWtrv5/99GqsK627+gfZ+c3jyeMo
3qDZWzSJQZ0+Q2VUuDEBK/otsg3mAXl5NazOk2NMbcQZ8l0yaHDF68N6LN6L
dRbtTDwnl8vbnWudV9lqa2tj8jOEc3wezbb72z/5yAX5MzfO15TZiiQFRFFE
LaoxMyTP+/dJJITqdEjcj60qyBDayY9MuJ/q3f2kZEknmwmnVnE/vX2W7Zec
JFO24rv+1P5T2DK24vr+Mtf1u1q2vVXF0x7ons+jP5pkoapoKGXLn/KOtapE
y6bnE10ntw5s5wDcGBQaRodAb7g9P2QdkqqJjhOvcnambrA6KUiHSWxE5JCj
HsudujhQnRIyCi0Z0vn1W/s9M6lXSuDxppqYMSSHBfPgGyDG579YuIRi/qSy
YZjgUaOjwJOcALmQwwp1hHOYqDtaoFxRcLs/cy2CMNTS8s0kyb1zsLMyEH4g
VWFBudP8SCGgvthSTnIJmHDC87u+vi3cvmHDhY2N7dksqOzc8pg8/PxU6InG
cIlztmDpZPjdv7IFtxuf+eENy4WXnsZ5e//qfLhA818+bcvBlrMD2gPg2UQ5
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
YxrxBNnhM53xooMfxekN9gAS2ZkqkYX8JMiEUYxLALdUq2ojuleX8NmTJZ2M
u05T3L/k9qtCkjmB2X5qlnurf86WsYnO+ALEquoLncwNs9MbJOiDNrtQ03K6
NwJQz/GAd2CtbMLeCASYUvnsv+HBBTc/tjQ7847nVQ3eXrHi7Lq6c6hBskTo
rKK+5xVOyfIsZ0Q1aEgeKlOqpD/82/kBlmc/WgtaYLAi7ReahBRoOQ0E6RAh
X726JfFo4d5QbBPMKHhTqGkuVBIVCTJKmdQUcznKiqmP4Q59PX+WTEkp3PHy
vlVruaOs5zeeDKHInJJBFd09d8SCcBb1RUI0bBY570RsCT4ieG6BgIgEtA9s
ayuKl1zE36zkS0pTlHxJHEFmdhg+py9eeit/e3A7scRskvGNGdP0zM5tT/64
OTNIqhe0/NiS7Vv29AxuV6U0WqEbvfza4n37WwK+BB1Mffb1WXuO5juXxiAq
+szi9UARDn8OHwjZCjXqJilpDsxCgBk1qmH06MbiCJo8eVMqJvaBrz6VAWg5
XXm0iqw6si6dQN7UHEMFJWWSR8slZszYN2XK5pTjdpbt2hPoDrfPmvVODr7/
0W33PbKNeDKubK7yyu4ljKB9B1avXH13dXRnEdaGzIVu5U/BX/lxaHXbg6t/
oVGTxlm79vxYbQIVrSlIWJkqUQjhRCWvl2oMHjx4+PDhzz7b6+jRnj954pL3
ms470tDhiYda0iR179496H37Ax2eejSV7XRtZRs9enTv3r2D9oMYIRDoveTK
wXnmPyd3g1H8nUqKzPSQQHSU5tQBXAdxcQnSwuRxGIlQND8wcJjv7BFVIdpR
lCiXtRiKAAYuXIhRoCWEkNNZQ7giag68Yc0R9CN1Au14Rjk3dUvFSIKn/8QQ
y3f2S4iJFU9LJ6dz1yPucsKrGDSVKi2+9vLnb+y7fFhXNyXWWL8FMkmm19TU
pNmvuuqqWEwa3C2jheTGEcLJuQRh5neMLDG84nryW6A0ApUwbetifO8E5L0p
6wb+Tj45V8qq7SP+tHnAv8/+Q5O+8cFNv3bkht9cP+h3c7wH6tHI/SQPUX6I
Oc09akbJdzQ+3C7hLCZ/GqFuRHeq8ukAqFwE3sV0kDa1RsMo0Ji5Lyr0hiwO
czEI1n2YivmesWJNcDuZUNybxqvOCOKlTOgBeaMZhtnSgGnwoPFhw4aNGjWK
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
E0H9BAlL0lUQGoJF4eA2l4qUf7vibH/9p852saiYe6l2ymmcdfaGmT8MaF8/
4we894WvjsQOVRLAYdfk+12L19y7ot7Uxv8fgCdfFcY7Vg+fLSYPPkxmB8yZ
FFVf3za9xzEuP2y6MQZCTiSW/pu/+Zvp7RxsgpO2KdWQ4soyqCUGawr5mx4A
gfCu6clU2Ozv9tnydh/xUxnJ56+6JLg9dTPym6q4uWiq81RLLk+SjjOziKvz
RhZme8790xOZ5a9fXg+0Vz5vH65kOZz+7Rlj/yjzmijF4tJXW7Qc6XeLKPTs
2fuD23FpFi3o+MT8DnC4iTWnU8AoVeLwJ6RJOtLqMNF40go5K8cHIEGMxWdO
4wW/V16bNBaLQMVys5atmBrTEqOG59w6Ag8zV2H2sBRSOPl6QcfFUYz/n806
SHoj4CFAIjOpJERwOwGTpqYuP/pRr9Tn2LH+n3464LOPex7/pMfnWy7M5621
fUaMGDFw4MCNm+fvP1j3zntrA1qCLYPkC5cYnrz00ksDZlwLVoHcgrgYKVde
eWWfPn0IA6K1pDkURfBS4HOAkBZK+ie1Choh6wf+IfTyxkvIRX6nZOMSq5v3
QhCr9uIgGR+IWgS3U7e2KhHwkyZkZ2BGLpr+YUFwTeO6q7nmAISgKQ4J9aEU
lRvtrkl5kGqDW0wwXkoLTDjVlhhQtVkQt67bNvvtD+e9+0nj+38tK31ZXMAS
ST8XAUaQzyUCF1P/1EreeXls5WZd/0rvVxYOqr+hP4YSSK8zGXRc7mW5J9XL
vUtLOXKR2wVT5+BcIreS7SBuQlHakhpSScUNy784S5YnLJ1I+pBLN0wYkA/c
zvzEWULJQ3Cq2JhjfnfLtb9VHYgtuJvthgj3wPpt8xu2SPWLAqTm+Z4LsVzs
8UqKVadbK3yb5Ga+pz45Ja/5+uHfir3Ab5wKbL76N9LDzE8xs/nJGlxad2Ti
BX99+0ULNz357LhOH87tuHPnZSwXPDeLm3T7S5jMTTdtDG73BJZFIiwarhIO
+ZTDTSSA2qRmJQg/H0TPv7Kmbr7i7FcmDc2YnOpZ7sm9yNiVSTYzdaYJbis0
VMuastdlLqbSlsk9M4UhOmMdSRykStH3IugNlZR5uIlSgfRMbsGmTZ3nv/Pe
jFf39e3bN6B97LK6uru/lxkw0826e89adcd/hzFSmWrUUVzugRPVhF7uwWqo
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
ccV111330tJuH63v+NG6jsHtV1111dbtD29qWnDZZZelcAIj6DdUR3DFidTl
weDflqZTHGi+Y8WTdkFHCeS+v27z3NpNQlZ51xlHQGnOzSnQL5oQngl5wOwh
I08MJMZFEMWqaf9u1d3/Pn8D2lfe9QfLp/7+jLF/JNE8VnnqjyqTu+NyVCvT
HCKKb985NNA9jzoSV+4IsPcXzZkj6MlIbITVnHLIy7hrSFM886Cv+As2jvuY
vxST0nvpllw6uH3OhD/GVxF+qLZWJXQm7zcjBV9FF1ECzH7WR44J6t6w8f58
WbD60kBoHvvUJJhzy5WV8GQ2CNd9mgBI57q5rQMGDKBtmCeNCSZdKXnzHCy0
QYu8NTgVlr0W1vWILU9g0/oaucW0UR2YwNakrJ2JWk1jcdQJ5qD0e7AD2p8e
U5GvYV9rL7Wi9Y1z19bei3dN7YoEinSogk1wq/JTjslDQtIzrRCfwiiTfTjf
JWKD2Hv06JFHOld/ceLF7v76wX+Vq1tttOpkaiBIS801F0p9XAgHT+At85/g
TKZRAykKIv8MCqWVX0OE1UCdlg1vStBNCiRNYCE4ww7qVBmUxN2nD+UrIVvk
O60wZoIEHBwvQoEstso8aJ4y9Im7OXJjmw9vqkQ9HzrU/dixnocP9zhwoNvm
zRWh5jTqtiv+1dIp31425ds3D/0XMqoHEmRmL5zz4m8s4XjW8f2EoFv8h2DJ
mYFWNcwuxPjqOL4zbKeUhbxp0G8vvu338vfk47/OvvQzt684SeaX4Gyv3oKZ
H+jftrjZq6vR6gSYrw7QgJ+HLnhiyPzHsyd/pzzz5rAHFgnHaEFury6NHx67
rKRPzd9nburz1pRBwX7BM8Gi+TW4ffXqc/Pk03UnVE7aPb+SkA3OpyFZcgBl
Q3TPQIH9gi2T44W4Pr7olicW3/ryq4vem3X13plXZejLeEh6nfpiRpsMwlJS
Bq8GugvS5Gf4k+ZkfBmUiOhixVBrzPiDs5E6EEsEgI2ZGaMyJELI9FjE2mAt
moh5pHOtjFHcFMHtx5pxO2oiTzip+TQtM4ikSLm01c98od/OxU3ckgKMYnHd
BajmmNQqw3K+BDM/Pvwi/cb/Xzvtu3V3fy/3Yu3a1umHNJbfDxR3FRXILZAI
g4gNWC5SgKuc5cKIyMGo5jmSCk2afHD8eR+MPxdlJcfz+gZ7jB/fMO/hrXOW
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
QC4dNAvOEXLPwbTi8532XeoTKAX3ImynD/MrGgZuT2oC8mlvSQMqjoBHGo0f
PFtY1yO9SiozfwOA8boLBYVPGLgFTfMTgXSVTE3SqJxITZHbU2qkVCa4Ha5O
R+WsVMD+nJtKEjCRs8lOEivo9zkASs8pwe3uGiXGnBgD5+GNOx/Z/FRK5m/H
V2GUybvkQYU5Yy6JESADnkqmgSmqZGtiP9KlCXhe/0qfQN8P5nVsfK0vASJu
89STpUZQiFc8bw0OFVh+S8PWiWsa2QiQcMzGw4d7oOinMpj2NXUz3nr/geD2
fJ+/6pJ8Uuaz4zoFYebSiNk5nlnhXwHFxAwFSMKlcirlgADa4PbnnusboyMg
U/xvCszHigO9IEsz32vOmIzYI5IiBmPuFzlNnZkLUVzHubLHfeHSofmJZN40
4pzGoWcRccqe1JMGEenLnH54wvnHJ1dAu0/g+pwJf9x4x38MCE/985Y9PaZD
qnrsptb5K7on73JuVtoV6yPlf37L+fkcmtD60A2t0fjRAnnp+QEsyIq1sUhH
qZ6Zz69iucHtTotyyv79lx440C23UvA18dU8yRVhzxHnYOOz0fIK51eTo7TO
vmfsMndkyrA4W9JVpP75COD1gudJJqqzfn2Hjz7qJTGi2K4/aU69l7OCNDKD
B7EHBpdYUQ69FrhO7nVwhbewOnYvIASX4Mxo8GSKO4B0sq++YHUQrpxVLQtZ
nfvy5O1rivsZtq8ySeZvHY46+cFFS1/Ynb9fcv8pN5mYiuRLHjZO+BJPCtUj
Ygn9KJQVTnKWbzYw/hsn8r2W5xmznelUYmALyKfZmLdbPCmfPByOmZad32hO
WyytUi4akJ+fJFTKWSRW8j14Mq95jiny7Ig0hN9ffm3xvv01r7+1fE3N9AwL
/NgZEtFIUGUyGudfUT8iST84XJ+PBcSMLTzMkLMscjgkUhdBzjjJvKn+ZjwX
s8lnIkSUcCLPdlljhTy50IUXyXwqk6NFT6AdhQZ7UO5UcaCSqKY+8LBfFa4c
IbTGxnyXjJWSvNMx5PNTNZmECqKisrPmucvrXughGFNCT6QjjH24PSUHad97
77v5i4rPRW9NgVMFGQlZBathzJiakSNXLbum24+mT7///qOmD6lqUv958yp5
D3VjyYIk+ZFgVevgONuZdrnueaTzk/gCxIMbb2wM0CUmaeKbMGF9qirZCsJP
+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
DWWv2IIiKo1amlNiQo37/v8jc+wDSMxIU6Sq1vjHHv9e/1xzzTXXWnO+3zff
7/3yKetH5Ut5tn/tf09GUF6i8pbB5DjqKSNeldHaNuUTDC+Pkl/56otsOxCe
DdUt9fDY59i33jpv9+7umaBTJjgqyDzlg6n47cWo6t7UJi3RgkVTgttXrZlG
FoDH1djlb0Zm+mMZT+QwNYiJr8kwIkKz+F4kj+AMh6XhaiTtjE7Zs3LV1JyR
HGIO/3417TjnOY49sC0WlROV9BZNmBySoThXB0ligNCWz19O/owGQCbZ3lxI
zgs3phIee4AtVeXX4Pa6235w88KaV3ZdsW5dZ8sB6ZAcHtC+9JJu+Vdq1FS7
buYJwe3kNPNXyOQdy86eubAz/GCgFhyaSppGfLlx+H/EpTTpi+0Fb3J42plq
YWmKZPq5JITKzuD2D+Z9b8Ol/zmTDnZK4PrcuT8N0JXUG4K98sq6fNCBshPT
KVNDJpSSgdTsY05BTTdNY+NzXjENZKpKq8B4VpVoVnZZfmJUsuCsL1vbRQry
F0SxRK5C8Bj+kZMFX7QQjUx81CaxZwFI6845MOUhQ/4xBdKld604N8iHtQiW
s0lpvnmkWQQWcSScIlBpGuWRDmxYv/4suD2zcwAztCzRkokbbR5cYYMULj3T
I/X07t07kPv6dVtmbNu19dV19Y1zevXq1aNHDyF7lTyYd5669YEu27ZdENz+
/vv9Lr300kDBlAl079u37z2T/+eq2/44GJ4JMGDAABoUcpueX93WjO277cah
NWN6QbyBRjgJfLZwO3qGMMkhQ4ag1tCuCVpLGVEJuXGI1nzsViK4NFEy6MBQ
qmHg5zsyD+0pkpjfPZiuSyoBBhFHJeI9NsVx1VT1IiJhY4KTUOLVKxtnvvDm
TS2PBjre9uzrwe0ZN158ZVn+puY0W80IVHkvOMAZbjmROGV5oyympFhsKNk5
izcVyCQUz2vhuUox5gMREjl3UpLsv3CM3Fydec4556zb1rfhud7zanveu7p7
HpIcy12clgS051nSpbnqPA88+fXP9qp7poJyRUAIl7hz+Tn5pA1vvz3yH+Z3
CfAmVaQNue8sL67vHJuSucDA4MB1ZPUKDWPSae9OaL9vfIU3bgznPCeJaXEh
XcGsZrkQ+UxtXkyedtKm9B6N5AZPjJS0x3oKb7YHIFeHWulic2ethXkyseX3
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
4WDxGlseWi4RuOZElfC3U2/OnpY5J+1f3yn4kzRNmjpjwekzF3YmrZCS5N8F
gVomThlXx76TzhUGyOXg2YLovN8gN7I6VX8YIHc/vYHwiZMDqMviBFoTHcXS
9wDIF8ML51g72V8genEVwlRYvpQcchZPJu998dtbKMmG7kvoPvv5Kj1X3ID5
m1ejKtvecV9tRzqQwecS0OevxJ1W6sWWBkXkiwyhmXAl30FQ5wNM49N1NPGk
lQEdUwMCNvDAoEC9kLkJDyFlRG7Cujkw6P3AgQpof2zeGfIi8TcGCYgcBAzy
N3N98GewJV86FfRUnjLBzwMHDszO4HaEnHfGV4QHJ9dtmL5t15SGTQMGDKgk
lKkyc/r06XP++eejbcPbeddyOuGuCMN59TiTKTTmvP37999yT8d36jo9fG+n
LZeetm/8qQEwP76i8/Dhw9NdaDwEHnFd0rAA77RcpirZlvM97UxjAuyvu25T
QDvrNRfVNjQYBz41kPpJI9OYu++uLH6lkYTl3azUnJJXr2y8cnm9CIJ0mnfB
wlDbtFmFAIPvh50OyacYqR9LihCsRQoNmDJlCpvOqocaUKPT+JEjR+bXPRM/
v2/yb8kuQT6LB7sE17BeObc9P9gjhb5uELtk/ooHf9yc9x34xKwrMFXsZ0vL
mTLtslItrgnth1FdMsUYoc1WMwndczhbpcrzn4vykmL4WFU0QKV+r2Q2sZyW
xvJ+QeyscjmUGQIyEZNtyRl5VETRrlvXOXaQ1wR5KS+1eSSni2UUo9LClrBf
9Dk5yBALjZZWJ4n/pLY822kVnhtxSOGull9TGCkoN1QeCpkpDFxiePF/0ld5
qvPJNmTIkI8mVUC7z4HJH8cmZ2ferMYhP2gZfgLaWB6ePCTsEQx/im26In8r
Kwsv9MwUOX3669On70wn5DVsaHjkvvv+7r773ibnSLggFaaFmev5uDi0RdLx
JfJ4yxFzCN7jEvw0jnfQHXr5/9m78ygtrvNc9Er814kd2/HxyewkniJnspPr
3Ht84yS2PMSWLASSLGsW8yBmCQSISSAJMYMASUigebBmhqaBpptuaKCZhcaI
SRICCcQMsp3YUozXffr7pffpC0gmOWete49FrW99q776qnbt2lW19/O++3mf
N9/j+n5q3pTP3z7sz8XZlYDTX2tJRlmQUlHJsxSKu0NOHap9wNVjWi+/eiZM
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
re+eGf13z+hfO6p7v3793ryj75u39wn0TZWami7Nx7wPR2iXLl1KCvWSnEu+
1HwfPdolHzIycH72fPHF7s8+23lcXdOYmhUxGd55p0tAPlAdpJr3JW8QIkfw
SUAvtXnZgmA5zIq6+lkB7YeONhw8Ur//4NJg+JQQgEqXZu0DbTc+cmHaKgA+
hk8+WYm9gPGSJfsEV2dL8HmQf2B/EDsuPc5PaiuIT+xAybADD1922WWiGk15
MGRyjyZOXBNsL1gg5aR9mAkU5vHZzKfkKOnblEDGX0xrmi6FU4YxY8KVjXJD
Fr7ow3POjx07tnPnzrJumQ/C9EDUz+3gYeBfxXDWmSBa45Z78U0Y5V/isbSw
mLGpXp7k1CT1IabKk+D1R8ZmhtOol0JCzilNJ6abdyWlpXHML4DoTBiVYb8I
u8b7oruOPZJXiaxTXtKcOjdI2AshJhGvPBICo7xZXpxm7bJbz6yadqYQFWBY
R5GzpEl1CLLpeWuMBYx6wJuOKN5Urjr7y0VlXibmsIx4RWDfnWXspDTxsMYa
DoHUShNpQABemIBAZm96KpNH9Oqrrx48ePD28e2PTTgJbj98cxvDh/CrFIvG
k5avu/prwfOpbYD6qFFL6ZjdeGPDiBFLTKemxbD6Y00/81b3dW90q609T49q
Xjvtk4HeRDyBCxxa2nRoM2LZWkssFkJLccjLzVSkqk+q8ZLt3ER48ryORS7m
xJ2LzOOJUOpDp5x9tRx1Gref8SvtbD/pUp6W1slM/+fpVYXTVf49KXQvYkpl
7slLZGdxHF66rOQtyxtUAl3R17MuNNVSoH5eoieeGr+1As6DzFFosr8kqvkr
0D3r+c5n+2vzMrY+PXdSete8gAgMn6wsAe0HDrTX57f2ZwYfBrTv3V/bnBS7
ojkDuuNXC/3Dk+H2MW3KnyxYNXCIUkqGKl7NT1dSuFJKKaFAKwb+9qpBvyvY
R+6PdIzmZ8Hm9NIpJ1g9fRoPiXXhQrRTSiAbt1JOUTWk/eq7b7mhaikVuIAW
ueO5N3ljECbNR0PRWBkSBiGHmH3ONT7R/+Lg7TLTSqYg7ZntwfNnVVL15RDM
fDLFOVH10I67pvfbNa1fgPrLwe0Te2U0ycZYARmnbrpp2axZe8eMaeQpysDK
21wotUCdmQIyLEYxFSDmI4O5GX8O1cZZ382n+JxRWQxSkDxIzKlOEpl1oM1B
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
6J/eneoaOTa0SHWp4HJjKnF+hPc+vIg+euTIEjrr+fPfzV25KXfFpsmTtwDF
AZCgUGP9cC+Q219Ho73LvNXRkgoJFGfQZGXQ/1c+tsZk7pJy4Oy0/WfIA3vY
nn3u1uyzN9UzB1Soxw4aBCWa8tB1hay6uOrXwOM4fNB500BRPqxgmENSeQ05
pKAKl4BUdbBVXVBG97ZtrQGrPBpw/eOPY3dl/f3ODX9/927bux9H/kp053ln
Z5ecvTIcYA+4BZGSTz+W0vIFl6rzLlbnsqGuoxIxcs+EshLRDdJknVfmmpPZ
qSCklwDPyIkTXpwc0WyJav7waOwHt7N61C9UXRqeRd8E7bpsUE/U2zFuFOUA
dI+Pj39/ytMfTf76u5Of3D/mBwwHjJTKfRlucJRHA67zvJ06dTIkqxJDfIkq
/DhHIA4kq5TewIEDe/TooROu9gGN7Zwg6uNk8mANkZUhXuXjMpYBGypxrZ/2
g8yp39eXk2pphCbH7Lqv6nuuxVjTtHYJvgIamVNTEvh+1drSv4bTnD9VUzeE
XmW7rNsvWJ3q4nKj76lFFqQUdTPRHdXISk6xGR7OWQMH1CE4lDMperXb6Bm4
gfTVkHHCJSjZSiYkQb50MkPxKqhrlN4wfFN5yQEyeVOxSgcBPYxkxQvadarV
/sBigConLOSnOT3HA5IIDZEtmAMNjpJVSozSI8N69VpuDufnzbvFVXSvqaln
Zc7oHERR81BkjEtWrZm4cvUEHkevHGCDCgCar412wV0CDAiy7Z+K2x9/YLHH
L9XKzjycEVUOcPDpq4vtxSra6uuhfY9m7D8Fbl+7//TcuTcolu7dV92bt0e4
/be8PDh6/w8kz4SbPhxJxgsnL3pO6E4tdcLom9GFNs0gp8Fy/qnzEYGRHkIV
W2jS2u89P7h7aJl3Fix8d54f8H94Rknsu0fF7RrVDujOxp4x7bmczx+UpZsn
XQPNiJLatDNq6hrIkiaXJ2JD+XcaFtUIpb6Xzvqlgr1FM/7to4omH5U2up35
Tx9XREJn3il+YcvimJrclwpSf6ZzGc249h/aqJKZz5bNfo5Wzg6Upklhdudn
lR3Wg89mWaRhw2g3wQmaW5d1bQa6phu6NLvDsRlxSp+t6d18/7hO4HY6erpg
Ok37LwPK0wUYFIkWcv2ANgB+57XJmO57tr3c4sCE+K07tldt25o7pP2BCZ03
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
bwgMAaVYMTKCxS41wIBDUMspFIF3rnW2g1AR81khDLyg3LG5EPQ2EV3EFArX
LsusBcPykv5fMLCEJm0Ws3MrUqGElvMuuirBU7RU6KQUI2NfIKvLhSmirCYp
Tga8FFMGqhhVGT6o/MjuyEi1/JT/VoRl6qE4vkpODafdCJYPDlo8EgbSkun/
+eqSdeQNEX7XsLLkq+lSGKL5qZMlBazbdNqE+/vk39e3NQW3b3+ztVQw1GNl
zt27tigUte3mz71zx2e23vSZZaf9608CjbwvcuheupfuZbelVF8qnPOC2OsX
qPsftYXfm4j63v0UlF7Er0B3MF76DDe7UYtB8fKE0VumXPDkuDPnXXj0A2cP
hts5Y3FsMpRxNWSrlRP+XF6qyQsnNrsK+PzpC4vzHvTe9Wbr1m1NmRlNZ/tX
ldhVnZYDu29Nt7x56qFBXBmlZY3JL6MskRmHJ7lnVZO5ZFmC6PvWStiYvzg0
4B/5j9CIiDn2S5F0C2IfMWJEUESMgh89NPz7DwxRkCX/Zl4LJMj8ThtcjD5f
gxxwJ4SnEYEwIVFiOKw4pXN0sd28T3tk0PRHB/+/7N15tF1llS78DOuPuqWW
CtIjjShgVd07xnertCggEBIIJBBIQycqCCJN6ELfQ0CraCSkISEJnVAgAiF9
d3LOSR8Ioreq7pVOQZoAgTSAfoX3M7kFjO85++eed1eAGLl6y+assccZ++y9
9lrvete73veZcz7zmaAIvERwgP+8IsLgOlJQTupixZ1xCaBushIWUP3JZqnV
h5cea7RS29wFcQE+c3efg4vUP2dvoGygDgPngWFHZRjkppMH5DDPnmm8HGdh
Dg5nnaPyI3SK1usqyn/odGAAPjzWaD7pEheddyj1P5wQRHE+8wMPPDB3LW/y
bwZMl4Bk8xWgHgCfgRRsEwMQmA+8D2LMjRPWkUMhs5Uu39KzD0QCMX4AVyYG
pmtpVwZaBLpfPq39m3MX8wyrvcutTRXHDyHnoO58q1povg0CDMpVw4shRkYp
VxdbcsmSIzlLGXc7NWu25uwaz5eeDZbLv7qO1SN2gLyNCiLSkSGE3D5//qC1
a7/6xhsnBMYLADGgjDQMqx2a4uHq7ZI6RKuQEQz4qTeUr8RN6LSIOJRMYrEp
cslXTO/I5xI/UXe6Sj5dtsP8sz4x+dxjnrzh9JkXf1UqqGRMQjoSHvU80Cuj
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
O8UFTC2Mh5uKJQtzgrvcXPc/NOP+hzp5O4MT0sMqMZlPaKEgr2KG8Ctmh6Om
zJl192MX39DJ98jnDO1w06n6irJi8QWu3tQqXFvcJJ5Vbup2zi32eDbIIRYv
//m8+58IfFp26bFPXHZc/paPrlRlNm8KazIEOOgqKKOMo6GuMwjMWOVlPjDQ
bCBkgEUPZghMoASkk0FfhAdxq0p8xsgBhxDmyz+fjaUG5EawI2A58omAKBDO
AVupuGIlZZjAbKNO/ovRp/xK3AaXhlBMNot1ufaW4Vygp502J7g9R8zFD2jM
Xc7YgzOlMGzVqowpZdiJdHXtv2jR8PPnLL78nmXfmHdTLJRbTn7T7ae9+apZ
v5g0/9+/O/+mHCX7eerRzzz/44PX/vBgoMtIK8vFZZHLnFNTTEdSIXMMewRi
F+5x98WAaic2yDNrjLGGXGRD0e1ji7mPAGeuxqXT54+cPBvjOrg9lytnTR9m
cKN+SUPyz5tKRv5K6ObeL0QdVJlLwbKQ5ZpPgttpe+68884xcBbefURetEzz
YTZQuBO6FhzJyGEjv6Ulty4GsXVTUCngv8+9f9nueW3TSOuLyAxuCqLJ1hFP
MTt5gvCITDusZnB981ZZH45uG/9Zq3bYNq0CrKV72S5fgy0pL4OerQeE54Rt
C1qLTfBL5+cPPNT55Kqep/51cV4renuyASojGlgpw6O+o2wxKvn8zTOiRaQX
eewd3SPMJCebkK9Wzts/0D1f1fxvufGJctilIQm3W1bK607Tfv1G5bgc79g7
XEl2ZVlpFxwunqeH6KVWQEx7i2wQe9D7uri91lwuLCtasUwrcxYnzaGLurOu
t+1FNd5fFAkMtIE20F4L7RVxO7YeGEPodV1j3LTw28H12oO5dP1GJqsQeEfj
Q1ivrXCqabmmzY6GTlMprq9ricmXMG+mplNPnX3SSZ1FWeRjySRcmlogomSu
rE1ZgOScWmUgq6xlJfHdt8RPmzfnvmWBpjNnj542YwSBBQSMt7Yqj+fQPT0H
rF79+cWLDxLH33777Xt7P7dq1WfVWuKnlYoFReeIC6/YU7F4fqoiM/B+83lC
LAV4kKXzyT1XnvHY2BMnH3dY3st9Q2JhHRBJQ1vF9AB7xBqCMbbbbruRJ71r
wbj3zhrzXs5nf6dM+w42TmAJij7IyrdPzE0SHI0IjsFctGDppav+ffY9j/NC
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
ZYBu1TQs8Wx5xrT5eQXipg/nzV50wdwl907c9f7v7vbU7Ydce82/5yLcOOnp
/7jj0Od/fHBGe/a28Cu7dR+1M2tucKNKyvQwGllk8sFdFg5zpyYkwSSUOJBL
wQ6qUk1MvPRHqm/R2Cgs8ffaIbbMxq2Svq4bSxZTLlvusssuRYbnKhdiU5iJ
gYAlnluj2HGOK8KVf4FPl1E0CkfO5WLIi9QgvbPI5JwaD/O+uOPaC4euvmA/
2crZZyalfffdV+YsqXlBBxYK8OyRkdfAZ+6Rz8ZMY/avSYbVL6RYGTqz7308
hvbIybP1xA1CXyHvI4FFfisbsASjkIWwXFBHsiXF/gLDIGu+FXXKNtgyMVEr
/UHsoPJDS4i1BGPFwtRiw8mpmRalR10GWNqyUlUeVpy993PfHrrinL3bVxO+
HSYzgg3/DF56sTE7fr26qOUmx8odxHtv141MK/qfKUU51xclyfxGjQ3yoiuv
dU2HS93RYorFZ/Yrx/v6vy50068NQPeBNtBeg639qWxH0WY5OLa8DfWkv67R
s331D3W51l+GS1N+9XayemF40L34MzzP7XQac1GRZ2SqmvbLCkBiT4PhxUPh
t81aVTMgutWrP//004dzx2VxcWho0Lozd+SQmybsHUCycuVn5s3bt6fngFMn
zznphplZU+g6wsNWvRIw5I6++eZPLl58UMEAnmfcBgtlDjR56kX3PThj0f33
Xt7ZjaBbmY+C1BDUJq0aNPnJ2LHLAt05Y0F3cE4UPjYIL2VxcoqcACuyXITj
04dgObg9b644832jT3k3B3v59itmDefYVZrjynOEUUXMC5MjZAK95ClE/PnQ
nFpR1mEq/8rfpBHHwiKDU9TiPs385StvWbXqjieOyutHy48aO3k4rFJoATNK
ZoTxYI3mPIRbmBUlau1YgEpJ2aD1Cg0IAeTvRcf+OdB+9dXPwkKEZdAeBEcg
GZ7SoK8gcNhS4MN7wKNSelGp0apdHLEVEPEdLWFPnknWgQ3sBzxbeMWeGavg
VkB78Dl50oem7/Vw58fTvctO/8s5l/5V/g5qVefhucXMya9kSjKOUH2MIiyX
gEk5krvtttu9K869f+V5a39y2KKZP8pFmDxl9X/c9Xe9tx4UEzWHC2jv+tIQ
gNb9MvKNE+iaC50t5nxLuRFKlGq6TaOK6aaI+/Dk/3lTXLhkMF0f/PZtGhF1
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
+cJ6nGe4XY77ILE7117zN/9t+9Trv27/whc/vl/TdS8JPnjSvRzQUp3C2LAi
oJKrzOo0czwFw5Vxp295hoNJAk4g4WKSlDa4QMX+reXSGRWF2yvcVYAzSFbb
JWhCgY4xDXIhm18akEvwAwu9PLClHHUvuTTFeH5+TzCXBtpzFsMEDaOwtEqY
AEB4BQurBEPJhohPUuwF5BF4NKkccmPVen9AS0MgoLhoNpULtXqPZEogceoB
RO3+MD9TlW0Iwcsul66W4zWm3AN/fO6OT76uxGGMXi2UCCztZ4aTFT3ttNNO
OeWUNCM9s337RTt2vAEpTljBeeedJ6GwBvuRMgNpAQXnu0d9wuAqJn9ujQYU
QpTuwiIThJuz0hiUKpNYcLtEY4G7NdfZIWJPCYK2ayDOWsE2Z50VoXGsKZzX
lFJz8lCHYOF8fhKcFkIuEh6Zrhkd5rQ5LW1c8e6Uvh+bL93mFFo75X/WylBz
evMCcfJMW4BGnp5Tex/JLUN7o83sFaXvO2dmAN0HZVB+9ktw+5Qm1cbz8uan
3ZYXpTwLbhc1n6k7yDO4vajg9mFFJxWyHWo8maE2tSoQEV6NxaI2W2e2ZEPm
0jkt3+Vkl5vJYcXYRJUpzzN652jTYMmF+LGL5MCIgK94Tee1zNrFn6/gU97p
oabZm5JF35LkLniNSk0FaMQlBikdDA3Oa9l2Um06MNA97fnM71z46Mp3fnP5
72UZTTvlfp1oWVSU6rpZTX+Mj5THG0iY0ySL8RNqTbT/7kGk5ltv+1gwqkvA
8PCn07krOTa9CVbPU/bttXdsDgae29JCaVLtYkMIYnUnWtCoKAaoj9IdvAdN
cb0iQsAwugt69IAQLcAVvscDW8ZMkXEVzAjyTXQxuZQq0540eMUXN6JhAF3l
5A9u/+rOD+f17f96z223fwJk4ka+/PJNa9ZMySpCtlpIb8TDFdxn6dd4+iqT
TSWbmTbcdPm0kB/YVkLx6t0Ri8wxzJM0FeqzywMUqQfdF7hN8WOxfxTb5KCW
4qfCe1Nb4GWGbumcY57YegCZ6LGIdEj9iENEMrWqhHFwnBBvPB1wvYSJePgZ
g3Oa1igcTj1mv6YCWsI4eDUuBPpKyarlkiKJKTZE2Qt5I9AVv70iIMSZqpMe
C84Mp33KE1vOf+rBi558YFluXAImBHjKkzlMmGr+VXMOWLhw4bJly44//vhg
+4D2Bx/8P3OMPYgTTjjhyCOPLD15VgOwTT8n/x599NEVKcMi9gvF2dPgTW87
ccvbT2YrMf/dLyKKQIbcFAMwtaXxW1aeVlw4O03mhGIlCY6248lgN1UykUae
rr5bE+msp6uvq9wQLaacmvGXFMZscWxMv/2qShzMPFaonnoSQaSJljRhRlP3
NZD2Cp6n8dX3kdlSpWyWmb1ETnteaB85MwPoPiiDMig/3TKrqS/uFbcHc+Zz
PvZZLbdpsVA4P0ebci+YN6uJuls7MFQneimWbIOCQ4XDa1vWwUMtB8fMln5o
dsuUN9RmzmLp5KIk04u3oKl2VyEQHhv4VpvHW8rUmU2IoDqEBzsL6EhTuUyp
5ZhbVbRjFuuCYTyuqPU81VzQsNBUztNr3/XVj/72FILadF5aC/SONv3MIoog
GlUs6kjTbbZ4jbdUR1mRb33XP/7s7y7TJNvxKslZn7/lD2/5wkcLV5OCAf6t
oTAtcyYgMKA30BdurJDAgs2jTSF5dpOVxtf1bdH7gTTscWxeTmCwRECfpzzZ
RCNzLSChsFwp8ED4HJU4AMNNKMPVSbiwDlJzTI/tj02lPSJdQlIPkt/x0Lvv
f+jdFecYoL569aOf+tR3b7zx7z/96f/+gQ9spUWJ3MITmGbz385r8vUMB7ZJ
mZP6nAOWiQrBzmsy+CjiRgv7RTGcYGabNRKwso/2a4luYX5VFfrKV/y0pTkJ
Ied0fZKvcq1YJZdeuqEEYRgaPLoEeeorHBWKOuRcPGI+cFYDSkYOK341ICrM
mVeZASKEAQWln2mI8e65F9Utj6msmHri4De/tGhcd6Ry+u26LiDQYWlejpG9
SAhq+vPbWy6A2+++7kxf5XjoXZJWNehJ9eeOTu3KyvdNBaguf+8rjzjiiEWL
FolyPe6444455pi854Fny6cfci3mDIIW4l967/tfXvaDBy/acPVJfsK5qUMO
OWTzb52060PnPPHhcwPg3amtKBNpKglQ37lpyZP3L9u1aal4XruNNaWYJ9Of
BoApiJyR3Tr2prb5hdam3qyeMKOxNN4yptlVNNQrSgURK1cpTMuBP6uJwxdP
prwNs5piPFtjrAmwpzF/9R9uyEsovd+Is5gMs3p5K/qzPXJ7ffLjweai4jyL
wOM+cmaeU0zroAzKoAzKC1jueuib2x/9Tv4Gos98uqxWEPvah76VV94Iu8MS
GWvC12bj8s8AdaO9THnqyYRfS0lRXIb2lo0u/7rQSMugCreXN37o6Tk1HGmJ
DAxet+5siC7LQQ7LJxs3nmtLHTbmQRrt8itpTAkUAP9F17TG/cqv/AqfkuYx
AfjNOCpX3XzBtZ8/f7Kl4Bxt2hHF8Emvxt5hcUzlTvro24lCkI7nptalfTUG
91iOrPL3jjZZyJktQe3n3vH6W975RrGllnICdHW/E00RAkbCBp9smtj8ZjB2
OZxzzKblp2xecSpHPbfe7E5K2m26/cmWs3V2T9Mb4oXKYIkKQqyAQU9NhfyE
EOCcLn0SEoLRoj11dyCHTYf9OkmfVHhQl7NGFGoQ+/27/j6vDNpUGDMkLzl0
bBDweOe+3vvetddf/9dB7HldccUWWhkTnbQIKyBt4KMDY/gbQSxxmhXWCpN7
iEUwrsBJmB9HCG8H6OVzBr+dKO6Sgg37Aqgu7zeektMRSCQ/ZWh4WGCYy+Xz
4PYPfejuEoq3Owb/p55A2Se2nP/E5vMDDreveQ2PMa84MoxIakieiA0qyLym
vM0TC5Y7UUYnLBdIUks8Yjs4teFiBPJa473oMfdSBhTKDe8084EsDMPQZsTL
uyLslPEFt+fDB/743LwwpmB+EpHsAloxhx9++NXvecW1lx68cOHCHBl8fvLJ
J1//gcPvuuZVwe333vv6++77VTZIvlqwYEEOw6UvRXd7NDoqB0CteUY/+NOL
8goI90s0wHLRqSjUD50TAJ9WISORQxSzCe3H3Lhn9Vk6jSuj3s9uqeIkSzUD
M4hGm7aVXvWY6iw/1QqHN5a0zU+4GIP8MwaVFg63nEp5LmZ4Il1mKitCUWX6
tMOcFcslN5XX33zjT/7zf7ihHC+q0piKb5pW+DSmrRQ/HmYu2kypEOzpY993
TD6A7oMyKIPyky9TuL1zUQbqBGHm7/YuE1xeOx7/HhSUb6+8+a61X5sC8MUw
59TlQhluymPAqprLa4FsUGIyY03jfU+3BjhnPRpq6T9qS5eXvj/HVuBVbeDy
7QBL69e/btOm8yAfRxZEB++L7TPUfOzjPbmbfGWlLpd7PoHQUuHKzy3d8pU3
b/3qrwe6A7GIExdffFcwIf9n/mX4VMBjbVKDRvxgRREHbPrdAsaPt/wplsXq
YculGENbDNgaXLVsJUv5RNO34Sv2Lf2K3X+45MmPLCVhUc7tLStPywsx+yUt
o5N+9ojznhNYy/GoQTKwELzH0NbhZL0rao9nvlhA8p+i/pZYN4hYGAChl2XH
agAaeeNX3bll+2Pf3bHze3llxOaUDNrUmRqCS+++7cGbPvM//sWnHgvYC0gL
+kLPmNMpS2PesggwN7j+bCpp4T9oyXH48HFC3IsBYAtDKCiWSLGg2Up8y2jb
BoyDyzOfe8ckgTwrfIAb3JEV+j3cZZyEnDXDb4fJ46LGqqSuFTiwX5PNj3W2
c+OSpwIR//SiJ++/MBg+HbVt1Rko9GwTT40FYUuCeD4wD2lXSCzOCXIOXRoe
bHwh2Ay8tHOR9mA46w1davywNBlQ9NWl0BJVekCXfZWaOgvaRfnbudNtOqS1
wdjHHnssto/tA0SX2hsKis4xwe3XXb7ANkGGx2GHHfarv/qrlNvvvvvCvFIn
60B2Jzo5CPmpOS1MP+cqnPPpE6h49/0XpnvTsbbhGKcoOrmLHOYWCFiBzXku
OeupBy/69pYLcvBwy5ox0gnCm0gryoZWvAdaMSZwu42YCo4WmF+PoGJmTc4m
0pqZzcClMMPf7ltzfn8f0N5lzcPTVFwsGbmpWCLpigwwjce916oKNdorDC4O
Yb88H6bKjJYBqriReyLwAXQflEEZlJ/lEmx5z6PfAdoLrtdr/cOP5gUOmfYn
WtKlzPlg+eyWR7UcI+USQcO2NAy1iNS9TndQOsfLjKbTXhRKXvT+8cJFIcni
4fC0b916foH58Sbt7ixeIHxvjm7e6T3VFfJJltfSYQCDeauWf/a84PbVty7j
OeTPTLnkknWB7hbWrEdEv4veUG+4uSyUGjDZlMPHWoIqAKxPeh9pCRNrq5fp
ARJUEBnG+ERToSyiOBcuenbK5t86KaD9+x9dGty+7XdOPbBleMSL3njNyaB7
MXhrga7HwcUqvhWsveqWtR+76fa6ltYW878S1CLYMyK4agOwV96+KXbWli1L
aXcUhR54tmvfJwnwtBdJe/ltGzJKV3xxI2D8ki7fKIr14xvPu+mz/+Mzn9l9
46f+umIJi4sOM3heFVwJeeq60v+EJMc6xXvfIleIbjAAAFRAFGravxX+51S+
9drTv3bnu97//s0lBo45E/S4YMGCChAWulucoomm6Z1/ZzQxf5+oFsEJ6E0N
1Fp4fStgU2i2wZzPN1x9EjT1xOalTz6wDJ+E8DuRkxzDkuLT5qYWB5rPTQLQ
b54auyMXxRXhTq8gzYqJ7qsw5Vzu1ms/f35eB/Wybtlf0Iz8DPdvevJ47Opn
T+WAXbt+befON+3fpT1iYqDWpIcDvI8++miueIpGKOVIYjn+3utfe8/qs4Lt
tT8f3nvv6zOB/Nmf/ZM///M3xcrzq/HEN29ekm+Rc3DymQMiJojqQ/74LbGG
0qvb17zGdhVjISUH5D3SDkMJ9tZLUwpI152ZFyc8Gx/89nA9dwyil7ZEwJNN
CcpAJSwz2fTVa5umQlPtKJmFDFruhcK0POc2KHkwgG32hWnEfFjx70WVqVl0
uAk0BbpnvFW1ashTmNOy7z0TFN/rVz+2y71fg5bYF97T8b7njvBeywC6D8qg
DMpPvtzTwXWUmOAu5Jl8sv2x7/DDB3zmfVBZH2hhgIgtqmBJ7tDak+XjxfqG
uGp6nzYlltO+yJlDTd+AAyeV9KdHpEerPIeMtSxv1q9/XZZdX4ldrbMAXZez
/2spLKJmf9HJv5DA7KaLPqNTdx9tKWwgruILFZWdCyv3nv5MR1naZjYRy6HO
IuANA4Oh9LEmiV8tdBXQt7hJtZjWCmulHm1qk1b/osrP6UnW49zyAwdwbvzN
E7b+9il8yPxpAHYpENLcA1+LusNEgo1z+xkVGCkGybqHHynmBv9eNVI9XOgO
QN4IzkF0eeKJX9u9+63btl1QsYdzmwq6YQal53PhlhUjCVeI6HRRAEwAZq5+
3XWP5NUfJwWTYGycH5QPvuJuS+Utu/7lG/Pa8LUHue51lFswUHMkQ4MgufYY
/2wozPZC9bnNAJjg9g9/+J7A43TyZZdtvOKKLQFghx12GKHFl3aJeyoItwYY
z6Suy4OoUAt9mBr64zkHM38mWqYwvmuRpGA/9sLu+y9Ma9OqINgdn3zdVDac
TUvTTlQZdzSnqfFjCvGrsxcCqvts9uKii/d0F1zu9nQI8szuUgNUGOzWr74l
LzKPc5qOqygSzna8Mn7+FPKSU2lhNy/Zvfs3vv/939y16025BN5+PifPnjYE
tPPD843nxGBFWpFp3qJFi+7/o3Ny1zmMXRAsvWPHG7Zvv+j++9+Yl90K/Pmc
m8vlq1d2BRWnFJnQYMir1sDL85XhV6gCkfkYETEH0qSYaUU9KiEj9hGtJ0Ox
dCbZcRXmj3xVIlflh+dXAcLt0JkcjCuDnw+B57lEA8x7sLep2OyKlWRme1mX
NncqpKiTriqeTG1K1iZpTbmTXeLdOS27x1hLtMfwN1zNkHuuTXuS2+vz5xqd
utdSBMWhvTne9zEEdQDdB2VQBuUnXGD1/J32SV5kDPNGXGopn4hUrXgiXiDh
nODicBNa55CHSOe2NNZgz3grINzclgIJpuKTgX/UXxM17iUwX8GwFqmKE2Ri
FFAfarSToTYbayTkU0T6oW6h4YHhEcryCkiYnDmmdAL+bSmEVAgA0mah8cK6
RS6a0Wndw1SzW3KT4m9b1youdajpM4y3rJccd5ZgcI7RVMx2SH5WU5iE+YF/
9wvCyTIJopMc2a/TycR+33jNybs2Lw2cm9epYnK5A6scp/kXVl//9Ue9yWv5
bRuQH0BuWhZjTb6PO7qUUjhjyR6mwkCvJ5986xNPvPnuuy+c1wmeMw1gSLWx
I/jqsWtKs8V2j9oqIrgoInNayiHPi6WJ3v/SlgyXN/hlXcLQaz9//pe/8bYn
//xX87rv0X+54osbMRzU4xnxWvOXktYUHSnAFvEjd2HMuG5gG1pyjgmiu/u6
MwPgA9336xIz/YOWttXIqd0KzmewFvxjcdQw0I2pFk/M+MmbgEAjASkFeBPF
4JcCfeE7pfJ7Vp/1xOal991wdmWP8riNGXoyZQke0OnMB4UGBqsW65sBUvR7
Q52VWsGPL+lSi+qiXHr1rctiKPkV7NekPu0acKEbk0WMrx2uWOjdmPm1UjKv
HEmB3Mvf+8o1VxzmuejzdEglVEqzTzrppNNOO+2YY47Bfs9ZRx555AMP/OOA
85Xvm3/vPz/03puORlzPV5pBNDLWzVMPXrR9zWvsSsDttlREBx966KF2+iB2
d82ARdQ56qijjjjiiPzNkenG9PyWlafJLUWaybD3WG03FGeM+grjdP+Wds3U
qhnmao/YbIb3jh9Yvg4j2SOukMzC7TU7iWE3bxPIzZHrrjxh/VUnTnbaX6bT
op3UhGzeFuVqv9WoNjhNmDWt7RX6cl/sddl6PlSZfinaTNGE+hbBPtLdB9B9
UAZlUH7qJdAdPRt6r0lpRhNdn2jZi4A9BBib+H0hFOJ+hZ14V6bFwI60LH7c
gOW356sBO5GlrTIlkoDGUOCfw2rDhnM2b14CJBTZkrt4qJfgu95DIOVp5/zx
LxYxPQc3mNokKtr8F2/e8pW3EEgZ6/KM17L4vvetf8977gRWa0UA8zBYQHRY
0WpuG6J87MXtqbVprEki6/Pyq+/X1MhFXBY0tWTD6rWgqxnec1ZuTaomeWqC
GQpyB8zvvv/CnRuXwJD8xqXfAlxleASxr7x906o7twRC531wO9oqA8GzQxSx
gqsfw4GmR8lTbNx4bmBYIFNeiOt1a/y0kHNtGaAhibskY8gwRC3mDHcwRz2P
MVuAp9e+A64CRzc2BT2ZrV99y1N/+vqn/uwN2x99/JovrHf7pa8iprJo9i6E
+s6t7UJze2qZ4112Xc7bup2gxwD42EeYG5g8NfzgGV5KXne3uV9LGsuZaZsg
94IapP8nOsm+XBF6NFR4rZmcMTEq3AAM9kPjV+evLnl2+wV+mAd1GZfw7bHc
JUUVqskDT4mxROAZGnOaFs0BLW+XalVowHhYwLC9mP1bwqZStqkobFwgFoSg
VJo2aUZsovs+eWRw++LFi3F7kO2D25mH6OiHH3746aefDkXnrLzJ8Jsahzcc
8aV/cdi9Nx1FmCgQnfM8ADs1CzhFMdJURh8rAyE8TZpsavPiQWxUaSdmDjWb
VBsbOZeQkZZEf3U+Nn5NSkx48Q683/XTzl/Gi91D5k85UhDtTInmFhOsqaPc
5qZTW3V2Le2tODHX7SNbP7eaafu7mUU8M4Ah/NpJGWuJgydbouS9LkNmhr1+
tY88ln0se9JmpinY/Mhr7csxgzIogzIoL16hhULCfa/TESBq3q4ZL5Nw/5gC
tOWyLvUwqwm/0OyWxpFzeGZL9AP/m7oLA9cBvOulXfZD/+GGc3bvfuuuXb+G
e1nA2KKmKhN+n9YISJQPyt+6zSz3HOYOzpvlnz3vS99425avvNnWM3coHJX3
q1c/mtdwp7dQa99wE9JxL+CTtV7zymNWbPZyvEPjheWqA8slO9wSUY23WFfA
DK4baZlHans6yz2/urse66j7Us9AC1yyU5Ijm5cGVFiCocEiBsBX+SrjZMUX
N6aXAtrzEhSJN1LBy2BhPnQJYY9sOs8FAnRYMFWeIO+6gERY1PFiElNyrZgM
lRcVGJjTBGccX4mfjBB0fXBCOG2xmkUcFNRPWXXzBbv/7PVP/vmbtz/2nVgl
AglhVwYIG8R7jxVqoqGEwaINnjin96GHHmorAU6m+5cXuvuWlafJnFUBI3ZP
5jQVR3fnXmxm4d6ztvKw8gKPYfX3v3/z5ZdvYqpgRKdLjzzySO/R4MdaAjKK
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
kW7hXc9ry8rTygZh47PgsP76uN0Tn2iapTIybFt1RtqfBognGm8qTD948KKp
GNL7l/n3vt8/a9PbTpzZZLVMfR70RBeTTsKdnI4JyhTkl9LfrHQVuZZKGWxa
Kbtj2izt6vtCWd/z22nAfnhvZVaTFHvxXPSjTUBswJkZlEEZlH0s/Jkvnr1v
SQ16CYbJBJg3l1220aRn6XSYxQVPA0W2dr37Te0j9qG2AAW32+wuZiwYPK/l
WKwYxv65M3uSaOV+7zd7pCe3OPp02YEZLXFq/xSbC7gl5cAEgSoODhguGF+8
aECae7no9wAtN3jqB3eHOz038t3WrIlOrMZdVEv4zys6rBamWT3Z9hQoEbeh
6KATnRoGNE6kEawabqIQBVlHe5kE8/7Km+/a8qUH//Tf/Ot/9e/+7Z/9m38d
CD3SBDC1hz5JGoPUXWFuemO4R/g0LOkxlr1TfV5bDKUbU+xxiNTOfmme2N8v
PAOoeM8bPLdlGcBLgaCKnE84USpShhgpS9CxQhpnd3I34CjBUtsuMVQz5oFS
h430pDsnm2AjCwICF++pAWkPbMORC3VD1KDmAV02Iu3hdua5rQ8dJsAT472S
+MDtzCK4HTxO/X5WOi33HhCL6YTzQAioYmbp5JRQPBpM2oASU57tEkKRZRV9
yFfaWcZ4+ge8F5FaiUHRjSpMY7ypm2bw4KLbDgiahYH5yRnUxrNfXP0isLDm
dZrwtfFkJJCLCW73Nxg+UPzVr341KUjaknnD3JP/98gjj1y8eHHGj+1C9prQ
UT2Zv4H6Rx11lKxPxhLDxM5CbM9r79hsA8VOnAdN5vG4444jIwNpo+Xk9Dya
3R11Rwg/bh5eWW3fGKvDTRdLX9HGrAS4E0090g9Tj+WrJ7ac/9SDF+3avDTA
PlfJbdYYntMl7bJtIaIkLRTPO97kvPKbXXflCeuvOhFb0m+8pqbSlslrT9n2
oaZIWRNvbXvtu6d6xoznljt1GqrvA/tZPX3gKs/HRW83wWN6TicOyqAMyv+c
ZWRvwukvYIEhBesJr0OYmdXSIQ31lN6xiIs8Y1UdejpiN3kC+YjTUyk7Ny0p
aF0IfEaTSbTEz2q6lEUDLjjNO12iCprdd7NXlFbdF2NnGpgf6WTbbT3bo6/k
9UUOmdnyog43fRXLEBf6rKYtU34YeMNhB3W5BTlphb9p1YyeTPFwC8iaaNkJ
+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
gvFxWVKaAr0bYbabpQJSRHwhuLtimIoLE+N2Z3n4g9XA7o5zPJ1cANcoxu2Z
yLnLv/qwdji/FkqUFszekFg1lPEqL/lSHJNvefu1W2ba0rb1z5gsWbJkyd60
Bk8mg8qK16Br/VR9LDZqqQxt/b68FYzImJB/Bxlsz5zLYKwMOgIKElVueUCt
PYk9c/mgZKCgUmtDIKmUw+2V5pxkcHU74AolhjncaaedwMPEw3U8xS4F3QXg
p0yZx1ugboNqgLTLM/WJiAqmCyN8jQolaaEy53J2hsKm9ZCb6VWJWmDsZ/pQ
a6PoEk8CH7coZTxv8Uw69dX43MRyZsYRcvbL3aC4bWco51oLcotmAWWQecEc
DtWSWYF5radk9no1yjltd3zGfdvKfJiMJdCeLFmyZMm2prHsnoG1BUvM1YFK
lBcYRVWGts2MFeCTahDoqwxFsD1/umqhhklsjrXme1vPkdgrUS5ANSKok6RZ
kK4Yd6zYO8tExdFFjA/If1wd2GGHHQgpC7fXQ/Ui+gn/AU9NmwC8K3gacGbc
qD7NCpBxx8CKhNaJP8eAnLHgHbiQK/PmgdcigndmgH32jbPH2QG+RrVmXVed
EcH2zqgkPR/x686QD9sVyr/Wm9rmyOM4ct4RadGXnDEPZAi977yZAVWSsuIA
ezESruZyYbYmHyZjCbQnS5YsWbKtabVmScc8bi9AuQNTfdy21me4uzNIeQwA
/7S0/AO93lt4pKWB8DNA1Pxe76kFKe84uFoNUo39oiL0CZAuu23u6g2/0aYX
BHXjIbSMRQsqEyjefvvtoYXEoiiC7rNn/wbcTlJD/rzlw7OVIGRqoO4oesx1
6ewtpQKKjv0FdVjd1mtEe/TX1Jr4XH3iNCZN0Br1y5iaAid//ZKxlG2dfuvY
q24bR4fNgfFNEptXWGAEMZnx8QO4Y5mT/n6qpOUpLsVes2/mkmtS24oP07In
27ADyZIlS5bszWa1IOhRErcPFazdytYnGcD+y1AtJbQkJ9QKE07Pm33Pt9Zu
0vblW+dWoqCxcWYtSjnMYAZH4/vVyT6nRQcYt9+/7kW9BjpmoHtmjIKshIVB
73TYByAVIug+Y8ZT7c5bC1ox7W62Wkiq1bkI72coH0yXIHEBuDUMJo5NV3/y
s7nP/+p+bUB3JvmSc96hLZ7zOH6eCX1Tago07sg5V0cvwO1Lpx/G5HRERYgK
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
    "], {{0, 983}, {
    1000, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Magnification[0.5],
  ImageSizeRaw->{1000, 983},
  PlotRange->{{0, 1000}, {0, 
   983}}]],ExpressionUUID->"b502b1e3-c005-4f94-88a0-3a009af6929e"]], \
"Text",ExpressionUUID->"7dc95cd6-f322-4707-847e-2dc63adf4b1a"],

Cell["The image was generated using the following code:", \
"Text",ExpressionUUID->"46ee495f-3769-4ab8-b8c2-fd55fee97b1a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"lg", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{"{", 
     RowBox[{
     "\"\<NetworkGraph\>\"", ",", 
      "\"\<CondensedMatterCollaborations2005\>\""}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"lg", "=", 
   RowBox[{"IndexGraph", "@", 
    RowBox[{"Subgraph", "[", 
     RowBox[{"lg", ",", 
      RowBox[{"First", "@", 
       RowBox[{"ConnectedComponents", "[", "lg", "]"}]}]}], "]"}]}]}], 
  ";"}], "\n", 
 RowBox[{"c", "=", 
  RowBox[{"IGCommunitiesMultilevel", "[", "lg", "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"pts", "=", 
    RowBox[{"GraphEmbedding", "@", 
     RowBox[{"IGLayoutDrL", "[", "lg", "]"}]}]}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"this", " ", "takes", " ", "a", " ", "while"}], " ", 
   "*)"}]}], "\n", 
 RowBox[{"figure", "=", 
  RowBox[{"Graphics", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"GraphicsComplex", "[", 
     RowBox[{"pts", ",", "\[IndentingNewLine]", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"White", ",", 
          RowBox[{"AbsoluteThickness", "[", "0.3", "]"}], ",", 
          RowBox[{"Opacity", "[", "0.05", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Line", "[", 
           RowBox[{"List", "@@@", 
            RowBox[{"EdgeList", "[", "lg", "]"}]}], "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"AbsolutePointSize", "[", "2", "]"}], ",", 
          RowBox[{"Opacity", "[", "0.7", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"MapIndexed", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"ColorData", "[", "45", "]"}], "@", 
                RowBox[{"First", "[", "#2", "]"}]}], ",", 
               RowBox[{"Point", "[", "#1", "]"}]}], "}"}], "&"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"c", "[", "\"\<Communities\>\"", "]"}]}], 
           "\[IndentingNewLine]", "]"}]}], "}"}]}], "\[IndentingNewLine]", 
       "}"}]}], "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Background", "\[Rule]", "Black"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 Evaluatable->False,ExpressionUUID->"d180e964-ed48-4ab5-96ab-f0920c460666"],

Cell["\<\
\[ShiftKey]-\[EnterKey] evaluation is disabled in the cell above to avoid \
running it accidentally. Running the code takes about 2-3 minutes on a modern \
computer. Copy the code to a new cell to try it.\
\>", "Text",ExpressionUUID->"54d6d959-6329-47d4-b030-576c38150a06"]
}, Closed]],

Cell[CellGroupData[{

Cell["Gallery", \
"Subsection",ExpressionUUID->"1b1014e5-de61-4329-b984-f7481153f915"],

Cell["\<\
Create galleries of the various graph layouts available in IGraph/M.\
\>", "Text",ExpressionUUID->"30340fbd-b78f-46ad-b245-997faf612922"],

Cell["Visualise a tree graph with all layouts.", \
"Text",ExpressionUUID->"714095a0-cbd9-4a7b-bcb4-883c611dc0bb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"IGBarabasiAlbertGame", "[", 
    RowBox[{"32", ",", "1", ",", 
     RowBox[{"DirectedEdges", "\[Rule]", "False"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"layouts", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Graph", "[", 
      RowBox[{
       RowBox[{"#", "[", "g", "]"}], ",", 
       RowBox[{"PlotLabel", "\[Rule]", "#"}], ",", 
       RowBox[{"LabelStyle", "\[Rule]", "7"}]}], "]"}], "&"}], "/@", 
    RowBox[{"{", 
     RowBox[{
     "IGLayoutCircle", ",", "IGLayoutSphere", ",", "IGLayoutDavidsonHarel", 
      ",", "IGLayoutDrL", ",", "IGLayoutDrL3D", ",", 
      "IGLayoutFruchtermanReingold", ",", "IGLayoutFruchtermanReingold3D", 
      ",", "IGLayoutGEM", ",", "IGLayoutGraphOpt", ",", "IGLayoutKamadaKawai",
       ",", "IGLayoutKamadaKawai3D", ",", "IGLayoutRandom", ",", 
      "IGLayoutReingoldTilford", ",", "IGLayoutReingoldTilfordCircular", ",", 
      "IGLayoutBipartite", ",", "IGLayoutPlanar"}], "}"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Multicolumn", "[", "layouts", 
  "]"}]}], "Input",ExpressionUUID->"4e70cc31-6a3d-4679-a3da-196bc2735f76"],

Cell["Visualise a polyhedral graph with all layouts.", \
"Text",ExpressionUUID->"83955cd5-0f8f-4ddd-9845-8bdaf5429ba0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"GraphData", "[", "\"\<DodecahedralGraph\>\"", "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"layouts", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Graph", "[", 
      RowBox[{
       RowBox[{"#", "[", "g", "]"}], ",", 
       RowBox[{"PlotLabel", "\[Rule]", "#"}], ",", 
       RowBox[{"LabelStyle", "\[Rule]", "7"}]}], "]"}], "&"}], "/@", 
    RowBox[{"{", 
     RowBox[{
     "IGLayoutCircle", ",", "IGLayoutSphere", ",", "IGLayoutDavidsonHarel", 
      ",", "IGLayoutDrL", ",", "IGLayoutDrL3D", ",", 
      "IGLayoutFruchtermanReingold", ",", "IGLayoutFruchtermanReingold3D", 
      ",", "IGLayoutGEM", ",", "IGLayoutGraphOpt", ",", "IGLayoutKamadaKawai",
       ",", "IGLayoutKamadaKawai3D", ",", "IGLayoutRandom", ",", 
      "IGLayoutPlanar", ",", "IGLayoutTutte"}], "}"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Multicolumn", "[", "layouts", 
  "]"}]}], "Input",ExpressionUUID->"3c460ad1-bedc-423a-b0e6-52d45efc22f4"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Community detection", \
"Section",ExpressionUUID->"936f125f-91e1-47b6-8bb4-9f67e58f1be6"],

Cell["The following functions are available:", \
"Text",ExpressionUUID->"24ba5fa4-dd05-4bf4-abad-08e33fe7982f"],

Cell[BoxData[
 RowBox[{"?", 
  "IGCommunities*"}]], \
"Input",ExpressionUUID->"90a268bf-a668-4304-85c9-c1e72402ee36"],

Cell[CellGroupData[{

Cell["Concepts", \
"Subsection",ExpressionUUID->"8273bb68-465b-4de9-8a15-9879c54aa588"],

Cell[TextData[{
 StyleBox["Modularity",
  FontSlant->"Italic"],
 " is defined for a given partitioning of a graph\[CloseCurlyQuote]s vertices \
into ",
 StyleBox["communities",
  FontSlant->"Italic"],
 ". It is defined as"
}], "Text",ExpressionUUID->"8205e9f5-dd64-4729-98e3-3be19d524013"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"Q", "=", 
    RowBox[{
     FractionBox["1", 
      RowBox[{"2", "m"}]], 
     RowBox[{
      UnderscriptBox["\[Sum]", 
       RowBox[{"i", ",", "j"}]], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         SubscriptBox["A", 
          RowBox[{"i", "\[InvisibleComma]", "j"}]], "-", 
         FractionBox[
          RowBox[{
           SubscriptBox["k", "i"], 
           SubscriptBox["k", "j"]}], 
          RowBox[{"2", "m"}]]}], ")"}], 
       SubscriptBox["\[Delta]", 
        RowBox[{
         SubscriptBox["c", "i"], "\[InvisibleComma]", 
         SubscriptBox["c", "j"]}]]}]}]}]}], ","}], 
  TraditionalForm]], \
"DisplayFormula",ExpressionUUID->"c3533a7c-22e1-43d5-971d-432252da0e71"],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "9917efbb-a938-4d24-a92b-2101d6e4a738"],
 " is the number of edges, ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "22737ecb-8bd6-4216-915f-4c8b3b1fbf3f"],
 " is the adjacency matrix, ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "i"], TraditionalForm]],ExpressionUUID->
  "f62de5c4-f51c-4d11-8552-448ed55df861"],
 " is the degree of node ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "73fa38d5-e199-472f-a5d4-c47df36378fd"],
 ", and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["c", "i"], TraditionalForm]],ExpressionUUID->
  "612454cc-7bed-4100-afdf-c60dba8fea20"],
 " is the community that node ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "81f0ca61-fb2f-4bbc-ade8-7bbbbfb6b0c4"],
 " belongs to. ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Delta]", 
    RowBox[{"i", "\[InvisibleComma]", "j"}]], TraditionalForm]],
  ExpressionUUID->"ae5e7230-ad2d-4572-ab9e-455c3c4b5f5c"],
 " is the Kronecker ",
 Cell[BoxData[
  FormBox["\[Delta]", TraditionalForm]],ExpressionUUID->
  "a37fa304-4613-4fe7-9109-fe99f43805b7"],
 " symbol. For weighted graphs, ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "267e3d0e-dc4b-4291-8d20-8c775f556a69"],
 " is the weighted adjacency matrix, ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "i"], TraditionalForm]],ExpressionUUID->
  "53e1ae39-7e2a-4235-89d3-ea2a79b09655"],
 " are the sum of weights of edges incident on node ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "28732075-7fa6-4356-a838-47457ec273fc"],
 ", and ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "3ba65b6d-518d-4ee2-8693-a9b6437fd2b5"],
 " is the sum of all weights."
}], "Text",ExpressionUUID->"8e214ee5-9e3c-4d9d-9e18-cb8549aa3b66"],

Cell[TextData[{
 "Modularity characterizes the tendency of vertices to connect more within \
their own group than with other groups. For a given partitioning, it can be \
computed using ",
 Cell[BoxData[
 "IGModularity"],ExpressionUUID->"0e1737c0-c6de-4542-bcfe-1a6de5696de6"],
 ". Community detection functions find a partitioning of the graph which \
results in high modularity."
}], "Text",ExpressionUUID->"c11fee25-659a-49d2-9ede-c257fdd6356c"]
}, Closed]],

Cell[CellGroupData[{

Cell["Basic usage and utility functions", \
"Subsection",ExpressionUUID->"901cc908-6911-43e0-99fb-b242f9c4ea9c"],

Cell[TextData[{
 "Community detection functions return ",
 Cell[BoxData[
 "IGClusterData"],ExpressionUUID->"0c92f110-96b9-4563-b0c9-a8d71c6e1a1c"],
 " objects."
}], "Text",ExpressionUUID->"37dea2e9-8e6d-488d-85d5-6cfdc0e14889"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"ExampleData", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<NetworkGraph\>\"", ",", "\"\<FamilyGathering\>\""}], "}"}], 
   "]"}]}]], "Input",ExpressionUUID->"5dd9befc-53a1-436e-af4e-58d3b08233bc"],

Cell[BoxData[
 RowBox[{"cl", "=", 
  RowBox[{
  "IGCommunitiesGreedy", "[", "g", 
   "]"}]}]], "Input",ExpressionUUID->"1c8262de-c098-4d73-b626-3475223f1635"],

Cell[TextData[{
 "The data available in the object can be queried using ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"IGClusterData", "[", "\[Ellipsis]", "]"}], "[", 
   "\"\<Properties\>\"", "]"}]],ExpressionUUID->
  "1b859d6e-ace3-4a15-a8b0-b18e8cc142ce"],
 ". See the Examples section below for more information. In ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " 12.0 and later, ",
 ButtonBox["Information",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Information"],
 " can be used to get a quick human-readable summary."
}], "Text",ExpressionUUID->"152e33a9-caa6-4498-a657-2db2d7c817a5"],

Cell[BoxData[
 RowBox[{"cl", "[", "\"\<Properties\>\"", 
  "]"}]], "Input",ExpressionUUID->"a35d19fc-a799-47c8-b845-81a9304b1b74"],

Cell[BoxData[
 RowBox[{"cl", "[", "\"\<Communities\>\"", 
  "]"}]], "Input",ExpressionUUID->"6357dbd4-14fc-40d2-966b-df70f0a94782"],

Cell[BoxData[
 RowBox[{"CommunityGraphPlot", "[", 
  RowBox[{"g", ",", 
   RowBox[{"cl", "[", "\"\<Communities\>\"", "]"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], 
  "]"}]], "Input",ExpressionUUID->"8092978c-876d-450a-8c21-8710814c8ae2"],

Cell[BoxData[
 RowBox[{"IGModularity", "[", 
  RowBox[{"g", ",", "cl"}], 
  "]"}]], "Input",ExpressionUUID->"923c4c17-7729-408c-ad88-83cc59224de8"],

Cell[CellGroupData[{

Cell["IGClusterData", \
"Subsubsection",ExpressionUUID->"c97e25c5-8eff-4387-ab26-d08c2923c8c5"],

Cell[BoxData[
 RowBox[{"?", 
  "IGClusterData"}]], \
"Input",ExpressionUUID->"cc384d24-6f92-4f71-8247-5b7871a5f4f1"],

Cell[TextData[{
 Cell[BoxData[
 "IGClusterData"],ExpressionUUID->"96fd34b7-4054-4baf-aeda-d267415e85ce"],
 " represents a partitioning of a graph into communities. This object cannot \
be created directly. It is returned by community detection functions. See the \
Examples section below for more information."
}], "Text",ExpressionUUID->"eead296e-dbd4-44ac-864f-dd81266c4014"],

Cell[BoxData[
 RowBox[{"cl", "=", 
  RowBox[{"IGCommunitiesLabelPropagation", "@", 
   RowBox[{"ExampleData", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<NetworkGraph\>\"", ",", "\"\<FamilyGathering\>\""}], "}"}], 
    "]"}]}]}]], \
"Input",ExpressionUUID->"b3c72c3a-8e31-4668-b734-213b7ad7e206"],

Cell["Query the available properties.", \
"Text",ExpressionUUID->"73bf8735-1da3-4eb7-bf40-582aa41b329b"],

Cell[BoxData[
 RowBox[{"cl", "[", "\"\<Properties\>\"", 
  "]"}]], "Input",ExpressionUUID->"9a352754-891d-4482-8a34-8e67488346a2"],

Cell["Retrieve the communities.", \
"Text",ExpressionUUID->"0508c96b-1062-485a-b252-16fc7a3c99db"],

Cell[BoxData[
 RowBox[{"cl", "[", "\"\<Communities\>\"", 
  "]"}]], "Input",ExpressionUUID->"f73673f4-38fc-437e-b5fa-b0b94e1af63b"],

Cell[TextData[{
 "When the ",
 Cell[BoxData[
 "\"\<Modularity\>\""],ExpressionUUID->"4e95b1f6-a32f-4dc6-973a-7d31d20fa631"],
 " property is available, ",
 Cell[BoxData[
  RowBox[{"Max", "[", 
   RowBox[{"cl", "[", "\"\<Modularity\>\"", "]"}], "]"}]],ExpressionUUID->
  "cfe40ab6-a485-4d53-9801-5dc37f43df1a"],
 " gives the modularity of the current partitioning."
}], "Text",ExpressionUUID->"3f3ee0ff-51fd-444b-b9a0-d8a6e2e1a984"],

Cell[BoxData[
 RowBox[{"Max", "[", 
  RowBox[{"cl", "[", "\"\<Modularity\>\"", "]"}], 
  "]"}]], "Input",ExpressionUUID->"7effcea6-e609-4e51-9a41-263a61f76192"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGModularity", \
"Subsubsection",ExpressionUUID->"5d08b147-d4e7-4bf1-9843-dbf5516e8761"],

Cell[BoxData[
 RowBox[{"?", 
  "IGModularity"}]], \
"Input",ExpressionUUID->"3f7514eb-2c6d-48c3-b0fe-3987fe1c043c"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGModularity", "[", 
   RowBox[{"graph", ",", "communities"}], "]"}]],ExpressionUUID->
  "fa08bc32-48e6-475c-9ce3-309fdb9a98f3"],
 " is equivalent to ",
 Cell[BoxData[
  RowBox[{"GraphAssortativity", "[", 
   RowBox[{"graph", ",", "communities", ",", 
    RowBox[{"\"\<Normalized\>\"", "\[Rule]", "False"}]}], "]"}]],
  ExpressionUUID->"5938fc9e-e6bc-4cbf-905f-0c56fa5f9a98"],
 "."
}], "Text",ExpressionUUID->"d12a502c-09a3-4f88-874e-411636bfbd62"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGCompareCommunities", \
"Subsubsection",ExpressionUUID->"454e7336-20e4-4e70-8a3c-b38639528b25"],

Cell[BoxData[
 RowBox[{"?", 
  "IGCompareCommunities"}]], \
"Input",ExpressionUUID->"1520b29f-9278-4f1b-865c-8d598f097d8d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<NetworkGraph\>\"", ",", "\"\<FamilyGathering\>\""}], "}"}], 
    "]"}]}], ";"}]], \
"Input",ExpressionUUID->"a7274fd0-d3b7-4535-89af-142e888a8bd1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"cl1", ",", "cl2"}], "}"}], "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"IGCommunitiesGreedy", "[", "g", "]"}], ",", 
    RowBox[{"IGCommunitiesEdgeBetweenness", "[", "g", "]"}]}], 
   "}"}]}]], "Input",ExpressionUUID->"eda1c826-6862-451a-9bbb-abaa9ffa87dd"],

Cell[BoxData[
 RowBox[{"IGCompareCommunities", "[", 
  RowBox[{"cl1", ",", "cl2"}], 
  "]"}]], "Input",ExpressionUUID->"e26fb495-accc-42cb-ae57-eeed10722a0a"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Community detection methods", \
"Subsection",ExpressionUUID->"c1d995c9-e58f-495a-badc-3fbfe1829747"],

Cell[CellGroupData[{

Cell["IGCommunitiesEdgeBetweenness", \
"Subsubsection",ExpressionUUID->"8f10ab14-3e69-46cb-b7d7-a136b2fba8b5"],

Cell[BoxData[
 RowBox[{"?", 
  "IGCommunitiesEdgeBetweenness"}]], \
"Input",ExpressionUUID->"756fc83f-ff31-4936-b321-f259ac244d3c"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGCommunitiesEdgeBetweenness", "[", "]"}]],ExpressionUUID->
  "c2735897-646a-49ca-8b16-bc718dbbd563"],
 " implements the Girvan\[Dash]Newman algorithm."
}], "Text",ExpressionUUID->"8c51a20c-de11-41c9-8369-bbf9a7ab6441"],

Cell["\<\
Weighted graphs are supported. Weights are treated as \
\[OpenCurlyDoubleQuote]distances\[CloseCurlyDoubleQuote], i.e. a large weight \
represents a weak connection.\
\>", "Text",ExpressionUUID->"f2cc08ac-b1bd-43f7-b7eb-2841ccd9eb8c"],

Cell["Available option values:", \
"Text",ExpressionUUID->"4178550c-d8a0-4db2-b4dc-861f3631e085"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<ClusterCount\>\""],ExpressionUUID->
  "8040066d-c28f-4da6-afb3-6338b62c1676"],
 ", the number of communities to return. Default: ",
 Cell[BoxData[
 "Automatic"],ExpressionUUID->"9ad9bf8e-2f09-495e-8da1-29994dd460d9"],
 "."
}], "Item",ExpressionUUID->"b4376456-17b1-4004-acd1-c7a46b1c48b3"],

Cell["Special properties returned with the result:", \
"Text",ExpressionUUID->"92dafc9f-f40d-42b3-8083-efdb94b27b77"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<RemovedEdges\>\""],ExpressionUUID->
  "b32ad46e-247f-45df-b219-5130430a9824"],
 " is the list of edges removed in each step of the algorithm."
}], "Item",ExpressionUUID->"1ca141be-85a1-4e8a-a399-bf58d78347e1"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<Bridges\>\""],ExpressionUUID->"c22d30f8-ed24-4592-8b07-eebdfa5df699"],
 " records the steps which resulted in splitting the graph into more \
components. "
}], "Item",ExpressionUUID->"305f9929-091f-433e-99ba-771550028218"],

Cell[CellGroupData[{

Cell["References", \
"Subsubsubsection",ExpressionUUID->"70f434ff-8326-4c12-a743-209385f07ab9"],

Cell[TextData[{
 "M. Girvan and M. E. J. Newman: Community structure in social and biological \
networks, ",
 StyleBox["PNAS",
  FontSlant->"Italic"],
 " 99, 7821-7826 (2002)."
}], "Item",ExpressionUUID->"b89beb8d-0c29-44bd-9b70-d3383c582d00"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["IGCommunitiesFluid", \
"Subsubsection",ExpressionUUID->"e4c37e74-cb01-4634-a4c7-8abecfe9c5af"],

Cell[BoxData[
 RowBox[{"?", 
  "IGCommunitiesFluid"}]], \
"Input",ExpressionUUID->"bb1e78da-c299-491e-ac93-a10fea22873a"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGCommunitiesFluid", "[", "]"}]],ExpressionUUID->
  "c96a24c6-55a5-4096-bdbf-d9d84549ea9a"],
 " implements the fluid communities algorithm."
}], "Text",ExpressionUUID->"87d2126d-3a35-4b11-b6d8-c488118b79bd"],

Cell[CellGroupData[{

Cell["Reference", \
"Subsubsubsection",ExpressionUUID->"ffb39f02-c1cc-4e17-84c1-8499350b5053"],

Cell[TextData[{
 "F. Par\[EAcute]s, D. Garcia-Gasulla, A. Vilalta, J. Moreno, E. Ayguad\
\[EAcute], Jes\[UAcute]s Labarta, U. Cort\[EAcute]s, T. Suzumura: Fluid \
Communities: A Competitive, Scalable and Diverse Community Detection \
Algorithm, ",
 ButtonBox["https://arxiv.org/abs/1703.09307",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://arxiv.org/abs/1703.09307"], None},
  ButtonNote->"https://arxiv.org/abs/1703.09307"]
}], "Item",ExpressionUUID->"8f7d1cc3-3cba-41d3-8733-6b1cd8100458"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["IGCommunitiesGreedy", \
"Subsubsection",ExpressionUUID->"6ddd00fd-77e9-415b-8962-bab06873a800"],

Cell[BoxData[
 RowBox[{"?", 
  "IGCommunitiesGreedy"}]], \
"Input",ExpressionUUID->"b990fb22-52e9-4cba-bcc5-469e0606c9d3"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGCommunitiesGreedy", "[", "]"}]],ExpressionUUID->
  "501591e4-e6a2-4842-a2ed-5ab310729471"],
 " implements greedy optimization of modularity."
}], "Text",ExpressionUUID->"43433eac-4ac7-4568-8207-67bc57f2f35a"],

Cell["Weighted graphs are supported.", \
"Text",ExpressionUUID->"b802fb35-498e-4fda-b36c-1ccec37c5ef0"],

Cell[CellGroupData[{

Cell["Reference", \
"Subsubsubsection",ExpressionUUID->"fc423af2-9b63-48ef-a2f5-97c4690554ab"],

Cell[TextData[{
 "A. Clauset, M. E. J. Newman, C. Moore: Finding community structure in very \
large networks, ",
 ButtonBox["http://www.arxiv.org/abs/cond-mat/0408187",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.arxiv.org/abs/cond-mat/0408187"], None},
  ButtonNote->"http://www.arxiv.org/abs/cond-mat/0408187"]
}], "Item",ExpressionUUID->"7b4ff314-e76c-4dbf-afce-70279c2665e5"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["IGCommunitiesInfoMAP", \
"Subsubsection",ExpressionUUID->"b9d31111-d569-4cb1-8ce1-1b07cde30dad"],

Cell[BoxData[
 RowBox[{"?", 
  "IGCommunitiesInfoMAP"}]], \
"Input",ExpressionUUID->"96eb3813-df08-48e3-9430-5cef77385c37"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGCommunitiesInfoMAP", "[", "]"}]],ExpressionUUID->
  "f2169028-23d3-42eb-a654-5b1876a97fe7"],
 " implements the InfoMAP algorithm."
}], "Text",ExpressionUUID->"7a200817-ca99-4a9e-a08d-7d17c5c1288f"],

Cell["It supports both edge weights and vertex weights.", \
"Text",ExpressionUUID->"9e001bf2-cdf0-4a5a-84dd-33dd3591b8b3"],

Cell["The default number of trials is 10.", \
"Text",ExpressionUUID->"2ad31c05-38d1-4c72-822e-41d307997f5b"],

Cell["Special properties returned with the result:", \
"Text",ExpressionUUID->"8a92dc07-b8d7-4ed7-ad58-2cead7059185"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<CodeLength\>\""],ExpressionUUID->"b62e1616-c3fd-4632-a250-691f36bed3d5"],
 " is the code length of the partition."
}], "Item",ExpressionUUID->"faa1a2ca-4b92-4308-87a5-6b62bd092c1e"],

Cell[CellGroupData[{

Cell["References", \
"Subsubsubsection",ExpressionUUID->"a3247e92-6e99-46d7-a501-aca1f4a385e6"],

Cell[TextData[{
 "M. Rosvall and C. T. Bergstrom, Maps of information flow reveal community \
structure in complex networks, ",
 StyleBox["PNAS",
  FontSlant->"Italic"],
 " 105, 1118 (2008)"
}], "Item",ExpressionUUID->"abe5fca1-8fb8-40bf-a70f-824f4f00717c"],

Cell[TextData[{
 "M. Rosvall, D. Axelsson, and C. T. Bergstrom, The map equation, ",
 StyleBox["Eur. Phys. J. Special Topics",
  FontSlant->"Italic"],
 " 178, 13 (2009)"
}], "Item",ExpressionUUID->"758c25dc-ed84-4eb1-ad35-9b70f89d192c"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["IGCommunitiesLabelPropagation", \
"Subsubsection",ExpressionUUID->"57acf5a8-02ec-4cc5-93f2-ed8203c019d9"],

Cell[BoxData[
 RowBox[{"?", 
  "IGCommunitiesLabelPropagation"}]], \
"Input",ExpressionUUID->"ce29392e-6d57-4e68-9320-0f6fb408e3df"],

Cell["Weighted graphs are supported.", \
"Text",ExpressionUUID->"9480008c-d945-4b67-a9c1-d640bca7b9da"],

Cell[CellGroupData[{

Cell["References", \
"Subsubsubsection",ExpressionUUID->"06e5dea3-0750-4d78-af2a-7a1fa13e55d9"],

Cell[TextData[{
 "Raghavan, U.N. and Albert, R. and Kumara, S.: Near linear time algorithm to \
detect community structures in large-scale networks. ",
 StyleBox["Phys. Rev. E",
  FontSlant->"Italic"],
 " 76, 036106. (2007)."
}], "Item",ExpressionUUID->"b6e3212f-c812-48d1-9deb-e27790aa7bb8"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["IGCommunitiesLeadingEigenvector", \
"Subsubsection",ExpressionUUID->"d928de66-327d-44a1-8d70-3d2539ef9e43"],

Cell[BoxData[
 RowBox[{"?", 
  "IGCommunitiesLeadingEigenvector"}]], \
"Input",ExpressionUUID->"fccdf015-64be-4503-8745-b4bd4173f20d"],

Cell["Weighted graphs are supported.", \
"Text",ExpressionUUID->"86fab2c4-fae9-4451-8c56-adb3b7d91192"],

Cell["Available option values:", \
"Text",ExpressionUUID->"77e1ca42-9f1f-40bb-89dc-347698c23151"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<ClusterCount\>\""],ExpressionUUID->
  "25ddd142-8e19-4f7b-ab66-2e6643fe45ec"],
 ", the number of communities to return. May return fewer communities than \
requested. Default: ",
 Cell[BoxData[
 "Automatic"],ExpressionUUID->"f09d9bdb-902d-472a-9fe3-f66fadd3e13f"],
 "."
}], "Item",ExpressionUUID->"2b65218d-1359-4b6b-89c6-95c7b91030fa"],

Cell[CellGroupData[{

Cell["References", \
"Subsubsubsection",ExpressionUUID->"2e1c97d5-aeb4-4e7c-8ffc-77adf48e48eb"],

Cell[TextData[{
 "M. E. J. Newman: Finding community structure using the eigenvectors of \
matrices, ",
 StyleBox["Phys. Rev. E",
  FontSlant->"Italic"],
 " 74:036104 (2006)."
}], "Item",ExpressionUUID->"176466c1-22f0-445c-bb11-1f318a6c15ac"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["IGCommunitiesMultilevel", \
"Subsubsection",ExpressionUUID->"e3c18900-4f57-4063-8b5a-6b179b6e6dd9"],

Cell[BoxData[
 RowBox[{"?", 
  "IGCommunitiesMultilevel"}]], \
"Input",ExpressionUUID->"11e447aa-59e1-47fb-9294-0d76053cc554"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGCommunitiesMultilevel", "[", "]"}]],ExpressionUUID->
  "181b4efb-7440-4305-9c7b-a5e8d9b83450"],
 " implements the Louvain community detection method."
}], "Text",ExpressionUUID->"13f27153-452a-471e-abab-7a9d348975e6"],

Cell["Weighted graphs are supported.", \
"Text",ExpressionUUID->"93673697-8300-463f-a446-08928f0297f1"],

Cell[CellGroupData[{

Cell["References", \
"Subsubsubsection",ExpressionUUID->"8a9b05c6-3b1c-40b5-a2d2-22ec44539d42"],

Cell[TextData[{
 "V. D. Blondel, J.-L. Guillaume, R. Lambiotte and E. Lefebvre: Fast \
unfolding of community hierarchies in large networks, ",
 StyleBox["J. Stat. Mech.",
  FontSlant->"Italic"],
 " P10008 (2008)"
}], "Item",ExpressionUUID->"78001294-5303-4512-914a-8622eec45cd6"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["IGCommunitiesLeiden", \
"Subsubsection",ExpressionUUID->"f27eecbe-24b9-4049-b713-7ef0cc189c87"],

Cell[BoxData[
 RowBox[{"?", 
  "IGCommunitiesLeiden"}]], \
"Input",ExpressionUUID->"e704bde5-12cd-45b3-b007-67418daf83e9"],

Cell[TextData[{
 "The Leiden algorithm is similar to the multilevel algorithm, often called \
the Louvain algorithm, but it is faster and yields higher quality solutions. \
It can optimize both modularity and the Constant Potts Model, which does not \
suffer from the resolution-limit (see preprint ",
 ButtonBox["http://arxiv.org/abs/1104.3083",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://arxiv.org/abs/1104.3083"], None},
  ButtonNote->"http://arxiv.org/abs/1104.3083"],
 ")."
}], "Text",ExpressionUUID->"67861ec0-2c88-4c4e-9e27-2a6b031bcac4"],

Cell["\<\
The Leiden algorithm consists of three phases: (1) local moving of nodes, (2) \
refinement of the partition and (3) aggregation of the network based on the \
refined partition, using the non-refined partition to create an initial \
partition for the aggregate network. In the local move procedure in the \
Leiden algorithm, only nodes whose neighborhood has changed are visited. The \
refinement is done by restarting from a singleton partition within each \
cluster and gradually merging the subclusters. When aggregating, a single \
cluster may then be represented by several nodes (which are the subclusters \
identified in the refinement).\
\>", "Text",ExpressionUUID->"5eb1ec3e-cd2b-4579-923e-2bf39334ac3c"],

Cell["\<\
The Leiden algorithm provides several guarantees. The Leiden algorithm is \
typically iterated: the output of one iteration is used as the input for the \
next iteration. At each iteration all clusters are guaranteed to be connected \
and well-separated. After an iteration in which nothing has changed, all \
nodes and some parts are guaranteed to be locally optimally assigned. \
Finally, asymptotically, all subsets of all clusters are guaranteed to be \
locally optimally assigned.\
\>", "Text",ExpressionUUID->"18f3fa0d-c1ab-4aaf-9bfb-71e512c91149"],

Cell["\<\
The Leiden method maximizes a quality measure (a generalization of \
modularity) defined as\
\>", "Text",ExpressionUUID->"2a2d9530-c226-49e6-b4f5-13007ad722b2"],

Cell[BoxData[
 FormBox[
  RowBox[{"Q", "=", 
   RowBox[{
    FractionBox["1", 
     RowBox[{"2", "m"}]], 
    RowBox[{
     SubscriptBox["\[Sum]", 
      RowBox[{"i", ",", "j"}]], 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SubscriptBox["A", 
         RowBox[{"i", "\[InvisibleComma]", "j"}]], "-", 
        RowBox[{"\[Gamma]", " ", 
         SubscriptBox["n", "i"], 
         SubscriptBox["n", "j"]}]}], ")"}], 
      SubscriptBox["\[Delta]", 
       RowBox[{
        SubscriptBox["c", "i"], "\[InvisibleComma]", 
        SubscriptBox["c", "j"]}]]}]}]}]}], 
  TraditionalForm]], \
"DisplayFormula",ExpressionUUID->"858b1a88-321b-4584-940e-4064431a06a5"],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "2be10db1-d88d-4d25-a63f-067e4e6a0fb6"],
 " is the sum of edge weights (number of edges if the graph is unweighted), \
",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "de695087-98ec-4a6c-a218-1b99e0b9c333"],
 " is the weighted adjacency matrix, ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["n", "i"], TraditionalForm]],ExpressionUUID->
  "7f34ed51-5486-470c-b968-3b38224e58fd"],
 " is the weight of vertex ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "7e08be9b-b410-4704-beb0-126ceb67f3e5"],
 ", and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["c", "i"], TraditionalForm]],ExpressionUUID->
  "83b4f3d0-6184-4b23-9187-4866238634e5"],
 " is the community that vertex ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "52d3bb41-176f-41ed-951c-d002ebb1f8dd"],
 " belongs to. ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Delta]", 
    RowBox[{"i", "\[InvisibleComma]", "j"}]], TraditionalForm]],
  ExpressionUUID->"e3b5dbd3-0adc-4d86-a336-76d43e1462e8"],
 " is the Kronecker ",
 Cell[BoxData[
  FormBox["\[Delta]", TraditionalForm]],ExpressionUUID->
  "260f17b6-1b69-4530-8958-47bbe18c0942"],
 " symbol."
}], "Text",ExpressionUUID->"7390a7cf-ff60-4a87-abe6-4cd4491937f3"],

Cell[TextData[{
 Cell[BoxData[
  FormBox["\[Gamma]", TraditionalForm]],ExpressionUUID->
  "687c5811-f20e-4aad-b561-a30eb2e7209d"],
 " is a resolution parameter that can be set with the ",
 Cell[BoxData[
 "\"\<Resolution\>\""],ExpressionUUID->"8bc570e7-1925-4880-8f47-8ee4535e5802"],
 " option."
}], "Text",ExpressionUUID->"a6008205-a827-493d-86d7-7bc3a14e2247"],

Cell[TextData[{
 "The function chooses the vertex weights automatically, according to the \
value of the ",
 Cell[BoxData[
 "VertexWeight"],ExpressionUUID->"0b34efff-7568-4c27-877d-ae25a1cde67e"],
 " option:"
}], "Text",ExpressionUUID->"71c87f0c-fe16-4771-a309-c541dd49c219"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"VertexWeight", "\[Rule]", "\"\<NormalizedStrength\>\""}]],
  ExpressionUUID->"22b4114c-6638-4077-9992-f32ea4be6052"],
 " (default) sets ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["n", "i"], "=", 
    RowBox[{
     SubscriptBox["k", "i"], "/", 
     SqrtBox[
      RowBox[{"2", "m"}]]}]}], TraditionalForm]],ExpressionUUID->
  "c9d50ece-5583-4a05-966d-3072c55240a9"],
 ", where ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "i"], TraditionalForm]],ExpressionUUID->
  "6c62f805-0ff0-4538-bcef-9a721579446d"],
 " is the strength (sum of incident edge weights) of vertex ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "3b1924ec-1aa6-419c-bd07-da3cc00085ee"],
 ". If ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Gamma]", "=", "1"}], TraditionalForm]],ExpressionUUID->
  "00ef0080-2495-47f3-8992-5ec03befe4fa"],
 ", then the quality measure becomes equivalent to the modularity."
}], "Item",ExpressionUUID->"4ff312ee-1d4c-450d-ad26-c62e9a62a78e"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"VertexWeight", "\[Rule]", "\"\<Constant\>\""}]],ExpressionUUID->
  "999a6414-7486-42b5-afe1-64347b253480"],
 " sets ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["n", "i"], "=", "1"}], TraditionalForm]],ExpressionUUID->
  "ccf6d58b-a00c-4599-8b92-dea06e52ce0e"],
 ". With this choice, it is recommended to set the resolution parameter ",
 Cell[BoxData[
  FormBox["\[Gamma]", TraditionalForm]],ExpressionUUID->
  "da099826-de44-427b-a5b1-d4c25c7dc6dd"],
 " explicitly. A reasonable ",
 Cell[BoxData[
  FormBox["\[Gamma]", TraditionalForm]],ExpressionUUID->
  "31ed2253-6c60-469b-b66a-1bfc4efa3bff"],
 " value for unweighted graphs is the graph density."
}], "Item",ExpressionUUID->"f0988018-31d4-428d-b4be-2d80090df30f"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"VertexWeight", "\[Rule]", "\"\<VertexWeight\>\""}]],ExpressionUUID->
  "d740662b-7370-458c-b3ed-8e51f3aeead7"],
 " takes vertex weights from the ",
 Cell[BoxData[
 "VertexWeight"],ExpressionUUID->"ed85e079-3e76-4b2e-a0b8-728deedab0fe"],
 " graph property."
}], "Item",ExpressionUUID->"f27044d6-06e1-4d89-9399-388993365f57"],

Cell["Other available options:", \
"Text",ExpressionUUID->"4fbd894d-ed70-408a-897c-56767a2208d8"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<Resolution\>\"", "\[Rule]", "\[Gamma]"}]],ExpressionUUID->
  "764794e8-2395-4957-bd45-41c085c2b105"],
 " sets the resolution parameter ",
 Cell[BoxData[
  FormBox["\[Gamma]", TraditionalForm]],ExpressionUUID->
  "ca4726c6-f417-4e23-b859-770c0abae8e7"],
 ". The default is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Gamma]", "=", "1"}], TraditionalForm]],ExpressionUUID->
  "ba361abc-a7e0-42b1-9ba1-307dbb7114fd"],
 ". With ",
 Cell[BoxData[
  RowBox[{"VertexWeight", "\[Rule]", "\"\<NormalizedStrength\>\""}]],
  ExpressionUUID->"6dd3612c-ffd6-40f7-a0f0-575df3d1bd32"],
 ", a reasonable value is 1. With ",
 Cell[BoxData[
  RowBox[{"VertexWeight", "\[Rule]", "\"\<Constant\>\""}]],ExpressionUUID->
  "9d5279b6-df9a-44c0-b303-055a2bdda204"],
 ", a reasonable value is the graph density."
}], "Item",ExpressionUUID->"4cfc5081-ba5a-4d57-8cf4-37892318724d"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<Beta\>\"", "\[Rule]", "\[Beta]"}]],ExpressionUUID->
  "1d6cb989-6253-4ca8-97fa-d40d1615ab50"],
 " sets the randomness used in the refinement step when merging clusters. The \
default is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Beta]", "=", "0.01"}], TraditionalForm]],ExpressionUUID->
  "4fe4ebe0-ed1e-4a72-9e4f-6f2372927a8c"],
 "."
}], "Item",ExpressionUUID->"9db2a8a4-5f91-431a-81e1-01b62dccbfd4"],

Cell["Special properties returned with the result :", \
"Text",ExpressionUUID->"68c91b22-9c48-420e-bb8c-7ca79364d9b3"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<Quality\>\""],ExpressionUUID->"8192fd19-1ac4-4d73-bb2b-db8be246ebb0"],
 " is the value of the quality measure ",
 Cell[BoxData[
  FormBox["Q", TraditionalForm]],ExpressionUUID->
  "15f39e80-b035-4820-8fc7-950195d94abc"],
 "."
}], "Item",ExpressionUUID->"54127ba0-1b6c-4523-8b3f-781e4b46cd90"],

Cell["Examples:", \
"Text",ExpressionUUID->"765e5565-be37-480f-a532-98cf9c1d7838"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"Graph", "[", 
    RowBox[{
     RowBox[{"ExampleData", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<NetworkGraph\>\"", ",", "\"\<LesMiserables\>\""}], "}"}], 
      "]"}], ",", 
     RowBox[{"GraphStyle", "\[Rule]", "\"\<BasicBlack\>\""}], ",", 
     RowBox[{"VertexSize", "\[Rule]", "2"}]}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"8c4c3782-4496-4afc-9bcd-71cbcc9f26d8"],

Cell[TextData[{
 "With the default option values ",
 Cell[BoxData[
  RowBox[{"VertexWeight", "\[Rule]", "\"\<NormalizedStrength\>\""}]],
  ExpressionUUID->"bde4f7d4-9a0c-4bcd-b236-c691b7837933"],
 " and ",
 Cell[BoxData[
  RowBox[{"\"\<Resolution\>\"", "\[Rule]", "1"}]],ExpressionUUID->
  "31d25699-0000-476e-8ba6-ccc00a3bcf8f"],
 ", ",
 Cell[BoxData[
 "IGCommunitiesLeiden"],ExpressionUUID->
  "137bbc94-db26-4a11-9dfd-01caa4b471ab"],
 " effectively uses the modularity as the quality measure."
}], "Text",ExpressionUUID->"d0d6a98e-8b51-45fc-9a95-fc189bdeaf46"],

Cell[BoxData[
 RowBox[{"cl", "=", 
  RowBox[{
  "IGCommunitiesLeiden", "[", "g", 
   "]"}]}]], "Input",ExpressionUUID->"2262f228-1e1c-4dff-aee1-71361bf7ac3e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"cl", "[", "\"\<Quality\>\"", "]"}], ",", 
   RowBox[{"IGModularity", "[", 
    RowBox[{"g", ",", "cl"}], "]"}]}], 
  "}"}]], "Input",ExpressionUUID->"8721f79a-762a-4a7f-9019-297045db4622"],

Cell[BoxData[
 RowBox[{"HighlightGraph", "[", 
  RowBox[{"g", ",", 
   RowBox[{"cl", "[", "\"\<Communities\>\"", "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"dc767fbf-9056-4a94-8249-f0faee9fe8df"],

Cell[TextData[{
 "A higher ",
 Cell[BoxData[
 "\"\<Resolution\>\""],ExpressionUUID->"f82ebe97-10c9-4fca-9914-486c61322054"],
 " value results in more communities."
}], "Text",ExpressionUUID->"930ab7d7-a77a-46b2-b7d8-8c90d26d262f"],

Cell[BoxData[
 RowBox[{"HighlightGraph", "[", "\[IndentingNewLine]", 
  RowBox[{"g", ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"IGCommunitiesLeiden", "[", 
     RowBox[{"g", ",", 
      RowBox[{"\"\<Resolution\>\"", "\[Rule]", "3"}]}], "]"}], "[", 
    "\"\<Communities\>\"", "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"7c1d6f9c-ebbb-4f3c-b04b-ba7f6c0912d0"],

Cell[TextData[{
 "With ",
 Cell[BoxData[
  RowBox[{"VertexWeight", "\[Rule]", "\"\<Constant\>\""}]],ExpressionUUID->
  "50135b91-9fee-4527-93c5-71765e6cd6d5"],
 ", it is recommended to set ",
 Cell[BoxData[
 "\"\<Resolution\>\""],ExpressionUUID->"b284e6f2-d79c-4d8d-b937-43fecda8f504"],
 " explicitly. A reasonable starting point is ",
 Cell[BoxData[
  RowBox[{"GraphDensity", "[", "g", "]"}]],ExpressionUUID->
  "0f5e6e33-72be-4bc6-9b16-a7e7bc70f88f"],
 "."
}], "Text",ExpressionUUID->"bb7069f9-fc6b-4c34-a8c2-2a3851ccd6d0"],

Cell[BoxData[
 RowBox[{"HighlightGraph", "[", "\[IndentingNewLine]", 
  RowBox[{"g", ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"IGCommunitiesLeiden", "[", 
     RowBox[{"g", ",", 
      RowBox[{"VertexWeight", "\[Rule]", "\"\<Constant\>\""}], ",", 
      RowBox[{"\"\<Resolution\>\"", "\[Rule]", "0.1"}]}], "]"}], "[", 
    "\"\<Communities\>\"", "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"7b3d5da6-34ea-4367-bc80-9e501e2b91b1"],

Cell[CellGroupData[{

Cell["References", \
"Subsubsubsection",ExpressionUUID->"5cb1ee78-a35f-474e-9f00-e7721790117a"],

Cell[TextData[{
 "Traag, V. A., Waltman, L., van Eck, N. J. (2019). From Louvain to Leiden: \
guaranteeing well-connected communities. Scientific Reports, 9(1), 5233.  ",
 ButtonBox["http://dx.doi.org/10.1038/s41598-019-41695-z",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://dx.doi.org/10.1038/s41598-019-41695-z"], None},
  ButtonNote->"http://dx.doi.org/10.1038/s41598-019-41695-z"]
}], "Item",ExpressionUUID->"dcd6a1b4-3dd9-4054-94d1-fe56dc583039"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["IGCommunitiesOptimalModularity", \
"Subsubsection",ExpressionUUID->"3d818605-8547-4c1d-9319-7b2a46d00cc4"],

Cell[BoxData[
 RowBox[{"?", 
  "IGCommunitiesOptimalModularity"}]], \
"Input",ExpressionUUID->"6a3e9351-306c-4480-9809-968134385099"],

Cell["\<\
Finds the clustering that maximizes modularity exactly. This algorithm is \
very slow.\
\>", "Text",ExpressionUUID->"08eccb30-2c1f-487b-a14b-996f63ea7b48"],

Cell["Weighted graphs are supported.", \
"Text",ExpressionUUID->"f91b5e0d-8345-46b9-9652-505d978931ef"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGCommunitiesSpinGlass", \
"Subsubsection",ExpressionUUID->"965f4d02-cb40-4e82-b0f8-24de10506482"],

Cell[BoxData[
 RowBox[{"?", 
  "IGCommunitiesSpinGlass"}]], \
"Input",ExpressionUUID->"04197db3-af51-49da-a53f-73012c90223f"],

Cell["Weighted graphs are supported.", \
"Text",ExpressionUUID->"8fb807d8-dd0c-4a1e-9b50-96ecd6d03856"],

Cell[TextData[{
 "Option values for ",
 Cell[BoxData[
 "Method"],ExpressionUUID->"769c1802-69ca-450c-96e7-9ac59e55cb4c"],
 " are:"
}], "Text",ExpressionUUID->"00607b18-d782-4fcf-be7a-9aa3963b4678"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<Original\>\""],ExpressionUUID->"d8e0a879-d922-4f7e-92d4-28398a534e9c"],
 " only supports positive edge weights, but doesn\[CloseCurlyQuote]t check \
that the supplied weights are actually positive."
}], "Item",ExpressionUUID->"db0f650c-376c-4bbf-b7f8-0d05290b491f"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<Negative\>\""],ExpressionUUID->"3dc5da04-0f05-4b2c-9b9f-03ab47b67eb7"],
 " supports negative weights as well."
}], "Item",ExpressionUUID->"c08d7a0a-6121-4ec8-9c36-8441651ef346"],

Cell[TextData[{
 Cell[BoxData[
 "Automatic"],ExpressionUUID->"e9188a01-c987-405c-b3b3-c0c3a088a926"],
 " selects ",
 Cell[BoxData[
 "\"\<Negative\>\""],ExpressionUUID->"28968daf-f701-4553-b220-d702c5ef0fec"],
 " if negative weights are presents and ",
 Cell[BoxData[
 "\"\<Original\>\""],ExpressionUUID->"07076f61-df2f-4cdb-9942-e422691e6f4f"],
 " otherwise."
}], "Item",ExpressionUUID->"323e99e6-9c59-4d30-acb8-945d19381c97"],

Cell[TextData[{
 "Option values for ",
 Cell[BoxData[
 "\"\<UpdateRule\>\""],ExpressionUUID->"aabcc9b3-59c8-426b-a912-c083165fa978"],
 " are: ",
 Cell[BoxData[
 "\"\<Simple\>\""],ExpressionUUID->"ef4246b0-defc-4422-815a-e3047d7c4e1a"],
 ", ",
 Cell[BoxData[
 "\"\<Configuration\>\""],ExpressionUUID->
  "5c169961-2569-4097-ba0c-266a5548bf0c"]
}], "Text",ExpressionUUID->"b9d5d68d-a911-479f-9255-e306d472247c"],

Cell["Special properties returned with the result:", \
"Text",ExpressionUUID->"fbd03d45-1499-41da-9dbf-dcb8bd4bca95"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<FinalTemperature\>\""],ExpressionUUID->
  "622b1cbd-a13b-447f-afa3-05b60665966b"],
 " is the final temperature at the end of the algorithm."
}], "Item",ExpressionUUID->"db8e03b1-10af-4d2b-9a60-88995338bab0"],

Cell[CellGroupData[{

Cell["References", \
"Subsubsubsection",ExpressionUUID->"874a7ea3-2b38-4b0d-a849-fda1f0656207"],

Cell[TextData[{
 "For ",
 Cell[BoxData[
  RowBox[{"Method", "\[Rule]", "\"\<Original\>"}]],ExpressionUUID->
  "336770f9-72cd-4cfd-b06c-db664046244c"],
 ", see Joerg Reichardt and Stefan Bornholdt: Statistical Mechanics of \
Community Detection, ",
 ButtonBox["http://arxiv.org/abs/cond-mat/0603718",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://arxiv.org/abs/cond-mat/0603718"], None},
  ButtonNote->"http://arxiv.org/abs/cond-mat/0603718"]
}], "Item",ExpressionUUID->"5afdd169-7b86-4890-a1ce-918c1587b022"],

Cell[TextData[{
 "For ",
 Cell[BoxData[
  RowBox[{"Method", "\[Rule]", "\"\<Negative\>\""}]],ExpressionUUID->
  "547d3949-d8a5-4fa0-87e2-5e14355b3931"],
 ", see V. A. Traag and Jeroen Bruggeman: Community detection in networks \
with positive and negative links, ",
 ButtonBox["http://arxiv.org/abs/0811.2329",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://arxiv.org/abs/0811.2329"], None},
  ButtonNote->"http://arxiv.org/abs/0811.2329"]
}], "Item",ExpressionUUID->"8a3d0057-7b10-4277-957d-6e73cc2a1b80"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["IGCommunitiesWalktrap", \
"Subsubsection",ExpressionUUID->"ff5947b4-29cb-4348-b31e-7844e7939f01"],

Cell[BoxData[
 RowBox[{"?", 
  "IGCommunitiesWalktrap"}]], \
"Input",ExpressionUUID->"f7890e02-5830-4117-a4ae-f01ff55c5b0b"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGCommunitiesWalktrap", "[", "]"}]],ExpressionUUID->
  "277a0f13-3a0e-48d7-a6c1-c86715c92b1c"],
 " finds communities using short random walks, exploiting the fact that \
random walks tend to stay within the same cluster."
}], "Text",ExpressionUUID->"95981374-1d60-4b1f-b97d-d58d82f904b9"],

Cell["Weighted graphs are supported.", \
"Text",ExpressionUUID->"5929d9a8-bb88-458d-b9e2-68b4a7b159ee"],

Cell["The default number of steps is 4.", \
"Text",ExpressionUUID->"bf716760-8bde-4982-8a92-26924c1ab017"],

Cell["Available option values:", \
"Text",ExpressionUUID->"61973d41-364d-4247-b8dc-fcb0fe0abc33"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<ClusterCount\>\""],ExpressionUUID->
  "4a22a609-8995-49b1-91d7-b8b6b847eb45"],
 ", the number of communities to return. Default: ",
 Cell[BoxData[
 "Automatic"],ExpressionUUID->"4261f2f2-764d-44d0-b446-c24b6695ca51"],
 "."
}], "Item",ExpressionUUID->"fb817a5a-d497-474c-8f05-7a060bba2899"],

Cell[CellGroupData[{

Cell["References", \
"Subsubsubsection",ExpressionUUID->"4923a9b6-f1fc-4442-96f4-91e890967dc5"],

Cell[TextData[{
 "Pascal Pons, Matthieu Latapy: Computing communities in large networks using \
random walks, ",
 ButtonBox["http://arxiv.org/abs/physics/0512106",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://arxiv.org/abs/physics/0512106"], None},
  ButtonNote->"http://arxiv.org/abs/physics/0512106"]
}], "Item",ExpressionUUID->"67519cb8-c5fb-4fb2-88a3-eb6434be4490"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Examples", \
"Subsection",ExpressionUUID->"515205b7-d491-4194-b3aa-12b4cb4e81cd"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"ExampleData", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<NetworkGraph\>\"", ",", "\"\<LesMiserables\>\""}], "}"}], 
   "]"}]}]], "Input",ExpressionUUID->"b694fd83-7fdd-43b0-9157-6ccc455afae3"],

Cell[BoxData[
 RowBox[{"IGEdgeWeightedQ", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"6cd6a216-6a74-4689-a4e0-e74af107ecfa"],

Cell[TextData[{
 "Community detection functions return ",
 Cell[BoxData[
 "IGClusterData"],ExpressionUUID->"5252fd7f-b8b6-4822-af92-de07b0546cbe"],
 " objects."
}], "Text",ExpressionUUID->"a9aa4dd5-49aa-4701-a71d-cd4aefa5d5b2"],

Cell[BoxData[{
 RowBox[{"cl1", "=", 
  RowBox[{"IGCommunitiesEdgeBetweenness", "[", 
   RowBox[{"g", ",", 
    RowBox[{"\"\<ClusterCount\>\"", "\[Rule]", "7"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"cl2", "=", 
  RowBox[{
  "IGCommunitiesWalktrap", "[", "g", 
   "]"}]}]}], "Input",ExpressionUUID->"09479461-16b1-46b2-93e6-f255edb8560b"],

Cell["Various properties of these objects can be queried:", \
"Text",ExpressionUUID->"e4971cd4-4bc7-4112-b76a-8ad3d90fbee8"],

Cell[BoxData[
 RowBox[{"cl1", "[", "\"\<Communities\>\"", 
  "]"}]], "Input",ExpressionUUID->"ccde2c8f-a127-46ef-814b-e4ec94719657"],

Cell["Visualize the detected communities in two different ways:", \
"Text",ExpressionUUID->"ac878135-a61e-446b-8af2-adee5806deea"],

Cell[BoxData[
 RowBox[{"CommunityGraphPlot", "[", 
  RowBox[{"g", ",", 
   RowBox[{"cl1", "[", "\"\<Communities\>\"", "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"57d087de-1861-48a8-a7f9-3bcc3c48d82e"],

Cell[BoxData[
 RowBox[{"HighlightGraph", "[", 
  RowBox[{"g", ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Subgraph", "[", 
      RowBox[{"g", ",", "#"}], "]"}], "&"}], "/@", 
    RowBox[{"cl1", "[", "\"\<Communities\>\"", "]"}]}], ",", 
   RowBox[{"GraphHighlightStyle", "\[Rule]", "\"\<DehighlightGray\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"46a38d2e-69d9-4a52-9239-953bd1f61bfa"],

Cell["\<\
Plot the adjacency matrix, reordered to show the community structure.\
\>", "Text",ExpressionUUID->"9afc9e9a-1a61-4096-8840-ca4755a7b802"],

Cell[BoxData[
 RowBox[{"IGAdjacencyMatrixPlot", "[", 
  RowBox[{"g", ",", 
   RowBox[{"Catenate", "@", 
    RowBox[{"cl1", "[", "\"\<Communities\>\"", "]"}]}]}], 
  "]"}]], "Input",ExpressionUUID->"63a432ef-6660-4a4f-b64f-ed26f67ddfb2"],

Cell["\<\
The available properties depend on which algorithm was used for community \
detection. The following are always present:\
\>", "Text",ExpressionUUID->"bfd8d7f6-d909-4564-9a3a-9b045d555c7f"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<Properties\>\""],ExpressionUUID->"78cad1e9-2687-455a-9908-85e36a7943a9"],
 " returns all available properties."
}], "Item",ExpressionUUID->"c74232c7-9ee7-42ff-87a5-a8921a741a2f"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<Algorithm\>\""],ExpressionUUID->
  "ecf5bb7c-cf2e-4df4-9b88-7e15f496419d"],
 " returns the algorithm used for community detection."
}], "Item",ExpressionUUID->"318b0bf9-1a1c-43ed-9e7a-6aac7f718d2b"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<Communities\>\""],ExpressionUUID->
  "16463c67-f386-4cf4-a010-a156ec27f88b"],
 " returns the list of communities."
}], "Item",ExpressionUUID->"65c5a0aa-807a-45cc-a558-521ce0c4c6b7"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<Elements\>\""],ExpressionUUID->"a0924b13-83e4-47af-a014-18ab3d06ec86"],
 " returns the vertices of the graph."
}], "Item",ExpressionUUID->"b72008c1-1c30-4b10-bacd-6a525c2bc261"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<ElementCount\>\""],ExpressionUUID->
  "61aea0d7-d76a-4919-a4fb-8b1ca5270edd"],
 " returns the vertex count of the graph."
}], "Item",ExpressionUUID->"e5e3f12e-0d0c-4cc3-846f-331fa1571b34"],

Cell["These are present for hierarchical clustering methods:", \
"Text",ExpressionUUID->"3ba7efa7-2c7a-4efe-891e-48dd1985b185"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<HierarchicalClusters\>\""],ExpressionUUID->
  "4ce9a9a9-2fad-4fc9-b023-4a6475fde337"],
 " returns the clustering in a format compatible with the Hierarchical \
Clustering standard package. ",
 StyleBox["Note:",
  FontWeight->"Bold"],
 " Isolated vertices may not be included."
}], "Item",ExpressionUUID->"64e68152-b9ce-4790-a4dd-095812ac4ca6"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<Merges\>\""],ExpressionUUID->"27cabc22-829c-4c65-9208-736aa458bff2"],
 " represents the hierarchical clustering as a sequence of element merges. \
Elements are represented by their integer indices, and higher indices are \
introduced for the subclusters formed by the merges. This format is similar \
to the one used by ",
 ButtonBox["MATLAB",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://matlink.org/"], None},
  ButtonNote->"http://matlink.org/"],
 " and many other tools. ",
 StyleBox["Note:",
  FontWeight->"Bold"],
 " Isolated vertices may not be included."
}], "Item",ExpressionUUID->"be19b04c-34ee-4850-a511-a209a2594ac9"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<Tree\>\""],ExpressionUUID->"b1773b0b-1100-4748-b820-9e540f23161c"],
 " gives a binary tree representation of the merges. ",
 StyleBox["Note:",
  FontWeight->"Bold"],
 " Isolated vertices may not be included."
}], "Item",ExpressionUUID->"2666591b-b474-4480-9294-00e070d88d31"],

Cell["\<\
Additionally, the following, and other, algorithm-specific properties may be \
present:\
\>", "Text",ExpressionUUID->"4e72ee1b-162b-408e-96a5-2becbc220b77"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<Modularity\>\""],ExpressionUUID->"5a85befd-ca11-4c83-a15a-e4523c5a576f"],
 " is a list of modularities for each step of the algorithm, or a \
single-element list containing the modularity corresponding to the returned \
clustering. What constitutes a step depends on the particular algorithm."
}], "Item",ExpressionUUID->"43596b6a-7668-43e8-a994-66e4783ead9a"],

Cell[TextData[{
 "The ",
 Cell[BoxData[
 "\"\<RemovedEdges\>\""],ExpressionUUID->
  "3f2a6454-a29d-4835-b44b-d32fe23dc4e4"],
 " property is specific to the ",
 Cell[BoxData[
 "\"\<EdgeBetweenness\>\""],ExpressionUUID->
  "5e986507-d4b7-4fa3-8786-e033fc1c3554"],
 " method, and isn\[CloseCurlyQuote]t present for ",
 Cell[BoxData[
 "\"\<Walktrap\>\""],ExpressionUUID->"fa2f79f1-c84a-4da4-8aee-96a8e27f4560"],
 "."
}], "Text",ExpressionUUID->"74754b83-d27a-46c1-a485-96caf392e7ef"],

Cell[BoxData[
 RowBox[{"cl1", "[", "\"\<Properties\>\"", 
  "]"}]], "Input",ExpressionUUID->"0b277d43-93de-4da6-a6c3-2444ae80f6e5"],

Cell[BoxData[
 RowBox[{"Take", "[", 
  RowBox[{
   RowBox[{"cl1", "[", "\"\<RemovedEdges\>\"", "]"}], ",", "10"}], 
  "]"}]], "Input",ExpressionUUID->"676b6364-5f3c-4c1e-b775-cb245ab529e7"],

Cell[BoxData[
 RowBox[{"cl2", "[", "\"\<Properties\>\"", 
  "]"}]], "Input",ExpressionUUID->"228f6e99-04cd-4e57-b372-41fc17ca678b"],

Cell["Multiple properties may be retrieved at the same time.", \
"Text",ExpressionUUID->"a2e0c640-8d78-46f3-9360-c4a02b8b15e7"],

Cell[BoxData[
 RowBox[{"cl2", "[", 
  RowBox[{"{", 
   RowBox[{"\"\<Algorithm\>\"", ",", "\"\<ElementCount\>\""}], "}"}], 
  "]"}]], "Input",ExpressionUUID->"f17d2267-22bc-41a8-8554-e5ca7767bb08"],

Cell["Compare the two clusterings:", \
"Text",ExpressionUUID->"a418a482-8158-4d8a-a727-0ddedb948d8e"],

Cell[BoxData[
 RowBox[{"IGCompareCommunities", "[", 
  RowBox[{"cl1", ",", "cl2"}], 
  "]"}]], "Input",ExpressionUUID->"39560326-e099-46c1-8f50-ca4975be87d5"],

Cell[TextData[{
 "Visualize the hierarchical clustering using the ",
 ButtonBox["Hierarchical Clustering Package",
  BaseStyle->"Link",
  ButtonData->"paclet:HierarchicalClustering/tutorial/HierarchicalClustering"],
 "."
}], "Text",ExpressionUUID->"b3d3ebb5-4d86-442a-a76c-899f38152aa1"],

Cell[BoxData[
 RowBox[{"<<", 
  "HierarchicalClustering`"}]], \
"Input",ExpressionUUID->"12bc6f38-5957-4136-b039-665592092905"],

Cell[BoxData[
 RowBox[{"DendrogramPlot", "[", 
  RowBox[{
   RowBox[{"cl1", "[", "\"\<HierarchicalClusters\>\"", "]"}], ",", 
   RowBox[{"LeafLabels", "\[Rule]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Rotate", "[", 
       RowBox[{"#", ",", 
        RowBox[{"Pi", "/", "2"}]}], "]"}], "&"}], ")"}]}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "750"}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", 
    RowBox[{"1", "/", "2"}]}]}], 
  "]"}]], "Input",ExpressionUUID->"7b79d2c1-8baf-41a5-8a3e-9b87e2e6d0df"],

Cell["\<\
Hierarchical community structures can also be obtained as a vertex-weighted \
tree graph.\
\>", "Text",ExpressionUUID->"b10634cf-39c9-4c2f-92cf-9b235fe378e0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<NetworkGraph\>\"", ",", "\"\<ZacharyKarateClub\>\""}], 
     "}"}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"6e0cf53e-16c3-4311-821e-0f7942a465b4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"cl", "=", 
   RowBox[{"IGCommunitiesGreedy", "[", "g", "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"094d78fc-946c-446f-b9c3-eb2a04627bc2"],

Cell[BoxData[
 RowBox[{"clusteringTree", "=", 
  RowBox[{
  "cl", "[", "\"\<Tree\>\"", 
   "]"}]}]], "Input",ExpressionUUID->"1f6fb971-8611-4b42-9533-7aef05b0ac93"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"GraphQ", "[", "clusteringTree", "]"}], ",", 
   RowBox[{"IGVertexWeightedQ", "[", "clusteringTree", "]"}]}], 
  "}"}]], "Input",ExpressionUUID->"4314876c-7157-49ac-bacd-cd690f5e530e"],

Cell[TextData[{
 "This tree can be supplied as input to ",
 Cell[BoxData[
 "Dendrogram"],ExpressionUUID->"f7df696d-37b6-4984-b98e-8b7410fd5c12"],
 "."
}], "Text",ExpressionUUID->"17b9ab46-f70f-438d-ac60-b58c55af914d"],

Cell[BoxData[
 RowBox[{"Dendrogram", "[", 
  RowBox[{"clusteringTree", ",", "Left"}], 
  "]"}]], "Input",ExpressionUUID->"215ab481-f24a-4ce1-8ac4-ce7130b8dbe2"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Graph cycles", \
"Section",ExpressionUUID->"6edfb5f4-7807-4d94-a7e8-d2c54e7c1ae6"],

Cell[CellGroupData[{

Cell["Eulerian paths and cycles", \
"Subsection",ExpressionUUID->"e60ac1d1-9ea2-4911-9843-e4cee69fb879"],

Cell["\<\
An Eulerian path passes through each edge of a graph precisely once. An \
Eulerian cycle is a closed Eulerian path: its starting vertex is the same as \
its ending vertex. Eulerian paths are also known as Eulerian trails.\
\>", "Text",ExpressionUUID->"911156fb-927e-4240-a5d0-662d2f47d27e"],

Cell[TextData[{
 StyleBox["Note:",
  FontWeight->"Bold"],
 " As of IGraph/M 0.5, the Eulerian path functions are still experimental."
}], "Text",ExpressionUUID->"d7aa4b2f-7d35-43ec-91ef-f86c80dc5733"],

Cell[CellGroupData[{

Cell["IGEulerianQ", \
"Subsubsection",ExpressionUUID->"3e509472-5ec0-427f-bf4f-c6840e56c9b7"],

Cell[BoxData[
 RowBox[{"?", 
  "IGEulerianQ"}]], \
"Input",ExpressionUUID->"9f8bdc56-098f-4dbf-83c9-5e1c2e320374"],

Cell["The following graph does not have an Eulerian path:", \
"Text",ExpressionUUID->"661cd953-eace-48b4-ab0f-8187cd3c75e5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"graph", "=", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{"A", "B", "C", "D"}, {
        Null, {{1, 2}, {1, 2}, {1, 3}, {1, 3}, {1, 4}, {3, 4}, {2, 4}}}, {
        EdgeStyle -> {
           Directive[
            RGBColor[
             Rational[2, 3], 0, 0], 
            Thickness[Large]]}, PlotRange -> {{10, 660}, {-5, 325}}, Prolog -> {
           Raster[CompressedData["
1:eJzs3VmXJdd5Jua0f4Hdbg+S2/byP6CmltRqKS9925qlliWt5bV8bY3U0KLE
n0C1RDUlSmpe6EJXXAInzAMnEARJAAXUgCoUCjXPBXCeqfaK2OfZ2fElgiez
KisjM+vdN2+ePBFxduzYsff3vd/0f/4//9/P/b//7cbGxv/132xs/Ofhj7F9
cTMYDAaDwWAwGAwGg8FgMBgMBoPBYDAYDAaDwWAwGAwGg8FgMBgMBoPBYDAY
DAaDwWAwGAwGg8FgMBgMBoPBYDAYDAaDwWAwGAwGg8FgMBgMBoPBYDAYDAaD
wWAwGAwGg8FgMBgMBoPBYDAYDAaDwWAwGAwGg8FgMBgMBoPBYDAYDAaDwWAw
GAwGg8FgMBgMBoPBYDAYDAaDwWBwr/Av/uPQLm5+6KGhXVi8P8FgMBgMBoPB
YDAYDAaDwWAwuA7/+n1De27zN8f2xub/Mba3+vfHXhra+c3/fmwPbf7HPx/a
xzsu3f9gMBgMBoPBYDAYDAaDwWAweHjwZ8b2Zucj/6exfWzzfxnbI5vv/cuh
HZ89n3/m/z22syu8ve24L31xaOc3/9XYnth86J+Gdr7zn3jPc6+PbfN73x3a
7dXxZ2f5T7/3n/9+aC8sPp7BYDAYDAaDwQcDydHk4R8b25XF+xUMBoPBYDAY
bPjd7wztVucj8ZPf/MbQrm3+u7G9NHv+B/7z0N5Y8aT/uPmDYzuzut4W/4nf
nPKXGxv/+9je7Lzn+TfGtu138KDO+9/G9uTm3//d0F7f/O/G9u5N/2987eVd
j8fxV4Z2afN9/2lon+k8rH4u/byCwWAwGAwGg8sgeZD8Sa79jbG9udnaW4v3
MxgMBoPBYPBBxymPt7HxL8b2if792deGdqvzkPjAeh285zvHdnXFb77YedDK
f/odv4+n5Gc6x3vCyn/iO8mdrd+vdR5U3PxfvXdon978lbFd7zyr3/33Yzuz
Ou98v398bevXlhzLrl/7Px3fD/Z+Oq7mL8U71/EPBoPBYDAYDC6L5FVyHnmz
yY03ex6npfsZDAaDwWAwGHx7xOeJ0/H/3fKe/EP9/38Y26XuR4r/fPnY0C70
OHfyJKx5P+fwv/zz0N7sPCde0fVbv97qfCw5FS+7sWpvnBvb5isvD+1iP+5v
/npopzs/+j+P7eF+nvuZ8p1bjZ+ofjoeD4v//OfvDe3O5vv/Zmhn+vfk6Lv1
Ww0Gg8FgMBgM7g7JddV+rfkeipNaut/BYDAYDAaDwd2hOB3+iHO8J17wb98/
tNe25ffE3+Hz2Medhxe8237ibfGl63jTPxvbW5t/OrbtPKv/Nz506/vmv/pc
53GbPHxuW/99Jg87vvGydzpPXP0GarxU40Fvbv7q2E5v/uVfDO2VzVMnh3Z1
8+fG9nK/Hp5XPxr/e2xbP+RhvddxDwaDwWAwGDwoSG5lx6929ZpXaSrPbfGb
ldd03L8d2+1+HXJa8ssHg8FgMBgMHi4kL8rLzk/xXv0O8Z/qFOHrqp/pQUX9
/Iv/OLSL3f8Tn1mPxyvyl/0fx/bp/r1xxXP+r2O7tS0/6ROPD+3W6vdOrfxo
P9zl8R8Y26Or8b3er4+nJp//9NjurK77qf77d+tvGwwGg8FgMLhfyL7beMbt
fOa/HNvlLleRk9jd8ZuV16zHVzs6npQcJ56HPfywyLHBYDAYDAaDwYb8J9nN
q5x5t9clP5Ib8W7ivQ8q30aerf6R5ORal37uvuv/8aU13ymeFO9pnFp9qfOb
3/j60K52v9U/GNu1zX8ztpv9Op5bHfeNVaMHuA/+DOT7pcc9GAwGg8Hgg4Pk
FvWBxN2Qa2q8S+Md37c6f2Oj5XE/0eWZKe/58c2/+9uhnd38qbHd6vLVnJzm
e3bj8JvBYDAYDAaDRxPJfb83tnvPM/nhDw3t4ja/z4MWdy3eHS/4m2PbvX+q
+PX6f3K86//62Lb7jdY8q/KR/v7YrnRs13uh86gnTwztyuafv2do51f5Sj+7
0hMe2XY/+Gf5Upce/2AwGAwGg0cf8Z3kGfJKs7ef63Ew6lX+4NgeW8XBfKbH
Eznu1VNj63Ew7MI/O7YLq/j05/t5NS6e/b/F4Xyux/mQX5cer2AwGAwGg8Hg
3qJ8nV/76tAu3zM/ya7ODn/61bF1u/7S9wvxvFN/yNu7vo775C/g/+Rr8fJz
8nTlPflj8nfgt9muc23zR8d2eZUP9JP99/94bFt5qNStr/FcqSsfDAaDwWDw
fiGek1zV5MDrK7nkmZW99qXNxx8b2s0eVyNuhTz02pmh3ez482O7tOI/v7DZ
/D8/veItP9H9PRuvemPzmaeHtuXnSQ4jD+FDd5o/PhgMBoPBYDB4uJF8+itj
u37P15vm+3ziwMQPie+X31Sdzrvtn/P5VxpH9Z34XzaecnvdqMp7inP3ufkv
HOt5QJ3X8oC+stIHznTes9Y/qhi5PhgMBoPB4F7jP39vaHe28Zzss+JN1Mmc
1nk80+PTf2lsV7v80/J6fmolV766+a1vDu365rvGdqfzm3jRdv3P9Xj6yD3B
YDAYDAaDwQG/8+2h3ezx0/d6vUcfGdr1VV2e05tPPzW05XnP+4X8F5p/5rHu
r9nG88TseXhPefTVd/+tsZ3fPHF8bCv+dIuP5hf6lS8P7WI/bq4OUzAYDAaD
weBe4Xe/M7RbXX5scsqrK7/Nj674y5ObLx8bW49vb3l/Xu/xK81f8+UVD3ps
Vbfxlc0fH9u1Lk+yV7frn9j8kbFd6nKP/EXs20uPTzAYDAaDwfuP4mzlveHH
5/9L9y94sPCb3xjatZ6Pc7fni5c3z9jb5Wd6+GNDu7pn/qQHFcndO5W/Xz87
tNsrv4Rz3T+2/f/sarzoEVe630Krg/RS1zvUpZK3aulxCAaDwWAweHSQ/MYO
+46xnd/85bGdWvl3fmCFL3U5UL2i3x7bhc6DOk8enz8a242V3fji5g+N7cLK
X/Rk5z/JV5F3gsFgMBgM/sTYrnc7aosT+UiXJ/BcjiPP7BSXvr/g3qK4JPHV
u+XH8XTmmTxLr7w8tIs9XgkPat4tfd8HBZtf7I3Oc/L7lHdfvn5+DfQAz21d
fHswGAwGg8HgOqx5j+gL5Dd5x/lz+j8Up65eEP9N/Kd8Pvw9yYdN3nmt85uR
a4LBYDAYDK5D8bNN3rjU/fgq8i9rPNcHe7wt/gviT8k7/h8e9Gig+cJ+v1te
stnvL/Q8Tup08k/8s7G9tbLvX+t+AZk/DeXv9F55DvJVPfXk0Lbi18+cHtqN
Hu8eP+5gMBgMBoO7xZ8c241uX5Wnp9WjPNf1gybPvdjj0fGVPpNf6BfkQnk4
W5zK+S7fyHtOPlx6HILBYDAYDB5dVBd6Y9XEzdb6huy98hg6nhyz9H0E7w3l
o6+8207rnJNbxTE1P8+Xe/x1Pd48Il8vff9L49//3dDudD3D+DRe86XNHxzb
zW3n8fv83neHtvt69MFgMBgMBh88VN9cnUTyB/nNZ/wm+RDP2fSDLZ6z8qV4
T/Jh/DeDwWAwGAwuhf9ibJ9Y8S5fWMufTPM/bmyQg5a+j+De4Fe/MrRLXa79
hbFd3vH55NvG0z3W50utp/nqqaFt+X3K47T0/S+F8lSpZ6o+gPGpdY2g95e9
Yun7CAaDwWAwePDwvX85tMudv6zxXu3z2S63idupfpwQXypunR8EvvOo1VHn
HyDexv/Js3DpfgaDwWAwGNyOeJMW5/za2njZ8J5HG8Uj/drYXtv8xbGd2HWd
8EceHtq1HvcuPko9HnntN1at8XqPLH7/BwXxmPJ98rf2/TRfwDPhPfcZ5QOh
91Wc83MOBoPBYHA/kJzwJ2O7vfmtbw7t+mqf+uTKrn18Jadd7bxdq0d0q+9n
4n5aPfbT3U9UPSLyx2GrM/SbY3ur88Hw618b2pVel1LdTv4A8n6x17e6k59e
5bc/vo0XDQaDwWAwuDzeLe/5n/5qaCfDtxwxJLc2vvNKzy/Z4pZ2zuM88/TQ
3tr892M70+sd4e/Ud3/n2I5+nfe7RXlX+d2ePDG2lZ7y7OZfvXdoJzZ/fWw7
56WD94Ytz/GxzRPHx9bn8/v/ZmhnVuvqfJ6HYDAYDAb3Av/N2G52exy7MjmB
vRl+7atDu7yqI3RrxV+e6vl15N2hFzgP/ykf+WGJW8dn1v//l38e2psrO/+t
zW9/a2g3VvzuZ/s+D9Wfb3UoT29+6YtDO7/5B2O71s9PvvVgMBgMBg8eVt6z
8VPsnsd7XSSfHU/uWbr/wfuD6ujUejq7RXIyOZE8Tl4+LHLz0vjkE0O73eu3
44/J66kLsL9ID2x+H5/o/jT/dmy3e9yffGcf+fDQLi3e72AwGAweDcR3tn3m
4ubvju3Syl/zc33/+b2xXe55N9nlPvTQ0C50v80W1/Pk5o+M7VL3+6zxJgcN
+WdWvYXdkZzEf5Mfa8tjenElh77YeV/2TPoOuzyemP5DLmPnX3ocgsFgMBgM
bkf+fOKL8Z6PPza0m6u4jrM9/0+Lp31P/DuDd4Xi5Ns8enePk1q6X8Hg3SB+
s/mBfLzXh8N/8pumbzku8z4YDAaDu8HfGNubKzy34vc+1fPcwBaH/fGep1N9
Isf/0tiudjn+7/52aJ/v/B676r3au+8Wf3VsNzrW7+X9+ev3De25Hq8vL1Pz
07zR+y9eSRy6+xSX0XjO870+U4tPutnzlH7n20PbXk8yGAwGg8Hg4cE/Hdub
XU7Ce8rbLU6jxbu83vOeR28P3g3igcyz5l/w8OL9CgbvZT7L+9XWR3Vvt+o5
VP7TvM86GgwGg8G3w8ZH3l75JTy3qhP5fI9jJ5fz13ztzNBudr8F54u3+fKX
hnZhJe9f6N/bv/CgS/ktivuhd8gzKr4cv9ni9k9uPvrI0K6v8vx8esVfPrN5
7KWhnd/86bGxs5/v+ot88/w51CcwDu7/Z8b25qHLVxoMBoPBYHA7zvl71rw0
5AhyQ+oYBe8Fv/fdod1efd7YYIdful/B4L0gPYlfc1svX9hW11acnHjC8J/B
YDD4YKL9gf8ieajlz392833/aWintvF1+FD50+Xb/+GxXVzlX7m48m+82P0g
Xz87tNsHLr+QfVD+zN8a2/nVfV7vvG3Ll/TZbmdsn290/0x+HPQU9kb5APDA
eF76TvjNYDAYDAYPL5KnYP1e/hvy1E55T/r90vcXPNzIb2Fj1cJ/Bo8SioOn
p1pn6WXmf/NneWjx/gaDwWBwbxH/yC8T2heg+Gr7gf8/9E9D2/JfbPzm1e4H
+cdj24rLVl+HnK4e5VK8nn7IO8qvsuUNfa3zt/Jzyj/q/hsffL3nhZdviz7C
jsiuSH9Rr2jp5x8MBoPBg4X24aX7EdwbVN+E/ECOonfDqb69sUHOoJdDx7Gb
Ln1/waOB5FL2d3L90v0KBvcS6WHQfMd7ysMm/t26yw5AX1z6PoLBYPBBwx8b
25VVfZwXtsnHsK3vT3W+znpOfp7GAZxbXX9jw//ll5ray8726/NfwPOJ3/7q
V4Z2qddfx//t9zj5Xfqkfcu+Jy9pu98vrPxN31jlE32111/Cfza/1LMr3vPV
7tf5rrHdiZ9mMBgMBneF9uf4mxxNrPbPdcgOSy+vGPkiGAwG9wbx/hAPSh+s
/j/sVfKSnDwxtsXvIxgMBg8aTvMzvjFjz//4ikd8fJtfAB7uzOmh3VgrH8vf
wz+z+vlDx5G7p3WItvwO8KH/YWy3ut8oOdy+oT75UuMsHozfJvt1jcfH5+I5
xfHjgY23Ouvf+PrQrnZ/1dRLDwaDweD3w6kdcs7ff2PDvrV0f4PBYDAY3A3a
v+iV4t82Vs3/5U9bur9zaJ/Gc9Y4DPouvZn/jHwlS/c/GAwG9wsrn1jX/ar/
4N3kw6znN77twys/yg/069T2zrFd7fvO1G//ducjq95Vf895juOn4Hz2ry99
cWjnF/PjXIf6WZ+Dfsujafwaf/uJXpddnXk8p3i1pe8rGAwGg4cDxUNUu2I9
ru63S/c7GBywyUPXu923yosVm5z67tX5e9fW/e79xr2+H+M0l/dgt+g5tasv
P2+CDxZO7XUbG3P7mX2Qviv+sOlblxe/j4ruY7oOLN+vYDAY3C9k91H/rfKa
NW9IlU8cX/lP+Kdj257HfrdyUOUv+TnWfh41fevt7Y1b44nvtN+qHyAvaR3/
YDAYDB5tbPvArZ6/5K/eO7RPr+UT8EH0uLrf4D3FW/h+Lo8nex35YulxCR5t
rHJqy2P30VU8zD+ujtvYaPLhi5vs61V+VI9SHUjy7W7l1jl5d1oX8q1tdnz1
If3+ujwCO0XxTFN5/82191ft7jutFy1+yP21PFZv9nH3HNQLJef/5tje6HFk
6/janT4P/a7rUupeB7fjxob5t+547zG9s9XJvdb3073u39z7wO5g3THP63Fa
6n0Fg8GjilV+w1fKb8lu5fgqr1n/1/l3tPyXr2+TM/3unJwpzlrcPLnTPvKg
5H+q9U3Jgcah7mP4zshtwWAwGBwQ//OjY7u81v4lns3+8lNju7XNv9M+gy/w
O1V/woviO46KHTK4v1jlxFrHWB4l8pLP5uXf/e3Qbm/+8tiuzeaN/8GxPVby
3L2v5wuSD6++H3P5mMjVG7tstf/tvbqy6+vUVu/j+/d7/j6Mj+v4P3/POb7R
+LbjnumfxX+JS5rqGed6P9bxufJVzaF5Q55+/98M7czaulzyHf7lXwztlbX9
uNf6plknl8Xq52kezOm9c8gfxXv3ystju+c4O/vvtC7v2W31Zaf5lz+4Wflb
92Mdtc8vPf67xco35/0JBo8+WkdbPo6t/dc+jRcjl6jb/dtju9D1leo/WeWN
ml9yyke+0ddN69CcXLCu/neNPyKnkF+qfXzp8d8tGjf5OT2Hqf3/jX6/lX92
Xt2Hs94Hg8Hgg4HVP4y9sPpV/eTYbmz+ztjm7WJ4zym/81aXD8QRqAtoX8J/
2qdrvu+lxyl4sHFdfSRyKaz24MZf3ew8GTkKX7Wxas0e/4XOg6pP6XfUhzT/
27w/McuT3iuSy9vvP7Ut//wcf4gn9Lnmq6/8bT3O7xqXyvvd7f20+3hh1/6n
8i7JJ8jPk56hv/U+55DfOcRT//l7hna+80Su53v6zqOPDO1655Xa73+m+6PO
jduU3z1T5uX6cfA+zPnNB/cH7Z9z/tk7vY7984/HdrPPa/Pd93fbz2l/tur2
1uPsw+Z75Qf5Kdnn7d9LP4edInnEfiDv29L9CgaDe4dVTmTHlleZnbrFtZ1Y
1eu+3eUSesprZ8bW7aDslHPyV92ffa58m7pE6+SSpcfxfqH6R8bFPmJcfnhs
F/s+Q163b9l3jb99y/HGLzxnMBgMHm38/nzQ2ZJP7FNdj2//P9X193Xxdu37
S5vf+fbQbnb7YvXv5OemH/hP+1WtG1vlhuC94WHb98k/c/O4yYXzeZbM88pr
VjnVfCNnVf9OfpQ/MLZHZ/PVa/wsd+cXOe+XSM5mtybP4Vsdh/9bx+8Zr383
tvP9fVWHuR5PjsQnzl231oGerjfz982fwvjRQ6b+s4+s+Mdnut+n/svL9PDH
hna1rzt1XMnJ/l/9Ouu4V/+JKQ98dptfJ57zR8Z2qduN6FPmyxwv/UtjO9nn
m/FYd966+bNT9L4tXYf1qODdxis0P8/rm784thN9PWrz/6XNPxjbtXvun/e2
xgXW46yP39/v82xflw5LfjTvjfdI/zP/g8HDh+QYfGTVM6Zy2wub3/7W0G50
O3X7/1OrOuqvdbvTU08O7U6Xf6Z29HNr7e/21Sq3VT9P/qdHdf1hr+NX4/OP
je1Kt+9N9dDPbP7a2F7rcjB7Fb3V/uM5hOcMBoPBo43T+N3b2/T25kf0fPe7
xHvYjx9/bGg3S56+Z9f6ecIWr3Gsx5uK07PvNDnic91eSo+nR+Fz/sXYPtHl
g4Ne5/awobiapeSBOR7MfKn4s2M71udFww/1+CNxoP9ybJ8qx20huYgci39v
8te5VT69z6zinD65Ov7z3e+uyV1b/eIPgHclD1c0f5td4JOz81sdSd+7vxr/
bbz4ld4rGof2Xu78PP0wnv4v/hvW5+A+6/3XccP/1fngdxuPeGXz58b28ur5
/0PXW6Y84bOzz4d8LG/p3Dxs69etbfVWyeeO+4mxXe/3a17qR/UP/dv3D+1W
n2fmnftwnZ36zW6saXVeNXxPvx+8Mv+KOu51f9nv9eNBwaofsse0efpyX8/q
c7AuvWtsd2bzJTjvP4ztVs9jzH+zHm9/tk6aB9UvZ2qXeKn7xx90HtQ6yN7w
5S8N7cKB73cw+CCjddJ61OzSNzpviZ+0XrKTkj/IGY88PLRrm088PrRbm1/9
ytAura732b4PW+eqHGufJFdEf3l7ZAemJzY7+5UuX+GD8dTG22f7D7v41G7+
XHjOYDAYPGJIz6CvsENO43Of6/kxN1bN/lH1cf93ffv5mdNj63zmun7xB8VD
kQN8bz8jD8D6+zD5tu4PNl7v0p6Nq/m3Ux6TXl3nKx4ef7WxauI6f31sr/f6
WlP+6pHuHzX3+44nN+HF9Ad/R252PL6q8nf8sNQfwYvyG3zyiaHd7uNjns+N
C2THrvwcuwGebo7H2y2SP/GHlYf0uaJ+6Nfc9dfdr/ppU9705mrcr25br/y+
fusHvpqfrbwEfocfhfVzDud485pfgD7F75RfQuN5Pt9/F6/ZxuN69yvR3xb/
vp2XbfrY1X4dvMw6Pnqu/5Vvru8DXn6jNLxojcv33szx0nPofVh6HTysyG4l
H0Wbb2fL+vqFzb/566GdnuWnf35sl/r7W+f53O/jP/nZyP/gPX711NCudR7V
/Pr614Z2ZfHxm0Pvf92fxLEs3b9gMLiF9hHyWt1H8ZywyQ/He70C+/Kpk2Pr
cgU5g371J2Pb2resp9ZP51k/D1uej/1C+obxxHPincn/1d6Nfya/kLP567re
0vcXDAaDBx3tX3iGvb4+O+Scv8Dd8nr8kujd/DfxOPw+5amyHztf3F3jYc6u
/Ele2PY79PSm555c26/GA13pegO5od5v06PP9zgUfOhRjes4aLhbuWzOrl39
JcmbU/nzH7tf2UZp/ObUHadfilfGN5J32nU+sIr3PNXPa/Pqje7PrB/Vr83x
jz06tBvbeB/vCd4Kj8QPch2f2/LbvtLzO7Jje1+9Z3jb6t8Jvbfr+Lm9Qv5k
3k/+YTXfUl2nah6m3fKI7r/y2E3+/ULn5+s413h//Wh+HC91/k4eU3wM3pn+
slu+blqH6myJb3tj84/GZl69us3P0/yov1f5TP4mvzC247PjV/lLPM1OeWbv
g99tvO21/p7pv/e55oWw39T3up33kc6LVT7X/K7+0+uew9Lr5kFBcsVvjW2r
fm31D8aHzq33697fdf2odlSIBxCXKG/GYdnf3Vcbn6e732qt2xwMBvcP6Wk1
7oJ/OT9C8qh1x/EtbuhCkVNPdvmu5ksmB7V17eWVXHqh589hR31Q/TKMz7r9
BS/Jjot/Jl/QG/HI5P+mH57rz0feoCofLz0OwWAweFiQ3zy/Rjzc3PHWeXr3
3HH2T/GO9OJvfmNo1zqf+Htju9ztj/V7n2Hzb9o6jz5NzyefN33z8mz/6B/q
EO21PoJ/0O/6Pf0I/0Quqf6hwb3FZ54e2lvb4tzxdOZXnX/0a/GV4s7xGuqw
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
r1yV48g9eGX5jA7K/AkGDwKqM8AOZd1ib7Eei/OZ2z/InXg4+o74dX4hzjts
vKd1g//qTscViqf44bFdnB1H42S/tc75bD93nvF2velzeqnHbdXnwz6qP/on
f8rS4x0MBoMPOtpH6RXyCVZ/EPt33U/tW+KgxI+JD6THscutW//n9mv7Ij3d
cfatu837bP8TJ4L3FKfgOPsXfwf+SLXuMz9P+6fxMZ72R/6lByUv6UFD44aP
ML9qXSHPQx3LykPiLSoPMeeH6//1+ypP+YyHrH5f6/y88Jz8h8U34Vfkd9gr
+fWg+Hfdr/56j2q+4aOK/PDNJzyEvFPkc3lKjA80r+r/d+o3eVB4z7tF92ud
qe/xnJ9/fY/tA/xw6jrU6i290vm3ufHEJ9fr29/woPhR37uuda2uT5UHxdNa
Z3z/r8d29cDxVzWvrXGwz1on6zyuOK1ntzVueNCNSVv+vg8KGn/1F6fz+8Xu
p5Y80MEHEcVdyLdlPWVvYo+XV4kf/jo51f/tH/K62A/4i9R1bunx2C1W3tNn
PKP7tZ9VO5e48an+er6Pm/HHM8/tj3XfxU/Lt0b/rfagGo9BT1x6XIPBYDD4
9mjfpt/Jt4yHcdzUn27rfPpz06Our+IxPrHn/aTXN73t45u/MbY3e91sn+/2
+k8/NbQtf0J+hL6XN4fcIg5vLj9Ljbuo+WX2enwOO/KLpb83Oe7FFT7d67bQ
t+ShZN9WDxHfow4Iv+EpT/Rijxv6nbFd7LzHunruNU+mei/iYPASNV+geGZ5
7Sr/3/z0bnT/470eX3Kxelv6v/Rzn8NaV81zVsdJfmLfe7/o5/wBjqoftfh2
eWK9H+6XPaDyEzUeerfoPeBvd1h5z7vFmi/M++z9FvdLT7U/qNdk/GqeVXYw
64V8qtYVcQaew9e+OrTLfd+yvslTLP8Ae9FTTw7tTtcT2376Ss9P1vKpnu76
evOPPHp5x6y7tU5FjWMJvj2aR/R7eLfxNsHgYUJyxbQe3au9Xil+U3wXudL6
LS6OX4h1W71N+SPIafYB9svDWmeNfyo5bk6elq/6j8d2s++j0/pqp7t/jXz8
9AVyjuNrnLo4B/6aeM2pvvHitjqmtQ5e9LlgMBg83IhnsF83vfk9/ft1/lf4
H34k9pm96h+90j7W7HmXuj/gXuVLoUfy46E3+l4dbfynfRRvt9fP5agi/9xa
V7zp22d6XG6TT7byufPDFV9H7sSDkVOaHHmz11/BY6tjZH56nnN1L+XjqbyE
96HKQXfrn3m/5Sf6vvyz++X/yT4uj3zl0cipc/VoIPkWr8MOUo8jtzb5+pXO
e6+7/r1irT9V0f3v1biaL56nfFLmv37RI+bqmpvXNS9/RfWzxLl6r9TRrnXx
dovT39mqW8u+cbf+/Eth5dfUsTDutS4THtRzc//WO/qx56WumXXN/KrroHzZ
jpPfk/6pnpB1lp+M/nzly0O7eOjGP3h/0foTvT94lNA6V+vPkE/5O7Nvq5tp
n2I3Z4dnh/3DsW3VTfA9v/XvfHtoN/v59vXDEq9ekdzDzlrz5osHp2+Ks+PH
Iv6B/VZ+fvY++yb9jD9MO+9DvZ4QeVA8hrq6nh95qPophNcMBoPBBwPtS63O
6ZnZer0V6XnyqPAL2Ov+2YfEQ9yvvCnkFXo4e23jdZ/rfojiIcQR7rY+84OC
/MLMJ3wJ+QPPLn5dHAo9vdnNn+16+bSO8ZUuV3k+7bk92/kY9vXG73++1z3W
H/lna7xQ9LuG6lkbT+Nc0XvC/0HdcfUw1U+G4iOrP0NFdhnv+9xx/Ov4S/BD
Wnf9e0X9q/cHydvisIwP//hpnoPnOu+EN173fPBl/CHwwvyVxZFVv/jpevpC
fy/qvOfvLm+iPM74N3YJ9+P9q/czl4dAfRvrp/G0jxy196+Or/u175g39EHj
Si+kx9GX2QP5sbDvyJfJvkNPpyfS7+nZ/I3kO1OHttn1vtDXgaXHLxgMBu8W
7YP2J/KodZE9ln1IPmD7Hrs8fwfxRfJqf/QjQ7vc/Sfsv+xL/Djul560W6xy
8rq4+d8d26Veh54cTa6xf5GP5CMRF85OSz6p8hK/BXwx+Z49237302O70/ev
OXnSOJMfj5o8EQwGg8G7Q3G20zyE7+773Lrzj8p+wn/Uvmofrvsze22To84d
2jiUvUJyZJWDzCf5EOjz5EA8e7OHn+pxLOy+xp9/L/8mx8lPUOWmdv7FHl/E
H1l8Hp7hoMifSyE9AP+LZ/b82v8/3vMk1fdA3HWVN71H/NYqvzbHn1bUj3VI
bzGv+GXv9Pydovld++m+Kpp/1tc6TuT1On/5Wdbf9Xz4X/o/f1jP0fzGJ8pD
Vt9Pdgfr/dy4yneCF2P/YU+QB9N8cD+tn9eK3WL7+FV80Hi2yoeaH54jfbnN
q0f6ONIL6X/0bnYIeq24DHUEmz3qWOepzZ+ad7jWqb3XvDLBYDB4vxHfWOVS
9nV2O+tqjYOWD0Tcj7zA+E/5rtjz1LPhp8gfgl2L3/9SdW7wmuQA/gjun32T
vNb8W1/ofC45AhoX+xT5oPoVQHoAv1ZyhedhPO0v4u/407x+dmi3ez+Xnl/B
YDAYPBo4zTO4sbFTv8+jgvRtchO/wqqX8ieb8sWHn/edQ/wiOy8/pGrn5XdH
7lNHXVyl/D2QPEm+Yk+X95KfGZ6zyT9nux+T+Bc8KX0fP0DOevKJoS0ndy6F
5jE5t/o5QPZ3vFvl58xzfpz4ELyJ51d5s3V+n3PIT2C3/pfkcv5ue+3fSd7f
6X3gFeu4GK8pv/vytvXF7+IT6SXil+UVcz08NX6UHiJOb7fjipdlL6Df4OO+
9c2hXe88s37gzcTF01/ogfoxN27i1dbxzUedhzMfrFueh/Gnd/OT5+9pfZz6
H32y+yexI1lvW56R53tcoedp3ZVfxHphPVHfb+lxCgaDRx+rv+GcfZR9XX5G
dczsX/g2PKB9qeU5vrxaBx/vx6k/ZB+2fjb+7sIqX9IbPX56Lp/7fiO/SXlS
yEXkOfIznrPKa+xp4vnlhSb/2z/q/l3lhWk8+sV+fXIGXvOo+M8Eg8Fg8HAh
PoofEP156X7db6x1ZB80vU6eODwD+VH+dXyF+uXs35Ccg+dg5/Y9+Qeqh0hP
F1/Jv6jJVxe7HOl45/PjZLcm18mH8KDKUcaHf970OW3Z7Y2T+T6165/tPBo/
CHmb5Gkir/Kbdb27Hf86P+bQPLtfODdf12G9nzoe9A3j5nnQz+b6w36g/ow6
pvxwmz/f6z3vFf3D9b2P3lvXWzcOc+Pu/ipPax7g4/Bwzmv82mOrfeWZPs9q
npCfGdvWuIkrrPyp+6njJI576fdwv9B8Mt7WT3r81G/mbF/X5Z3jDyrOkz+U
9du6iz+wrhy0OvDBYPDgon1O3M7cPspuXfcj+wU5dFoHcWPDfuj/9luf2S3r
dek3db+2jzb74vG+v9h/5QW1/+0Xz2l/FD8uroR/Ar1F3I38KMbXPiweY3q9
tzq/jEeu4z4d1+3yv+/FzVU5c+l5GAwGg8Hgf43iEug59r0Hzf/zqCP5cyoH
ner+mHgM9c8rn0YuxEuYN1UewqPTo6H/89PEc+IvyW/0bnq5/IfiXtbJm+S4
oyZ3kder3EnOn5M7yct4TeepI8QPAh+Fd5aPkTw9p7/QD/Aru+Mbb6/Fel93
i65T8xPXfJM7w7OzfGUdH/4VnmPNX1xR//DN4pvF5+G55MWd+u1vzRf62U7H
p94fu4Tn2o57qt+X+eB9nOYHfbO/1/zqzTPzzriZl3N6MT2t3o/+Wo+m8/rh
vn/tNH/LYUHzhx7O34ZfNr3XeBkfdozmx/Ra9/fmx8PfCV9g3SAXWO/N86XH
IRgM7j/aL+s6zb41taNt2U3rPipevMoz/C+sO45/+/3qiW12Op/ti+RP6xp7
oX2Hv6c4DOul/Wu/5Ui/x6/U/bD7iWcS34QHVWdoGqd/u9etE1dB/jde/Bys
78bFPlqvV5/D0vMxGAwGg8HdYPWjoXfju46a3vigIP2XnMM/iL8Y/qTyVeLO
yX/mB73YcU3uObeNfyA/zfl7qv9C3lTXGM9G7qu8207vW1zmYec98ZyeT+Wd
yZ383eZ4I+9z9fvEJ4nnqvVQqj7y+2Pbrr+4Pj1jpzxbvV/9mfqBPLfN36He
Hzm98nK7ReODp/S7+mH+zvGJdVz4S4gbnuN/+bvIo0l/NP7qBXn+6pe2+Par
vX9TPnm9/2r1k3Qfc/ojP0P9sJ5YX+r1vYeuz65R/TvneOeaZ632a67/+quf
9rGjyoPineUBMG7qQ/CP957KSye+nT1APS52qek6c67Mr7MPrL9tMPggYN2P
rcNTO9WFns+9+vurBwr9X51ufudVbpjbz8hB5IA5Hs66VeOFrGv+7/edR97c
73Emp/ID8H/rtfu1rpOb8cp4UHYw90eOYA+zD+BBq18D+5nx81zIO0vPx2Aw
GAwG9wKndr6Huh5j3+P3I7+O88gdjQ+7vPh9PKjY6llcX+n1H+1+ku8c29Ve
h1keviZ3nuz5OfkPeb7mwcaq0XPJYfX3pzzoB7ucRn4SR0l+5V90v/IKHBbe
03sz9Zd4dxn3rfH2Xhpnx5GHye/1vl3n7fm2f+zXwaeRnyvfrL/myRyPN42L
3ernvTbXn8bh3r3/J5zGrd97c//6W9fNivIF64/31vNwXXXcp3Vors9ed52/
51z/PTfzyvjIH+v6c36ec/033+p8qfN37n6g45zn+vTiysNZ36xf9jP+Met+
77Ch9xa/YD9o/PSZ7vf0ystD2/K3sk5Yn80D8sHUb/yh/n/jH/4zGDx8aD+1
Hm+UZl2Vx73u69Z5dpcqN9TrWz+qvKPuZeUzqzxT5QDrkv8fNp5urr/yYbLX
4aF9b5zIBZ7DnNxvvJu99GQ//0HNDxUMBoPBBxurPOH/9kU8GTnozOmx9Xqx
S/f/qGPV95v9+iOdl2DHVfeCnb3xDe/b/PGxXdv8vbFd7vLQxqpVHrT+fuXd
5vg2+rD5RI/er3E6qLwnnoXcj3+ekz89V+Nd9YF6/Tr+zpte581t8jPEn1f9
ZGPVyMvmyU55Rdc3fypPPsef1uOqvnWvzfuz7vfX9cv1pnHBW/Hq9Ll1/fGe
Tv1lXunPU92B9n6/1PWXOX11Xf+t87DyWPgwz5veZF7sljfkT1Pnx5zeXfnj
af+2X3+aD/Rs72fla71n1kP1qI7qPkavphfTkyvPWfnPaZz8k/151Xni+VW7
6dL3HQwGt2NdZ2scs++tB3N8m+PsoxulVR5uXT3Qak+t/hjW9YMm1+0Vui/x
VVVutv7Su8RfVbnfeHmu7JLhN4PBYDD4ICO5otpNK+8Ja10L+/BS8SFHDY3n
On7F/395bKe6nyd/KvJO+/5a5yfwKuRQv+e54gfm/N/Infpb+Yppfx+8+VB5
w8o7G/cqh8onv1Fa9feE0/dzq5knlX9zXtVX5vw9ncfvk75iHtXnXf025u5j
HS9a+fP7/bz4G++Uv53D6ndYm3Fa5/fJf9K41+t6Xup78QeZu551uq7Xc/2c
a9YDcXj4RbxrPb7Nhw90fXhuP1mHtd/mtd+pvGg9fxrX/e7Z8TfueFDv0d32
+6Ci+d7e5xf786n8Z7WT1DyfNd9D9f9sx507cuMXDB4mnJPjqpxZ5YaaL9n3
1V62U7mfXOS8Jkd8sver2lEPm7/mOlwnD889hyqvGS9yGn9+8r/6S0dt/ILB
YDAY3AusvJV4ivhr7C3WfHZVHq08FH5RPCL7r7xK5Eb569RplJ/cc5zyVFe3
1eFW/7ed/5meZ/Cb3xjatc6ryHeA99D/6iew9DjDe+XNnO+5VZSPUJ5U461e
izyY8unXfJz4an5U4m7xNOLFHG/c/c7UH+N275ffkadvmifr2VW86zM974D8
ky1f1K0V33ZuW52AaV2d69vyMK7z43hQsdaXXYfG13jP+WnSd+TFrd97ztP3
+rltedOqPmVe8E8V1/iNrw/taucP+UfyB5LXzXx1Px/58NAu9XoKc/61+st/
5fHHhralB9f3z/vpd6xD4hBcx/FPPzW0N3v9tjbfX1u9L1/o/u94QfGB8qd5
H9RDP+z+M/gKdq7GXz+7Wodu9vXDevYnY7u9zV+b/DCtt/xE36/kC/75sV3q
69rS939YsNpX7ANz78XS/Q3uLYoXt37V+UCOsK5bX6d2nus9L7P6N+QOfCOe
rL3/z/d6Ov9hbLe2yUPiaVpduyur+no3tsknUzvIm4dWTqj3P7f+W0/Jfc5z
/8a3ylfsRK7vfPFYvv/Jsd3o67W683P5p4LBYDAYDAbvF1a+aoovdF4RX7mx
auQc9l72W/okfRQf8I6x1TpDz6540QtdbiJH0ePp+eqQtN85sfnoI0O73utX
0lNdH5+Aj11nv95vJF9C8uc6/rPqjXO8YeUP8c/kf/nxK7+NJ6APGHe8qPni
PHqt52S+GPfpPNn6ncpn6Z95Zv58+1tDu9H5DHnv8Tt4JOMQv4HDiXiqnfKt
c/wqNG/rvGnz9RNd/9pYtWpHMz/xhuatOu/mpzi9qheaz3jcab6NN2fqJJ3t
65f3ynH4aO+h+m7sQJVfdV18NF4YL7D0875XdL/GF++BH8ZLs/dUfzD8p3p4
lf90HfXCjmqc6l6h52Ecp3aus9vqe3nPzNOM7+FEPBp/f+slfrPGk7MryX/S
6phd6n7t7FPNnvZq5yer/cK88n5XeeQXxna5r5ttPTh/6Pk2443HrPJgleOM
q/Gyf87J/c6r9u0qx/Gzt79676fxQ8/2fTTxdcFgMBgMBvcLyaVVzpEfDh+A
L8QrsttXnmpaL/Pstjxp7Lv0/6bXvNH9QfEGznf9yrc1uflyl1erv4DjyGd4
14Pu1/SjY7vc+U48ZNX/5vxu3f+0TunHu78rf8jmT3uzy614Zn6ftd599YfF
K/t9/eUPZ/zF21b/XPOh6sP4Tf1Sn5kc7X7oK3ixpZ9b8HAgPx3zmN+k9WOO
L+Uvyq+onf/57o8kD8Rf/sXQPrnNz9O6Zn57H71Xdf30fkx5o9vdfuA4+VHp
q9/59tBurniB013PbDznVp5g66Y66fhV79NBXyfXoXGb5uv8eB8Xz8n31hvP
4bfHdmEb/2m++Ow52Ufn5ts0X/HhHdfdorwn+Cq8TD2u+jvX8Y0f6MFG89pz
Il80P78Tq7pjL6/kuCur9+xkj/dhH2/7/LW+zrZ191b37zSfqv268pv8Eflp
Vvv50uN1r1jzdBkncS7kwGp3837xm6315+0nxtl+Q463/rXrXijy5lbeUvvd
74ztYuS1YDAYDAaD9x3pW/gjdnB6t/x6PzC2z3Y59F+P7erm375/aLd6nBJ/
Ovl3pjwleWbL75Nd/1vfHNr1zgfUeEM8Aj1d3Kt4WfqneKSmt77S+VD9dX+H
Vb988omh3e56A16Y/I635K9FPoXu3zj7jPflX9ue6+f6efQK/CX+xPmeJ/nV
PKm//8jDQ7vW5fDGK7zU5WM8uryJeAi8qH54rniJyMvBJdZN85/ftHlOrzZf
+VviR6170/pOz3b/Z+umddjv+L/fYSdyHL9Sxzf99WxfP/m30+/xCPhN60jr
95Zfd1tPL/Xfa/vBjUO7jlbkh9Sey1b+gSmP8pmu17P74IubXe61vm5al9WV
tx/xHzVu7ISey2OPDu3G4uOxX+j9YB+wj6w7z/yu9rvkFzgYKI+wed7yg1zt
8cz8Cdmn8WrWI/LaH47t+uaPjO1Sny9VvhDnQ860Hnqv+F+bN3hBvN5h4Tur
n+rccb4nP7fxutTPJ+/XeHPj1njoi13OnvoVnOnrP/9bcp98nOza8g+wE+FN
97v+ZzAYDAaDwQcHyZ/0WfIPnvAXx3ZiJa883+Uc8ZDihsQ70uPETeLhqjxE
XsVrkVPZldmL6dPwh8Z2ofs/+X18Gzlaf8Uttjil4/34wx4HRz4lz9Ozm5z5
0rb4dLxh5TUrn40v5H/pebPTz52HZ6bn00OMPzmZHmIeOF///S7/Ufo+PhRv
S1/BK+nP0s8lGPx+yL+P3wy9s/rZ4MnYfbxf/G+sj3g3cdn8372HeADrcuVB
vY/ykOAb8HD4Bn5W+FLvpXX0y18a2oVt/Odh9/+E9HF6euW18WzGpT2/Lb6z
jd/Vvh7yk2+fT/Xn0/atmz2/tHX+sO9Xu0V2vOn+dbHnn113Pr6m+n8ufV8P
Krb16a0uD1rX8JzysqvT3Xjqc309e/hjQ7u6zW6Nb/M+WtemcsWWvGA9nOMH
vWfe658b28UDx5uT26d5AV7o8fjrzjNelQ+G1jl2OuPd7OePd/ld3iDrGfnT
e8dOLT82O5n32jgfFn45GAwGg8Hg4cEq9+AB1fMgh8qziT8kT5GL+Ck1/vN4
94fht1fz55E/yZ3VT8l1a11cflCQPo0Xw6/xW+InyC/gsMpT1d+22t352+KX
jau87zUefaoH3u58ifGrceDGufKb5gt93nl4a3oJ/Z8fFB4d/8lPWNyoelZ4
Fryo/lXedunnEwzeD6Rf09/ZIZq++bnu94nntA7gQa0H3mPvvXXBOmGdrO81
/qHVjTrZ60dZh+itzn/n2K72faXyn9b3o8Z/WpeML/3d+P/W2M73cefPxI9T
fgDxpS2P3au9PpZxx3cvfd+HDad5ac91Xtp7tXT/HhT03nsPPAf+neLZzXvy
Bp6zyQOnut3FOuU49np+pPK1V//s3a4/4sC91+Lslx5PWP07rbNVXoP8ZsW/
sC9bp8lv7binVvLZ6T7e4oXYxch55DhyO70AX9z2hRf7vuN5HFa5PBgMBoPB
4MFDch6ei/70sY8O7UrnCfGReEXyCr2OnOp7+pn66fKON737eq9zQ29u8USv
9Lh3fBp/Fn6Y4mDIT01/PN3j4vFjeDN+qPym6OVzecAOKtLP+MvSi8WN8wcy
jm18jvXxd/xPjO16H1c89le/MrRLPU+W+vaeM7m25Sm81nlHz0WcK73duNP3
6zzAN6vj4Xf1+2tfHdrl7pcrj6f79HzxKp7v0s8pGDwIKL+m95GfDz5OXXb+
OdYN6wK7lOO9b/x16MXeazwoXsJ68/WvDe3KSm8+2flPftn4UTyg9/yoxL9b
l9o6+nIfX+uw9c6+qf4Kfyg8juf3lS8P7WJ/ftZZ62V4grtD48Y+h2/jT7p0
/44qes/5+fH/E+fMn1C+GutNkyNf7X6f5Ap+vtantu5cXb0nV7r8t9f2lb2q
n4OPFJ+/07qY7pfcTI6H1h12aPIaeZp8z07G/kwPcL7rkf/sG/hRz8/1yI+e
G/nNumd/ISceFbtXMBgMBoPBg4PTOhbXu/yIv6R34RXlD5/KN5/vdlr6LnkG
j8Zuq/4PfkscevvdGz2eSbwS+z29nRxGb/Y77Mjin9nd6dXs2IeNF6MPuA/y
J/kfL2n8pzz0nZ633/OlPxs3z9f44lPxjHgP8i5+Es/pOZLTxWdWOVu/p/z4
sa6v8wtoeuaVbXqKeYDfdF/01MjJweB6pJdbJ6wf1mE8Gr7H+4mfw1+qRy9/
m/xr/MabP9DFVX3lU53/xB/Re8Wd8vPG5+FX8SBHJS+F8cdfsvv5f9u3tvhp
z0PeVut+W+/e6PsrP0V2xvCfO0P7Br4IX+a5iHMQp7t0f48akhO853gycgJe
jv8nuaD5sb/e5ZG5fAbkDvLkYbGjkHvcP3kHX8v+XOUsfqb8Yslp1nFyHj8D
67nxl8eE/Gyd91zoBdW/wTiz18zZsfGp/BoOy/MIBoPBYDB4+JD+SF7inyMO
RXxJk3ue6fKU75s++3KPuyNn4UXFVYofcjw/TPIbuY19np6G3yLX4t/wceQ4
8tuPje3Kig890eMA1XXF49ITmxx5cPUXcqBxYU8Xx09+bPlKz3Q5mBzJP0Dc
eOOnz3a+cE7upFf4XTwqPwDjLR4M/2x+VL9P86X6EZCT8dbOZ++vcjL/AHz1
TvO1BYPB9cg+Ip+h9VpeTvYI64d1iH3Duoqvs85br61T+E/6Mb91+4R1yfoj
vlh/6NFLj9deIZ6THdF6LF/HQ/80tPM9X57xkydGfgD8hPwFeGP7H94U7/Og
5f1ch+I9yDP2I3HT7Ljmn33V/PY5/PLu0Hve5Lwne3029hH2ePEg1hn+4vh+
dSjVFVr6vu4Vq3zOXi0u3XgYh2rHJi/jM/Gn5K0qR5PT8Pueg/WEfO932QOc
z25GPrTek9v4qYbfDAaDwWAweL+RfFnjFMmR9Fj1gXyu6Ph6nvo18ov5P56L
f6e4yCYfnd92PUjf85kfy7Q+8OvdPi2fXc3vqZ6HuEJ2a/E/Sz8Xci05st6H
52E8+F3iA4w3vfl3x3ap8w70X/oD/oKeXMe9jjM5mR+Y48wfaLzn5o3r1t/D
c/je/dBf5Mta+jkFgw8C8nsTF1/Xee+5+Ejx6PRifp7sTuJP6d/WOeuw67Lb
NF7vWv9evkt681Gt34v/tN66b/yPddE62dbzs50v5i/LvmTc7QP8xdr4b+UN
Cf/Z0D5DrrDvVmQfNs7mNXsBXnnp+zmo6P23rogzqfKD78lD5EvyHp4Tf6d+
lXiY/b4v+YV8npNbvG/sw+L25+Tgivw3vf9VzmKHqvJ1G79jXR62jhp39i1x
NnXdr3I++QzuVVx/MBgMBoPB4N0i/z38VOU1yfk+05PIl7DqqS2Pz6Wu51b5
zXXoX/yEqp/oHN/qOuzI5DL9qXKZz+Q9ep3fdZ/ydS3lL1j5zTn+Gc/J7k+v
cl6Vh8mj6tWTQ/HdxoU/LL9cvCO9eI73lrfJ93hkSA6f48WdV+Vm/jHx3wwG
Dx6q+yE/iPeYP758oN53fB0/LHH0/BOty/ICW3esE9YD31tfXBcv6v9Hjf/8
s7G91XlO/lX2W8+B3yE/L+PM/sU/0f5r/7b/Wq/tJ/wbH3QeFF/F/9M+hXc3
/vzc7GfyO8RON0V8oPWhrRsP9/h187z5e97pcgp5g7xkXrIDsBcb76XkB/Oi
8p7N7vNmf6/Ib3PyEbSu8RcQp/PRjwzt8ux1yJHOb/z7Vl3P9/7l0C7346uc
R96s8/1BXw+CwWAwGAwefCQf4Q3Fi+MNK+9J/6nyJ73U9/KNq/vrOvgz/oWV
n1Q3WFwO/ZfeQC/Dh6rvqB/V/3OOJ3U8uzd/Avoe+VAeUbyiOKC9Gn9ycOUp
yaXG3f/Fmcqr5H7r+PL38XzV/RDXVP1Fq7+lcccXzPln6p/5M8eb1+v7fXIz
HiPyczB4eJEfqPdankP7Ax6OXxG+Da9hPZRfzvpina52NeuF9dC6ie/Af1a+
lZ1v6fHaK/ypsd3atg/z+8eH4j/xzdXuWPdJ4209r/azrNdvj3g2fp74Y/LV
0v1bGivPqa6N/O/+Tz7Ea5JfzEfz3Hhbd/CeB8W/UL/Yl6vcti7uZe44KE8F
+Yu9Gp8pfke+ofr7fodcr787rY8UDAaDwWAweNBQnnd5euTzIh/Jlygvo3g6
+g3/Bf4i4l3k56l6Lr5NXiv1AMh18nvKq4nPFBcpHzr/CfFK/Cb4j4rj47dZ
80k670fHdrn37zfGdq7rgfxf6CnyIL1jbOd7/N/djj+9f5pf6WS309NT9Xda
p+Jkt+/rt/Gn53tOTz05tDvdv6f60fIP8nx8FgfpPpv9/3jhn4/1/rfn+EL3
N8BD13HXr+RtCgYfHMRH8C//4bFd7P7k7F/89PFp+CL7kv0KX2md4u/FT0lc
q/2LnYp/pM/ij5cen71C9yeuwjqM58UffftbQ7vR8wvYH+R5Vr8EP9f2+8ud
T/Gc5CuwP3ieTz81tPAkkB1AfoZmH7zU56vjfPY8HL90//cKq9zT5JAPrb7f
2JjWt7nV5Z1an9L77Xjzzu94D/Zbzqj8qnXGfbALV7lNPk75661z5Dx+A/IS
kVvVLVPPzHsuzyx5jlxuXPmXxl4RDAaDwWDwqCK+U741/B95TBwiPQdvhe8i
f6ozoZ4CeY+eSr8lb5E/1SfCv+E5yWn4MfV78aH0LfoxfpB8WPk2vGHlC/Wf
3ixvkrrAxkFdYnIlPrXpJZ/q11k33saPHd59s7vzW+CnI15OfV394e9E7jde
xh+/Wetv0uvxl/yl8M/G0fg2HuH5ziOTm+lh+G48rfsw3s5LvYZgMFix8j/y
H7Kb8Du0Xql7ZL3Dc6oHb922Lrb95jO9Dh17HfuZfkzj40/1fWvp8dlrxDfj
Qe3b/Lq+8+2h3ez2POs5v1nPgZ3LfsC+xj6KzzKe9rm9jos47Gj+26/tx3h9
9SHJC+y8S/d7tygfOH4OzznNn36xy4fkJHLanN0aT+f9xhPy69yv+yNHV36f
nIuHrfUcvQ94TONDXiPPtjwfl1d55U+veNHner4QPCk7xpx9Gf+79HwIBoPB
YDAY3C8kF4l/xg/Ke05OwwOS58hjeDfXIbc7j/wmHpq81ezab/Y6svQi/oXk
tDn5jFw89Q/4xLY6ReoDkBf5n1S+UP/5CYiH5P9I/2WHJ3f++the73K5cdRP
dTOrvE8f1C/8IL17Wod9ixfFK4qHqvKscfX8nNf0gNNdvq510/lR4TnJ2Z6b
5+J89YDdh3Gc1iPZkvv5E8jzt/S8DwaDBw/xP3g36494avYtfJD12bprXWeH
kffDfoAnsK/4PzsS/q/xqDc7X4rPWHp87td4qz+FN2Lf5Lcpr6p9wr6BP65+
aOxmxpud0P7hOZEj7J9Lj8dBQfkR1U00L9mHD7o/3pw/o3j1Jg99oD9/vDk7
OvlRfiFyj3nn/p1v3qq7uNfjQ46rfrbkKPXK8f7mP/9ochi5zHnTdeoL/Xkb
P/Ho7f+PdnvCt745tOvb4qXCawaDwWAwGAxOsfp3souLs+I/Q//k/8nfkfyN
52x6z6XuF4gP43cjfn2qN31mpSddWPXjVtfD1vUfL6iuezv/tdV9Pdv9QflJ
kCf5m/I/JG/iTcm3+k2O1v/mP/r5Hl9PnyPfsuM3Ofi5wiNe6nGELR7w9kpf
f6v7jTpff/jX0MPp8cZBHJPj+Z3yl/Jc9d990+fpq65PnuZPIl8A3pR8r16I
+1gXN7bT5xoMBoPWC3Y2/Bv/TLwnf0/7UtP731it82f6fiQPnXXR+swOY71v
5z/d/Rutn20d/0Rfx5cen/uF4gr4fdpP2OvET8hHYF+R31qce9tHn+/5avAy
/Nn493mO+CLjTC7Bvy49Lkuh92Dd/ur9aHLAxfseV2HfJz+Ru8gh5gm5gZ+q
fAnyorsO/+E2b870+aCuOjmzyhHk0PuVZ1I/8JP6T751f+RL/GZbdx7rchL5
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
kgf0cCK5gb2VX2GbH492+cO8wmc2f8I3Oi/66CNDu97jsM0TPDn7sPlGHiI3
uY76T/IF4fPJVbW+I6z+k+tQ//CT8kLgbyu6b/Zpdnv35z2ofrd+x3WMY83L
yk/A934HH0qea3zrpdirg8FgMBgMBvcZyc14QPIz/pAcJ5+7uLrmH3m8H9fy
3Z/ox7Ff4+3woHN1Re8Wxd+Lp1JXqPX7QvFzOLuqP/RKl1f5fT78saFdXcUF
ntzm7yD+3e+p04RXbX416hh9oOuh+FDxZtN6R+e7nE3u95kcvvT8CAaDweDe
ov0RL4TftA/jh+xfeBX5WPBM4nHxVvw+8VN4m18c24meBxTP2fa5K2vzVQYP
JoqHNn/w4S0e5Oy2PJXibCovyC9R/Dk5sPKZ5Dn1ediz5anEh/LrVGdpWuf8
bJ+X4unN2znesvaTHOV3yVuVH2Xn5teJ76y8JnmuvX8vdr6YXFd5TueL9yF/
4jnZ08XpRJ4LBoPBYDAYXBb5QarLLt+S+HXxS9/+1tBudL+UVj/n8kofu9p5
RnFP8oqJs2v+oTf2rN/iyMWv0/PE88kTz+9SvR/1jMSDyauE7+RvSY4W3yVu
n5zNT+f3xna5+0Pgf/Gr4sGiVwaDwWDwv0Z8Czvbxz46tCs93pg9TtyyeAr7
KZR/Rd7Axle92v3x7NfyzLD3Je79cCN5Cw+JXyR3ySeJvzS/+AE3PvxKz88p
LyW5ps3LE71uEX4VD0ruefqpob3Z5bIm/1zq9l3xN+y/6pfjC9W/lL8HsgPj
E8WLVz9VclpF8ir5cBrf/nLnOdnljQN/ae+T65E3+dXKOySvPTnTOC49P4LB
YDAYDAaDDfF3+D68obgcdu3GF57q/o/kTfFMeEL5LH99bK/3OkB7pV+Rq8md
5H2/zy+GPyr7Pj8X/cXryutED3Cf6jY1uf2l7i/DP0ZdIfwm+z5/0MQNBoPB
YPD7Id7qt8d2ofvbqR9oP6t1YvCf+Cn7E54UTzSNo7/VeS7/b/tY+JnDjvw5
1RVipzaPvvqVoV3q9tvmJ/pi5x+r3bfZb690uzZ7MT5v+v3J/n92ZPJU9T9V
FwmPyP9zjrckt/3I2C51Ozz0e/hL9wP1w3uh3/6Pt2X/Zx9g3/b+tfH9YH/P
vK94VHk6Y98OBoPBYDAYPFjY9J5bnT+cxv880f0+6U/q+Kg3S07GL7KPkwvZ
2dnt77W/le+sfpn8VfkNiA+UhxSPKZ7qx8d2reuB+o0X9X/8Lj2RnBueMxgM
BoN7geKVxU3gi9gP2778+Z5XGv/Z9r9TK57mXOdH5VNseWlOdf7qn783tDvd
rrnXeWeCe4v8Hfk3VsQPiq9pctpDXV5p8+SpnrdTvXDHiwOH4tv5LeJJyX+V
L8QjiqeX10dedPyh+bxRWuUpK5LLyJH4e36rkDxXeVNynPgefGn9nSZXnlx9
f7n3n591PU9/wnMGg8FgMBgMHmz88/cM7aXNv3rv0K70ugfio8jF5F68Jr8B
+hTeUZyP+CZ5Q++1n/KF6m/Nf/bGubF1ed596Le4LHqiz+o/4G/pj3hT1yXn
83v9s7GF3wwGg8Hg3iJekh+cfcx+1eyOr/V6gfYr9ry6P9oXm93w1R6PIa6X
Hxzeden7D07Rc/U8of+Tax76p6Gd736V+Dm8Y5PzTvT5AfHs5Db/J0fhDfHo
fzS2Gz3ORv5K/p74UnmGXKfysRur5vx6f+Q+fqy1bmWV6+p9QfE57tPx4nX0
03iyGzgfv+u9XHo+BIPBYDAYDAZ3hjV/PH5T/iP8Jn1LPB27Pn2JH6j8lfxD
+ZHeaz/JvfLmk4f1kx5IryOnkvv1m3yMz/WZnsC+r//kavU248cZDAaDwf1E
9V7wn9N42lf6viVOA7+k7qD90ffiHj7y4aFd6nX67JN+b+n7Dk5RnHfl/9iV
xcE43nOsdYTIc/g//p/suZX3JCeyi+M9mz14uz0bb+4885B9HO9pXm6smuPZ
meURVU+z8qHkN37Qjf8/u43vdD/k28p7ug55V70w47v0cw8Gg8FgMBgM3h1O
679+sMuR4r/Jnezf4np85i9AziYv8/Mk595t/8RZuR57PDm28p3ykOq//4tT
n8Yvfayf73p4VXns48cZDAaDwYOA7G32WftXqyd9pueXsV+qY4QPVS8Jz8lv
TVzDlB872fmh1DlaBhuvfan7T1Y/zzl/Rny358c+rW4P/q/JRU9u4xHnkHy1
U7mIfMnu/Ptju9L7RZ4jf5LXzMN3je1On6dz99v41Td6PP5c/9mx8bWVN449
OxgMBoPBYPBoovyX/CN9Jmc2Pepyt4c//tjQbvZ4piaXf7LXj6VniXO/2zgg
ecem+Zyu9P6Qb+VrEnfOzk8+5xfa8ua/byX3f2jl1/Bqz9MpX1b0u2AwGAwe
ZGx+aW/1/IXq6OHJ1IEXzyDOGN/keP59eCP7unou4qHbfht/t71Gdc35M4qb
ES8j34DnrB7kXL0fKL84JLf5vS9/aWjyxT668u+93Oux40nZrfGX5LI2P870
+SKevcbDqA85rWP5Yp+n/EHJb/hU/98tqge29HMNBoPBYDAYDB4MbHLtie7X
wQ7uM76yyd+f63Z19TPVUxAPJF6IXf1e5U/6Gr+EaV31z3R9TX+b3P6pXq+U
Hwy+s8UBfrjzsd/9ztDuPe4+GAwGg8ElEK8kDkPc8g+O7Uzf1/mDqiPje/u2
eI1mN/x8twOyI7pOeKXdYRv3mz3eRD4C/rjkp0ceHtq1Xp+HnVdddHV8yDsV
19UBIk+xZ5Oj2Kn5h5Lf5Dtq511cfb7T8xWpo4VXxTvO2Y3V+ZnWydzKn5A8
ssFgMBgMBoPBvUR8JyS3Nj/IT3TeEN9I7pb3Et/Z5OZrq3xKd3p8OH3pbvvH
n4A/prqyTS5+scfjNf3hUq8/1PjNV/tx8kb5nl4Xf85gMBgMHgXkH8cvD6+p
Dgtes/l7Xu71t32Wp0Zel38/tjO9TiEeDk8Wv8+dIf/HJpdc73lTxaHwv5SP
kr8nnpJ9ttZHn8Pq78k/tD2/17p/pjj3Zif+h/5c1Sn/zreHdrPzrq3fp3qc
DT/j3Y7Hvcpd+PZmz744W3edP/PSzz8YDAaDwWAwuAzK7yXOm79j4xef6zyj
+CT549nlycfi3/CbzY/hCz1f2L32U1yduCpx6uTv3x7bhZ6X6qknh3an91dd
0KbffTz1NoPBYDB4pJEfXstTc7rnq5EvkT9h/dzyRb7U+TL2S35/8h7izcR7
PCh+n3jeNg4vrPxfb3c/2yZPXexxMfwyf2Zsb/Y8OuQr+Qf424pjxy//7Ngu
bP75e4b20oo3fa7LN+SaiuzWkJ2av6m6jPjxqb/ox7qd2PnqZTkfj7vUc1Cv
iX9qi9d/ptvp5VniV7r0vAkGg8FgMBgM7i82OfvKyg/y6S6Hi2MiR+IP8aDq
ff7O2C6u/A8e7nrQD43tQo/fuld5k5+neDzxVT7TM+gB/i/fv/ugr8lbv/T4
B4PBYDB4P5Hfpzzd+DVx7/JGqkcozvrXxvZa/yy+gp3TPsr+6fujXv+FPMM/
0jiw9+Il5f/hJznlMT/X48vlCfg3Y7vZ/SvxpZUPFU8jn88Tjw/t1up3z/e8
6pX/xGNCxznPdfCF4s7ZwWGrQ3R785mnh7b750zu3Cse0nxr43Oz87P+nzie
YDAYDAaDwQcTyZ3kXjwhfw1+IZXvxB+S88nj/EToP40H/UzXg+61v/wP8K30
Ln4KPzq2LX9V/ahyfs0bFQwGg8Hgg4DqyohLxruxB/IDxNeJb29xz8f7fs6e
qW4Nfzt2R/6MS9/v3o7bCx3VTcdn4jm/8uWhXdz8o7Hd2HzH2M5v4zkfe3Ro
NzoPyt/T+KnrI65FnSE8KPmKn6c6jvhKz835/DLJP5XHFPeCH6y41+PJTn23
1+eHLE7J/12v5XO40Z8Xu/lS8ycYDAaDwWAwuL9ITqz+nfwn+W3+1Nhudfle
Xi/6jTpBeEjxXvJ+3WseT0g/E58uzoucL59T0xceWfXzZudFN1YtfGcwGAwG
g1/s+STxl+yWUD139bvxevwR23l3en5QdWcqf7r0fe4VtjiWc53PJS/hC+VB
d/+NZ3t2NS5v9DwB5Cjfsz/LD9TyqV7p+YHUU+f/iceUt4BdmlzGv7Hi0uNX
cbf9wq/XuHvPpR4vz6i4fbwzeXK/7nOaJ+q5fh++997wt648bjAYDAaDwWBw
dyh+rfKdeEq8oXoH4tebXPnBze99d2i3u38BvpP+0+TJT3X/hnuVt/UXfyk/
v9/By/I3rXxny+/07q5nLD3+wYON8talbmwwGDzqaP+sfGfLb/N6lwPYGfl/
4jPxffwP8YHspI5f+j7vFsWdux/5cvBXlQcld7R6ip/s/oZ40OZv+XznifmD
qhvVxvuJVfz42R7HQu5649zQ3rzruPKDis1u/XIf17m6WMaRPMdP1TjZv50v
br/Jhx9d8dSfWOV1uPs883hJfqT6bX7Ia6s/5FDoPlxPXih8russ/VyCwWAw
GAwGDxtW/rDynXhQeaLI1+oC8ZOsfp/4zur3ea+8kXxS+qtuqLpI9A36l3qk
5Fz1Fehv/CCWfg7Bg43md3jPYDCoPg1eZun+7DXyh8N3qg/YeLtXNn91bKdX
+RKf7/6h/ObkuWnywrkuN9hvradL3+duEd+JP8NDkYfYV8kf+Eryj/jyxmNt
+Xuq29544tf69/LzkLOq3+bS43G3SO40f8iNeD78Yfv+sRVPfLqPp+NcD48+
59dq38YLqwNFHhQfdK+8Jzt7k09P9fxQ7X16o/eDfOy5Qrwnvnxaj+qh8J7B
YDAYDAaDu0R8IV5SPQNyorzv4tacRw6jD03lsI0N8ij5ba/0G/Fb8oidOjm0
qz1f078b20vb6szTQ9jLp3lGzy7+HIKHA8N77g/yk9mrvL/B4F4gPsW+Ia+K
/fCo1oH+xteHdrXv53hecdn2XZ/JDXie5sd2fpu/vP146fvbKeov+WYaj7wl
95CHyBn4LfuH/JzWN+OkrpA8nYdlPuHnfntsF3bMGzqu2Q/O9jwAvjeO+Mw6
b6pc6X3cbb9d33O5V97T/CeH+v/u5Iet5n71V9wV+Vae17vtbzAYDAaDweBR
R34b6hCRW8lV5EjyPP2u5vGs+oDr77Vew5+EnyY5ud4H/Yx+Sp+gh/hefNjS
zyF4OPCo8570NbhUP+i74j3pe/Q8ec7i9xLcT/Te40nEG0z5k7cODV+1U7TP
szPaR/lxirv22f5qnKr8UOPdl76/dYhXIk8YD/dT45Cr3FTrJrLDkkuM12Gd
N/IZNLnx1Z73SJ3JufPwi+ZJ5Qkr7+mz8fI79ivH1Thx6P3Fw0/9KPeOb9bP
OXm4/n9j1er3xqP6+apvtfQ+HQwGgw862kfUBZTXW7wLey/7p8/kn3XoeNcn
d4pP8PtzeOL42LZd1/XsNw1f6NdlB7Sf6v/0+De3Xdd51d5Lb6vH/9rYXlvb
b3m4WzzFiX7euvsQf7FunOBOn8vcfejf3Pj4vt5PrT9p/sC5ftbfqePu+c3N
m8anfWHbfRh//av9d77j6/VrXXGf9Wfufmo9dPO/zjvPvfYf/sHYrnV9w++2
cT/V/TmbfL8VvyYuXL5McVr4Qv+nB+mPOCTyZe2v+9I/8WD8J9STpUfq9zRe
7lwf/1Zn6VTPG2oc3V+7j2e6XFzvY+49rutVnT/qJfHb8Bzm3gvPAc6tP9bN
nb5vVf+Cdf7DOi/n3t+5+eR9rb8nHq8e73f00zia1/X9hXPvx9z7ta7fddzr
umk+1ev6DM3Xdc+j3udUX3th2/tg/PTHZ8cZ9/p77vdXxvbqtrwTc/2dG3/r
gfxy+q2fc+PvOvqtv3P7rn7X5+B9ch/qclg/qz5Y31uf5+SNuv6s28f0v+4D
tf+PPza0m329gvpDHqjz2ff1/7Xfdb037tYL/69yxNz83+n6Y7zqfVR//nof
dX6te5/Xvb87xdrfej9VDsIfeF7mVV0/PQfzs65X67DKDfU9n5Ob5/aDKofW
51Dnj/2ujpPrr+u/fb7xRy/2z83f8/xq3z7Xx884iyeucsJ0PTy3bf7U3//p
sd3ZNj53+/7OnVefb80PTo7AgzrPZ+eRO8RRkzv+5q+H9tlep2in88f7a12d
22/ffn6+sE0Pc191/tT54X133Ny8edfY7vQ6Vy1O/fi2515R/fq2f13v+QPU
vaz54tt5H+zx457LxqpN5+mW/Nj4+dvb5ELPwXH1vTTeO5V7zGfvm/vBa3ov
/Z5+z+mVsO4n9XnU9bPO/zn9sa7HdR2q8hus62zdb+q8mZs/VX+p6+E6+bOO
v/7W+zC++rWu/1XfpO/ImzUnP9f1Z93+W59X7b/+1X133fu7DufWfeM7p5fW
8Z6bL/5feZ45ubP+zpy+W9f9Od5kjh/YqZ5S5fi67879Tr2/Od5qTl6u+9NU
njoxw/NsrfNz/Z/j3Wr/d8oP+b0qd5rPc+vLHH9VnwP9oo7run1/Tm6bW3/0
Z53caR2t/a12zcOO7ID83/bquvLVqNe4X/ehDvf9/r39Qu/R0v046Cjv1FSf
fnK1vlzbfOXlsXV5kN9nWyee6v6d7PqVByVf4jvJndYv827d8/JetPpEJ3re
/8afPrOqn3Csx9l5L/l5WhfxNX6v8bg3ejx/lRuWfj7Bg43mtfl0r+uo863L
S9/fHGZ93R3Kg9ye72e6f6p6GUdt/z0qaJ57XvX7ne5fRxWr/GCfxj/J06ie
O56TfZ88wf4yt//Oje9+jz+5HB/eeMrT2+Ro/Kfzqh7EfkzuMI7stuSjvdoH
yEl3q6/IH3m3v+/+vEdTXuaDxQ9067zW3/f1PAnynFS7iOvW8a/vrd9hB3d+
jQ+veK/y4HT837f5W2M73/Pd+n1xDHV82P3rPH/Q159gcD/xfvE+waOJS/ub
BoPB7chvklzOP4OdqdULJe9d7foJ/pLdmr5S7feu6//32k927RYvdmtbfB3e
8zvfHtrNza98eWgXu5zJ3o6v4hfg/NQxOph4UOPHxa3t1byZ+l2/1d+jwxrn
GGxonax+qoe9/shRx/oeLt2fg472Y/Hc+E31eab13m/376scYT3F+xyU9b/6
1U39orb8+PBQU//gJ7u/fI1jX/q+1uE0X+m9X488h+dt47M1L/hf4svVdVp3
3ernVL+f1uH6+L7Pq+rnbP7P9ZdfwX71LxgMBoPBYPCoIblTXQJy+4+N7UqP
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
/WatU8S+/+OxXS9290uTdv5e4a+N7XzXP+Bj237l812/ar9j32Bc7B/2Wr8R
DAaDwWBw//FvPjW0Yz2vzamTY+vxKfjMGucurzl7wu/xlewv9pH/Y181u+Qr
Pc8PfvM3x3a5x63LO9TstNd6Xs83Xh/a+cVf/eXQvtDrMVY/9cay1fiVucf9
oOIUXx0MBoPBYDAYnAfxnfhK+ZuaHf/s0h5+bfGfx3Zh8c1vDO3C4h8/PbQv
L35+bJc6TyofVLPLv7ysM/T24tP/MLTr3V7/6bGdm6xT9Ld/M7TnlrrSF2az
H+kz7B/Y+/SqdB3e99rn9juxf4PBYDAYPHrY+MLrS7vo7WUczH2Lnxjbl3q+
zMZjPrW0s651ewlPyo5gL9U4GDpPv3fcnxvbxW6HNb71ze6HxXvKw/5bY7uy
hffkh3Yc9pn/x3uyc+Ye94OG+M4HHxjapcXvje3ctuOrgsFgMBgMBoO7g/SJ
7Np/N7arneds8ekvLn51bGe7LvTXx3as6zbxnXhK9jTdAr7T/7Df5f1s8Van
++eO0/QOz/f6P3PzhXSsdJ70pzWeXT/r/qDqNILBYDAYDB4d5C+W5wePePzY
0C52HpQO02v2Rc0Pzq+MF2VXicf572O7svTLPrXMo35t8dijQ7ve+Uz85C+P
7friZ8Z2fsmXXll8/WtDO9f7ix/Ff67ytG8u7bqpPD/Bxl/jk19ffPtbQ7vU
x3Xu/gWDwWAwGAweNcQjssN+YWyXu/2Kp2z85qudZ6Tn/Lu7hnZyyVe+0ut/
sq9/cmxnun3ne780tmuL3x6bfJ/vLOPdX+s6BnyrPKB0pezquccPH9v6+2Ln
Ne0DVuuZah/0143fvbp49/TYZj+fYDB4+JAef+5+BIPBacRHsl8gf7H8n+yl
5vd9qefzwWs2u+jUklc8vviNsR3vr9lt8m22fOtP97iYu/52aM/3972G+E3+
Z7pQ7/N/N172s8s4nzd6P+hKG197z+zjftDQfN3svveWfvzLHW/3+H8ythvd
Pp37fIPBYDAYDAZvF9UJEh/D3sEX4jMrytukjjo7Wx4oPN63vjk0Os6LS57y
VK9b1OziU53npC+Qn5Pd3uzpy71/+iGPlO/hAR2n2YcvL8/v5Z6fau5xh/Ju
tXF7p9choHOovKc4N6/Fx//s2C7Mfj7BYHD/0Hzxve8O7eriF8d2pet+puZv
84j9szok8pD4XvjQYPDwoTqHeFH+ZMj+gu3915ZxI692VE+SXrMi3ejU5+w/
r/Gb/21sZ/v/4Fn5pZt+9Vj3c+/VOLGv2MFPPD60m1u+x88ubn9qHq2/2y/+
8OSJoV3u6H357ekD8N/r5nX5oegUsg4Eg8FgMLj3yG7YrePh99gDc5/fbuNT
Tw5ta90gdh0+EG/Z9JYvdF5Svkhx063ezuvdXoV4RP59cVbH3hjahS16TzqE
E8fHtuT1LnV9KPuK/e33vvfQg0O7vLj3nqFt2s8/NbazPc+ReCu6T3HiB43v
hPJ02ReoY2pcV+srbWzIo+W1uP6Den7BYHDvEK/R/ExvLXXir/T5jz9InGvT
e73a59eWF/Ba39e2fMfHe/xrm68v9fWiIp51t9fpYDC4f8jOqDrS/cb9ridp
HjNPyg/gc/sE/Kt5EfI7T+VJ4tfG83qfXV7n0+pv8r3HHxva5vxqH8NeZH/z
+/ueuCrrAntTHawpPpNdKY9U7MtgMBgMBvce+Vfr++yJKeSHrojX408WRy3P
5LrjVmT3TP3fdnG7/6dOuniW+jl7pfl9T/Q8S/i/+r94tFofnN5QvRyfiyf3
Pv88frQer9YZ91peJ3ks7a8/ObbLi4+N7Uy/TuLU2XF4UOdFlyDeW37Rue/f
KWTfqt8uv5ZxMn7uf/m8Vq/DV5Y88xuzn08wGJwP1Ve2PzX/Nb/Wle7f+oOx
Xer108y7dKP2/fIii3Ot6wA0T9OJzj0OwWAwuF1889TQri7xVLfLfI4fVDfK
/GnelF+g2XFb7U3zJN6RfcdeNa/CZtc/2O1kegC6BceVX0p+d/O2dcD35F9l
Z7Of/W41nmhzvyVfqH7OfZ2CwWAwGDwMyG7A1zW9ydlJ3q0inq2+j5dbx6+t
Q/ybfd66/nw4T/j2Mt7lrS39WYf1d/W4zhPSYbb8SMe2/M550FfKnyluvO5f
2T+rdcIfm9znrjs/4+/34t99/vGxne/1e+hMW3/PLPNHnVzafye6naZeJTuw
2o3iqardd1ART03fKi6t8p51PL3vtes19/kEg8GDi9aZ++8b2oXJur/8SOJP
rSOpExwMBg8q0i3i7apOYOp34tTxnuKV6vdW6y293XlO9TfZY+xcOnh6Cn5q
8yk7zrwKq303la+TTl9/puxevKfjqjtFT+B98z79At6TfTr39Q0Gg8FgcE4U
19Hi4i5N8mP4OTwevyO+sfJm9G/8nuuw2gnr+LqK+kEnuFOdpvNxfjvlTbd7
fHE2zlt++fp95y8OHe9Z+2kfjFeu/DK7jj+4+p/XnQ++ruZbZwfqR7Mbj/Xx
x4vSfX7tq0M7u+U+qv2c+3nYKbLLnYdxpt9kd9JTVT+B1/JzzX0+wWDw4KL9
rzwj5pfKZ5q3m3/y7uW8e3H2/geDweAUyk8svwc7WJ2mqpeEdPHqPLG36vfw
qfzxjo8XrHqFVp9pUxdqvp2adyvaX019D18r3gxfW/OImvfZz/KUynuCj+U/
N+87H/u7ua9vMBgMBoNzovWYnlP8h/yL8og1PueJ/rqt0690v2dF9Rv5I5uu
776+X5PHBtL5sSem8pBB+STpCBvvdrHv7+rx1yG9IjtHXnH2gnGp/fB+Pd6n
/npoF7q+E3/Z7K3nO19Zf+f/ah5Mdl/NzwnlNfI/U9eljr/zaPzrlcVjjw7t
es8L7/qpO1T7/8D9Q7vY7VF2Gx7P/31ibBe6vca+nfv+v13Ee6of1fj395ev
H+48qPhUcfDs1covz30+wWDw4KL5Wd0584h5X76SNv98cblO/0XPEz13/4PB
YHAK2U/sePk+2Pv2HfV38nfiM8U/1e/VfJt4UHap/6/6zdvVyT/5xNDe28I/
Nvvv/W5vNz3qtS15RvGeTff6dLfXzf9eOx91RulBovMPBoPBYHAT5dtW11se
HHEhlZ/DM6rPPcVPytdtXVaHEA+Gt1OHQX4ycXz4vor4uCkesCJ+yv+qR16/
J8+P/6FjrO/Xz+txxJnwv+KN/S+esv6OTtD+1XVQVwiPKN+n64H/XXc9jD87
yHnwI+NH6VLZT3Se7Cp2o7xKxqcd993Fz4/t0uK73xnalSPDc1Z0HfGZ3q91
3L32ufHCe/L348vnPq9gMHjw0L7dPGt9tp9W7858I4+Ifffc/Q8Gg8F1WHk6
dqs8xdWfT+/Y8sc/2u1v9jA7bKr+z17XOVcvrv3Py8u4qO3Px+pFmefxvM6v
Hk/eUHpS/OpeX7dgMBgMBg8DVr6RrrPVl31xkk+c4iXxZlO6w7Yfe6bzeE1n
ebz7c+XbwRNO6TTxf/SIeMKWf/xM/57P/a+6jDvVhe4U9a/xvg91/+u63+EN
+bnpcdl/NX4Gqhu03eth/Olt2VV4anweuwvf3PKvb9ZbonulR+I3P+r2lrqa
fzq2m338xFuxRyvvWfMx0CewV+c+r2AweHBRHhH1/Ozrzf9tnfts90s99eTQ
ju48HAwGjy7i+dif4tOrX18+pfvuHdr5/ru588XXOJ9b5VntB+SF2mu+NhgM
BoPBo4zsBHHL6iLuFOXr5m+07lcU3wHr59VPWxHf9ztju9n5OfoW3/O+49bP
K37j60M733mrqe/h/fC1fufz1t7vfNa684HNX32+6wkhPpj9VFGcD96yXo+p
8XeeTWd6rucddVz8t3huedVbnaVpP/pRRzpi+aXY3fhMn8sX5Xd4UHWhEuce
DAa3i+qnyTtiHpHXTh4S/sy5+xsMBoM7RXHu8ieJA5/Kh17rrNe67nNhja/f
6e/l4TK/1/iiYDAYDAaDO0f6vKazvNrj6MSRbBcrX7ddbLzgS5O83n4hfeZ2
v9d4z89s+3frkI6w8sn0O3SflceUx41/m731s2O7sGW8/V+tZ+n/HJe95nhH
Xce5XZS3E69d6xzVOkarv9/YMI7hPYPB4HaRftP8/VNjO7vkA54udfEyTweD
wcOD/On2E/zJ7FHxSvV36gNUPejc53O7KL9nszO/fGD43OD2sO63pva/6mv5
Hb2O91u+s/OpUxUMBoO7jOKoxVffqu5zpygfJL/ulE70qCMdZtWBiieXH7Ku
my0f5xeXus1NHrXlWX2rj7PrWv+XbvFO1W/uFI2v8VvHe7JbNlbaB4u//J9D
+/zs5xMMBg8PygtM99n8bnclX0YwGDy0KC5qVVdwpuenajzQuf59fnk6T7xn
rQ90WJHuVf26Ft/2Tn9/7v4Ffzzab8m/Xfe9LW/Y5a6foUNp+eY266bCltf1
RM/bZt+3ur+Y/7yDwWDwsCE9mryT4qDl6fb57SKdJ30K/oiebh02/9dzfb3Y
7u92ivipW/29fopzhi0O/ZFeB6l+Dts6ePdyvduM+4HqUlYeU7xjdJq7i41v
Pt11tut4T683VtoH5f35zysYDB58tF7yv2wsG95g7v4Fg8H1eO89QzvX7cvG
azy/bbtSvt9b/f8WX6S++clbtm/525sf5sFut354vMs0slfVWW35LB/v+fvp
AnxfPvmWj+l6z38593XdbWx6/vO9TkDm+cOB6/a/9mkby6Z+l/2E74nzkJdM
XYGfG9vFvj80j5hX5j7/YDAYPKhoH1XzgrEz1K0Rd/JHY7s2qQ+s67LXkC6l
+auu9vVc/sjK682NeMVb/X2z465tGYedojj2qXV07vvoTsGa33Md77lq/2sf
JM49GAzeMuI9G/9wJetAMHiIkN3NDsD30S16zY5s+rHN1/iOKX/59vC5JW/4
Vj8+bHVCn+r1TL1u//v5rsusfCd0HtsdD/OXOF86i3X6zaM+76kXkLzNRwtX
98kbG55n+4l1v8f30wM33eifR08RDAaD28RqP1Rezfq70zqx6/xeVZd4VHHu
6xvcHbxd3tM+J7xnMBi8VcQLJD9JMHh4Ef8p7ofuq8YBea3+JJ6Dzstr/KT8
F/V1ixu6b4mfXfzq2F7tddEg3hUv6jVetMW7vNP5TbyNeo471XvC2MvBOwFv
l/dc1YGe7sdp88GryXsTDAaDwWDwtvF2eU+vw3sGg8FgMBjEb24sW+VFfK/a
D3QDe2VPqK9T7ZqPju3Gknc923lPPOh2eU+8b+Jzg3cS3i7vCWserebneKXn
PZv7PIPBYDAYDB5eZJew9+XfD+8ZDAaDwWBwu6guCbsB/zHFe+JHax6kvaqT
iPeU34rd439X8xFO5TWfPv5qvv/EcQfvDKzPt+d6p3W5wnsGg8FgMBjcK6z6
TrqHu/95aGe22P+rv9/YoBMN7xkMBoPB4J2L1Z6ovOeH84faJn+yqhfdvf7h
PfEo+ut/5RmuOs/kGQwGp3GK99zpcSrvmecuGAwGg8HgbmHdp9T9yQ9/MLQb
E/sQLfXcg8FgMBi8k3EqT849dw/t7FreU5x7s0NO73r//uPYXll859tDu9zz
Cbb8njcX/9fYnl38l7Fdv+W6RsHgnYRTce6tjtiFyd/RR3ve5PNU3+iTY7s8
+/kFg8FgMBg8/DjFe9b4s8p7qlcgn9Ve6TOCwWAwGAwefJziPSuu/k7b5E/2
Kn6k8p5/d9fQXuh1U2qeH/zN/zu2t2cf32DwIOKt6j1b3bHryzplJ5fP32e6
P8L+Yu7zCwaDwWAwePhxivdcrce6lfdUJ9U+xvfnPp9gMBgMBoP7j7fKe9J5
+nyveM/Wv1eXPMuVru/892O7vqX/7J74dYN3IuIda/7diqv11rfm95zCXxrb
tcVvju3E4l+P7fXFb43tyuznHwwGg8Fg8OigOgT/99jeWTzx+NBubqmvqs4A
e8W+gA5ir+LSgsFgMBgMHnzEG/KLTvGfvo8fqbznXtVDl9/z/xnbta7v/K9j
21rHsfp1U68oeCehOPVP/fXQnun5b6F9QfMjvNDfb/zl08vn5aVlHomvdPyJ
sX2p//7Xx3Ys+s5gMBgMBoN7juwW+4Fmn7zT83viQe0D1EG1b/F59gXBYDAY
DN55uFon6HM9L+YU78lvivfc6zyaeM/Ka657rZ/JYx68E/FPxnZjy/vr6rWr
e9qenxsd33l7aDcW/9//Glr2C8FgMBgMBvcP5blq/tZ3l/rPx/s+xH6mxq9s
LBseNHXdg8FgMBi885CdQB85xXuyH7ze6zrusMW1X1zm+Tyzbd4zdd2DwWAw
GAwGg8HDj/Yr/Lr4S/b+avyJ9kF//b3vDu3qUi/65uznEwwGg8FgcP+QHdH0
XG9Pxrn/6tjObuFB/83Ynt+z/rV6Ke8tPj6281t4za9/bWjnevz7ffcO7fzi
1MmxhfcMBoPBYDAYDAYPMdqvPPrI0K4tvvH1oZ1fvHlqbH2/sLHSPljWO/38
4n/+xdDO7Pm+JRgM3jnID9P4huT9CgYPMm63rlH9XJy7Os573U9+XTwnO0d9
Fv5bdg8d6r8b26nZxzkYDAaDwWAwGAzuHO1X7v7noW3m6RTvvpq3U/ug5wG1
j4Fzn08wGDy8+JGxXV3yDccXTz4xtOQBC86D4h2+8+2hXe71AJufb/O1/HVz
93cuvFXe0/juV56cFuf+yuIH3x/a9V6PxWs8Z42/b37eu2cf52AwGAwGg8Fg
MLhzbHFcV/q+wz6k2v/2C/Z/J44P7dIybu3VxcfGdmbxW2O7Mvt5BYPBw4f3
3D20s0te6cHUSwvuK1r/3IeVt/P+z43tYn9f/DS0Hn50bEefD8V7sgfoNw8a
76ne/PFjQ7u4+Ku/HNpriwcfGNqlxf85tvsWfzC2S/1z9ajZS3OPdzAYDAaD
wWAwGNw50leps/ivx/Z6f22/Yh8gPk39VvuY1DcKBoO3ivwmeBPzTviG4G6i
+0mcA2xxDjc7v2k9O3liaJc7Dw/xmt/+1tAu3bG8511/O7QTy/yYn+l1jVrd
w1cPDO9Z67q363i6X3/9rbyt82m86Buzj3cwGAwGg8FgMBjcOYr3sp+zD8Fv
Np3E9b6v8btWJ/X+xR+N7dry9y/Nfj7BYPDwYuMl3u98ijrMc/creDjx18d2
scct/PbYrna+Et++Wsdv/n4fFmzx/k93XrCN47s9Ppx9UOPK1Q/aL96z1V26
seS3v7L47neGdqW/1s827zzf85f/27G9kDyfwWAwGAwGDyyKy/33Y3ur69q2
i8kvFrwTcIr3lL9s9fvaB1vi4X9ibI/Mfj7BYPDwI91c6ikHbwUbn3my85zs
Qfwmfn3ufh52ZD80nvCpZX2ga90+WB1n7YPZ4kT+8dNDe7vXN/rNsZ1Y3H/f
0C50flN9998Y2/GuExUPM/e4B4PBYDAYDMJmn5xf+qEv9Lw+67D5d08u7bFX
uk5gHTa775XFr43t9c6f4l3nHo9g8MPQPuDYG0O7sPjJsZ1Z3rfXy/c1+517
+vNlnzP3+QSDwcOP6iy3/BpfmL0/hw3lYf7mN4Z2YfErY7s5e7/2Gpsdd6zn
aYyOc2/wb/9maJeWeQBOLHW1x7pe4MPtAW0+3lMdKjrPXxjb5WVen5e26D6/
992hXe39xYN+65tDuzj7dQgGg8FgMBj83bG9t8W/vw5/9MOh3ezxONtF8cDs
qMaf3rXEf1rGBT/b7avwocE5n4tmx7/f6xKw69u+4O2e52z199oHXRchT1Z4
z2AweKv4n8d2YdHaJk/1d3cN7eTs/Tss+MjDQ7va8zHTPf7x2Kof6+jgvfcM
7Vw//+g59xa/9tWhnV3yn8/1PJjshua3eLvHjdTnGK84V/2yxnu+s/i9sZ1b
6iTu7a+bTvjUMu/nZr21Fr//+eX5vDD7dQgGg8FgMBiE7H52ijyE+Mft4ofH
/W5FPCs/8e+P7eLy/Se7PdV40GM9Tkj/8KHyEc09fsGjhfhOr/Ge4rjgp/56
aM+U32sf9H2O73k99/kFg8HDh2+9ObRri6eeHNr7i/8wtindWHAK2R+/NLZr
nZ9q9bbPLuNRzi/+x9gOfx4fdpm6RO6fuft1VLHZrRe7vdriPT67xR7gDxUv
Th/gOHjEuc6D7lO99ocfGtqVzseK12+85+f789TO58+X9vnb3V8z93UJBoPB
YDAYZL+wa9Tz3Ck23eZDnaecwmYHPtP51Zb38Es9LvhvPjW0Zxef/oehvdjj
6/UT70kfyi6rPGx40eBuYOU97R/rvqTpmTf1yfY56heknnswGLxVrPq8plc8
t3ytzd/Pw4LGE78pjsV8/zNjO/z855+M7cYWf15wb/CXx3a95/PcWDbx4fwU
9XW9Ps3P8eZs54EfbzrPpxdPPD60m93O/+mxnVvynH/RdZ90q/jQ6D6DwWAw
GAweFJSv8yNju9rtr52ieJx1+Kdju9l5TMhf3Piky0u/+Bs9voYd1eKGjvd8
/HQwjsPeZE+KM7Kf+eoHQzvTedO5xz94sLHynvRCVWflc/GEeM92338uvGcw
GNw1NJ9E77m7+Dtju7n4h78f2pcWHx3b4fGf0tc1f9vZ2eKk71T82bGp//Pw
8v2NDbwgP+jqddG2Pt9znw97mU7V89D8v4/3fjqvf/nR0N7rr+VHV/d97vMJ
BoPBYDB45yEdQ+NrXl7qMO/r+6jtYvXrel3j0yuyg9r3Xuv8KR3Gu6eHtsmX
quPwX8b21vL9J5b9eK7ztuL//A4v2n7/WOehxONMnde6/u836g+dYe3vdo/z
n8b22uz332FBPCeefCq+FO8pD2h4z2AwuFdoPmn+vvl0YUcN2SGNr7mxXG/n
y7O4XVRHRl7GxLvMg+KU6CA9n+wD8e13//PQzmzJf+O5Pij2AvsHf9l0BWf6
eeA/nQf7n5511e5+InHvwWAwGAwG9x3Z9/jP7eo1K+KBKt8obqzqOmtcfcsX
dGIZ7/7IMh/V052no5/Tb/7kxx8b2o0t+k18lPzq9i3yFW33vNb1HzZdyLXF
Y48O7fra70+h3/vfOq51fCtu93+++52hXVn2+80et2Tc8aKpx7mK+Gbjjd/0
+Woc/OM93m2K91Q/KfuAYDC4UzSfxK+yN8g+Eicur6F1eO7+VVRvBt+ZuPZ5
kH96Y9laXqbrnf9rfvvN13hFv/c81/fnxqov/+EPhnaj25HqNXnN7sZ/Gg95
/GP3BIPBYDAY3G/89bFd7Hkx1+XnrLpDWD+vfOU6/LOxvd/j4P/72K70/J0b
yyZ+Bq/p/+QZdTw8538d27vdzvT9W92/+B07Txx0/V/juu54zY48vu1xn8Lb
vQ/Y2d/8xtAubBlvfJ7+Os/b/d/DgvQMeHf7gMp/Grcax2b81DGYun+CwWBw
Ha7ynlv9MMHdReNMzzY3/9ny/7y+OHF8aJdSn31mfOP1oZ3vddrxg6v259t9
3Z/ymx7059i8w57mp99YNvZMPV/6UOOy6m9fXw81GAwGg8Fg8HaR3hOPpa7k
7aJ8nRvLVuPKax0kfNq6/uKdan/xozX+vuo8fX81Tnm66bd+Om6NN5cnYN3x
amv86LHO8+50nFfr6azvf0W62srT4qH59ev/Gm/njYfG6829L9xtZO+7/yqv
ufr9jQ3fc33sA+T5qnrpuc8vGAweHuRXxDMcdL7kqKB5u61/7+y738q6Yn2e
ezyCDfHQ7MGW3/NU5z0rr+n16nG0+c9nHTpP9z/+k11c84DiP9U98nvx89vV
CQSDwWAwGAweFlQnUn1I/Cj+r/Fmn+lx75UXrbrOingkdmXlQcXFbzeOSLwY
u449d6t8lf6zF/dLN+k8Kn+Jb91YNnFWlR9dt78TX+e4R01/gvdkv6/eP9oH
/bX9qX0OjL4zGAzeLlrP+FXCe86D1rvdntfZCXgkfsZvf2tol2Y/72BDfF3z
/z6zfH9jg13rOZWf3mv8uftm1X89/3mtw+r3rfUf/+ovh3au2/fscHY/P7Dz
Nn7hP4PBYDAYDO42tvqMF7rer9bJUQcd/1jzZqpLxI6rv2ev+556kM1eemky
T2iz7zf5RfaiOGPxNeoZOT47Co/oeJV/Wv391vpMjldRfi88oHyiU9+vWMep
8btPbRnf20X/V3WJ6/Kz0v3KO2nc/+ZTQ7u4+NWxvdr/x/U07vKcTh3/sOsa
nQ89q/HdWDY8KDu+7gPcd3hT4zz3eQWDwcOH/DCHJT72qKP1odZ3URceD1TX
R3UXrdvsivb7Vw98PaU7FdlLbd1XF/SNxcfGtln3R/2i1bwUp/t1ZU8d1vy8
Ne8nO8h5i2+R1xS/idenB2128Jt933HsjaFdWDz5xNDeO3J+9GAwGAwGg3uP
4qOm6uRM1dOBNW68fs7u4df9w7Fd7XE/8kXWeHd1ddj/vzm2E1v61+ykm52X
W/Wjv7qsN/lU5+Va3tLT/XdT/XX8elyoLpD9jLqWPm981/XF9783tM06QlUf
ulfof9TTkV9+ih/Ft67ysq92e3PqvjBe4t/97sfzsc/1/dzU/XPQ8vhPYdVr
OE/7XfY+HsL33Pft/N9etHoHL85+PsFg8PBheM+DjeJDrMc17+Oqf/j5Xj8e
nzZ3/4Mfjuzn118b29J+uqvzd388tuvd3lm9/o91e5H/030w93ndLlb+ttZv
8j77x/iwm9ih5rF2vONLe/SNxSfHdnlpz7+Xul3BYDAYDAYnEa/U/KmXur1d
7XB6TvrG7eoZIfsGD4cnYudU3QPeCy+JL2x+4QvLvEn3dvupvX562b/LW47z
K2O7WfzNn588v1of4laR3tH+Zt040dnudHyn0PjWeOw6PnSG/OjscP53fLPx
Mu6OX4+7jjfHc1bdY9WnOu5B50H13/26ev6fK7z85vecL76cfR/dZzAYXId1
PgzvGQzuH+I7v/PtoV1exsE829f9tr5f6nZn1Xni+9gLq/FPh3/9r35g9twU
/ymvZ8Mv9/h2v5f3qtlP73Q/PR700UeGdm3x7umhhQcNBoPBYDC4iR8f2/me
J+rBB4Z2aUu+R3FX+DCvv/udoV3p/NgU8n+vwxYvfk+Pe9cv2PjR1xbf+ubQ
Lnb76RNju7D49D8M7cXOa7JDW57Jtzt/ineD7CW87HbrpfufGu9e8T+P7Y0t
/zuFjzw8tKtrx9X1mDqO+OvanzaOX+j9brzbK8u49bOT9ZKMD/0CnPof2Pr5
5X4df3tsV/vx6nWo/dfPb3x9aOcP3L7g98Z2rvPb3sc/iHP/b2PbrGvK3ncf
uU+bXf+VrmOY+/yCweDBw7auXFi09n6ZT852XmXufgaDRxEfenBolxf/aWyv
Leu3v774j2M7s/jJsZ3pegL2jfVdXnn+iaP6vPJbN57yS4X3vdHHBy9qnOwD
jOPxY2Nb2r8n+z6gxcm8tYwf+2KvL8bO9D/01uFDg8FgMBi885BehB4SP1d5
K3Za5SF3G9W//N53h3a119d5+KGhXVn8zNjOl/rpz3c/MD5QXDmeyfemzqfp
604v7afpOunsJ3xd5enW4bo67C1O6lzndz+c9/1C16ficbdb532q/x8Z29VJ
3lK+AXal8VSXtPKi9bwrb+58HMf1wG/WftPN/tbYrvS6xXM/P5Bd776seQzo
Ff5obNdKnrdrPX+V8bQPavuo87OfXzAYPPiITzDvWCfm7lcweJRQHm/rNb+x
PDX4OPnP6QP4lflD2d/sgcOaz3O7yB5k73jNXm/5z19d/M7YbnYdbbMf31zq
GI51O8o4njg+tq7baOP6bo9Hcl3wp+yuKXsVzj1ewWAwGAwG58PHHxvaen7v
VrHyb/i2v/+7oX2x84E/O7YLPT6+6eJe6vs8fuWmB31rCz/I3mk83tUtvOgU
ruNtxec4Hp6Q3bVdHenPj+3SlvHxP9s9zlT/m7348uKnx3Zurb7Ta/bplL6T
PWsc/J+4dePteHhXdqg4sHpcfn/7CL//k7EdHPsUH4vnxD/UekZ4duOFr/fa
OLW4tzeS3y0YDK5F+jGvj6p+LBicA9XREb8uboPek93G397irU93P2b1d9a8
T+yFuc9zrxDPW+0feWzF8TTe853Fb4zteN8XVP7TPoDdxe5XN4zu8+SJoV3e
kk9XndVqr7Lf1+kHoH3R3OMbDAaDwWDw8CI7kz0kfye/sLii9v6Jng/oD8Z2
qdtB7JkWf/RK58/EXzd/8aXuX6YzrXHlLc7m4iSKt5d/He/a8mNe3nK8ls9T
HoAr/f93iuvi4SF7nf5APKRxgXhRvG3jk1/tfGf9/zpe4r/sA9il8v77H9eP
PfsLY9s8H3Yl3k9cPZ5bP/VDfoC571v9E3/lPIx3y8fwVn+t3pTX7b442XkL
+ya67LnPLxgMHjzkx/I6+T2Dwd1DeZXYk/zx1m+8Gj83vg2/Z31X10hepq9/
bWjner6Kuc9zr9F54ofZS+xScVfN7j/d/b/sSnpO+wD2ZNNJnO/7BPlC2/uv
9zyg4trwneoG/P7YLnb9qDyt6s03Pe4r3b5nvzb//GuT9jCee+5xDwaDwWAw
eHgRH9b87eeW9tDLnV9jTz1w/9AudnsEH9f4xpM9Hqbxeq90/z37qH1+rL+e
QnYQXhVf6H35iRyPPVftt52i46zrn+/h06b4Uzxt4z1PdbuRH7z+v/wEtR9T
4+9/+PkrH+r39Ev6xy5ufPa1btcaZ/y3789lb7ovK//pfO2D8OW+57Vxxn/S
ObvP537ugsHgwcMaJ2v+nrtfweBRQHl21OMRj4JPYz+Kp+bH5X/n/+Q/xoPe
KXxnRefd7LezPV8V/YK4dfYqPzcdrfxX7Tqc6/wje5Qdyd5X/53/X1529jc7
FK/JTq92KP5VfmX2cTuPu5d5D57qv2f/0TfQO7BPj7rONxgMBoPB4O6jOo50
cd/8xtAudHuGXYSHZBdVvSG9qN97vU7vCdlZlVesx79VfWfFxqNdWsb/TPer
8ZIXun2mfijekL0HjY/XU3pPWMdJPR88MP5OPk8626pLbfV9bnSer/K7dLTi
mOwnfmls1zqPKE7K+/t9P+I/7Y/YvfQdzf59oes/6Uca73yi280NL/b9lTyp
9f/c9we17n0wGNw7rLyn/CJz9ysYPMwo3kh++dW4mHe31Gn/w7Fd7fHYPpfX
Bz+a+OiG6gyxl5rdeL37seW9Zz+zK/GN7NTVeKtL3c/Obqzflye0xlv5Hf8/
/Wez4+7p119e118b2+vdXmt+6xN9H4AHb/fRE1vi1MRD4XHDgwaDwWAwGLxd
xAexY9V3ZJeyYyvi19i1UBwhxAuuO95eof+tdUKhuKGmP3ik22vr+q9+prpD
9X8bz3i6xx85nn03f71x8z/1OLU/8mK6fj/8wdBu9O/z+7NjPz628/262qfg
C/G++33fiXdrfv9Hu32r/gE7+PQ7Y+t6Y6+Nr7xXdFz0J/4n+oFg8M7Fynsm
zj0YvHW0jjb94PmePx7fxf6wPstDyS/L/uCP5z+Wl/LPxhb/ZMWnnhza+92/
+3Nju9jns4+N7UzHZjee7/rZaldW+9f79BCu49Tv5AGt9jRUh37K7q/f93+t
v68u7697l/bcyf49eQDwsfFnB4PBYDAY3GtUvxOyY/FrEJ86t32in7V/lTec
win7brtInzhlh+L5at5/dijejz7U5/hceez449mz+E/+88ZXb+U/G17Y97qd
Tcf6du/nL47tSueFjYtxwmPgc+lH5Gd489TYuk52rvstGAzOj+E9g8HdQ/Uw
rcvyejY/5onOd7Jj5JUUZyLfOHuEPTMVrxH8cMQPux5Nb3mmY7U/8Y/i5b2G
vsfPXu1QyA5TB6naz/zS6+zhdfY2e44/u/3fc8vzfXOZX/SNPr/jQdU/mPv6
BIPBYDAYDB42FG+EN8XjQnFB6+w8/Jw8/zUOjB3H3qz62Sne0/d97jhVP8ke
ZRfjPeUtsG+R32C/eEPjyN7VP/2WN9/42VfRNdCRNL3um12H6zz2m8cNBoMH
B82j5rPwnsHgzpHfWnw1Horf0rpsHf/G14d2fpm/552l3XJu8adju9nzx7M/
5vaLHxVkp7JL+cX/69g2/e/sT3548UbyQ1X+1HFcX/bmOn0A3edHx3ajv88O
rnYd5Nf2e3UA2HV0xvz77N6WP+ps7qdgMBgMBoPBfUJxSewvOgd+6RYntJlP
Xh1Tea7kX3ri8aHd7L+TV2m1btKFbseKC6KXZC/aX9x/39Au9Pgy+QrUhWcH
y8skn+he1003XvLby0f6ve8O7WrP70mPQN+6au++2s/X+ft8rnymwWBwPsR7
8n+E9wwGt49PPjG093rctDqZtU6jPJF4qK99dWibdXmsv/JQslvECc19nkcV
6R/ZoeZB+YDk2/ztsZ3qfmb5OsUbOZ7rzl6s+ezF67i+7EzHdZ/ITyQPkTyl
+FXfcx+1OJ6r3X/Fz61/8vOzf/2ePUjnOvf1CAaDwWAwGLzTUJwSe5Q9J28T
P7i8WfYL6m3+/tguLnm9Z3o9Jval+Cd8qLyi9iX0nuzKmo9LHnvxaeoOiZPf
q3H53bG91/Pbs29bfaOr3Z4Vz85OFg/FflcnCk9qPOeqZx8MBvcf23xxvr8O
7xkMbh/FY/zjp4f29tKOeKjXfcQrsU8euH9om3kn1Wmkw8M/4VPnPr87Hdmf
P/j+0K5P1jPyfXpfvCj70PWHeM2Wv/165zXVM+LX58+mM22/u9n501pXXpw7
HYH5vdl/Dy91pF9e3ref69jswqvdD6af8kLNfR2CwWAwGAwG7zQUp/TLY7ve
9wktn5Z8ls92HaO6SfSj7Ek6Tr9n34lnEi9vn2JfIk5cvk928Gqe0XN7ptOg
+3T+7Twv9P+n82x88JmuJ6ErwIPKf+985YuSN5/+NXqTYPDoIp1Zi8e90fNn
zN2vYPAwoPrqzf/4pV7/scVlnOx2g+eKH5V98tijQ7ve41Nq3cHg4UI8eM2b
hLekC2aPtfc344r+YGyXOm+pPpb7A58qjl4eI3WvWlzUW513r/ma+Lfb/ffZ
Zb83NvC73//e0K51Pr7xspvHc15zj3MwGAwGg8HgnYZVF8ovT+/Z/NuPdZ0n
u/OhB4d2ue9P8Jx+x29PLyofF77xvnuHdr7H1X9ybJe7fpQOFZ+wV+cvvp6+
0/m0PE/XelwTu9V56nfTAXyx6w/ww80ef67rWKM/CQaPHvKTmEc/MbYLs/cr
GDzIaF2XdweP1eIxTneeix+Rjg5fhaeiz7Nui4+e+/yCt4fsL3pO8yu/Pd1m
4ymv93yd7FXxR+4n/Dr7tubNl8eIXdvsuqtdh4zvFMev7hL+XTyVvAzyOMk3
675kH+ND2ZPu97nHPRgMBoPBYPBOQzwoe63lXbrQ7Ur1VtXblEdU/dUWn3ax
57nnb5dvnl1Z7c5W/+hy99vTgfDbt/z5u5dPnv6T/Sy/lPh3cfktfv3NngdA
nLz9ms+dh7xWlf/c7f4Hg8H5kD7Ja/qkufsVDB5EZFeog9N4z88s8aluD4ij
wGeyG8Rn/OHYri4/f6HbC6m3fTQQz7nd68mvjCfFX9IL4yPZa+zSH/1waDe7
3539Jh8+3pPdK66p3Yf39bpa7us/GduNHvcu3p3fnG6U3ex48ie57+ce/2Aw
GAwGg8E7FdmVje+73PlBdVPZbfzZ6mH6njg1cUXyJKkLL56e3ckvz35kN8rP
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
sr/Yn+oDNR3nuf5cPPzQ0K70+53Os/KgXvNj04/Se/7p2G4ufmFsl7v/nB9A
nUzHo/dczXP/cs/vpK67//vrvxra+Y6OU/3p4uubP+LZ3u+90gsEg8FgMBgM
3ulov9T87s93O67xiI8uHn1kaNeWdd7f7Hk0/Z6e5HfG9s7iD8d2denvfnEy
j9Nu91/+KPXo5S3VD/HwNY8p/pM9K/6v/e6tfty9Po9gMBgM3llIl9byzZzv
+jD5Avkdf3FsVzqvKY6Xn09dInWN8Cu/NLZrnXcR/z73eQfvDBR3TncpDpwu
Ury6+17ezZ8a29keR175zZbf4XLXh4pnxzd+dGw3ui7z58d2afn50z1PEl2m
/tFlNny1++/ZmexAeSPwsOxgPCkdgOe62dcnOg+r3ihdNz+9/hsX88Pc1zEY
DAaDwWDwqCB7q9WhfK7bZS1O/Iud95Q/Hq9o38VPL86o8obyNO1V/1s+qDOF
h73Z94Hs3VrHyfdr3BJ72HnTA7CnU6czGAwGgz8O6bfwNfRv1g+8CP6mxfW+
3uPa/3hs1zuvie/kf/S+9au9vtnrG1kX8TZzj0fww7HeJxDPBvF/7qO5+70O
8ZbsycYvPtLtLufF7vq7u4Z2sus7Pzm2y4ufHtu5Hq8uPxF7jp7Tcds4vdSP
99ijQ7ve9dKfGNuFrn+mq2Y34kGb3Xeu60vZgfpFr0kPirflf6db5VfXX7wt
nlU8Pf62+T2eWeKF/vyGBw0Gg8FgMBjcHWRf0UPK/6n+kXz0zV/+le6/VxfJ
+3jD5v9+a8mnHt8zu02/6TvFTcnL1OzfF/p56Tc/u32k+EF8bbOjr/c6UHhh
+absM+e+bsFgMBg8WIhnkc/QuuM1vlMeavoxv1Nf0LpknaKP43fE6+A7+fvm
Pv87BSs/OYWul/sAPvjA0C51Pg8vhy+E8raKx67Hgdvtz37n8cFb4uvF1+BD
3f8t//qxzgfSUeo3vzV7k335ox8O7WbXS9J5qu/1rW8O7WL3w/MrND3m5e5v
oAd96MGhXe7/K39u4zlf7nHy4ufpqVv/n+161/b/V7ve0/XFY+NrHVdeiuPH
xtbtUTys/sf/HgwGg8FgMHh7KP8X++3++4Z2oduP8hOxO9lp9Cv87exG/vCv
fjC0M3vWb/agvJ/6KW+9eqL2m+pyskfF+bOPmz//2OInx3amn6fjN3v9zW4P
Jx9oMBgMBv93bLzm1V5vr8bn8iuKm8D7NB7oUl+X8EV4mFMnh3alfz/12fcG
2UPWeeOuDg4dYIuHObkFm91wYhl38nrnsSqyT/xPxfa/Jyd/D/HoU/2B4rWd
R8X2vSv9//Hxtzuejfd/o48Lf7TXnhe8qPwO+q1/7LTGe17q/gT1iuRpan7v
K/15as/Z6Z4HF68K8bP4yPZ8vt793fwQnkv8Zb1f3BdN33mi9/uN14d2vqN8
S3hveU/pBtjPTb/9VO+3OHzjlXxMwWAwGAwGg7eG9lHND/7lzvOJ+2EPyw/6
38d2pfOE9Cr0DKvx81f3TC9Z6x5V/Qu/OTtaXBX+k65CPJPz8Dt8KvuZ3uAb
Xx/a+a7rmPv6BYPBYHAeXI3jPdv9hvhN8Qn4MPVS6NVanMEby7iEV/p6iz+x
nqZO0e0hPq/yjMaZPcBeMO54RvzcFF8pz6o456nvTSF7Cd+Kj6w8pc+//a2h
Xep2injpelw86xR/Sn/ovOWb9X/yzuqf4+IPp/zAngd8P/0mflB9Scd3XOej
f+28NnWw/Nj0sPI80GXqP//1ap33c51HNX7y1fPn4z/lyxV/v87f7frrt/HU
X/yq+Cr9UX/JvKH/Pze2i91vIk+AOvSuD3ucDjV++WAwGAwGg8Efj+xj9po8
Y+yspl8513lD+7Zm523m3ZQ3CW/Kvttr/pPdyx5kR9Orspsr/4m/9b7vyeNk
v8SOpscxLuza2JvBYDB4tFBeRutdjWe2buI5xfNWP1njczbXE/ou+Ftju9L1
eVX3Ofc4HDSs9bineET2gPUc78a/y2+Kr/L7Ou5TfKXju35Qvseqv6TTrHpN
/Ja4Z3V3Kk/Z7LDXum5SPHXTFb4+qeus/Oyfje39zrv5nJ3j//TD/avf+Dl1
e/yPfAyeCzpPcUCVP3UeeFD3P7vK9/gFxOfgBateVf/Zn+w018X32KX0tT6X
l5O/+1btVv+Dz/zmN4Ymr8GFfh/SC9CxGqcWP/9mz+fUeOMv93lGXVL2rfP1
P/IhHJY8scFgMBgMBoP7heJ42LtV78AeZeeyy9iFbZ/w9rJuw/luR7LH2MF7
3X/8q/3Eaj6otztPy94XT4T/ZA+LR3Ic8UrNPr/cdaH4Yefvd9mvBoPB4OFG
64d5HV9mPeRvW80X/VbnifBD+A18h7qANV628V4X+//Off5zo3XU+mvcXQdI
RzuFLU/AxeX1uN75MjpJx1eHZuo49IXiZPDW+Cn/wz6gz/Q9dhBdo+tNT8p+
0p/qT9W/yptPoftR/+/+56Gd6XHXbRxe6J+zg/w/XhlP6nrot/+R18H9ju/D
k+Lh6ED9n/MxrvW4dfz539U5qp/rv/HHM/rcc8wfQf/JXuUP1+8a375TdD7u
u9pf54lnxc/js+la3R/qMxk3PCk7G88sfsnneGR+nLmf62AwGAwGg8G5Ea/H
v84u42dvuGlvstPZteLN2WvsN3XT1RHaq/7bL+Jt2e/qeP7M2M53XYX8pPI6
sR/Vl5DfSZyWfQu7Wj0k42Ef7PvsfPuf2J3BYDB4sLHqOfE5eCRonan8kvkf
30nXZh2kK6t5DOc+7/1COjT6P+s0ewLPg7ea4sGMW637ow4NXSC+DL8mv4D1
vfKF9X8cl56RrrDlLzjf1/l6HPcBHny7fOXtYuVHnQe/b7XjKhp/vF29DpXH
VZ+czpVeuY33K71+kf/VjykesPZ76n3HdZ3r9/0POxT/h/+EzhdfyL+vbuZu
3fetf+8vfnls17ecl/46L/Y0e9N1rfw8e5W+VR36lp/qwW7Xsu+jAw0Gg8Fg
MBhsyB9e+U+6RvmR2FPyILXX5/o+EP/JP89+22v+k30nP5R+0dfIJy++Sp4n
cUJ0nM1uPNHtSnayzyG7udrz9KTi2OwT5KsPDxoMBoPzonlYfRTrl3or/FnW
C4hnsE5Y3+SNrnwnHpSuiz6Qnm7ucdhtxGfiB9kR+Eb+1KqjtN4aR7wjv2bV
HVp3K4/k+MZfHhvrM/7J8Wtdmsof6jfe1Pvq4FjvKx+Fn4V0qnjzKf6Rf9b3
fndsp7d8r/KYdLH6b1zpIY2b+895GJ/VvEVv9ucAn+l932MHtrwBn++6w4+N
7Uzvj3yb+oH/b/rnrXpI/WRHus4P3D+0zbyd7fm81P3L7DT2HP90uw+udfuQ
7tbzS+epDvxePx/4R/eh+wNPW+878UeruvJLfd7xffdd092eWtrB9/U8CezV
3eZ1g8FgMBgMBg8b/suPhvZetxvFQ9EvtDxlX+p2Jj0DO5X+oda5FHdD17HX
5/H97w3tWt83tHimk8v9w3ud36XnsT9Sn0DeJftUdrd88pUv5Z933vZ79CE/
P7bNOgTyZ/l/duzc1z8YDAaPKuIZ8TDqT+N18DSrdW1e7f47eqyax8U83vDF
zkdYF1s860t93TmseaHxVda5dv5b6+ZYN50vXR57QF7t/zC297bwMOKs8TyO
V9dj9b5rXst77xnauc7/4K+n+ksnh/d0/epx5clhT+ABGz93qt9Pjuu6O768
krXuN3T/tOM803/XeLmHO+8qzyOd5VT9Ive1fAr4ePaH/uGfaz0jceD6rX/1
/Dwnq3lq3+njQy+Lp+UHaPzla/06rz4v7y0+OrYb3V+MT3U9/U4eXs81e4yf
m96TXei8jAM/Nh58rufrqSeH9v7iV8Z2s/P/q/ztm338zTvud3mo8LeeU/WR
XEfj9+QTQzt881AwGAwGg8HgbiH+k90k/xG9CzufnUqfIH9UrSfA3rRfYZ/u
9Xk8+sjQrnV+kt/bfgl/W+MW7XPYy86bvcl+lMeeXe9/5KO3DzJe/Pk1zt7/
1nxxdLb2m3PfF8FgMHhYsOml3uv8gHo2Td95crke3NP1auZr8ziei99P3We6
qT8Y26Wi47vQ/Vx4ITzaYeE7rX90rdVPh//l16v8oPVe3Ln1vuYLgPiaWlfH
+/Rw/I38k3g2dobfNR3f8/1zfJt1t9Zzl5ey1iOiG9UvvGnlYWt9Hnyr4+Ix
ofdX8dTip8Z2th8Hui9bHM5TS57yz5fXa7Opf+O4dKL0nz7Hkzmu8aq8KX6/
1guij2z9eGp5Hzzf+Wx1vPiPnVfTmR7r/Ct+lN+31nXHz+El2XOuJ90nXarr
5nnEb/JPuE6r/PPr/Tk/aDpIPGizv9/rzxU/jPOuz6HzY9/yP+DR23x3d+fN
43cPBoPBYDB4p6P4IDoD+wT2qDh39RrwoOwv+xH+arwf+3m/6gBVnaf9KH96
219d63pVugb7PPtbcf72xfY99g/scJ/LK8oet78Q/84OZ88aN3aouC2/M+70
GXPfH8FgMHhQ0LxpXsaD0d/zI5nfzcN4Srwaf5b1SzysdcA6Zh1pfOj5rlPD
r+I7n3h8aAe/XpH1C2+2yite7vZAPZ/KY+Kt5Hm0fokPqTpH41n1oKt1x091
Pgf/jM/Cq+qn9dH3WxzwVl2kuOwp/SV+yX3T+LQv9fuq8ecvdD5ztZ75pd4v
8dp4uMoTq7dO5+c+gvSv6jLV37M32Av6Lw681f9+p+sr9bvpJB9bXsetrf3f
XcvzeaDzZuoZtc//qY8Pf4C4f/aW86Mj5e/lf5aXiJ3EPhTX7vmSf2lV9/pW
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
3/G55hF2zNz26U7ROHvO2/k92s/H/O25pZf3/BtPOmp5glbzWDyxpe6YelWe
b/MQf9dR9asHg8FgMBg8Oii/E76NXWk/if9jT/L/0396/d3vDO1Kt5/Zl4el
7ox4KPU05CNj54nnUpfUvo1eZbUe0cZGs0O/0HVF9Aj1f+3P/Z4OxnHwBK6L
8fV7dil7Fdr31vq3FXeqc6p5tMSprfKwJ3v/Nfsp9xGd7a1eL+Pejnf46hkE
g3Ogecs84vkVVzwVF+r75qHq73EcPBd+zXM/lf/EvFjnpY1lM/+K21x3fuYV
/YRzzxPG3XqKh7HOWHd833Uwns5DfW38Ra2/7rq4HjWPJT6Dv0wd6Xp9HM86
Uq+H+R8vXuONg4cLPd90f+5P9pvry67jh13HX/M7y8cqblv9Hfe1+Gv3dbWD
8OpQXgf8qufF888OYrepf84/Qjepnj17be7rcKtY7S7X07jXuvG+18bpc1vq
wLsO1S51vfze/O991yX5h4LBYDAYDB5UtE/Fd7Kjmh/42c5z2mexb/Bu7B78
p/rm1X6e+zxvFe1Lq71c+UXft89m52+Uxt70O/tRdrzj0FXY71a7U2OfOp59
rH77fKdY7eSpVnlPfK37R94u/RdvZV+yUx4UXxLdUDD4wRZ/iNfmJ/OV+b3y
VHiDyj96nuu8YH5ZzetxvD/v+E78hryd/EDq68j3WY8/dZ6edzyG+WNj2cwv
t+tX2S3UX3HproP10ffwBPT6lbfhn3Re/I2Vd8ZX4JGsK9Yb6xH/lXnU9TKO
rgP/0tzjGNxb9PyzN9yf+M3d5rHEG9Frui/ZCeaRyqvhPd2f5jn5ICrvZp5j
t9Ihy/OuP5U3NP9N+asPOhof8+yU/51fxPgb72q/GWfzkNfmqY3S5MnHl4YH
DQaDwWAweFCQHWr/ZB+0Gt/yRo8TrDrPyn/iOSv/We3Nw472hdu1m6teEla7
03HwiVUnyf60T2ZfslPxDPa9lc+gW2UPV95ku6gf7ovKv1b9xhRvq/l8u/UI
Duu+JBi8FXS/e26rPtLrqed5ijek46MvNK9XHZV5qOYttm7IB2L+MT/xc/Cj
iNes/ZvSfWp4QzrJw6E33JzHK49ofF2H6j/0ufm1rgff+ubQLpb59nO9rrN1
Bb9R9Z61jtDBGK/gQUH2m/mBH0WeCHUwd/t/8a/8x+r1sC/YW54X/hf85xTv
5vmTd2NVz7z5/9Xv63nx/Mx9XbaLVW9b43T4pWp9MeNZ7Te8s/E3P1X7X/yY
ePujav8Hg8FgMBg8vLgaP8w//sYWnaf9lvw+7Cp5v+T/8b46E/LBycM29/nu
FYrLrHWO5LuSDxPPqQ5y+96mvWk/L9+8+pzsennZGk99T9cTsW8/ObbN+gNQ
fXn9hOoT1Pxuq/v2x3r9q5oPrtUVeLHrBeSta+fxdqnbdL7nVfV9fI54uq9+
MLQzkzyoz/E59je17tRO0XEOW70N/dR/aL8B6+cVa3xscG8Q/1frqsl7hw+z
T1cX2TxR64psLFt7nk/2fap9Z3v9VH/+8Yb+v9apM9/gB/CleLkf/mBoN5bP
/Vu9vpp1Ql4+84b5quYPNn/U+eijYzuofOYmj2y+oet0PuY935dXD19k/pOn
0/NLB4c/oNOVRxtfKa9qG/fNfNTy+eGB5E90vxyW+Sx4sPDhh4a2NU84HaW8
m7Vu427ndXVc85T/97x4ntgp7C321FtvDu1an/88r+Ynx/dcywuvjpI6QeqK
VftN3lB1yOa+buvQem/eNY+x3+RZNn5eq09lPhNfVMe98cX39vXJOiLObO7z
DwaDwWAweOeifPB0NeoYqeeurszHxnam+8HZxc1uPN39xPKtqwdEv3KnxilX
OxMfyH62n1C/tNnX6odc7Xa4fewqj3Cy1w9wPPzqVD36Wo+p4hOPD+1mrxds
v4En1z/8C7vYPpydi7fxOR6u7l/k2aczUceDjli/HMc+3/nVOh14VbqNinQP
+GTHaeN7vF+nKX50r3nD7fK6eJF6vfFXsH5eEc9ex7vypnM/RwcNp3jnqecK
L7Z6nZ7o9WYaXuzPs/og9Xqt9mNjg85Svj51zdw3nkv5Jtt9/2rn4cz35nO/
85o/xDzV/BivF77tZr/frCPqpNBzGYe5r9t20XOo3863zjfmxRpvqz6M73u+
zBd4GPOdusuul3p81lF8pzwo5it8jPpR8WME9xKt+/TiXuPbzVvW6932e/O/
qEvJT4SPw1eqA+R76rxb1+T/9Ps6z5qXPf94u2bXXOr2Df+PukGH9flznq4n
fzTem59MPACdBD2EcbHOseeMk/kwOtBgMBgMBoNzITvNvgl/xq4RR2cfjP+0
X8MTibtmf/Kzq0vO7pz7fA8aGn/8c9Vj8sPTc9nn4j3xHuqqVx0VpP/yuuo3
t4v4D7reFgf3Zr9v7Od/eWzX+3mIr9JfdjQe1XnJA9jwL7bwlvhfOigoHs9+
a4rnE8/Gfvd7fGz9fzzqFI84xRtOIbu/vv8rY7vZ+Q3xrK6b/rgO4hLrOGwX
jaN62ZU3phu0r/P8TvHAcz9He4VNz7iV33Sf21e7P2o9c/ctHqvdf5e6n0j8
uPu/1kGv+m18HL03vxO9Jd4U34bfbP6SK32ewUfgz/Fu5hvn4/6mx6RzooNa
rY/3SH9+PO9VFzn39ZzCquc0j7gu+F/zZ+W53QfmR/t/9w8du/VRfZX2nJ/p
95N5lO4Wn2Lc1W02roeVZwkebmz3/ef6esYPVONe+Df3ap2w7tb5rj1f50p9
pac6n+f5rnXpH3pwaJtxM55nPKh5mb+n5Sm90L9nvjQu9LDmgbmv23aRP6fa
b8bH5+K6zEvsfv6v5m97rfubV9eX3dMFB4PBYDAYDG4X7Z/48fFZ4pnEubB7
6Pr4g+2f2T/2d/gl++p19YSDq2gfTj9Fn6XukrhT40mvSZ9Ab+X6VnQ9Kvq9
13S87Tqf6nlh7TPwHvYfeB77EveBeHVxUV7TFXvffURfJi5eXir/73/xwPJZ
TaG8ib82ttf7caB9ER4DP0VHUo9HN2ofKJ4Xf7VRmu/X91f53X/q+j28pzho
9SBanolX+//rv9euy2p+hM3z9HvHo1PDp9x/39A2z9N50XH4nXGauo9uFfFs
9G/ub/ulncbv0gk5DnTeU/2ge8b/4rvdp20/d6bXl5Gf7hNju9DHCbbvv7L4
6bGdWxw/NrSLnY9s43uh+5vq7/0PHs71tq+X74Je3HmYP2r/f3JsZxYPPjC0
S4tHHxnatX6cFq/9TteJev7pDulLxWvzf+HzxEFaJ+aeTyE+Ap9PD1ufl1r3
x3i6HsZfvC1+w33l/uHHcHz3h3HnZ8Bf8wuZR9v1PNXjS8N3BvcD27pzc4td
4Hl2/1dek93ReLA3+/Oy1/01z7FjrZv8ouxUfkP5Icy3TZe4WR/dc+25Ywe0
ee+FHm9v3mzP7Vv9uKv5K65tWX/YdwedFzV+1kHja54yrvIfNfvqfOeJV+2k
zfpI8kNHFxEMBoPBYHC/se3LLne+6e5/HtqZzv/QF4m/puds+Y3e7XYn/si+
mV7UfpIdzJ7GS8x9/gcd5cv8vbGd67wf/oQ9T28kvx+7vWLlw/Bl7Pf6OX+9
fbr8fvplv4/vWK3rfrl/jg/FG9E32WfIK+u82u9P9P2C+wZ/gMesPGA9L/cd
nQLdBl6DXkEcHP5+Nb/eF7bEyTsuvZ34fbqu2h+I16x5EJ13RbyX1/YbxoNu
DF/ptc/xiM6vHt/38TP6Z3zpOBzfa7q4jdLwuY7jvOlM8cXQ/dx0kc91vs34
mo/MM9vlUSvPC+3T9B+vW3nsdn1Odv0dPbPnyP3h+fM+XtD41rx5+rHqP3hz
y3NL74dfkF/ZONs/4lPNy6v+gS/1fbvxw2/qh/1682u91p8v4+h58fzQAfkf
emr9t8+1b55r3sTfeM7xy/hIcZh4TnVWrIP0r86Tvt7zZ16iH8P/wro+ug78
gcaZX9E4msePep7s4MFE+YPb8/LZPr/V9YsfvP6ef8q6s9/9Z0/U9d98Jn+x
ddU8b17jX5Kv1+/MDzX/pefX/7IffG5e1Q95oNgdlRc9aHHh4lL02/zpfNl1
/G7ilMTTmDdX41g+09fh8J/BYDAYDAb3G/FU8jWJzxTHYz9WdZ72dzUOhp+Y
PVd5N3mAar60ucfhoCG+CZ+MP8LD4Fdq/smq29gp4ivxF403O9H1p3gXOr1m
x17v+kp2LX7I/eR+qHoBeRTwDngcuozKP+CFGs+6lQ/TH9+TT9F52BfRL1Z+
DD9kHOhf5bWq/KHrhP+hH6n9wjPijev/Qs8hXmqKR12HU/yf55M+Tf+Mp/Ov
z63XPq//h/d2PPcj/qf24+tfG9q5Pi70Isa16ozsmyp/OoVT1wnvVPVJlQ9c
5YPP9Hy9eGT7NvNY5RXpJd1/7kfjg9+yf/S++VE/3YfiSelM6fRdN98z3u6j
Wm8NP7s6n1/rcaLiPGv/7W89X+26bNa7o0f3uXlsv+qyG0/X1XPu/lRXyvNJ
94n34P+pei3znevKL4A/pYcynlVvax7E45sPXR88TPjO4JxoHZZnpebp9RzT
mx9U3sp8Wtcv8zo/pfWAfl28k/nP803Hye7y/DpOXWfxhOabB+4f2sU+n7b5
4OEtflR2gXXgoNnF+OzVunzPLr7/vaFd6/cHfaz13bxo/J0vf6f1U92ouc8z
GAwGg8Hg0Uf5zMQZi7sTZ43/lD9OXlB+bbo9cY/ikelqxD/jIcSBinu2H/e9
uXVD+43sXOfNHqQ/Ut+CDg1vZbwgfRj//HaRHkk9K3Hm+B/5m8R10ze6zq6/
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
+13UE2vz3SNFd7nJ27p/jL9+Vd4fuh6uj3FwXzt/84LnQL5h9zPe0/ib/+l+
1NGzr1X/qj439f4339f7Qf/tg/ljrCt01ZVvpsfCc3oO+QOm+IbaPzznXq8D
weCcaB1Wd8f6K078TuH5zd/mG3YEO0GeZPOGPCN0AnVe4f80T/JfmW/qvFPt
Z/OV+dm8rO7cQdGbr+o6N/cL5mV+wTq/Vp654QudR7XOhAcNBoPBYDC4V2j/
al9ZeU92CbsN72n/bb/MzmHHtbxJ53vcDD4BP4WXwiuob7xOv/dHY7u2Yx6l
+tfX8VVT9uit2p/4JHHJ4jzFN/382C71ft0qD2ZcpuqQy9/p+3RW+Iid8qBT
57ndvPbreM/tIl0qu7zmT6BDwzeJ8/Z6ipfdLfT/O71/nFe9nhVv1Q9Q+V/7
te3ef55X+tV1/dwprrs/6L6rPtT8U/tdeUPnQY+7W/fjOvQ/4kvxlB+e7+Js
f27FX9fxn5o36/m7vut4T+/X+b/me5AXAj9u/6sevDh7/Kv+G3/zvuttHvI9
SD9Kty6PgrwdU+etv66v/9nr6xu8M9E6UvV/c/cruD2kL2c/mC/EadR1tvJ8
4rxr/pHKe1qH2J94UPeL+bd+/6DoQMWXGAfrVB0P9iV9v3UKz1l1oPYXeGj2
5GHJcxUMBoPBYPDgI3uPPWOfyV6r+TnVB5Evif/XPta+Vn5Ids5jjw7tes+7
5/j2sXSE9ste4yHr/htO1eP2OR0p3rXWp5jKKykPlv6yO+U3lD8Sj0ufVPMX
4Wfk22Qfrua72349I/kJK9/juuEfjAOdpzqv7Ex6M7z37fI+dF9z38/B7aHn
3nWXX2zqvpM/sz4PdBr2KZ7nmpfT87LdvLVTKA/nVz8Y2pktzwH9qv7JJ2Ef
O3eejPZ8vt/7KR8cPZH5hF9K/42/ecT8Zt7BGzbd89U+D8jnaR41T+A7+Xf8
Xn5R86X5033Q+n1fv97un8cfG9qNnve58bVf7nld+UOMv/m95uGVP89x6Ljp
n9xv+uV+o4ulD898FNwPxMvQbbufPT/u86nf84cdFF1fcHtofjH/ra5/m/k8
zV/sYPMhu/W3x3aqz8fmc/FY7Gvrwrr7ab+x+b/e6/n9rSN4YPMzu7nyo/zV
Nd92e/3ilvz4yQ8aDAaDwWBwt5Ad9/3vDe1a99Oy4+Q9b3nlTnS7Rj14fAMd
o7yh+FP15R2f3VPzy+NX4FT+P3YWu0s8/Lp8mLWuda1bzZ9deSHx8eph+H/n
Xeuc4FnbfvydHg/V/ue5Xk+m1t+o/C1scaBvdjtZ/9iDeNRaZ7vm5695/3br
/jkodUqDu4vyDjR94iZfat/zp2O72XXc7j/POd3xTutbTfkl+Gn0A4rXPOi8
l+dVXWH1jrw2n9Z6UXSb/Ex4TPmU8af8U+Yl8xa/iflEna5a59114+/iP8HH
mtfty/XPPh5fW/XO5kX/b/73f/hax8dnOg+6ebyx+c59Ofd1Dd5ZyI/h/mTH
1LzcU79f5bnOzX4+wdtD/kTzGfur2WvP9nnSPCq/Cb+P+6jZh5e6PUo/Wuf1
uc8XypfATpbXx3rFb8f+buvEZjwAXpMegD+Q/8s6hwfFj1p/7DduNw9NMBgM
BoPBOxcrD9r4uXO9voR6uuyZtn9+odtz7DZ2PbvNvlf+JPYhXSj7qfIa/On4
RLofx6t1zR3X76fqWeNN8YlV14Z/YHeJS8I/OL7+s/PkOWSfsQfb95/o+eXo
BSrPM6VnwxdM6eLobdVtXa1P/Fbns3fbTmT3z33fBoMHGT0n4hzb/vD+rovx
nOMpzWPb1XvSTa7Wj3u1Hwc/oy6SedXxzSPmGX6ZJ58Y2nt9H26e93mbj7/U
+Uj8pf+3v/3DsV3tcej4ALrUWt/d7/ABd0o+wuDhQH4W9c3kMVzHe67m/T4x
qWdjD3gePP/h+w82muddP/Mm3cCjjwztWvfXixsXX//gA0O71O1ZdlvNR3rQ
9MJ40OaHe6/7v5qfbXMcxG3Qw1ov7r1naOf6+bPP7S/oSe0nrAt0sp6Pucch
GAwGg8Hg4UV2HF5SPPhqvM6z3R6j76RnYq/Ra+EB8ZWr8divFZ3Ts0u76cTi
/vuGdmFL3d6K9bgVm9309HK//UrPU88uEwcuTla/8ZT0Z/bpdf/vNXtN/sHG
dzzW9/POT7/kz9MP/Cn/ueswlR9R3j12ofhV5+t61f75P7zFuvvhT8Z2o9u5
3j9oeoRg8CCh54Xfo81zD3RdeHv/y/25pU+3vzMP8TfJz+w5lg/TvCTvprxy
5tHGrz7Tec+aF8B8IL6dn6v5vR7ufI3jtPnwn7peR35Sce54VjrTxvu83P1I
+idu2PxkPqM7nvv6BYMfhvyq/ML8pFPf53+g057KQ+s5UM+LPpAdRHdaf+e5
YldYl9kT7AzHb3rq890Omns8jxrKH8pfJM4I70nf3uKCnlrOo+/2PCLmR7p4
9iMelV0+93lOIf8A+9L95jmx/tU8V+5HPOlq/cy3lnzx53s9Jc+H9cf6ZL3i
b5t7PILBYDAYDB4eZG+Lb8Zj0nnKJ2mfS9fU9I4v9boe+NOaT341/8/1nr+N
zgEPaD9gnw7lA7Rft8/+6bGd6/pMcbiVNxWHY9+An3TcykuyT+3z+avFrfJT
Nzvss/3/K2/Jrqv1wOXl1J9V3uJ4R/YwfRZew//bL+F75V3ij1fX2ffFFTk+
+7qN5+Z+i5+ennbu+zMYPMjIf8E/Y34xb5pPxKHTw5g//c5ziw+ls7Fvrn4j
+hnzDx2oeHn7RfOPecnn9o+r/p+7uo6dnpMOSd5n+3xxi87PfGz/qr6F+mPh
O4MHGfE58pOLY274fNf74XvwjJ5Lfo/2fHy+f+771nM8Jt2ffDVTeT1W89hs
bPBDN135zT4fsA/ac/zQko96evZxPWrI34X/ZFe5D6oeH98nv5HrSddofnd/
8Ldvt77kXGg+pwO1f5DnSj4oKH6KDgFfz06lmxWXJt6Bv44fzTrKL8H+NX5z
j0swGAwGg8HDg+pW4CfZaezzti/+XLev8aDNfnuy83le20fLL4fnE9/OPuS/
Xaf/XI2rvNT/j3/da7ytepR41xoPP6UrtX+hv7Lfx8+KN1+Nn396i94Un2pf
U/lRvAVdl/6wn+1rjKO8ongLdqV8pa5f5W+Ng+PTp7DX9bvZk1/cwoeu5rU6
0c8Lf1N1uI7LHrVv3O371f0wpZcJBvcS7YPl36SjlMej1nnHb9JZy6vKj2G+
8Rzx29Clt33jjT5fVb3nR8Z2tR/Xc+r5NS+uzt/HSt7NZ/pr+3DxvO31tZ7f
je7cPtb58dfMfX2CwZ2gdZq+mv9C3kLPIful1pG0vtJ143Xwongfv/McN3/I
M/15pOuUx4Y9sup33dQVWvfZEfzEOz1/+jzzBbvHvFO/Lw/Pnfa8m/ebf+lG
5+HYPewS14M96L7hV/qjsV1b3j/Xe55L9w195GEZ31onz3ogrwkdp/xS7FJ8
pvWp2sur9+OmXS4ubVXn/Gy/j+cej2AwGAwGg4cP2dX8uvSV/LvskI1lazzn
413/0+yQz/T4T/5bebTsC/h31yG+1b6E//xnxrZZ77jl53q9H9/vHMe+Qf4l
/Cj7jT2GnxWHgwfAHxoXOknfZ/fRVXlff+g/8SN4Tvsd9i5ehT1Hf4V/xT9W
Pat8U+xOfGatB76q873U++v667fzcz84ruPgW/CtdDN4XPG8zt99I07qnruH
drbnZ6VrWXdfzv18BO9s5CfyPOI18Z3i4T237nvx5PIIut89T+5v8fJ4BnlD
PW+ea/p5x691hMXxykvans8H+3NNl0P/SV9Ptyk+03xjvnW+0XUGjwLiW9gX
ns+6fsr7wB7gx/S91bpgb/XnUj4h+Xw9l82PeqZ/rj9t3f/zHg+t7hL0f+wV
eXis69s9bzyn+Yaf0/zme+wtPJX4HvbU3Ndvv9F1Zu/wU4t7xwOa/+nuK+JR
8e7uq3b9n+p86Dq76KBg9Z/X+oZ4/B/9cGibefvZh5DfwXrHL8COp6uwHrF7
7Td2+hwEg8FgMBgMQvtb+3J2n/26+Ej2sLgV+2+IZ2PP1DpIU+j74tDpHfnL
2eONx3y08wuQHovOip1Ed7HKwz7TeUQ8Ad7A9+QBsB/AY7LX2H+w1mmio2I3
i5N3fPsY/bffwROqZ4JnledvtS7nZjwe3ah+QjoU/cQ/+lx9JTwlZI/jcdt+
7oudx3W98bjOH59S++s85E+gk7Gvqv23LxVHrF/6v/r6jZ6Pa+7naB3q/9z9
CP545Kdwv7bn7Lmu28QX8ieIkzRv4j/k0+AvMg/YF8oP4n37OnoX8y1/hOfZ
c0KXRm/U+ndP16nZT7d5z3N0b58X6TrxnNFZB48ies7UG5uqb1R5z6n8nnhS
+SvwO5UX8j18o/f5Pe/+56FtxsXX+HjH8/zv9PkUv4JfNW/hlfBy4mbEJ1un
Kl97p6HrwY6jq+evkl8ID84+Yo+YX407f5lxZh+Zj9mb7s+DPh9XO9jzwP7T
/2rvs2/Zl+IR5Mf2e89Nzf8kHyu73/M093gEg8FgMBg8/IgXrXbOFN7q/9Tj
4B/sW+zj8Qr4N7om+xa6KLqKjWVrr/+i65+8jz8Q9y+eib1b9Z7Vf81+w8fZ
Z9TzYPexfxtPca7rJvGx8o3yp9dxqbpMeZSm+ouf8bry1dDv6WTpXvHRU3pP
vA69L/0YPYT9QIsDvLpFn1r77//r+eDfa7/x5K57vT63ilVvW/lhccOuv31L
/R6MnvVwofmGftz9xQ/jfq469zY/neq6IPc5vt/9QEePj+E34k8QJ0tX5vnF
r6ofz39AH0afhFeha+evou93nFoHLRg8Stj4p/e6fux2ec+K654fvNdqvsQz
/fVenTfe0/zFvyqu5RtfH9r5bk84D/HY1u29vj4HHdld8oGIc+c3lo/EdZY/
CX/nfsKDqnNn3PHm7B3zPF1ojaM56P7TqX0Au9d66HkUJ++5EN+FR3Wf0gvI
J9H0pW/1uPnwn8FgMBgMBoMN5bXCA+IVoTibjWWjx5w6Hj5YPJzj4BfkyZcX
gH7CfoSO0mv5Pe1TTr8zts5j1O/jPfAXOx0P9eUdryI72z4Rz1iPQ7/Gfq3j
Ws9jozT5y+r/3+p57RbitdjpXtfzg+4DcV/1c9fVeePf63jPdb53Gq67//HY
q/Gn7/b7Gbrv3SeeF8fBh9Jpmh/oicT5mR/kTeMP0F/HpTuld8Gnqz/kc88V
Perc4x0MzoH8jt/9ztCuTPKenm/r8HZ5z+2i428s217zns7Teau/pB/yUfJj
mn/4i8MjfTia57/21aFt1tlU58q4V7ttNb/SUz2/JTtzyt6RL7TaE/z4q3mp
5h+fnY6j9dH71kX6A3a78cY7G1evrdNT+WuDwWAwGAwGgx+O/NP1ffuGKZ6Q
/YrP8Dt2HruVHef37Dfv1/+tvNsUj1gbvq3iFH9XEU+Dt3HcZrff3e3Pqf3k
OmTfruOhd9rod6d4LfF+lU/eK5w6f/qImocVn0yPbH+wyqdt6g53Ou6HHT1f
7ru273x1zfhvNrrMqfvefYn/cD/hE/EWro/9r/sJn+C5t+81Tzie71WdzCoP
vvkc6w+eU5ykOhvhOYPBTfQ8eG6n1inzLdzbfm1sTNkXu4XmJ/MZ/gzvJh6D
3pCOTnzN3p7/4UdxK+Z/eZPM09Zl6wj7iX1n3P2+/e6fSh79afvBelHtNH52
eZ2sI1N+67mxjqN1kX1T/YnuU/7G6k9mF+P75z6/YDAYDAaDwcOO1e6Eq3zH
57o/f0rvSV8CN0pjx/Fnb1cHWeOhbpWvY3/W41cet/K5lZf12njQq7JndzsO
nG5gu/zufiO9RtuXPL1W72l/QAc4pSOt4z2lp71dvfA6rPHY6+4zzwPdTNXb
0nHYv1cUp4lP2C29Fr2Y5xq/Se/pfq//V/lq+177NfPHOr2n41a9J55zr/mT
YPAwYvUb1bpGc/XLvF39XLuF4vXrPGX+xMOJZ2dXsFfMt3ONz2FF65D12HpW
/ZLG3/pM94nnlP9S/qZ18SLVbrBe/fHYrm+xy6xHnou5x60iuw2Pq5/yVq/m
f3q3j6/Pq93p+3OfVzAYDAaDweBhxSmeTr77ts861+04+xwojxEekD1KRynf
nzxR9i/yPqlnX+vbq8PS9AfPl3pN0/k9p1DdFbyN+inyLcnnaT9Z62JB+Qfr
8cWFGxfxu45fz6MinYX+yYuo37X+aq3/tF+oLlYdF/GGzr/WwZI/9B/+fmhf
6vn963HkCzP+9j2Oq05PvQ/lnTTeU+Msnm67+VHpihy//i8UT+m50f/tojxg
xkG+TOMN6/XY7nnQU7ou6iO3+/Raz/spf5t9KJ5U3SB5O+1r8Q3qW7gP1Edz
HvLI7RVPEgweJVSvhx8Bylc9d//2C81z7IU2P57u8+a99wztXLdT2B3hPXcH
1am0ftBftnE+29cF+czlXcbzWfdrnUp6XP6zb31zaBd73mn5pv3OemNdUQdP
/U/6UryofLi3m69/t/CXx3Z98RtjO97zzsq/zb6QV0qdKf5k/LD1mV2UvNbB
YDAYDAaD28Na350eDz/Crt3u8ei27EfYy3hFcWv2deqCNj5sE+XH5y/HK03x
P+sQz6OOEb5Wf/GzPzW2s8v+fXkLH8vuVyfI8R3HOOJ78Hj1POzb6HnUXap1
jhxHfaIp3o0egL5ip7zwdtH/GRf7Ezyt/Yx9Z+X1/N79McUzul+ML76XvV/5
UseHlT9dh/V4U4j3qzwt/8Gt3p/qS6m3W8d7Cj86thuT54Un+cTYLiz+dGw3
e50FuhLji7d0Xu5LvKV9qfvTeLvv1cOw33Ue0XMGg9tHz1Ore3K9152Zu1/7
jeYvOkLzFR35qr/opb6OhPfcXXQd1EVij8jjI86HXWf82XfWAfwlP5v1jh3R
/M6bdY/Ygew160vjWV/s/lP+O7yn9QoPiwdl3841jsZlNe/Sue43xAsbh3Y/
X+p8J16UH4S9nHqTwWAwGAwGgx+O7CRxpngUdiL/dP3+Tv+n2surdRc29Z7s
5soH/buxPdx1HOt4oCms+sPKZ9Jjyq+oXoxxwFeyT9mt7HnjyE798Pc3/6/y
sVXfUPWe6/i4/7+9e1uy7KrOBJyP4D5ddDv6HcwZDHS+QmPcB+Ow+xUwNMbG
4Wg/AhhHGxu3zQUXviIonY8lgUASAqEqqUoqqVTnc5VK4mRAdOPo2Gvub6T3
SE2tvTN35sqsGvPmj8y99tpzzbXWnGP88x9jtHG6MdcPnNkzvWfmNfFiHxza
ll+D92Kv5+vgr+IR1VMau49ZV7w4rt+N+wiNb+968NfL6j7x5vl38birPpf8
uj8Y2nadKP7RuBl/vIjvrXof8QTiGJv/emLbOLou8aW5bjKdjrjUHK8/9TxX
WFh4+BEPRq//iaEdj/0i6w3+q+af/UF8vPXMOrm4fj69bf2xrtiHy/ZU00Ve
nduNrwbf+YGhXdmm91zkTS8F//rJoV2a77cf2/z00M5H/MzUz4n9wEU9wOux
roq7wBPL543/V7/LOBjP4kELCwsLCwsLCxvSEbK38FD2j9UnYkc1XuRy8B87
rRuAr5G/if1Jryge/vNDuxZ5AcXbruv6xe3TD8pX9VdfnrVLiZf8duSvWtQj
Ho3jjFdGdrjrwCu7HvmcIN5Uf/CJ+pH7Iz5ePkW6iMZfXYnf2S3iLf1Ou/5v
hC6WX+J44yr+n44h5wFrfuypiF/3HHrujJvnxPOXMT8/xg8a3/x/fHHvvFBd
Ef0ZQ/33nEH6Xu8Pv673/Bhf951fpP/yRrhuet/8XEHPhefqfUO7FPyw+ET+
pTi8ll/1TPiPVW+2sLCwsPDdEC+a192ePWO/V70766k4BPYH+8G6hAel92SP
ZF6WPWK/z372k0/M2vQ8oX1Q6zGdgPxAR745a+fDXsL74z/Zpw3P71ne88LC
wsLCwsLCw4J4HPvE9907a5dSnNjRyKfZ6na+NucFX9oxDyn/od+3L42H+R9D
29KR+Xvq+s653/Sr2Z7vYbbzjW/mueR/GuPV/H7j087F95v/cDzpHb+9Y9TP
Fm/5/fgdOsnMj9LlyJ/anpen4rra9y9vPvTgrF0L3k19U/4Ofo8/5Lp6/KDz
0BfjHcW1OQ7/6HP5wnrn9by7/t74tH2Brwcf3PysU6EPxnerw+G98tz3eErY
413pRfg3ePZ8HZnHp5tq4/FE8Ofe/9a/Z4KX1U96z1Xfn+JJCwsLCwv/JdoH
ZyfZ77ZOydtpvy3bD/K1iAun5xRfL0+E/JniEuQjxSuyA6YeD8jeVB/RfqS8
oOJe7PdmewQPKn/NqvmqCgsLCwsLCwvvNMSn0OfRj7GjHMc+pUds/NaJHeeN
l29JPJJ+TB13tF/Y40ez3T+G+Kx8nnXxxD29Bl4y90e8tDxU9BU57yU+Ey8n
/+QjD8/ajeAn5RnAuz1w/6xt17HiB9WLpQuRtzXziD4f4xvVKX/7l7N2fZv+
1HhkXrbpVs/Gdbkfvuc89K493hWqZ7/o33wj8qPp76o6Xs9bq0d/PuqG7JTf
zIiP1f/Mf3rfezpb/t9U72lhYWFh4f4iu1LeFPuE8ujIx2I/Hh8q/0GLU3g+
1rfFepQvBx8ov85BqX/Uw2Z3vxz2k/xC7XovxH6x/ze75+ngQdlb7A5299TX
VVhYWFhYWFi430h3Ke9S5j0hHkM8fOMzVucl8EH25Ssv4OFE94sdTYfadLrn
QqchT1XTWZyOeLSMnxnaxc2f/mTWLkZ+VHVNnaf5KS8En7ZYB/ZUoOcs/38M
+UfOn+tmqKtAX7ks+p7z0Fv3jjcueEr1PHJ/+YP623jMY6Mob5i8ak13u/v6
KXSongP+l/66Dr9rXNxv+l86l6xv3em8U1hYWFh4OJGdap2y/9ry1bwa+Xjo
IPGF9vPkgbGu+p78ouwYdo282tafqa+f3U13IJ4987l4YuuruP6NeVOfU7y8
OJmpr6+wsLCwsLCwcL8Qr5njguXjZP/tNG4Vb9HqsZyJOjz4rsrHfmdh9lPY
4+47/lIcufgtuobMZ+L/6DD9/TtDuxj+DN50VV7S953P7/CLVuVPe4i/xVf2
jsMH4inl4zWesPGFNw+M/yLfgXpk5hP9dR3udxuPe6Oehbg8+VfdH+f1/6mv
s7CwsLBwGmRfLO7bvRrrJ55TnUp1K8WNyKcpTv49Q7uw+bGhvRHrKrsAn5r7
gSfd7/gEOgVxI+rDt/Xxe9FveaPoYOW5ETciX5J8PBVnUVhYWFhYWHinI/st
57Fs8UQ3w37EP4ydjy4LT4rvUBeb/k/e+YMeb1S4XuS3/P7Qbm3j83pI74AP
pHOka2i85YuRD2uMh8Q/+n7WRfq9Zfs3hvwR9YjGjp/6Pu0UxSPSe+b9Evss
bT/kB3F8+V2FhYWFhaug9UXeFjyofUt1gdRFkg9UPh5x4/Jqio+3DuMNs06S
LqDHi+41qs9kf9F1iJcQB5/zAtlvtj+JL3W8vEN71e+c/6fivQoLCwsLCwv3
G584Omtvhp0kL3yzS84FXznGy2Q+i45OXWl1OH2eeU/23NTjUXiwUT5KemR5
E1ZFeuSpr+dOQf4mPhnP7HN+Dn2nPKniF6fuf2FhYWHh4UL1DD85tEuxnqiv
KF+4fPXqF6qPSA/qe+zef/71rN2Ov+3jT329kP3i+ug88Z/yV7V691eirtNi
3fjXop584yVfj+sU/8Ku321/5UfHU6uvWnFfhYWFhYWFhfuFTz4xa2/FfvZi
fPHJeTzNtyP+dNnztnpGZyMfvTzs7NR8fPGehYWHH9XdVTdeXV2f08uoQ0X3
yS+auv+FhYWFhYcT6UDlv2THWofkV2k6yJOhl8QP4g3pQK1XeEX5e/CCU18v
tA+Mp8VvNt7ydOwzNr709cjHTefg7xbv/0jkEXUe47HbuBT7o+8d2sW1nbew
sLCwsLBwHPFtd1vcteuVPz3/X11rcbrsklyHuXd+vKd6M/IqsR//fGi3t+WV
n3pcCgsLd450MvzHVo/h2LZ9DfsfdCfqUkzd/8LCwsLCw43yquDt8J/0jHhO
vJ/j8KP4Q/Hx4sBbnpxr8/j583P96PJ6gP1CPCg+E4/ZeM/HNs+dHVrkB8ID
u96zZ4YWeYXkERAXTwdBZ7tqHQD2vnwExn9VfUVhYWFhYWHh8kjniH+TN713
vP1fx02V52e3+IdDezP2gZf9Hnsy5yVk94hb+dTQXpvn97y8+dCDs3Yt8gy1
ekdbef0q7riw8M5BvKb58bFHZ+3W3N88GflUm77kuXm83T2RV2Pq/hcWFhYW
Hm5Ur1OcO/6v8Z/HIu/KR4d2K/br8HzqJfk/PpDf8IGhXQm+UH6nqa8bymNF
3yDfpzpJbVye3vzs0C7F9WWeWP1I/29850uh2/zLL83ahXncxqlYx+URaDzr
dl0DO+H//mrWbpbus7CwsLCwcA1IT9Tbl7SP2/zy74adk4+jh5QHXR1mdsTU
19lDfKR6RfL6yA809n3jpi6RvD/ylbNf8MeOs+9s3ORRynZQL/69sLDw8KP3
Xx3ZNv9cjHhB85C8bGP7T4WFhYWFhcsg/pPd+pmhXYy67/hA/Bt/odUPurz5
haHdDH2j/E0trunNyNOibiI9aKsfdHB4PHY2e971tXxWL87z07wSukt+jXzd
8tiI22rxHOcjr/divcmLEdcu3gsfar2nI5l6XAoLCwsLC+8EpDcS34GHy8fd
c2TWLsT6j/fMcRfsHHWfHdfW+xthJ6hvvl92j/3n3ud0mupbivNhD46dXz0Z
dWF8D5/hOl13L195G78fxvny58V3FBbe+SjOzTwCPze0K+GPTu03LuZ7Oz6f
9y9PPn6FhYWFhTtD6w97XX1z8z3+898O7TvzffxTwRf+3tBeDX3j54d2LfSK
1gnnO2h2LX2CuC91642HOkcQL9zs+zNz/cRLoXN9/9AuB4qj97e6AXhT+b0b
P/rigR2nwsLCwsLCw4R4yhaH8a1tvKd9S3Etv3p71m6EPdP2OZ+N48WNsIPw
d+oDHX181m4HH9iL71g3+j36KfvVeMZm35yNuJ6d5jN1nfn/rrN3XnZOy5/0
SoxjPg4/u9fjVVh4mNA8Iy7NvDV1vzLm+WfV+g8fH9rtmCfoRNadT4R/p66S
+rf6q95C84+/MV8HrocfN/U4FxYWFhbuDu230Wua79nNfza0W/N1YqvukXhv
8fO+Ly+o84qHojMQ70QPar2behwgu1y/7TviMVv/f7D5W0M7H9eLN25xcM9G
/iz7mHSg4uObzvTEXDe7FX/PD7Me87OmHpfCwsLCwsLDgPKON7/1ofB3xXP8
x6E9Ps83eSZ4O3V31DPHM9gftc738prLp2N9Z0c53ufsIMfpX88ewh+2fOXb
+UXx+uwI9hgd5n6Pv/7++Eezdn5uD56ruPbCwhWQPqX5E0c23zO0C2v/Hfzi
mD9mPsQTmo/4MfzHlsfz/NK/b1/lI0O7MZ8vX4p9KPNmrse2LDb/9eR8/n54
8757Z+1SzMPq2arPZJ/Mfoy8xQc9r0lhYWFh4XIo3loeFvlW6D39rd5ns2tf
jnyh9Izy2eM18YJ0AS2//VYeUfmt2f87XdfWjfSgxoWew/qOF2UH2CdUx5T/
8YmhHZ/7Wc+HrhRfzO+S97/pU45v/tHQLkTeAOOFT+VXTD1OhYWFhYWFBwmt
x22dfSDWZfuIrZ7htS4viDe07uLrWp6g07G/mb/36COzdjO+Z3/UPqZ6520d
v7D5vqFdCn6U/ZXPa9+U/551kzludK/q1BsX2DtuUW97POym3vFV17mwcDt6
z/lH9Ou7Pa99GHF7dC38FrxmnmdanNtT4b80P+Tp8JPoYeRFW7Vf5o28b2W+
FEeof8ZlbD6SX8y877rUre3lQTHvi/NrvO4PJ38uCgsLCwvXg9Yvuodf/HzW
rkbdvWZPvxD7Zep1qotuHRHPDeXPsn8n/7068Q8+MGtXgyfkJ1jXDoou1L4k
xOfShcq3xf9gBzT++HLETYifV2eg5Q/Yiqen36BPEefS1v3vxHjjjYsHLSws
LCws3M57qiOMdxyLQ5fPsq2/D4YfTu/Jf3Y8XZZ83+wjcaptP/e1sG98X/y5
fuEhWl7SH8z1SG/M90VPh+5LnvWe/nOvkH3Yy0uOV6afkgeejkodTP3+2NDe
mNtFX4k6knhl+VR9b7+us7DwIGDm3cxnY99rOgt5N87F96B5pM1v1+J95K+1
+exo1G3FN5qn8JPmPefln7z04tBiv6b5NSfje/J7mefMG/Qf5g3zaJ439ZeO
xnnzOPidxtfeG7pz/pn5tpe/k5/HT+3tdxUWFhYW3hlo3seD2mezD4d/Ewcm
z7/659YdeSvty7XjXo110v/FFdBN4P/whOoUOG9vvdtv7OkrxI/Qf7AH6Dbp
RV1n40fvm9sjz0Qe0d8e2s2w/9v4/+NcV/u14EUd73xTj0thYWFhYeF+In+4
8ZBPJr3PM8Fj9nhDdg99FZ6grbd/Eet0O89Tkc+G/6wehnVbPrnWn2NhF/gd
fvhnh7alc6JDWqybLq/Oq8Gz6je/PPOGrnfx+p/acb5A8Z7NHmOXvRE6MPGk
bdy3dFS57pG4mo15EydrH5fdqD4kXezUz1dh4X4iHrPlC/tu9711XJvXzgWP
aB7ynorbNg8szhvXw//66NBuRdzf2TNDi/nK+5jj/8Spqd8qrq3t/zwX8zF9
i7oR4gTt6+BZ6eyzPr+XdxjS+ZuPjI/PXR89jn0Xn2c+mH5/6uehsLCwsHB/
0DpArynuKufLos+kc6QDFS9PH6m+fFtvjoV/wG+gE7Ve21/E69FBLNr5Byf/
ND6U3yLeyz6rfU3XyZ8QJ2K87KfyW9q4noh9SOsyHtQ6X/lBCwsLCwvvBmQX
2IdlH/Cf23p6Nfi4Mb+56YFuBM/I/oD0nPg88S/0i/gCcZr2idVDzL/nPM6v
vhK9kzzjjbfY4iXYB/ojfob9QLe6mF/9L4JHGRtXdpV9VTqtZq/dHzyL/IPy
IWVeme6r1S3JvPPGBn6G3SQe1XXjg6d+zgoL9xPNB2PvrX0SOs/2vl6Kea7p
sG/G/oq8GuoW5P0YaF7h59GdPHD/rF0J/bx5gJ4l5+Xgr+if/L/04+ZlfiG/
b6d5gX/y41m7EP3MOnXnV8cXn+tzvGmLO7wc/Zr6eSgsLCws3F9kl/Iv8KD4
OzoJdnbWcWa9p/yX9htbXb9rsd9P7ymuW14s6zGe0L4d+/ygxUexI3LdV+Nj
XbXOyu8tvyi/QJ0ovOk9R2btQvhp9i2b3/X12I/1/anHobCwsLCwcC9QnDt9
pP1CcSh0RdnPpT/amDc6z95+qnU71y/mp+Mhcr2MXj65jOynxvedCnuJ3TX2
feu962AXiN9RRxEPyd7K5zGOG52mf+pBuT7jos6JfrAPW/zLeJ0QdhL7btV6
0YWFhxn5Dd7nxXlqax6ix6QzoaPM58vzo3mhNy/lOuf01znOTX4Q80DvesyH
6hiol+Bz86e6EeLl8L/Ljpt+mzfePb/Jxkbut30n/Ohe3+fCwsLCwsOF1iXr
FR6U3qDxma/M7e0b8T1/W7fFbTe/5IX5/uLF4AXlyRQPLn+X81l/2fF40KnH
Z1nUf3WQ1Huig812Pz+GfSBPqH1Mfgl7iZ8z9XUWFhYWFhauA61/dJbyZ1r3
2Bf0RnjPxfVQ+1HEn+T4x8OC9KPiSOhC8Q50lPKQ4zX4/+wq/Ai7IvO49J3s
DXwI3oFelh1CF7asjstx+OriPQvvRuRf8ae8X95H71f2hzKa/+ghe3rHjOYP
/Xj3+LqNjaZj2R4/viwuzifntvmNPcSjmp/oatr8cSx44tzffJ6xfa/CwsLC
wsJ/iezVX709azdiXbZu25fsrWfyfoq/kFcLH2r9whM6bmPe6Catn+oEHdY8
UfwJvDI/Ba/r/3Qt6qTKByTPuPHnz/T2hQsLCwsLCw8T4jkX18mj8883NugN
6SbZD/k84ljGfs+6vK51FJ8hz511+9399p0jfsA44YfZDfLq6Neq56dbxXey
O8Z4T9epnib9VdaHFRbeDUivKH+FeYFu0t/L8oOroryg+uHvfBw/LOvNV+UP
zcvmi0X/bvl+8/fa/PnFmN8W5x9t63vL1pEqLCwsLCx8N7SeWX+yX9LWyW8F
v2n/kh3MH8GDZn2C35HnSj6c9w/tcuS1Oez2s/1ZcSd4TvFrua6SPKD2eRfj
017cM3tpDN3XsXi7wsLCwsLCd0L5PekXre/yyNkn3Jg3OiJ2BP6Snsm6lJGO
0vqrXobfV69H/kr+/1ieGfV8xIWL8xBnKQ9Qr45iD/UX4oP/bGi3Il8nnaz6
HfohzuTkiaGFPZHrhEDjQm975Juzdj50W3gMeYo2FtrWeeQnpBvTL7rTqZ+3
qTDnmcI/uU8tT+Kj8Vwv5s2/EPFBU19H4WqIb6TfsL/jefj1/5u1vfNnvMfq
N8gjtljnbOv3c15S+xbL/p55RP209ryfTfsh4/Og74kjtA+D91QnNsfRi48v
/rOwsLCwcC/xI0O7Efxm01Fs1XNv/sHTc77uYvgT+DJ1jugg6UbV+6EDffih
Wbse+6f4VnY9P2FVP2MqZCcYN3WN5PdUT77pXS6EjkIeUPwzf2ss7mVdSG8i
f1nF4RcWFhYWroLWa3ybPNj4Af7txrzxcxfXy+tRr8d+IFTPgw6z1Ru6EPU7
nE99Dr+Pn8Lz+Tv774v1Cc+vnM/O9TtvqzN5O+qY4EXkS1dfnl2FN1MHuvGc
l6O+R4vPORPYsw/wIPpvPxr/gPfUr42FthUnpC60OlDsFvd36udtKpTHHZ/Z
7Nx7Y9zz8wzb/X4y6ng3/ufuHcfDiuxl89p+2enmDfyheYye0/zjeO8/3pDO
ftXfxbfyD+hhltVpmC/sD1gH8LTq0Gd+U//Nj3s9voWFhYWFhe+EHxvaG7EP
mP0U65V8oo3Hey7iv5s/cnKbfS8en13PD6EPtc7n9f2woHGhs2WHiGNr9vNT
sT/L39hrfYDzq9NU+XQKCwsLC5dBOijru3x3PrePKg6ip++B/GF8UauLdC38
ZnwcP7mHdHfykMP2uz+cr7/Hw77Ak6r3g6fEa/T0p64D79V4iOPBT+R+iY9x
fZ8b2pXgFRpfema+H3w1zm9cV+Vj7VvnOPfGw8n7p/0o7JNmhzwZ+9NTP2dT
I34c307PSXe3LP+Fv6Lvnfq6CpdDfgfes81jD+04/8RO0fND781e3yu73byz
WOftKyvHvcsHgKfdmDfzXj5eHfq2z/Dq2vOLFBYWFhYW7gSzn8IeVPe95b25
EesXvpM9Lj5c/AidBF0ofpC/Qo+Y/Y9l8/QfFBT/h/eUz4u/wT/EfzY+eP38
p7iZ0nkWFhYWFr4b5jgMfJo4kF7+GvU1xLuvyt8ti/gnceTiTTKK+/4PQ3tu
jo/M+dLvz3WlLwU/aF/Xet3skxOh4xOvgR9o8S03Qu909PFZux3x9PprHOlU
H3l41m7EukynarzE8S87HniZHOfud7LOSv7xu13XmZEd2/SaL0U8k/u26vm8
L1NfV+G7o/muvfeXQ6fLj6EP3+9+0YvTLeyV7tT8I56v8ZQnVt4PMZ+It6fv
EM+eeU2/a5+o7X+9MvnzUFhYWFhY+C+RXyFunX3AD2l246WI9xHngAe0LuJF
nU/+Lt9v++7Hwx9h36ujZJ1V72BVf2GvUV1UecPoT+hn5f9cjIv6QdjZ9K87
/X12hXGrOq2FhYWFhTPEx/H7rReNF7s2jw+4GeurOonytOT1Fu8pbvGjQ7u1
7zoe+6Pix12HvJvsB/HM7JffH9rpzQ8PbYs/xfP6O/+ePKP0pL1xxnP2+m38
F/Nyjl9v5j39LV5HXXnH40X3634cFvzFz2ftajzn7DP6v1XPV7zy4UDzxeK+
zZuxv0GXQfe+X/2io5dPmX+0V/Opecf8vuo8lBHvTz8tXsD79Ogjs3Yzxrfe
l8LCwsLCg4x4Tv6C9UueS/uF4oRa3Mbzkb+fnYHv46fY3+R/ybPf7NDr4adA
ug3+SeZDpx4ncXzyljW74rUYFzrQlk/ontCX0KGseh38UX6nuLypx6GwsLCw
8GCg+IK2ft+K9UmdQvHQjz82a29EHknrUva/5e2mD1XPh7+719ejP+JIcv30
XBdkXYjXHKurtFt0v/wee0d8Kd7Tuo9/pl91HuOxV/08bPi/hvZWis+5b9e8
Z+HhQHym+YvewDynbgHdwF7FZfXQPMZPgFOP2xjKI8J/4e81XfX3Qg9TebcK
CwsLCw8T4tnwoG19OzaPq34p7PEWb3U19JxN13g6dBjybomL52dZHz80tGux
D+pvdeTZreogiJt4+5ezdn2yeursJHHm9xyZtQvBF6uPtBjvf3Rub30v7IRl
r0PenFwPcqrno7CwsLDwYKN8k+LA1cXBJ+b1OPv/4jPeO7SLUdcPf+S4vdqP
pOvEX1g3/3RoN7bxhuv6XbzZHw/t6p7Fo7Kf2n7vreA71Z8UT+q+2U82Ds4j
fn/d/Tus6PmWh97zvyrviedx/EGLPyp8Z3T/1fPJ+S7tA3nf9jtfFL7QvHlQ
9Bw7xan8sMLCwsLCwr1AcXN0ji3Py7HQHcpn2eq3Xkx1XF+KuI6f/HjWLoQd
3/Jzvbb5D38/az+MOurs0/b5zc0PDu1q5KvBozoOfzjV+Igj+a2hnd/8zNAu
Rj5z/XTd6kriQ+k35B3POpMcV+fv/d6nLiwsLCw8HIj34edbj74wtJvBq4lH
EPdt/Wn82qtz3vFW+OfWLeuufdB16yPxF/Sr/Ou9jrPHb7nesXj2Xr8zsqOs
23hPcevG0fXK42lc8b/yBPm9zIMWNmx1Oq8Fv2/c5EUY+779fPkg96sOeOHu
sPkTb4Y/gfds9+9c5ONqegp5q04dev6xsLCwsLCwcP0oX06Lcz8T+6r0COKu
xKfZ35RXvuWrOr6N53zP0C6ETpQOhZ6BDpS/lXlQ/oQ8X/s9Luxj+lT+jLxc
8gW43neO23ss/E3XiVf1O+J2+E1TPw+FhYWFhQcL5blr6+KZWHfonOgm8Z5t
P+7F+fr13ahbmPPgyVOjno71ufEHz05+3etGfGVeh3uYdVww87j+xsfZJ7bP
yw6wX2rcNxbaj4LXm3qcDhri6z3/4t2z7rn3fXYrPrp4z4ON7o/8k/wNvKc8
uPLl+r98XI0vPTv5dRQWFhYWFhYeXORffWpoN8OuwOfRddpn9bfPm470mYhD
wROyN/1N79D28V+JvDh0pPJgicvDCy7rr+wW6QPkI3Wd+itPmutQ39F1+tzx
/MkWr/hynN94j8WXOA5O/ZwUFhYWFu4v2ke0TuI96T7FZ1ivcr2jJ5+Yte18
z2J+0GPBM0x9vevGVXlP/MvYuot3W6y/cybiY+RnpcvFn2ae0/hPPU4HFdlJ
dM/L6j49z/avi/c82EjnKR9XjnM/8s1ZOx91BnzvT4Z2/Y6dvwoLCwsLCwv3
Dtn77HQ6Bfxes0NfDd6zfX5yrmM8G/F4jlc3if1p39bnOd9o00nciHqs4s/5
f3vFg4oTdP0tz+f14HtzfVZ/4zfxnvhfPCfe1/f8njxkOZ6OnU/vULxnYWFh
4d2J4iLst0H5u/EA9g0ffGDWrsb60juvOGLrsfVu6uudGpflPY0X3a384C1u
5MnQf+I13ze0S2E3OM/Pfjpr+5ef8LCh+4BHZm95D4ynuOeWD/TW/O/7w04t
3vNgY7Of34q6Oo3HvDfmP3n4c11z+aXki2A3T309hYWFhYWFhYcf8aHyxfOz
7MfiPfGd8l/2eE/2a9OrPBdx5nSf6gGJY8G7sof26jrlA3Cd6ky4Hnyw68F7
4knxuC1+8Po2e63HezovHnbq+52Rfka839T9KSwsLLxTkd6p5aV5PvLLPPbo
rPXnX/on/GjVdVkvsoMef2zW3gjdmbqF9mn9X56fzHsWH7catn3kNzYffmjW
rgfvZT9cviS8tPeknv/DgepRtf2DL0Y+fXUE8vHis9jd9O977R8UFhYWFhYW
3j3Yq8eK36M/aXnJrsd+fY5Xsh/PL/B/8S6trvrxsGvoW+QFlZdzr6+XPSa+
KtcVNR4fHtr1OH7svPhDdaXYcY0/Pjh52vl57o99+an7VVhYWHino3yFdE32
23p5DvFv8klP3f+7Bdk/9k3pFf2dec/CwsItpPtU141dLG9uPp7/gd9WV4B/
UPXKCwsLCwsLC3eLdH/LHs/utz//05/M2sXgQcWJfWho10LX0nSgj4QfJ4+Z
ukH8QbrRdesQ/9vQrkX+obHjVj1/rpeAVz392qztfV7TMXTf5JWjR91p/cyq
Y19YWFi4Gppv6T7VOVqsK761Ppm3p+53D+mxrH/sgnwddxoW71lYOI72C+wj
jOmi6Xnp23/19qzdOPDzYGFhYWFhYeGdj5kHbfznyblf8ELUcfj00M5H/aTm
7z00z+N0OuLgmy70wtr5T7rNXpxU06VeWpv+kX+b68bu9/2B4vjcF7rdfz+0
5ffR8Z1TX09hYWHhYUX5VFoc+1NzHvTMofPvrR94TvuKd3o8cvGehYWFhYWF
hYWFhXcvfnxotyOOvflzj8/5zlcij2jLm/Xi3M/7xjzf5neinir9i7rq6gw5
/7r6K//mp4Z2M/Lp89vEq4+dxz62/vm++J398gNbPqxTEWd0/32zdjnihZr+
9LXNPx/a7cizlfvfO3+7j9fWfh8KCwsL7xb87NAubf7dV2ft+/P18pn5Ondw
8qKMYS9eRD3AOzXvpX3DqftRWFhYWFhYWFhYWDgd4t3EeasXL8+nuuj/eWjH
5vzbY5t/MLQzEff+4x/N2vmIp5f3Z1314Pll6hPlPKf5b/jE0Vnb0rmOHb9X
mPOH0rXyR+UVaDrW72wefXzWbnf7m/82zlD+1pwXtbCwsLBwORRfYL0TZ6Au
YNOBXop1tHee/zK0K4FTXxfM9f/uNKx4h8LCwsLCwsLCwsJCSOeoPpI66ni4
3x3a5eDn8J+NH/1W1IFU/73pP69t/quhXQgdKf1hyyd6NXjJvb4u8X1+P/Og
e4342uz3PvnErL0VeUZXra/Eb216pFtz//z25h8P7eqO84IWFhYW3u2I9xQv
LX+IefffDe273bh3dd7bOnhkHrdwar5+/iDyxqyrv789tJvz+I2+zl+8gXpN
9hX1R/+mqqcnf/fYdRQWFhYWFhYWFhYWFq6K9BF4zj8Z2vXIB9r8kVci7prO
Uz5K+T7b90/M/akXNt83tEuRF7TF1720dB32dWGOi+cn7tfv9+IN8Z/+ln/t
5/80a32/2PXk+PxWh/hG5Kfbr+srLCwsvFMw856Z3xQn0XjNb237vOXH/srm
2TNDS/k1z87jKM4Hv2idxJdC8Rfi7Z0v91d+bvM+3hDPqW7hbwzta/N1+Kmo
Q289x+e2487vmv/Uj7F6hK2f16NeinWNnbDfcRqFhYWFhYWFhYWFhXcu4ufo
WtQX//JfztqLofdUD6n5SVfCL1P/AW/nOPqSXl3c/UK/e9Drnfd40jGUtxU/
PfV1FBYWFh4UNC/K09LyRr8WfCKeTr6Wtu93JXT7zmO/qtUNenXzZz+dta24
d+fL+TPFHYinaOvhA/P6eqc3Pze0K5snTwxtvo/1vTj/fx3ay3F++3d4RfuN
6hnhQ63TeMSHHpy1a/N1+/T88/sjn7Y6z3SqY+Nqv05cyO8M7cXIt6L/ve+L
E2n7p7e2jfNO7/dUutXCwsLCwsLCwsLCwoOP/J7fG9qN4AnFqYuHa38/vfme
oV0IfYw6uPwm8df8Mv7RWH60vcJeHaMcZ7ffepNl9Z4Z6Y3odu/0er2FhYWF
O0X7cW2f6MH5/zc22jx6NPK9yEPSOw/+1LqH58Tf2e/L37P/9jdfmbVTkU/b
5+raOb//W5fFV/hd35dvpq1fz891nq9t/vOvZ62/z4d/tT7vdFzxnPLfvP3L
Wbsedft631vU1R6N7+32PvfGv7CwsLCwsLCwsLCwcAz5N/Jltri+U6FPaXqZ
q+HPNL/n6fA38Yvq8GR9437V5eEPQn5m9nfl39wv/hN/aRzl6xR/2fzbG8F3
/urtWbsR4/9PP5u10rkUFhYWZszxCNaxjL38nRkzb4j32yvezXpl3rf+mvfx
rsvWa6d7dZ6d9gcf6/qNo/qIY99XHzGv//Jjr1qvqHjPwsI+ep+8n03f8Hzk
6Wh69+/GvgV7dOp+FxYWFhYWFhZOjXhD/Bu/A8/5m0M7HTzoF4Z2c17/6Jl5
vrGz+15/aFXEg+40Dg/P24vDy7zn1NdbWFhYeNjR/hG+U3z1bs9r3Ws86TeC
P9wv3g1vSA+617/X+/2mYz27+X/+btZej3Ucf9Jbz+zjOc744T+tt3hd+3+9
fDA+L96zsHA7mifky6CzludCXg/7/+ZL+zv2N7y35lH7HY7nB8iDLL9+r19N
//5svL/5c3ax/Me98ziO7iLzt/o99X0oLCwsLCwsnA7ZC7n++KrIrmD32Efm
d4rL4yeKe99pXsvDhnQ4OY4R7pT3ZC/ul162sLCw8LBgjj9fF++53yj/DJy6
P3jPlv/m9aiP9Nijs3Yr6jmJ78jfV4+v1Yt6LXgVvAt9bts3fXSen+CV0Tzh
rS7Ut8KuqPwvhYVbeXO9d/L2y1fV+x79O3v9E0M7Prdnz4XefTHe663Njwzt
xrxe2rH5e7zdPm37G69H/mN11/Lv41/b/siz2/wGx7XrezX6xf/I+e+tA22/
5gebHx7a9W3zBV2sOnA9f6X16x/nf29s6K/8YPfdO2uX5vb/sRgXdRTkcX7i
6Kxtn9/w0vJi5X64v/wI824b1xNx/b3xNa9C/3e834M5z1bv+fE8OO9U9er0
e9l4iMLCwsLCOwvls1RP4Q+Gdibsj7a/2q9L0EP5Me0rf/VvZ+25zXuOzNqF
qN/a9nmv33V1W+U3VT+jtx/OTqB7YY81++p62G3l1xUWFha+M94pvGfTVV0M
nLo/eE/jal/z80O7Fv4+nsX3+J0fGNqVuf//5Dy/6n1RN4pf3fjOZ7q8yTvj
xsbvDu3y5seGVvX+Cu9u9N596Yuzdn4eb/XKnEf74dLnOfLNWTs/t19PzvcZ
LoTOAX/oePYtHrL5GdvzDsu7kflP9m37/Gbwtd7vzP/996Fdn1/nk7Gvkv0M
x9GF0qs//tisbc0X9m/UgWOP9/qP/8z9N3+pf6B/fzq0G/P+nArM5zeueEz1
Z52f34VP3Zg3epbG/74+z//8XPQPPyvvtOvIvK04tU8O7VLkyW7r0Yvd54Ue
xnmNu/k9Ix5Vnd3MU2Ze1vGwd77GL1+M9Sofh0/O9Sc8N/l3FvXFW7xu/ny3
/pnz3C36oMLCwsK9RvN24ydvRp0E+5K9/cdl0b6vdXequu6HDe3Psjf8DdlB
Vce9sLCw8J3xsPOe1kv+pvrvU/cL7ymuVB359w3tUuijmn+8lTf1vUO7uI13
EW/b/O2rUVeR/fD7Qzs9aj80v/8val0sLHwHxMPQHeAZl82j6z1Wt9R7RrfI
zlenzffks2rv9Zlufg78WE+3jf/0Of4znwe/Jv7M/JL5T/Y1Xtb38vnk5fK7
y/K3PV0q3lP8F95tbNyNH/5TnJfxMR744bH9IvkI6FTG7r/xM55jeQyMJx61
h/a93C9IZ2x86IPx0G1cfhh5EPL5rJvuW7veI3Fc0/88Hvofz7X+423pftv+
3vHAPxna9bjv/ObfGdqL83XrVpeXzbpafK//e69a/y7H/4sHLSwsLFwPfnRo
tzZfPjm02NcVZ9H73qp5L1etV3CnoHHK+5g5jiSva+wNaP2ruI3CwsLCd0Z6
P7wnHm7qfi2L9EfqzTdeb3uelP3Gjw/t9jyP9yuhP8JT8ufl+7TuGX/Xgyd5
5OFZu7H5V1+etZfifOLm/T2Wz1Qe8anHp7DwIOPRx2ft9lz/99qc/3l+x7oE
84H3t+nmzkV8l/cbH5X1eOLRoTpLdHr0jPg9vFvOI+r75s0H7p+1K+HP6Efu
P36t9ets8Ll+z/nML3SzPftb3o7Gf13cpv97+5ezdn2ub394nq/qpRhHmM+L
F7PfhAd0/b5n/PWjp1P1PfdlqnxZdDf0o+6v6826SfcLj5nrEfr+o4/M2s05
L/rUNn7X/Wu89rU4r8+tX+IWfd6e80ubf/fVWfv+/D16JO6j+hY+b3z0ifk4
fz3uu/y43j/Hb8xb26d9JeIoPH8fHNre1YHwvHseMub3bVV/3n3N+by9d85v
/9P37Lf6nr899/qT9zdcT55nct4HuNPrKiwsPHxovnj4oVm7HnERdBg9Ps68
sywPx1/arZ601/+pxy/zxNbttq7dCl2M6xeP8j+HdjnqOTiPeBhxg7XfV1hY
WPjOaB6Wz4VOphcnPnX+MesD/43drX77X//vWXs5/Oipx5efIk4UD/DbQ7s5
19m8FHwDP0e+m7bebfEQ7Ab6FnlD2Qn43jH7Qhzp1ONTWHgY0Hvc5penw+7c
6fn4Afgb7/Mi7/OdmA/o130OfV/+TfOffQ+8Ft2kOHvfN9+zl/GA/Brncf14
FLpU9VjxceZj58MT4tUyP+K86kdlPg3vLB8pfab9INdrXcp6CONnfn3owVm7
FusXnsc4uv6sw4Xi/PV3TMe5V5ifH3EDdJOZ//Tc4nfzfXC8+0j36X6O9cfz
go/FN2b/y3sjX1zOT5b7m/PFOt5zjQ+V5yXz5jkfw7rQ84aHta+gP1D+Azzv
T38yaxfjPerxha7X9bfn7Rvxe/KEe5+9h/TVrT8Xoh/O4z3K+YQXddAnor/+
dj799n74ffEpmffVH3+7H719I9fNHvWcZ3vTc9nj+yF+eIyXtl/Uu9/2o81H
vf2WjL39qsw702nnfBxjvPN+Y85Tsdv8FK7LdY7dh8KGY/rKVY9b9jzuE//C
fqn5QnyM92VVvhN6b73fu+1/5l/HjjcPOX5ZHjHP58aNv2r96u2vGjf74Plz
46hfzkMnY10Uf5F1oLsdx8LCwsLDjuxLdutLLw5t7ldu+fXmWf//wtBuht2y
LjtoDNmH8mQ2/+x45KezL3ZQ9KrWb7oVfgK/UJxirptCByouUB4C6ydelz/C
PsCPjq1zdFCLf9e6WFjYf1+29IftvTu+tB3dQzyAOmy9OHP+uc/HkO4NL9Y7
zjwkn4Z9E/OJ4+TZwKMs8rVbf9vHWeRLvhVx1uKp2e/4B/rCxs8e2zZO+AZ5
PPDEbdxeDb0J/u3BB2btapwfv2s+FXdtXBf3lZ6I+ZW/k3V7jUe9EteX+Qz+
u3G0zo7F6e/0+Vnc73oh+Evrs/7jv8UF5PO5L9YV8ehj/qfvWVfEP3pfHOd9
sW47PvM6+uu5Uscvx8E7vulKn9qmG17XOGekb/W8jL23bf2/Ebx5vg+Z7zGe
eHg8tPsAvb/yfeO12We5354L709+3z1P+uu68Kwb8+b3Ms+rn/L3mlfcH/Nm
b99I/zw/+pn3F/y/9/xA/WnX+bVt/TWv2T/p3W96WfdP/oyx50zeBfOhvA5+
17xvXwuPgUeyv5N558w/93jdMb4388/2ucxXzu+5dt88t+7Xsr+b31t8vHwY
6tbhy/Uz6531j33d7ssbEbeWj19V/7bs/OF3e5/zh7xfPf57VbRe5XUpo/3H
3ue9/a+8XvV4Q/yc59U6vtv9QPsxzR/dvX5F/7MuPiPeselYb27b1x37HfmA
PG+ug/0x9n3f48f2rsN96+0fyXOU9492O46FhYWFhx3Ns+wHegR+nflVXjD2
LN0Af1Mdj2zXrBvN+/az8IPWm6nHM2O2l/lx4hKMqzrPvqdOO/+QntN1Wr97
eojlxnGL96x99sLCcTS/sYe9v2P29J2K/AF+Dh27+TnrDpp/dGlbPshPDO1C
fL/3e8a/2fNb+TvNi87vvGMo34D5tfXzhahXa31UR0ldh7YOnop9K/F+9g3x
Qs7j9/Y67tr9wB/LjyJ/6OI6s7GReUmId7Oui1PI+pf83LMX+Kt4DTyE7+mH
8aYbyrog6zv+yv1lpzhO3jl8lu/t1ThD63lP39pDvAP9Jh4sr8N4SPfTfcjj
7nf3Ku5cv4yv5z/rgfE77pf77/3HJ+AZzQP59+yPiJORT9Z1eg7kB+6Nv3nB
/kwvP8XYvGM87bfTF9O993gR4+M6zQf2geQpoSdQ/87zixfF89KZy1vhuN78
Zl6Sz12+XvMdflt//V477uXgIT2HePWxedV1LfLOx+K++T3+RHuPTkf+J+Pq
uu0vGDf2NB5dXJT8Fp4LfCp72zxhvcp2M95Xvq9eHmvoveU/5fxS9uvuv2/W
Lsd7o7/WD9fp84x4RXEdrst9zMdbh9z/3vnVDV+8njeDb/e8967ffC1ftnmK
fWR/CI75h+aZzw7tUlxvfm8X79NbkedLPZ/M8+H/+K25X9A8g9//0NC2Hwfx
z+Yd8SrywahLa7x9z7qb53v6ULod1+e++D5+2XzSm68q3r2wsLDw3bHZOVfD
rzDP8i+tQzn/G/u/p9+/29B6xc7nN9v3p1/hV+b1id3V0zvsFvGeU+WpKyw8
zEhH4f3cqc5sp/sWBwWtD4e1Dqvxx3uYZ3txC5nHgPISiKf/xc9n7Wr4P9bP
ZXUju0X+FP+XzizXQ4K9fS9+Kr0Zvw5PKU4k81/+5jdbb/iVnhu8GD1hju/L
1/GTH8/ahdgXNP7Nr7we+l/8SC9P7boQP0T3Sx+5bNyLccKfWPd9bl7A1/g8
80f7hX4X/5b7iwfx/8arfW9bHIrnwH3Nz0/mGe034K8cjz8y/n4nj3/bVzne
5WuXRfvYzoNHxKeIyxlbB/D+eDo80eJ93v784DmNf4839n3jga/Gg/X26fTb
eobnXHW8jDderrc+eO7lz856ROPRvn829Mk+xzcaB8+deYXu2XH2y+SnlhfE
c2m+waeaN3vX6bk078hXzJ7P64p+tvnuSvDn4iT4X+rKmk/wW+05+X7oqPGy
eT2yj4gf53fk4zLf7/01zp7L3vW7D56Xdl0nI4+zfM/6jc/kJ2a7x/jZB8Dv
5n0uv2ucrQue88zX5v3SzNOLwzOPyM+j346zrtCvt7j+Z7ftC5gX8v1xnqxX
z3nZs13oOc3993tj72Pxn4WFhYXvjOZndkiOZ2E/5HmU/VK8Z0P7kfal+Zf8
OnEM9vezHWrc8cl4lnXlEbDeZnuisLBwHM1/7HR6DDr5Zf1E/hn/7rDyn3c7
8kvlc9wvveGyyL+lL8Rf8Zuy/5W/z28Ud83vwvvleAWIR1nU552I7+sXv7mX
nxQaV3qkrJ9SR6nZI2cj3+he2yWLeXZfXzmfnXhI/nK+D+YFPA59HHuN/ZB5
+Z3ye2OY+Tc6QZ+7/obnggdjR7pediY7qPf8eG7wTHm/Fq/jefZ5zpfp+aeX
WnV8Mm+L1/H+4Ofw8mP8p32Exn89GP0fe37yvgW73OfidRfzUZ0NHWRPJ7Yu
NN72M+z/5OPkG3GccezFdRtv/c92M77QOMp70tOZyzOcdYj6T7eQ+61f7p/3
Vh4WeaTt7+TvZ/sB/+368WX5+aRfFk/Q8nvd7NoN4lG8p6vqHJbNi2ne5td4
T98/tMtx//Dg7s+ydk/vPfU9uuX2fLy2bb9l7DrzPp11je7Tc2T8/N9z5H7R
vdKXizfPv0fv2dvvGkPv97J8pvuz7PkLCwsL7za0nvJX2BM9O87+YOkHGzb/
8K3Yt8SLqNPX7P5Hwz/L32ef8Q/ph9aVp5x9xT7P9aKmHr/CwsOA3kc6H/Yr
v9p73Js32dfirflJxX8eLjTfi2eUv5FeZ+r+QXo1/t1iHtbjkf906n4uex05
73XWy3xmaBf3XG8rLhG/s+o6vairPbKtvhfk7/Kn5TFov/9K8Iiwx7usC/EX
nvesH1OPWB1iemjfk8cn20HsTfNpzhfsvjqvOpyNB38o+B77x+zYRR3YxsZO
xwdPguekC7Tv1fr/SujQxvhP9rNxbHkArnbXAc991o8Z/zwfea/Zn/jPXh7B
dSF+2P6D8fA5vbh+4PPxY+ZPz5H8GZnndj/oDdwH62vmob2v1l2fL7vu2leQ
16HdvycjLtp7qb+9ecc84Tj3caxuouPki+jV4Vt8Xk5HHPqyzz1ezfUuy5/x
H+0zeF8X8wucizi4sf73MOc9kyeh7XO9Hvyj/bDeeXLebvs6+mmfLfPp6q97
X/HddJnW1azLtn7Zr6AvxZ+a53t5tT03nmd+t3khH1+8Z2FhYeFyaP2yfyd+
wvyc12v7d1P3e2rkf1lP2VU/++msXYp9+l5ddXY/e9q++Lr6Z33nVxTvWVi4
e5S/go7avEkHxo6G3m/xh+Ld1l3/pnB/kE7r00M7f+B4T8jvMv/TrTR/7fEu
73ZY0HrGH1T3EB910PxA/uuyemF+Lz2f+2jeoSfa6/Xcc0TnhmfK/Kc4Z/nu
9BcPlnmBzHtmZE8t5g89F/YUXTKe0+84znl2Oj7GH38kvpe9zL6iR2Y393Rr
+I12/7fyVvbqZeVxooMUb0+nmOu6GX96QXqzXrz8upBOka7V7/Ej5MGkA8Yv
GQ/3zTi6n9bPPM/iP91/1+tvPDh+nE4w5+ccQ8fja+03qK8knn5s3sFX2S/1
3PR06q6D3yVfVk8nvLhPtMV/9vKXZt4N/9nrv/HnDxpfceL08Op3qVulfpn3
edn9Itfjb++Hecfz5L7LE6z/mTfUf+PDbrO/lOcj8QX+v5gH/HrokN0X9yuj
/Z487+fx93evXrx5KL8H3rM8XoWFhYWF74zZfrC/Tc8vPs1+dfFmi2i9Mi7y
wCzmNTsZefzZP4vxK+fCv7Fu77ZugXWwVz+5sLBw5+j9WtRTb/ffIX90zH8p
LNwL5H+JDxQXudd6sL1G66/9iIOah8A+h/UYHzN1v5ZFOi78237phvFCuW54
zpPA/lp3PJJ4aPac54odR+9Pj8ue6/FZ/o+PFCfU2z/Ba+DXxBEZf3yzdYjO
Ub4lvBC+eK/yIhh/vBL9XObHrZt4w7xOyg/pPtKTGp9enlj8qPfLeOFVT56Y
tcsr67Q9Z/pLr4svy/surj/b8fptnsJ7Oj4/L66XHybfJN1hvg7jmvnP3j5F
rkPfu37+IX0qft1zbr+XLhlfiB81z7kvvbg2/GJ+nvydeU/zfh5/61yui+78
xh3/7Pv5eNeX+c/e/gRe0nXKiyCvKD7Y85h1wq7Hc5Lz0vIXs94TD7tTPW1h
YWHh3Yr2s6yD4jnEn5SfvhyyJ6xD1rfGf94f9pl1mt2AF7HerStPtf3iqcel
sLCwsHAa5FfhUcQfq9swdf92i/xocYiuq5eXdL9RXDJdHL946n4ti54feT7F
m/d4c3qodp1XD8x92Ol1q7dEJ5Z1dOJZxd+K9+/lTRQ3JT9Db38az4oXu+/e
WbsUdWXkXci/k/ud66TslR4aT4ZfWhe/j4/q6QGMQ/NTXgg9Ox5pt3nz8cvi
8/GJzkt/6H65bs9J7jfeVFyYfA3em8X8uW/FeyRPqLpz5r3sn7kP6jHt9D7g
3fCQPVRv3fNmnlNP3v1xXL4f/KRV5wnnaX7UG3F/cn0s9aTsD3g+HZ/fB+Pp
fW7vT3+/Wr/plJ0fn8+fc5/Ve6P7Ns7mkdwffDn+0/+dd111IQoLCwvvNjTf
8o+qTtzukF2wWN90K07Eemzfcd3jbV9z6nEoLCwsLJwWcz2Usbxohw3t0/Jv
9yrf507Rfqj9yLF6yuywnn++bhyrY4W/lc+H/jPnE2THPPjArF2N80417rvF
rGfMeSxh5j9dt+cw68Xwn+17j4Vd6POsA/X8yKep/nQvnyO+jv2p/lT+nXUj
XZq8j/I85rhdxy/Wt7ocdWzGfsdx+C06gsY7PRs65d1ej3mT3rDtG30rrgPv
5Pcy/5nfW/yVuu/mA/F17pvj8W14RPd/LC7M79AtGt+x68W/LnsfMn5waFeD
D7Y/0vNvxKnDsfMbH+PvuaIfse8lH4X3hu4eP2v+9Z7SUXvPG396LOpj9XjP
XKfL8y/PLp0sP8/vqE/vPPhq80jOH5/vt/tUfnphYWHhztC8al2pfaT1YG/f
1Dq87nG2/spHNPX1FxYWFhYeLByLczxsaB3lnx40fxB/Ij8jPZb6JfxtKJ/j
fun15A/FP/T4TzwCHo1uKR+HJ8L/HNa8Cu7bYh6oE928mXgLfJ/jW37dLV2m
OHpxsOq0uM85H2XWbeO/xnhl9qa4dzzYbvN+uq89/s040AerU5X1qd5XfCye
f+z3czy53xOPrq7RWL3yZZG9Lo4/50l2fzL/2Yt/h/ha75G48sx/eh7kaW7x
+yfi85wHQL11+w/e6/we8k/waPq103nGeDsvvbLxycfjL3v8vf0s71OvDr2/
x/a9cr1K401P7Tk0H7bndysPr/c2+23mSyiuvb13D0eebflm7Du6z3hm70OO
e8/3w/rWG9fCwsLCwsK7Aa3r7PSp+1NYWFhYWFi4xc+q/6GuIX0SnoIuV35B
+f744evu16KeaWNDPDVdEsTPNf7nO3Ne7RuRtxJ/o46b72X949T3oYf4k8zD
yE8oLl3ez/x931NfXdwr/noxj+BbYa/hI41nr394Ds8JvWhPv+15c7z+t/jj
V3bMC/o+Pid/jqdTV6g9X09Enkp8lr/x5E2vd2qUJzd++GTPrzhnfBN+kl55
p8+Fcfcc9PKE5Pj3XHctP/946c8P7Vo8V/7vvro+OmB1pJxHXah8Xs+bfsgH
YNzzePb+ngo9R/wZz43nA+Y8nPSVxq837+AP5cfN+Qbwtu6r8+Nhnafx9ddi
vP9waG/G79onErdOf0uPjf/0PtonMN9D15Ovf+r7VFhYWFhYOCVmu6iwsLCw
sLDw4GDO08cP51/zt/nFe51vHV9AB5XrCsFe3SH15uU3zLwEvnfqce8hHhqf
iLels2t88HPB8/qcbq/xYdcj36y6NI0n/nrESWc+uX1+X/Cf+XPYdJZPRR1t
56Mj83+8HL6ZTnGRrz4aukjHZezxonhKek7jAeU5XdQFH5k/v+fic/w4NF45
LyV9etap08Xhx3xO97dTXrc3HuLS2/24ZxtPi/e2X+E9yvxn7hedaOMjn478
kHhc12e+wDsbb/VT83WYPxb1t/8Y+UX36j1S51XcO97Zdfbi3NTZ9Te++dFH
Zu1mfG9RL/vG/D24EONv/jR+ePd8fvHu3tvcrx7/+8jDs3Yj5sHMkzoOT0vf
bxx+9fas3Zi/j5eD55TvgN7UvOn+4729H47bq/tYWFhYWFh4GFA9wan7UVhY
WFhYWHh4cKf8Kl4m87n8/YOeP0l/e3wvPgf6v/h/vHXmQeR3l9ezd37n6X0O
8UfO72/13PGudMSQro1uMX+eEW/Tu894mJav/uXoT857iHfzd/4d9XroM/GJ
zo//ynG96ubkPAI7fX71f2xc8Jnq0OOh7E80Pu1W6HzVM8OXNh54i/9u8dFb
/Krrb7zdk9v4cvVS2+df2+zps6Hvb8xb4z+/su04em08btZJ+jvrojOPiy98
79Auzvn4W/Hc4KXz+C/m070Vx/X4R/OKOPCsm8Svu258sn67nl5elKy39X/P
s/fReHku9Btf+emhnY/3qfHnF+fP7zORjzXnQ8j5LtSF8PyoQ7yu+a+wsLCw
sPAwYrPDLm3ec2TWtufhLywsLCwsLCws3FvE46w7Hx8+KNfx8Ts+h5k/zJ9n
HPv9xfyny+cL7v0evkc8MB44f1+eRcevi093HnxWr590pfKz6gf+Fb/s/2N1
0fFhxhGOfW/dKD47686Njzhw/cM74t/kQXU8fSVdI/4TP+84PGK+D3kfIedV
zcc7T+vXufnvnY56QupDLbsPQ//9nqFdiH74Xu4nlOcA74q/NM7yf+Kb5fe0
f+D5zv3Rb/sEOb9BYWFhYWHh3Yj2wbN9UVhYWFhYWFhYuLeIp8GD7NXv9PhU
PBDeZzG/48vb+Kb9QvyPuN7M87ieHi81xlfhgV3fqrwo3d7YcVknmOOw/b48
jvI/rGsc133/8LbyVebPe+PY4uZvhL+BX8x1x93X9vnJqP8kf7HzyROQf6en
421x5Dcij4D+y1ch/wP+VZ4Gz2FvPPC+WXcJ3c98Hxzf9L7ng6+kF/a8y/sg
f2njy5+JuHf9dF79ffihWbu+TedcWFhYWFh4N6J6ji0epvJeFxYWFhYWFhbu
F+51PtYxxFOJy5fHUPy4/Iv7zZ/oV9bPrev8mTfFo+Gn6O1636dLXNd1ygf5
2quzdmPt17nb87j/nge8sfo7+PseT+j5avl7z2z+6dBuhG4231+8pLwP6qj7
/LFHZ+1WHEc3qZ+5rhB+km4263LV9aIHocfFP8KezhnP2Kv/1Ht+8Z+e85/8
eNYuxPGup/HDZ+Z627NR18445OfJ71Y8X2FhYWFhofX4XOyn7vZ8//zrWbsd
OPX1FRYWFhYWFhYW3hko/yceDK6LL1xV/0mnSH8nD6N8juxh/dT/lq/zavRb
PskxfeF+Id4s1+HpoetQZwefic9zvXSuvmecjKPxb/lIX4vj5N3Mv4vXHdO1
4hfVVXM+cfYtn+mpeV7Nb8+v59W4DvdPvtZ8HbtF19Ebb/33/Cx7XuO+rn4W
FhYWFhYeRpRPare852J9xO12SWFhYWFhYWFhYeE7Id4LD5Y/x/vgodiveEW8
2xj/6fw93gp/lnWSfo+dq74MvrPHu6nTg6+io1WfCM+5rF4AT0fvt2ye1b3C
zHfm63Dd6opnXtf1jOme3ff8f8/Fqn6M82Wetvc7Y/dDfaNe/aN3/t7x0Mvi
2dVxb3XoX982zu05PN29Dz5veQK+Gzzubu9zYWFhYWHh4ceNjZ3ynuwZdUjZ
D9bfvL+dv8/u83ne983H5ziXwsLCwsLCwsLCw4VZp5f1buzCxtu8GLwZXmpM
90bnlo/DU2X+jR38+aFdi/38fF52aNMHbuVtxNvJ19jjb6F+LatT1b9mNz+9
rU7VVLgsb+t63T98sPu92zwG/Ab5YFtc+PPzePUHt/kP+o1nxGe3/J4n4vt4
Q5/jy/Ubz6jOVq6f1Otv73PjKJ/nbw7tdOST9T60eu1H5nlTvxf9pGN1vavy
uIWFhYWFhXciyouz27pG8nY3e+PFyCcjX9GXvjhrxzbPnhla5CfPefybXXcs
6kWyH9YVh19YWFhYWFhYWDgtrpp3suWFvB11XPCMmb/EG31kaDe2fS4fYm9/
faxeUq537//680dDuxC8Ft6JnZ15WNdDN4qHy/XE/e265BfN+TFzntL9up/8
ADhWD31ZnarryHWNcr101+28X/3bWbsZ+TLlE208aK5rJK7+Zuh45Qtt9dOv
Bh/Kv+nphT1XYzyu8fnA0Lbz4/rV8o0+E3/j1Ztu+FTk/czPubj9zw2t6jcU
FhYWFt7d+A9/P2tnN3/8o1nbPa/44aFdj3WYvaB+ov1S9gk7z3rd9isvhv3o
uL/80qxVXu7CwsLCwsLCwsOOvXrcmY/886HdnuscrwbfKL6ZbtDx7Mle3DQ7
E3+IJ/W7Y7whXsxx+qGfnxnaxeC97OOrB4T3xHs5L14Xn8l+zvXTs16A7nNd
9YtWRTxj5jH1t1cPy/gvW9dLfaPe8+P63cfm37wZfOm/HtrFbtyY50bc+ckT
s3Y56s3/m6G9NL+eLZ4xjzses1f3atk4eOPp/hon4ybP6MeHdjveA8+dvAy9
vKiFhYWFhYV3E1rH779v1i7v+nzsAHYC/L2hsW/Ohd0pjkS+o15dx8LCwsLC
wsLCwjsT8UHsUbwVe/Gv//esvbz56COzdnPOK52OePOsw8x14DOP1PbTj0ec
ER6pxRf369XgxXJce8uneDLVg38jdJ7i2VvexjeiXji7+Y+HdjX0ko7Dq/r9
n//TrF3Zpu/DA+63/UyfCtd9fnyeuC9/Z54Pz2h8fN99+JuvzNqzcf/Gftdx
mZ/Nf3ueeuOeefn3D23r91fNz+p49eXxuvKM4d/xs+8ZWulGCgsLCwvvbmRP
yWe0rvPKi/SLn8/a1W1xJ/9paG9GHLzj/X/qcSksLCwsLCwsLNwffOLorL0Z
+Qz9H78nj7x9cvakPIsZHY93bHkQb4Sdiae6955Zw6te3Xz4oVm7vrZ6Qfgx
/YafGtrNbTwexJP26ruzn7Necln95Lowj/u6z5/zrBo/fsteX694ds/nGK+c
eWr9dR/97T5/aGjXgsfs6ZXpgfHLnmv645xnwPthX2CvxqewsLCwsPAwoLzv
686faV2XP549xH6wn85+YNc89OCsXdu2P1pYWFhYWFhYWHhnYuaLIP4Hj7Ps
+RzPHsX/0MX5Pfzhp4d2vsszrhvxr5k3FJ+s3/iwnPc+61ldDz3i1HXe14XG
If9f/SLX23t+VkX+B90w3ac8C2M8a2/85RPTT+f5raGdn//9QsSlu+78/C8+
16eC58zPEf00vn/q+1hYWFhYWDglyreJ91yX3QBzHIq8OvbV5aXx+y1/97U7
xl4rLCwsLCwsLCx8Z2Tv4Ysyr7fsebJeMn+eedB8frpPPNJUdije85NDuxTx
8H/15Vm7tC1eKsdf3+n2Mz8Fyofgvu32/HhD4zz23PT6l/+f9b7uE93qbwzt
yTm/+nKX74WZN8+fZ73n/wcvWKzp
            "]]}, 
         VertexCoordinates -> {{240, 160}, {224, 11}, {246, 304}, {590, 140}},
          VertexLabels -> {None}, VertexSize -> {0.14}, VertexStyle -> {
           RGBColor[1, 0, 0]}}]]}, 
      TagBox[GraphicsGroupBox[GraphicsComplexBox[CompressedData["
1:eJw1kgkw3HcUx1GNMJnYFq0jDJMmMYpJyhBEfFfEIpq6j1gb61ir+z92MYpG
HSNEdpJGl3GOxhFWbRmRSTAhIs5GSZ1pKXWkUiSRNq40pGs2fTO/+cz7vZk3
8/2+r0k47ROloqSk5CJ/u1QUBQUj35F4x8MKdvw/j1NQmKFgGhfFZZ215skU
2Po8On2Ni2V1r+65fAoMae2DWiEXWy1FUos6CpbZfcFVS2HIMGA2K7VSqDBu
FXdEhGFzw93Ct5OC7KYLVdp8HkmTnvrGXRTqzRkHHGo54LzgUrx7FNLzmga3
i0LB+bZzzfQWhb+8m40uitm4Jm/ZiyQ0JiqFjh5nkEf4icvHSJydbZDoHHVH
zp4VVnwbiZLQnMk1PRZshtwa5spI+NlOZ+mrn0aIdPC3nSQSoUzl23d3nJHR
rlwxfZbE4+7Mxg/eACqLBVdKDEmo6try8lRPwpp9rs/nTwLFacHhBw/ZY7Dy
hu2PeiRWhm5JQgzCoaTHj42ck/tnaBdHfs9FKnMn1KSRwOXBMsm/xlxUBx47
pJxFQNqQOux1PQwDR+94GXIJmMW6cVoMw5C4pdUsdiZwzNvhw/etzoOS1MVz
zAgEaprarB3hINZRrlSXQJJ2PWtWPxRVQvnHGQHM2HJj+J6oYpTlFkGA1+OF
4aqeHrj0SdOTGQcByqtnenMs3KCx9/awzFGA68UJB3v3uyJ9oZ319rQAdMrH
v2yvnoKGKy9w2E8A5/nfC6kxJj5ab7A3/FKAhHs35xqTncDnOgaMXBTAwGIo
85WvA7Kcz2W8jCHhXpAk7HoWBZflbE0VFolJN0ubTAEPXU6pP5iakRhmmrcN
LPEwnqXMT9AiUafaKfURRKM6yLp5U4UE65n3H/0r0XjeLeO0bBI48XnY3ScU
H/oRNUT7KwJvjdatgl/y8Vh+Zo0NAjW7uuNiFPpPyf3fzYOvEIfjB5h8TxJ7
pu4UVOQJ0aOT+7NdCIlHC/OMxDEhnvfGLzoL5XNLyyMzOiKoxO4z+EpM4pu9
C82N/iIwTm569shIJO9zftOfJwJ7k+g6MEoi/f5IvsqICIKQWZsIZQox67n1
NoxYFFYZ9Ze2U7DSmqr4biYKUjWJw/wyhfdSgkZfB/Pw9321JjstGozFr9WI
cR6Urv6zcMmahvoL26ulftHQPi7WbfuCxlZlZSNzNBonlqjPeiJpRNocn9b0
52NKbNVeEEdjg3XtUes4X5H/CzQsdu8dFINPd9lHQ56GZG1XIZ6WBkmYD2lk
rKryfLOF0Lb3LXftle/7dcjkSp8Q7JqHLLU2Ghz1Cc0SdREsk3YKcmQ0ZNtl
dQEeIjh1pPlP5NPQnYkpL7osQrt24up2Ig3J5NMFx59EuNB2I2V/AI1Q6we9
huqx+A+RUNn/
         "], {
          {RGBColor[
            NCache[
             Rational[2, 3], 0.6666666666666666], 0, 0], Thickness[Large], 
           Opacity[0.7], 
           {Arrowheads[0.], 
            ArrowBox[BezierCurveBox[{
             1, {256.50167133028344`, 82.86894804506846}, 2}], 
             10.088746205550024`]}, 
           {Arrowheads[0.], 
            ArrowBox[BezierCurveBox[{
             1, {207.49832866971556`, 88.13105195492942}, 2}], 
             10.088746205550024`]}, 
           {Arrowheads[0.], 
            ArrowBox[BezierCurveBox[{
             1, {219.3205324056313, 232.98664448309674`}, 3}], 
             10.088746205550024`]}, 
           {Arrowheads[0.], 
            ArrowBox[BezierCurveBox[{
             1, {266.67946759436796`, 231.01335551690016`}, 3}], 
             10.088746205550024`]}, 
           {Arrowheads[0.], ArrowBox[{1, 4}, 10.088746205550024`]}, 
           {Arrowheads[0.], ArrowBox[{2, 4}, 10.088746205550024`]}, 
           {Arrowheads[0.], ArrowBox[{3, 4}, 10.088746205550024`]}}, 
          {RGBColor[1, 0, 0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
           DiskBox[1, 10.088746205550024], DiskBox[2, 10.088746205550024], 
           DiskBox[3, 10.088746205550024], DiskBox[4, 10.088746205550024]}}]],
       
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{355.71875, Automatic},
    PlotRange->{{10, 660}, {-5, 325}},
    Prolog->{
      RasterBox[CompressedData["
1:eJzs3VmXJdd5Jua0f4Hdbg+S2/byP6CmltRqKS9925qlliWt5bV8bY3U0KLE
n0C1RDUlSmpe6EJXXAInzAMnEARJAAXUgCoUCjXPBXCeqfaK2OfZ2fElgiez
KisjM+vdN2+ePBFxduzYsff3vd/0f/4//9/P/b//7cbGxv/132xs/Ofhj7F9
cTMYDAaDwWAwGAwGg8FgMBgMBoPBYDAYDAaDwWAwGAwGg8FgMBgMBoPBYDAY
DAaDwWAwGAwGg8FgMBgMBoPBYDAYDAaDwWAwGAwGg8FgMBgMBoPBYDAYDAaD
wWAwGAwGg8FgMBgMBoPBYDAYDAaDwWAwGAwGg8FgMBgMBoPBYDAYDAaDwWAw
GAwGg8FgMBgMBoPBYDAYDAaDwWBwr/Av/uPQLm5+6KGhXVi8P8FgMBgMBoPB
YDAYDAaDwWAwuA7/+n1De27zN8f2xub/Mba3+vfHXhra+c3/fmwPbf7HPx/a
xzsu3f9gMBgMBoPBYDAYDAaDwWAweHjwZ8b2Zucj/6exfWzzfxnbI5vv/cuh
HZ89n3/m/z22syu8ve24L31xaOc3/9XYnth86J+Gdr7zn3jPc6+PbfN73x3a
7dXxZ2f5T7/3n/9+aC8sPp7BYDAYDAaDwQcDydHk4R8b25XF+xUMBoPBYDAY
bPjd7wztVucj8ZPf/MbQrm3+u7G9NHv+B/7z0N5Y8aT/uPmDYzuzut4W/4nf
nPKXGxv/+9je7Lzn+TfGtu138KDO+9/G9uTm3//d0F7f/O/G9u5N/2987eVd
j8fxV4Z2afN9/2lon+k8rH4u/byCwWAwGAwGg8sgeZD8Sa79jbG9udnaW4v3
MxgMBoPBYPBBxymPt7HxL8b2if792deGdqvzkPjAeh285zvHdnXFb77YedDK
f/odv4+n5Gc6x3vCyn/iO8mdrd+vdR5U3PxfvXdon978lbFd7zyr3/33Yzuz
Ou98v398bevXlhzLrl/7Px3fD/Z+Oq7mL8U71/EPBoPBYDAYDC6L5FVyHnmz
yY03ex6npfsZDAaDwWAwGHx7xOeJ0/H/3fKe/EP9/38Y26XuR4r/fPnY0C70
OHfyJKx5P+fwv/zz0N7sPCde0fVbv97qfCw5FS+7sWpvnBvb5isvD+1iP+5v
/npopzs/+j+P7eF+nvuZ8p1bjZ+ofjoeD4v//OfvDe3O5vv/Zmhn+vfk6Lv1
Ww0Gg8FgMBgM7g7JddV+rfkeipNaut/BYDAYDAaDwd2hOB3+iHO8J17wb98/
tNe25ffE3+Hz2Medhxe8237ibfGl63jTPxvbW5t/OrbtPKv/Nz506/vmv/pc
53GbPHxuW/99Jg87vvGydzpPXP0GarxU40Fvbv7q2E5v/uVfDO2VzVMnh3Z1
8+fG9nK/Hp5XPxr/e2xbP+RhvddxDwaDwWAwGDwoSG5lx6929ZpXaSrPbfGb
ldd03L8d2+1+HXJa8ssHg8FgMBgMHi4kL8rLzk/xXv0O8Z/qFOHrqp/pQUX9
/Iv/OLSL3f8Tn1mPxyvyl/0fx/bp/r1xxXP+r2O7tS0/6ROPD+3W6vdOrfxo
P9zl8R8Y26Or8b3er4+nJp//9NjurK77qf77d+tvGwwGg8FgMLhfyL7beMbt
fOa/HNvlLleRk9jd8ZuV16zHVzs6npQcJ56HPfywyLHBYDAYDAaDwYb8J9nN
q5x5t9clP5Ib8W7ivQ8q30aerf6R5ORal37uvuv/8aU13ymeFO9pnFp9qfOb
3/j60K52v9U/GNu1zX8ztpv9Op5bHfeNVaMHuA/+DOT7pcc9GAwGg8Hgg4Pk
FvWBxN2Qa2q8S+Md37c6f2Oj5XE/0eWZKe/58c2/+9uhnd38qbHd6vLVnJzm
e3bj8JvBYDAYDAaDRxPJfb83tnvPM/nhDw3t4ja/z4MWdy3eHS/4m2PbvX+q
+PX6f3K86//62Lb7jdY8q/KR/v7YrnRs13uh86gnTwztyuafv2do51f5Sj+7
0hMe2XY/+Gf5Upce/2AwGAwGg0cf8Z3kGfJKs7ef63Ew6lX+4NgeW8XBfKbH
Eznu1VNj63Ew7MI/O7YLq/j05/t5NS6e/b/F4Xyux/mQX5cer2AwGAwGg8Hg
3qJ8nV/76tAu3zM/ya7ODn/61bF1u/7S9wvxvFN/yNu7vo775C/g/+Rr8fJz
8nTlPflj8nfgt9muc23zR8d2eZUP9JP99/94bFt5qNStr/FcqSsfDAaDwWDw
fiGek1zV5MDrK7nkmZW99qXNxx8b2s0eVyNuhTz02pmh3ez482O7tOI/v7DZ
/D8/veItP9H9PRuvemPzmaeHtuXnSQ4jD+FDd5o/PhgMBoPBYDB4uJF8+itj
u37P15vm+3ziwMQPie+X31Sdzrvtn/P5VxpH9Z34XzaecnvdqMp7inP3ufkv
HOt5QJ3X8oC+stIHznTes9Y/qhi5PhgMBoPB4F7jP39vaHe28Zzss+JN1Mmc
1nk80+PTf2lsV7v80/J6fmolV766+a1vDu365rvGdqfzm3jRdv3P9Xj6yD3B
YDAYDAaDwQG/8+2h3ezx0/d6vUcfGdr1VV2e05tPPzW05XnP+4X8F5p/5rHu
r9nG88TseXhPefTVd/+tsZ3fPHF8bCv+dIuP5hf6lS8P7WI/bq4OUzAYDAaD
weBe4Xe/M7RbXX5scsqrK7/Nj674y5ObLx8bW49vb3l/Xu/xK81f8+UVD3ps
Vbfxlc0fH9u1Lk+yV7frn9j8kbFd6nKP/EXs20uPTzAYDAaDwfuP4mzlveHH
5/9L9y94sPCb3xjatZ6Pc7fni5c3z9jb5Wd6+GNDu7pn/qQHFcndO5W/Xz87
tNsrv4Rz3T+2/f/sarzoEVe630Krg/RS1zvUpZK3aulxCAaDwWAweHSQ/MYO
+46xnd/85bGdWvl3fmCFL3U5UL2i3x7bhc6DOk8enz8a242V3fji5g+N7cLK
X/Rk5z/JV5F3gsFgMBgM/sTYrnc7aosT+UiXJ/BcjiPP7BSXvr/g3qK4JPHV
u+XH8XTmmTxLr7w8tIs9XgkPat4tfd8HBZtf7I3Oc/L7lHdfvn5+DfQAz21d
fHswGAwGg8HgOqx5j+gL5Dd5x/lz+j8Up65eEP9N/Kd8Pvw9yYdN3nmt85uR
a4LBYDAYDK5D8bNN3rjU/fgq8i9rPNcHe7wt/gviT8k7/h8e9Gig+cJ+v1te
stnvL/Q8Tup08k/8s7G9tbLvX+t+AZk/DeXv9F55DvJVPfXk0Lbi18+cHtqN
Hu8eP+5gMBgMBoO7xZ8c241uX5Wnp9WjPNf1gybPvdjj0fGVPpNf6BfkQnk4
W5zK+S7fyHtOPlx6HILBYDAYDB5dVBd6Y9XEzdb6huy98hg6nhyz9H0E7w3l
o6+8207rnJNbxTE1P8+Xe/x1Pd48Il8vff9L49//3dDudD3D+DRe86XNHxzb
zW3n8fv83neHtvt69MFgMBgMBh88VN9cnUTyB/nNZ/wm+RDP2fSDLZ6z8qV4
T/Jh/DeDwWAwGAwuhf9ibJ9Y8S5fWMufTPM/bmyQg5a+j+De4Fe/MrRLXa79
hbFd3vH55NvG0z3W50utp/nqqaFt+X3K47T0/S+F8lSpZ6o+gPGpdY2g95e9
Yun7CAaDwWAwePDwvX85tMudv6zxXu3z2S63idupfpwQXypunR8EvvOo1VHn
HyDexv/Js3DpfgaDwWAwGNyOeJMW5/za2njZ8J5HG8Uj/drYXtv8xbGd2HWd
8EceHtq1HvcuPko9HnntN1at8XqPLH7/BwXxmPJ98rf2/TRfwDPhPfcZ5QOh
91Wc83MOBoPBYHA/kJzwJ2O7vfmtbw7t+mqf+uTKrn18Jadd7bxdq0d0q+9n
4n5aPfbT3U9UPSLyx2GrM/SbY3ur88Hw618b2pVel1LdTv4A8n6x17e6k59e
5bc/vo0XDQaDwWAwuDzeLe/5n/5qaCfDtxwxJLc2vvNKzy/Z4pZ2zuM88/TQ
3tr892M70+sd4e/Ud3/n2I5+nfe7RXlX+d2ePDG2lZ7y7OZfvXdoJzZ/fWw7
56WD94Ytz/GxzRPHx9bn8/v/ZmhnVuvqfJ6HYDAYDAb3Av/N2G52exy7MjmB
vRl+7atDu7yqI3RrxV+e6vl15N2hFzgP/ykf+WGJW8dn1v//l38e2psrO/+t
zW9/a2g3VvzuZ/s+D9Wfb3UoT29+6YtDO7/5B2O71s9PvvVgMBgMBg8eVt6z
8VPsnsd7XSSfHU/uWbr/wfuD6ujUejq7RXIyOZE8Tl4+LHLz0vjkE0O73eu3
44/J66kLsL9ID2x+H5/o/jT/dmy3e9yffGcf+fDQLi3e72AwGAweDcR3tn3m
4ubvju3Syl/zc33/+b2xXe55N9nlPvTQ0C50v80W1/Pk5o+M7VL3+6zxJgcN
+WdWvYXdkZzEf5Mfa8tjenElh77YeV/2TPoOuzyemP5DLmPnX3ocgsFgMBgM
bkf+fOKL8Z6PPza0m6u4jrM9/0+Lp31P/DuDd4Xi5Ns8enePk1q6X8Hg3SB+
s/mBfLzXh8N/8pumbzku8z4YDAaDu8HfGNubKzy34vc+1fPcwBaH/fGep1N9
Isf/0tiudjn+7/52aJ/v/B676r3au+8Wf3VsNzrW7+X9+ev3De25Hq8vL1Pz
07zR+y9eSRy6+xSX0XjO870+U4tPutnzlH7n20PbXk8yGAwGg8Hg4cE/Hdub
XU7Ce8rbLU6jxbu83vOeR28P3g3igcyz5l/w8OL9CgbvZT7L+9XWR3Vvt+o5
VP7TvM86GgwGg8G3w8ZH3l75JTy3qhP5fI9jJ5fz13ztzNBudr8F54u3+fKX
hnZhJe9f6N/bv/CgS/ktivuhd8gzKr4cv9ni9k9uPvrI0K6v8vx8esVfPrN5
7KWhnd/86bGxs5/v+ot88/w51CcwDu7/Z8b25qHLVxoMBoPBYHA7zvl71rw0
5AhyQ+oYBe8Fv/fdod1efd7YYIdful/B4L0gPYlfc1svX9hW11acnHjC8J/B
YDD4YKL9gf8ieajlz392833/aWintvF1+FD50+Xb/+GxXVzlX7m48m+82P0g
Xz87tNsHLr+QfVD+zN8a2/nVfV7vvG3Ll/TZbmdsn290/0x+HPQU9kb5APDA
eF76TvjNYDAYDAYPL5KnYP1e/hvy1E55T/r90vcXPNzIb2Fj1cJ/Bo8SioOn
p1pn6WXmf/NneWjx/gaDwWBwbxH/yC8T2heg+Gr7gf8/9E9D2/JfbPzm1e4H
+cdj24rLVl+HnK4e5VK8nn7IO8qvsuUNfa3zt/Jzyj/q/hsffL3nhZdviz7C
jsiuSH9Rr2jp5x8MBoPBg4X24aX7EdwbVN+E/ECOonfDqb69sUHOoJdDx7Gb
Ln1/waOB5FL2d3L90v0KBvcS6WHQfMd7ysMm/t26yw5AX1z6PoLBYPBBwx8b
25VVfZwXtsnHsK3vT3W+znpOfp7GAZxbXX9jw//ll5ray8726/NfwPOJ3/7q
V4Z2qddfx//t9zj5Xfqkfcu+Jy9pu98vrPxN31jlE32111/Cfza/1LMr3vPV
7tf5rrHdiZ9mMBgMBneF9uf4mxxNrPbPdcgOSy+vGPkiGAwG9wbx/hAPSh+s
/j/sVfKSnDwxtsXvIxgMBg8aTvMzvjFjz//4ikd8fJtfAB7uzOmh3VgrH8vf
wz+z+vlDx5G7p3WItvwO8KH/YWy3ut8oOdy+oT75UuMsHozfJvt1jcfH5+I5
xfHjgY23Ouvf+PrQrnZ/1dRLDwaDweD3w6kdcs7ff2PDvrV0f4PBYDAY3A3a
v+iV4t82Vs3/5U9bur9zaJ/Gc9Y4DPouvZn/jHwlS/c/GAwG9wsrn1jX/ar/
4N3kw6znN77twys/yg/069T2zrFd7fvO1G//ducjq95Vf895juOn4Hz2ry99
cWjnF/PjXIf6WZ+Dfsujafwaf/uJXpddnXk8p3i1pe8rGAwGg4cDxUNUu2I9
ru63S/c7GBywyUPXu923yosVm5z67tX5e9fW/e79xr2+H+M0l/dgt+g5tasv
P2+CDxZO7XUbG3P7mX2Qviv+sOlblxe/j4ruY7oOLN+vYDAY3C9k91H/rfKa
NW9IlU8cX/lP+Kdj257HfrdyUOUv+TnWfh41fevt7Y1b44nvtN+qHyAvaR3/
YDAYDB5tbPvArZ6/5K/eO7RPr+UT8EH0uLrf4D3FW/h+Lo8nex35YulxCR5t
rHJqy2P30VU8zD+ujtvYaPLhi5vs61V+VI9SHUjy7W7l1jl5d1oX8q1tdnz1
If3+ujwCO0XxTFN5/82191ft7jutFy1+yP21PFZv9nH3HNQLJef/5tje6HFk
6/janT4P/a7rUupeB7fjxob5t+547zG9s9XJvdb3073u39z7wO5g3THP63Fa
6n0Fg8GjilV+w1fKb8lu5fgqr1n/1/l3tPyXr2+TM/3unJwpzlrcPLnTPvKg
5H+q9U3Jgcah7mP4zshtwWAwGBwQ//OjY7u81v4lns3+8lNju7XNv9M+gy/w
O1V/woviO46KHTK4v1jlxFrHWB4l8pLP5uXf/e3Qbm/+8tiuzeaN/8GxPVby
3L2v5wuSD6++H3P5mMjVG7tstf/tvbqy6+vUVu/j+/d7/j6Mj+v4P3/POb7R
+LbjnumfxX+JS5rqGed6P9bxufJVzaF5Q55+/98M7czaulzyHf7lXwztlbX9
uNf6plknl8Xq52kezOm9c8gfxXv3ystju+c4O/vvtC7v2W31Zaf5lz+4Wflb
92Mdtc8vPf67xco35/0JBo8+WkdbPo6t/dc+jRcjl6jb/dtju9D1leo/WeWN
ml9yyke+0ddN69CcXLCu/neNPyKnkF+qfXzp8d8tGjf5OT2Hqf3/jX6/lX92
Xt2Hs94Hg8Hgg4HVP4y9sPpV/eTYbmz+ztjm7WJ4zym/81aXD8QRqAtoX8J/
2qdrvu+lxyl4sHFdfSRyKaz24MZf3ew8GTkKX7Wxas0e/4XOg6pP6XfUhzT/
27w/McuT3iuSy9vvP7Ut//wcf4gn9Lnmq6/8bT3O7xqXyvvd7f20+3hh1/6n
8i7JJ8jPk56hv/U+55DfOcRT//l7hna+80Su53v6zqOPDO1655Xa73+m+6PO
jduU3z1T5uX6cfA+zPnNB/cH7Z9z/tk7vY7984/HdrPPa/Pd93fbz2l/tur2
1uPsw+Z75Qf5Kdnn7d9LP4edInnEfiDv29L9CgaDe4dVTmTHlleZnbrFtZ1Y
1eu+3eUSesprZ8bW7aDslHPyV92ffa58m7pE6+SSpcfxfqH6R8bFPmJcfnhs
F/s+Q163b9l3jb99y/HGLzxnMBgMHm38/nzQ2ZJP7FNdj2//P9X193Xxdu37
S5vf+fbQbnb7YvXv5OemH/hP+1WtG1vlhuC94WHb98k/c/O4yYXzeZbM88pr
VjnVfCNnVf9OfpQ/MLZHZ/PVa/wsd+cXOe+XSM5mtybP4Vsdh/9bx+8Zr383
tvP9fVWHuR5PjsQnzl231oGerjfz982fwvjRQ6b+s4+s+Mdnut+n/svL9PDH
hna1rzt1XMnJ/l/9Ouu4V/+JKQ98dptfJ57zR8Z2qduN6FPmyxwv/UtjO9nn
m/FYd966+bNT9L4tXYf1qODdxis0P8/rm784thN9PWrz/6XNPxjbtXvun/e2
xgXW46yP39/v82xflw5LfjTvjfdI/zP/g8HDh+QYfGTVM6Zy2wub3/7W0G50
O3X7/1OrOuqvdbvTU08O7U6Xf6Z29HNr7e/21Sq3VT9P/qdHdf1hr+NX4/OP
je1Kt+9N9dDPbP7a2F7rcjB7Fb3V/uM5hOcMBoPBo43T+N3b2/T25kf0fPe7
xHvYjx9/bGg3S56+Z9f6ecIWr3Gsx5uK07PvNDnic91eSo+nR+Fz/sXYPtHl
g4Ne5/awobiapeSBOR7MfKn4s2M71udFww/1+CNxoP9ybJ8qx20huYgci39v
8te5VT69z6zinD65Ov7z3e+uyV1b/eIPgHclD1c0f5td4JOz81sdSd+7vxr/
bbz4ld4rGof2Xu78PP0wnv4v/hvW5+A+6/3XccP/1fngdxuPeGXz58b28ur5
/0PXW6Y84bOzz4d8LG/p3Dxs69etbfVWyeeO+4mxXe/3a17qR/UP/dv3D+1W
n2fmnftwnZ36zW6saXVeNXxPvx+8Mv+KOu51f9nv9eNBwaofsse0efpyX8/q
c7AuvWtsd2bzJTjvP4ztVs9jzH+zHm9/tk6aB9UvZ2qXeKn7xx90HtQ6yN7w
5S8N7cKB73cw+CCjddJ61OzSNzpviZ+0XrKTkj/IGY88PLRrm088PrRbm1/9
ytAura732b4PW+eqHGufJFdEf3l7ZAemJzY7+5UuX+GD8dTG22f7D7v41G7+
XHjOYDAYPGJIz6CvsENO43Of6/kxN1bN/lH1cf93ffv5mdNj63zmun7xB8VD
kQN8bz8jD8D6+zD5tu4PNl7v0p6Nq/m3Ux6TXl3nKx4ef7WxauI6f31sr/f6
WlP+6pHuHzX3+44nN+HF9Ad/R252PL6q8nf8sNQfwYvyG3zyiaHd7uNjns+N
C2THrvwcuwGebo7H2y2SP/GHlYf0uaJ+6Nfc9dfdr/ppU9705mrcr25br/y+
fusHvpqfrbwEfocfhfVzDud485pfgD7F75RfQuN5Pt9/F6/ZxuN69yvR3xb/
vp2XbfrY1X4dvMw6Pnqu/5Vvru8DXn6jNLxojcv33szx0nPofVh6HTysyG4l
H0Wbb2fL+vqFzb/566GdnuWnf35sl/r7W+f53O/jP/nZyP/gPX711NCudR7V
/Pr614Z2ZfHxm0Pvf92fxLEs3b9gMLiF9hHyWt1H8ZywyQ/He70C+/Kpk2Pr
cgU5g371J2Pb2resp9ZP51k/D1uej/1C+obxxHPincn/1d6Nfya/kLP567re
0vcXDAaDBx3tX3iGvb4+O+Scv8Dd8nr8kujd/DfxOPw+5amyHztf3F3jYc6u
/Ele2PY79PSm555c26/GA13pegO5od5v06PP9zgUfOhRjes4aLhbuWzOrl39
JcmbU/nzH7tf2UZp/ObUHadfilfGN5J32nU+sIr3PNXPa/Pqje7PrB/Vr83x
jz06tBvbeB/vCd4Kj8QPch2f2/LbvtLzO7Jje1+9Z3jb6t8Jvbfr+Lm9Qv5k
3k/+YTXfUl2nah6m3fKI7r/y2E3+/ULn5+s413h//Wh+HC91/k4eU3wM3pn+
slu+blqH6myJb3tj84/GZl69us3P0/yov1f5TP4mvzC247PjV/lLPM1OeWbv
g99tvO21/p7pv/e55oWw39T3up33kc6LVT7X/K7+0+uew9Lr5kFBcsVvjW2r
fm31D8aHzq33697fdf2odlSIBxCXKG/GYdnf3Vcbn6e732qt2xwMBvcP6Wk1
7oJ/OT9C8qh1x/EtbuhCkVNPdvmu5ksmB7V17eWVXHqh589hR31Q/TKMz7r9
BS/Jjot/Jl/QG/HI5P+mH57rz0feoCofLz0OwWAweFiQ3zy/Rjzc3PHWeXr3
3HH2T/GO9OJvfmNo1zqf+Htju9ztj/V7n2Hzb9o6jz5NzyefN33z8mz/6B/q
EO21PoJ/0O/6Pf0I/0Quqf6hwb3FZ54e2lvb4tzxdOZXnX/0a/GV4s7xGuqw
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
r1yV48g9eGX5jA7K/AkGDwKqM8AOZd1ib7Eei/OZ2z/InXg4+o74dX4hzjts
vKd1g//qTscViqf44bFdnB1H42S/tc75bD93nvF2velzeqnHbdXnwz6qP/on
f8rS4x0MBoMPOtpH6RXyCVZ/EPt33U/tW+KgxI+JD6THscutW//n9mv7Ij3d
cfatu837bP8TJ4L3FKfgOPsXfwf+SLXuMz9P+6fxMZ72R/6lByUv6UFD44aP
ML9qXSHPQx3LykPiLSoPMeeH6//1+ypP+YyHrH5f6/y88Jz8h8U34Vfkd9gr
+fWg+Hfdr/56j2q+4aOK/PDNJzyEvFPkc3lKjA80r+r/d+o3eVB4z7tF92ud
qe/xnJ9/fY/tA/xw6jrU6i290vm3ufHEJ9fr29/woPhR37uuda2uT5UHxdNa
Z3z/r8d29cDxVzWvrXGwz1on6zyuOK1ntzVueNCNSVv+vg8KGn/1F6fz+8Xu
p5Y80MEHEcVdyLdlPWVvYo+XV4kf/jo51f/tH/K62A/4i9R1bunx2C1W3tNn
PKP7tZ9VO5e48an+er6Pm/HHM8/tj3XfxU/Lt0b/rfagGo9BT1x6XIPBYDD4
9mjfpt/Jt4yHcdzUn27rfPpz06Our+IxPrHn/aTXN73t45u/MbY3e91sn+/2
+k8/NbQtf0J+hL6XN4fcIg5vLj9Ljbuo+WX2enwOO/KLpb83Oe7FFT7d67bQ
t+ShZN9WDxHfow4Iv+EpT/Rijxv6nbFd7LzHunruNU+mei/iYPASNV+geGZ5
7Sr/3/z0bnT/470eX3Kxelv6v/Rzn8NaV81zVsdJfmLfe7/o5/wBjqoftfh2
eWK9H+6XPaDyEzUeerfoPeBvd1h5z7vFmi/M++z9FvdLT7U/qNdk/GqeVXYw
64V8qtYVcQaew9e+OrTLfd+yvslTLP8Ae9FTTw7tTtcT2376Ss9P1vKpnu76
evOPPHp5x6y7tU5FjWMJvj2aR/R7eLfxNsHgYUJyxbQe3au9Xil+U3wXudL6
LS6OX4h1W71N+SPIafYB9svDWmeNfyo5bk6elq/6j8d2s++j0/pqp7t/jXz8
9AVyjuNrnLo4B/6aeM2pvvHitjqmtQ5e9LlgMBg83IhnsF83vfk9/ft1/lf4
H34k9pm96h+90j7W7HmXuj/gXuVLoUfy46E3+l4dbfynfRRvt9fP5agi/9xa
V7zp22d6XG6TT7byufPDFV9H7sSDkVOaHHmz11/BY6tjZH56nnN1L+XjqbyE
96HKQXfrn3m/5Sf6vvyz++X/yT4uj3zl0cipc/VoIPkWr8MOUo8jtzb5+pXO
e6+7/r1irT9V0f3v1biaL56nfFLmv37RI+bqmpvXNS9/RfWzxLl6r9TRrnXx
dovT39mqW8u+cbf+/Eth5dfUsTDutS4THtRzc//WO/qx56WumXXN/KrroHzZ
jpPfk/6pnpB1lp+M/nzly0O7eOjGP3h/0foTvT94lNA6V+vPkE/5O7Nvq5tp
n2I3Z4dnh/3DsW3VTfA9v/XvfHtoN/v59vXDEq9ekdzDzlrz5osHp2+Ks+PH
Iv6B/VZ+fvY++yb9jD9MO+9DvZ4QeVA8hrq6nh95qPophNcMBoPBBwPtS63O
6ZnZer0V6XnyqPAL2Ov+2YfEQ9yvvCnkFXo4e23jdZ/rfojiIcQR7rY+84OC
/MLMJ3wJ+QPPLn5dHAo9vdnNn+16+bSO8ZUuV3k+7bk92/kY9vXG73++1z3W
H/lna7xQ9LuG6lkbT+Nc0XvC/0HdcfUw1U+G4iOrP0NFdhnv+9xx/Ov4S/BD
Wnf9e0X9q/cHydvisIwP//hpnoPnOu+EN173fPBl/CHwwvyVxZFVv/jpevpC
fy/qvOfvLm+iPM74N3YJ9+P9q/czl4dAfRvrp/G0jxy196+Or/u175g39EHj
Si+kx9GX2QP5sbDvyJfJvkNPpyfS7+nZ/I3kO1OHttn1vtDXgaXHLxgMBu8W
7YP2J/KodZE9ln1IPmD7Hrs8fwfxRfJqf/QjQ7vc/Sfsv+xL/Djul560W6xy
8rq4+d8d26Veh54cTa6xf5GP5CMRF85OSz6p8hK/BXwx+Z49237302O70/ev
OXnSOJMfj5o8EQwGg8G7Q3G20zyE7+773Lrzj8p+wn/Uvmofrvsze22To84d
2jiUvUJyZJWDzCf5EOjz5EA8e7OHn+pxLOy+xp9/L/8mx8lPUOWmdv7FHl/E
H1l8Hp7hoMifSyE9AP+LZ/b82v8/3vMk1fdA3HWVN71H/NYqvzbHn1bUj3VI
bzGv+GXv9Pydovld++m+Kpp/1tc6TuT1On/5Wdbf9Xz4X/o/f1jP0fzGJ8pD
Vt9Pdgfr/dy4yneCF2P/YU+QB9N8cD+tn9eK3WL7+FV80Hi2yoeaH54jfbnN
q0f6ONIL6X/0bnYIeq24DHUEmz3qWOepzZ+ad7jWqb3XvDLBYDB4vxHfWOVS
9nV2O+tqjYOWD0Tcj7zA+E/5rtjz1LPhp8gfgl2L3/9SdW7wmuQA/gjun32T
vNb8W1/ofC45AhoX+xT5oPoVQHoAv1ZyhedhPO0v4u/407x+dmi3ez+Xnl/B
YDAYPBo4zTO4sbFTv8+jgvRtchO/wqqX8ieb8sWHn/edQ/wiOy8/pGrn5XdH
7lNHXVyl/D2QPEm+Yk+X95KfGZ6zyT9nux+T+Bc8KX0fP0DOevKJoS0ndy6F
5jE5t/o5QPZ3vFvl58xzfpz4ELyJ51d5s3V+n3PIT2C3/pfkcv5ue+3fSd7f
6X3gFeu4GK8pv/vytvXF7+IT6SXil+UVcz08NX6UHiJOb7fjipdlL6Df4OO+
9c2hXe88s37gzcTF01/ogfoxN27i1dbxzUedhzMfrFueh/Gnd/OT5+9pfZz6
H32y+yexI1lvW56R53tcoedp3ZVfxHphPVHfb+lxCgaDRx+rv+GcfZR9XX5G
dczsX/g2PKB9qeU5vrxaBx/vx6k/ZB+2fjb+7sIqX9IbPX56Lp/7fiO/SXlS
yEXkOfIznrPKa+xp4vnlhSb/2z/q/l3lhWk8+sV+fXIGXvOo+M8Eg8Fg8HAh
PoofEP156X7db6x1ZB80vU6eODwD+VH+dXyF+uXs35Ccg+dg5/Y9+Qeqh0hP
F1/Jv6jJVxe7HOl45/PjZLcm18mH8KDKUcaHf970OW3Z7Y2T+T6165/tPBo/
CHmb5Gkir/Kbdb27Hf86P+bQPLtfODdf12G9nzoe9A3j5nnQz+b6w36g/ow6
pvxwmz/f6z3vFf3D9b2P3lvXWzcOc+Pu/ipPax7g4/Bwzmv82mOrfeWZPs9q
npCfGdvWuIkrrPyp+6njJI576fdwv9B8Mt7WT3r81G/mbF/X5Z3jDyrOkz+U
9du6iz+wrhy0OvDBYPDgon1O3M7cPspuXfcj+wU5dFoHcWPDfuj/9luf2S3r
dek3db+2jzb74vG+v9h/5QW1/+0Xz2l/FD8uroR/Ar1F3I38KMbXPiweY3q9
tzq/jEeu4z4d1+3yv+/FzVU5c+l5GAwGg8Hgf43iEug59r0Hzf/zqCP5cyoH
ner+mHgM9c8rn0YuxEuYN1UewqPTo6H/89PEc+IvyW/0bnq5/IfiXtbJm+S4
oyZ3kder3EnOn5M7yct4TeepI8QPAh+Fd5aPkTw9p7/QD/Aru+Mbb6/Fel93
i65T8xPXfJM7w7OzfGUdH/4VnmPNX1xR//DN4pvF5+G55MWd+u1vzRf62U7H
p94fu4Tn2o57qt+X+eB9nOYHfbO/1/zqzTPzzriZl3N6MT2t3o/+Wo+m8/rh
vn/tNH/LYUHzhx7O34ZfNr3XeBkfdozmx/Ra9/fmx8PfCV9g3SAXWO/N86XH
IRgM7j/aL+s6zb41taNt2U3rPipevMoz/C+sO45/+/3qiW12Op/ti+RP6xp7
oX2Hv6c4DOul/Wu/5Ui/x6/U/bD7iWcS34QHVWdoGqd/u9etE1dB/jde/Bys
78bFPlqvV5/D0vMxGAwGg8HdYPWjoXfju46a3vigIP2XnMM/iL8Y/qTyVeLO
yX/mB73YcU3uObeNfyA/zfl7qv9C3lTXGM9G7qu8207vW1zmYec98ZyeT+Wd
yZ383eZ4I+9z9fvEJ4nnqvVQqj7y+2Pbrr+4Pj1jpzxbvV/9mfqBPLfN36He
Hzm98nK7ReODp/S7+mH+zvGJdVz4S4gbnuN/+bvIo0l/NP7qBXn+6pe2+Par
vX9TPnm9/2r1k3Qfc/ojP0P9sJ5YX+r1vYeuz65R/TvneOeaZ632a67/+quf
9rGjyoPineUBMG7qQ/CP957KSye+nT1APS52qek6c67Mr7MPrL9tMPggYN2P
rcNTO9WFns+9+vurBwr9X51ufudVbpjbz8hB5IA5Hs66VeOFrGv+7/edR97c
73Emp/ID8H/rtfu1rpOb8cp4UHYw90eOYA+zD+BBq18D+5nx81zIO0vPx2Aw
GAwG9wKndr6Huh5j3+P3I7+O88gdjQ+7vPh9PKjY6llcX+n1H+1+ku8c29Ve
h1keviZ3nuz5OfkPeb7mwcaq0XPJYfX3pzzoB7ucRn4SR0l+5V90v/IKHBbe
03sz9Zd4dxn3rfH2Xhpnx5GHye/1vl3n7fm2f+zXwaeRnyvfrL/myRyPN42L
3ernvTbXn8bh3r3/J5zGrd97c//6W9fNivIF64/31vNwXXXcp3Vors9ed52/
51z/PTfzyvjIH+v6c36ec/033+p8qfN37n6g45zn+vTiysNZ36xf9jP+Met+
77Ch9xa/YD9o/PSZ7vf0ystD2/K3sk5Yn80D8sHUb/yh/n/jH/4zGDx8aD+1
Hm+UZl2Vx73u69Z5dpcqN9TrWz+qvKPuZeUzqzxT5QDrkv8fNp5urr/yYbLX
4aF9b5zIBZ7DnNxvvJu99GQ//0HNDxUMBoPBBxurPOH/9kU8GTnozOmx9Xqx
S/f/qGPV95v9+iOdl2DHVfeCnb3xDe/b/PGxXdv8vbFd7vLQxqpVHrT+fuXd
5vg2+rD5RI/er3E6qLwnnoXcj3+ekz89V+Nd9YF6/Tr+zpte581t8jPEn1f9
ZGPVyMvmyU55Rdc3fypPPsef1uOqvnWvzfuz7vfX9cv1pnHBW/Hq9Ll1/fGe
Tv1lXunPU92B9n6/1PWXOX11Xf+t87DyWPgwz5veZF7sljfkT1Pnx5zeXfnj
af+2X3+aD/Rs72fla71n1kP1qI7qPkavphfTkyvPWfnPaZz8k/151Xni+VW7
6dL3HQwGt2NdZ2scs++tB3N8m+PsoxulVR5uXT3Qak+t/hjW9YMm1+0Vui/x
VVVutv7Su8RfVbnfeHmu7JLhN4PBYDD4ICO5otpNK+8Ja10L+/BS8SFHDY3n
On7F/395bKe6nyd/KvJO+/5a5yfwKuRQv+e54gfm/N/Infpb+Yppfx+8+VB5
w8o7G/cqh8onv1Fa9feE0/dzq5knlX9zXtVX5vw9ncfvk75iHtXnXf025u5j
HS9a+fP7/bz4G++Uv53D6ndYm3Fa5/fJf9K41+t6Xup78QeZu551uq7Xc/2c
a9YDcXj4RbxrPb7Nhw90fXhuP1mHtd/mtd+pvGg9fxrX/e7Z8TfueFDv0d32
+6Ci+d7e5xf786n8Z7WT1DyfNd9D9f9sx507cuMXDB4mnJPjqpxZ5YaaL9n3
1V62U7mfXOS8Jkd8sver2lEPm7/mOlwnD889hyqvGS9yGn9+8r/6S0dt/ILB
YDAY3AusvJV4ivhr7C3WfHZVHq08FH5RPCL7r7xK5Eb569RplJ/cc5zyVFe3
1eFW/7ed/5meZ/Cb3xjatc6ryHeA99D/6iew9DjDe+XNnO+5VZSPUJ5U461e
izyY8unXfJz4an5U4m7xNOLFHG/c/c7UH+N275ffkadvmifr2VW86zM974D8
ky1f1K0V33ZuW52AaV2d69vyMK7z43hQsdaXXYfG13jP+WnSd+TFrd97ztP3
+rltedOqPmVe8E8V1/iNrw/taucP+UfyB5LXzXx1Px/58NAu9XoKc/61+st/
5fHHhralB9f3z/vpd6xD4hBcx/FPPzW0N3v9tjbfX1u9L1/o/u94QfGB8qd5
H9RDP+z+M/gKdq7GXz+7Wodu9vXDevYnY7u9zV+b/DCtt/xE36/kC/75sV3q
69rS939YsNpX7ANz78XS/Q3uLYoXt37V+UCOsK5bX6d2nus9L7P6N+QOfCOe
rL3/z/d6Ov9hbLe2yUPiaVpduyur+no3tsknUzvIm4dWTqj3P7f+W0/Jfc5z
/8a3ylfsRK7vfPFYvv/Jsd3o67W683P5p4LBYDAYDAbvF1a+aoovdF4RX7mx
auQc9l72W/okfRQf8I6x1TpDz6540QtdbiJH0ePp+eqQtN85sfnoI0O73utX
0lNdH5+Aj11nv95vJF9C8uc6/rPqjXO8YeUP8c/kf/nxK7+NJ6APGHe8qPni
PHqt52S+GPfpPNn6ncpn6Z95Zv58+1tDu9H5DHnv8Tt4JOMQv4HDiXiqnfKt
c/wqNG/rvGnz9RNd/9pYtWpHMz/xhuatOu/mpzi9qheaz3jcab6NN2fqJJ3t
65f3ynH4aO+h+m7sQJVfdV18NF4YL7D0875XdL/GF++BH8ZLs/dUfzD8p3p4
lf90HfXCjmqc6l6h52Ecp3aus9vqe3nPzNOM7+FEPBp/f+slfrPGk7MryX/S
6phd6n7t7FPNnvZq5yer/cK88n5XeeQXxna5r5ttPTh/6Pk2443HrPJgleOM
q/Gyf87J/c6r9u0qx/Gzt79676fxQ8/2fTTxdcFgMBgMBvcLyaVVzpEfDh+A
L8QrsttXnmpaL/Pstjxp7Lv0/6bXvNH9QfEGznf9yrc1uflyl1erv4DjyGd4
14Pu1/SjY7vc+U48ZNX/5vxu3f+0TunHu78rf8jmT3uzy614Zn6ftd599YfF
K/t9/eUPZ/zF21b/XPOh6sP4Tf1Sn5kc7X7oK3ixpZ9b8HAgPx3zmN+k9WOO
L+Uvyq+onf/57o8kD8Rf/sXQPrnNz9O6Zn57H71Xdf30fkx5o9vdfuA4+VHp
q9/59tBurniB013PbDznVp5g66Y66fhV79NBXyfXoXGb5uv8eB8Xz8n31hvP
4bfHdmEb/2m++Ow52Ufn5ts0X/HhHdfdorwn+Cq8TD2u+jvX8Y0f6MFG89pz
Il80P78Tq7pjL6/kuCur9+xkj/dhH2/7/LW+zrZ191b37zSfqv268pv8Eflp
Vvv50uN1r1jzdBkncS7kwGp3837xm6315+0nxtl+Q463/rXrXijy5lbeUvvd
74ztYuS1YDAYDAaD9x3pW/gjdnB6t/x6PzC2z3Y59F+P7erm375/aLd6nBJ/
Ovl3pjwleWbL75Nd/1vfHNr1zgfUeEM8Aj1d3Kt4WfqneKSmt77S+VD9dX+H
Vb988omh3e56A16Y/I635K9FPoXu3zj7jPflX9ue6+f6efQK/CX+xPmeJ/nV
PKm//8jDQ7vW5fDGK7zU5WM8uryJeAi8qH54rniJyMvBJdZN85/ftHlOrzZf
+VviR6170/pOz3b/Z+umddjv+L/fYSdyHL9Sxzf99WxfP/m30+/xCPhN60jr
95Zfd1tPL/Xfa/vBjUO7jlbkh9Sey1b+gSmP8pmu17P74IubXe61vm5al9WV
tx/xHzVu7ISey2OPDu3G4uOxX+j9YB+wj6w7z/yu9rvkFzgYKI+wed7yg1zt
8cz8Cdmn8WrWI/LaH47t+uaPjO1Sny9VvhDnQ860Hnqv+F+bN3hBvN5h4Tur
n+rccb4nP7fxutTPJ+/XeHPj1njoi13OnvoVnOnrP/9bcp98nOza8g+wE+FN
97v+ZzAYDAaDwQcHyZ/0WfIPnvAXx3ZiJa883+Uc8ZDihsQ70uPETeLhqjxE
XsVrkVPZldmL6dPwh8Z2ofs/+X18Gzlaf8Uttjil4/34wx4HRz4lz9Ozm5z5
0rb4dLxh5TUrn40v5H/pebPTz52HZ6bn00OMPzmZHmIeOF///S7/Ufo+PhRv
S1/BK+nP0s8lGPx+yL+P3wy9s/rZ4MnYfbxf/G+sj3g3cdn8372HeADrcuVB
vY/ykOAb8HD4Bn5W+FLvpXX0y18a2oVt/Odh9/+E9HF6euW18WzGpT2/Lb6z
jd/Vvh7yk2+fT/Xn0/atmz2/tHX+sO9Xu0V2vOn+dbHnn113Pr6m+n8ufV8P
Krb16a0uD1rX8JzysqvT3Xjqc309e/hjQ7u6zW6Nb/M+WtemcsWWvGA9nOMH
vWfe658b28UDx5uT26d5AV7o8fjrzjNelQ+G1jl2OuPd7OePd/ld3iDrGfnT
e8dOLT82O5n32jgfFn45GAwGg8Hg4cEq9+AB1fMgh8qziT8kT5GL+Ck1/vN4
94fht1fz55E/yZ3VT8l1a11cflCQPo0Xw6/xW+InyC/gsMpT1d+22t352+KX
jau87zUefaoH3u58ifGrceDGufKb5gt93nl4a3oJ/Z8fFB4d/8lPWNyoelZ4
Fryo/lXedunnEwzeD6Rf09/ZIZq++bnu94nntA7gQa0H3mPvvXXBOmGdrO81
/qHVjTrZ60dZh+itzn/n2K72faXyn9b3o8Z/WpeML/3d+P/W2M73cefPxI9T
fgDxpS2P3au9PpZxx3cvfd+HDad5ac91Xtp7tXT/HhT03nsPPAf+neLZzXvy
Bp6zyQOnut3FOuU49np+pPK1V//s3a4/4sC91+Lslx5PWP07rbNVXoP8ZsW/
sC9bp8lv7binVvLZ6T7e4oXYxch55DhyO70AX9z2hRf7vuN5HFa5PBgMBoPB
4MFDch6ei/70sY8O7UrnCfGReEXyCr2OnOp7+pn66fKON737eq9zQ29u8USv
9Lh3fBp/Fn6Y4mDIT01/PN3j4vFjeDN+qPym6OVzecAOKtLP+MvSi8WN8wcy
jm18jvXxd/xPjO16H1c89le/MrRLPU+W+vaeM7m25Sm81nlHz0WcK73duNP3
6zzAN6vj4Xf1+2tfHdrl7pcrj6f79HzxKp7v0s8pGDwIKL+m95GfDz5OXXb+
OdYN6wK7lOO9b/x16MXeazwoXsJ68/WvDe3KSm8+2flPftn4UTyg9/yoxL9b
l9o6+nIfX+uw9c6+qf4Kfyg8juf3lS8P7WJ/ftZZ62V4grtD48Y+h2/jT7p0
/44qes/5+fH/E+fMn1C+GutNkyNf7X6f5Ap+vtantu5cXb0nV7r8t9f2lb2q
n4OPFJ+/07qY7pfcTI6H1h12aPIaeZp8z07G/kwPcL7rkf/sG/hRz8/1yI+e
G/nNumd/ISceFbtXMBgMBoPBg4PTOhbXu/yIv6R34RXlD5/KN5/vdlr6LnkG
j8Zuq/4PfkscevvdGz2eSbwS+z29nRxGb/Y77Mjin9nd6dXs2IeNF6MPuA/y
J/kfL2n8pzz0nZ633/OlPxs3z9f44lPxjHgP8i5+Es/pOZLTxWdWOVu/p/z4
sa6v8wtoeuaVbXqKeYDfdF/01MjJweB6pJdbJ6wf1mE8Gr7H+4mfw1+qRy9/
m/xr/MabP9DFVX3lU53/xB/Re8Wd8vPG5+FX8SBHJS+F8cdfsvv5f9u3tvhp
z0PeVut+W+/e6PsrP0V2xvCfO0P7Br4IX+a5iHMQp7t0f48akhO853gycgJe
jv8nuaD5sb/e5ZG5fAbkDvLkYbGjkHvcP3kHX8v+XOUsfqb8Yslp1nFyHj8D
67nxl8eE/Gyd91zoBdW/wTiz18zZsfGp/BoOy/MIBoPBYDB4+JD+SF7inyMO
RXxJk3ue6fKU75s++3KPuyNn4UXFVYofcjw/TPIbuY19np6G3yLX4t/wceQ4
8tuPje3Kig890eMA1XXF49ITmxx5cPUXcqBxYU8Xx09+bPlKz3Q5mBzJP0Dc
eOOnz3a+cE7upFf4XTwqPwDjLR4M/2x+VL9P86X6EZCT8dbOZ++vcjL/AHz1
TvO1BYPB9cg+Ip+h9VpeTvYI64d1iH3Duoqvs85br61T+E/6Mb91+4R1yfoj
vlh/6NFLj9deIZ6THdF6LF/HQ/80tPM9X57xkydGfgD8hPwFeGP7H94U7/Og
5f1ch+I9yDP2I3HT7Ljmn33V/PY5/PLu0Hve5Lwne3029hH2ePEg1hn+4vh+
dSjVFVr6vu4Vq3zOXi0u3XgYh2rHJi/jM/Gn5K0qR5PT8Pueg/WEfO932QOc
z25GPrTek9v4qYbfDAaDwWAweL+RfFnjFMmR9Fj1gXyu6Ph6nvo18ov5P56L
f6e4yCYfnd92PUjf85kfy7Q+8OvdPi2fXc3vqZ6HuEJ2a/E/Sz8Xci05st6H
52E8+F3iA4w3vfl3x3ap8w70X/oD/oKeXMe9jjM5mR+Y48wfaLzn5o3r1t/D
c/je/dBf5Mta+jkFgw8C8nsTF1/Xee+5+Ejx6PRifp7sTuJP6d/WOeuw67Lb
NF7vWv9evkt681Gt34v/tN66b/yPddE62dbzs50v5i/LvmTc7QP8xdr4b+UN
Cf/Z0D5DrrDvVmQfNs7mNXsBXnnp+zmo6P23rogzqfKD78lD5EvyHp4Tf6d+
lXiY/b4v+YV8npNbvG/sw+L25+Tgivw3vf9VzmKHqvJ1G79jXR62jhp39i1x
NnXdr3I++QzuVVx/MBgMBoPB4N0i/z38VOU1yfk+05PIl7DqqS2Pz6Wu51b5
zXXoX/yEqp/oHN/qOuzI5DL9qXKZz+Q9ep3fdZ/ydS3lL1j5zTn+Gc/J7k+v
cl6Vh8mj6tWTQ/HdxoU/LL9cvCO9eI73lrfJ93hkSA6f48WdV+Vm/jHx3wwG
Dx6q+yE/iPeYP758oN53fB0/LHH0/BOty/ICW3esE9YD31tfXBcv6v9Hjf/8
s7G91XlO/lX2W8+B3yE/L+PM/sU/0f5r/7b/Wq/tJ/wbH3QeFF/F/9M+hXc3
/vzc7GfyO8RON0V8oPWhrRsP9/h187z5e97pcgp5g7xkXrIDsBcb76XkB/Oi
8p7N7vNmf6/Ib3PyEbSu8RcQp/PRjwzt8ux1yJHOb/z7Vl3P9/7l0C7346uc
R96s8/1BXw+CwWAwGAwefCQf4Q3Fi+MNK+9J/6nyJ73U9/KNq/vrOvgz/oWV
n1Q3WFwO/ZfeQC/Dh6rvqB/V/3OOJ3U8uzd/Avoe+VAeUbyiOKC9Gn9ycOUp
yaXG3f/Fmcqr5H7r+PL38XzV/RDXVP1Fq7+lcccXzPln6p/5M8eb1+v7fXIz
HiPyczB4eJEfqPdankP7Ax6OXxG+Da9hPZRfzvpina52NeuF9dC6ie/Af1a+
lZ1v6fHaK/ypsd3atg/z+8eH4j/xzdXuWPdJ4209r/azrNdvj3g2fp74Y/LV
0v1bGivPqa6N/O/+Tz7Ea5JfzEfz3Hhbd/CeB8W/UL/Yl6vcti7uZe44KE8F
+Yu9Gp8pfke+ofr7fodcr787rY8UDAaDwWAweNBQnnd5euTzIh/Jlygvo3g6
+g3/Bf4i4l3k56l6Lr5NXiv1AMh18nvKq4nPFBcpHzr/CfFK/Cb4j4rj47dZ
80k670fHdrn37zfGdq7rgfxf6CnyIL1jbOd7/N/djj+9f5pf6WS309NT9Xda
p+Jkt+/rt/Gn53tOTz05tDvdv6f60fIP8nx8FgfpPpv9/3jhn4/1/rfn+EL3
N8BD13HXr+RtCgYfHMRH8C//4bFd7P7k7F/89PFp+CL7kv0KX2md4u/FT0lc
q/2LnYp/pM/ij5cen71C9yeuwjqM58UffftbQ7vR8wvYH+R5Vr8EP9f2+8ud
T/Gc5CuwP3ieTz81tPAkkB1AfoZmH7zU56vjfPY8HL90//cKq9zT5JAPrb7f
2JjWt7nV5Z1an9L77Xjzzu94D/Zbzqj8qnXGfbALV7lNPk75661z5Dx+A/IS
kVvVLVPPzHsuzyx5jlxuXPmXxl4RDAaDwWDwqCK+U741/B95TBwiPQdvhe8i
f6ozoZ4CeY+eSr8lb5E/1SfCv+E5yWn4MfV78aH0LfoxfpB8WPk2vGHlC/Wf
3ixvkrrAxkFdYnIlPrXpJZ/q11k33saPHd59s7vzW+CnI15OfV394e9E7jde
xh+/Wetv0uvxl/yl8M/G0fg2HuH5ziOTm+lh+G48rfsw3s5LvYZgMFix8j/y
H7Kb8Du0Xql7ZL3Dc6oHb922Lrb95jO9Dh17HfuZfkzj40/1fWvp8dlrxDfj
Qe3b/Lq+8+2h3ez2POs5v1nPgZ3LfsC+xj6KzzKe9rm9jos47Gj+26/tx3h9
9SHJC+y8S/d7tygfOH4OzznNn36xy4fkJHLanN0aT+f9xhPy69yv+yNHV36f
nIuHrfUcvQ94TONDXiPPtjwfl1d55U+veNHner4QPCk7xpx9Gf+79HwIBoPB
YDAY3C8kF4l/xg/Ke05OwwOS58hjeDfXIbc7j/wmHpq81ezab/Y6svQi/oXk
tDn5jFw89Q/4xLY6ReoDkBf5n1S+UP/5CYiH5P9I/2WHJ3f++the73K5cdRP
dTOrvE8f1C/8IL17Wod9ixfFK4qHqvKscfX8nNf0gNNdvq510/lR4TnJ2Z6b
5+J89YDdh3Gc1iPZkvv5E8jzt/S8DwaDBw/xP3g36494avYtfJD12bprXWeH
kffDfoAnsK/4PzsS/q/xqDc7X4rPWHp87td4qz+FN2Lf5Lcpr6p9wr6BP65+
aOxmxpud0P7hOZEj7J9Lj8dBQfkR1U00L9mHD7o/3pw/o3j1Jg99oD9/vDk7
OvlRfiFyj3nn/p1v3qq7uNfjQ46rfrbkKPXK8f7mP/9ochi5zHnTdeoL/Xkb
P/Ho7f+PdnvCt745tOvb4qXCawaDwWAwGAxOsfp3souLs+I/Q//k/8nfkfyN
52x6z6XuF4gP43cjfn2qN31mpSddWPXjVtfD1vUfL6iuezv/tdV9Pdv9QflJ
kCf5m/I/JG/iTcm3+k2O1v/mP/r5Hl9PnyPfsuM3Ofi5wiNe6nGELR7w9kpf
f6v7jTpff/jX0MPp8cZBHJPj+Z3yl/Jc9d990+fpq65PnuZPIl8A3pR8r16I
+1gXN7bT5xoMBoPWC3Y2/Bv/TLwnf0/7UtP731it82f6fiQPnXXR+swOY71v
5z/d/Rutn20d/0Rfx5cen/uF4gr4fdpP2OvET8hHYF+R31qce9tHn+/5avAy
/Nn493mO+CLjTC7Bvy49Lkuh92Dd/ur9aHLAxfseV2HfJz+Ru8gh5gm5gZ+q
fAnyorsO/+E2b870+aCuOjmzyhHk0PuVZ1I/8JP6T751f+RL/GZbdx7rchL5
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
kgf0cCK5gb2VX2GbH492+cO8wmc2f8I3Oi/66CNDu97jsM0TPDn7sPlGHiI3
uY76T/IF4fPJVbW+I6z+k+tQ//CT8kLgbyu6b/Zpdnv35z2ofrd+x3WMY83L
yk/A934HH0qea3zrpdirg8FgMBgMBvcZyc14QPIz/pAcJ5+7uLrmH3m8H9fy
3Z/ox7Ff4+3woHN1Re8Wxd+Lp1JXqPX7QvFzOLuqP/RKl1f5fT78saFdXcUF
ntzm7yD+3e+p04RXbX416hh9oOuh+FDxZtN6R+e7nE3u95kcvvT8CAaDweDe
ov0RL4TftA/jh+xfeBX5WPBM4nHxVvw+8VN4m18c24meBxTP2fa5K2vzVQYP
JoqHNn/w4S0e5Oy2PJXibCovyC9R/Dk5sPKZ5Dn1ediz5anEh/LrVGdpWuf8
bJ+X4unN2znesvaTHOV3yVuVH2Xn5teJ76y8JnmuvX8vdr6YXFd5TueL9yF/
4jnZ08XpRJ4LBoPBYDAYXBb5QarLLt+S+HXxS9/+1tBudL+UVj/n8kofu9p5
RnFP8oqJs2v+oTf2rN/iyMWv0/PE88kTz+9SvR/1jMSDyauE7+RvSY4W3yVu
n5zNT+f3xna5+0Pgf/Gr4sGiVwaDwWDwv0Z8Czvbxz46tCs93pg9TtyyeAr7
KZR/Rd7Axle92v3x7NfyzLD3Je79cCN5Cw+JXyR3ySeJvzS/+AE3PvxKz88p
LyW5ps3LE71uEX4VD0ruefqpob3Z5bIm/1zq9l3xN+y/6pfjC9W/lL8HsgPj
E8WLVz9VclpF8ir5cBrf/nLnOdnljQN/ae+T65E3+dXKOySvPTnTOC49P4LB
YDAYDAaDDfF3+D68obgcdu3GF57q/o/kTfFMeEL5LH99bK/3OkB7pV+Rq8md
5H2/zy+GPyr7Pj8X/cXryutED3Cf6jY1uf2l7i/DP0ZdIfwm+z5/0MQNBoPB
YPD7Id7qt8d2ofvbqR9oP6t1YvCf+Cn7E54UTzSNo7/VeS7/b/tY+JnDjvw5
1RVipzaPvvqVoV3q9tvmJ/pi5x+r3bfZb690uzZ7MT5v+v3J/n92ZPJU9T9V
FwmPyP9zjrckt/3I2C51Ozz0e/hL9wP1w3uh3/6Pt2X/Zx9g3/b+tfH9YH/P
vK94VHk6Y98OBoPBYDAYPFjY9J5bnT+cxv880f0+6U/q+Kg3S07GL7KPkwvZ
2dnt77W/le+sfpn8VfkNiA+UhxSPKZ7qx8d2reuB+o0X9X/8Lj2RnBueMxgM
BoN7geKVxU3gi9gP2778+Z5XGv/Z9r9TK57mXOdH5VNseWlOdf7qn783tDvd
rrnXeWeCe4v8Hfk3VsQPiq9pctpDXV5p8+SpnrdTvXDHiwOH4tv5LeJJyX+V
L8QjiqeX10dedPyh+bxRWuUpK5LLyJH4e36rkDxXeVNynPgefGn9nSZXnlx9
f7n3n591PU9/wnMGg8FgMBgMHmz88/cM7aXNv3rv0K70ugfio8jF5F68Jr8B
+hTeUZyP+CZ5Q++1n/KF6m/Nf/bGubF1ed596Le4LHqiz+o/4G/pj3hT1yXn
83v9s7GF3wwGg8Hg3iJekh+cfcx+1eyOr/V6gfYr9ry6P9oXm93w1R6PIa6X
Hxzeden7D07Rc/U8of+Tax76p6Gd736V+Dm8Y5PzTvT5AfHs5Db/J0fhDfHo
fzS2Gz3ORv5K/p74UnmGXKfysRur5vx6f+Q+fqy1bmWV6+p9QfE57tPx4nX0
03iyGzgfv+u9XHo+BIPBYDAYDAZ3hjV/PH5T/iP8Jn1LPB27Pn2JH6j8lfxD
+ZHeaz/JvfLmk4f1kx5IryOnkvv1m3yMz/WZnsC+r//kavU248cZDAaDwf1E
9V7wn9N42lf6viVOA7+k7qD90ffiHj7y4aFd6nX67JN+b+n7Dk5RnHfl/9iV
xcE43nOsdYTIc/g//p/suZX3JCeyi+M9mz14uz0bb+4885B9HO9pXm6smuPZ
meURVU+z8qHkN37Qjf8/u43vdD/k28p7ug55V70w47v0cw8Gg8FgMBgM3h1O
679+sMuR4r/Jnezf4np85i9AziYv8/Mk595t/8RZuR57PDm28p3ykOq//4tT
n8Yvfayf73p4VXns48cZDAaDwYOA7G32WftXqyd9pueXsV+qY4QPVS8Jz8lv
TVzDlB872fmh1DlaBhuvfan7T1Y/zzl/Rny358c+rW4P/q/JRU9u4xHnkHy1
U7mIfMnu/Ptju9L7RZ4jf5LXzMN3je1On6dz99v41Td6PP5c/9mx8bWVN449
OxgMBoPBYPBoovyX/CN9Jmc2Pepyt4c//tjQbvZ4piaXf7LXj6VniXO/2zgg
ecem+Zyu9P6Qb+VrEnfOzk8+5xfa8ua/byX3f2jl1/Bqz9MpX1b0u2AwGAwe
ZGx+aW/1/IXq6OHJ1IEXzyDOGN/keP59eCP7unou4qHbfht/t71Gdc35M4qb
ES8j34DnrB7kXL0fKL84JLf5vS9/aWjyxT668u+93Oux40nZrfGX5LI2P870
+SKevcbDqA85rWP5Yp+n/EHJb/hU/98tqge29HMNBoPBYDAYDB4MbHLtie7X
wQ7uM76yyd+f63Z19TPVUxAPJF6IXf1e5U/6Gr+EaV31z3R9TX+b3P6pXq+U
Hwy+s8UBfrjzsd/9ztDuPe4+GAwGg8ElEK8kDkPc8g+O7Uzf1/mDqiPje/u2
eI1mN/x8twOyI7pOeKXdYRv3mz3eRD4C/rjkp0ceHtq1Xp+HnVdddHV8yDsV
19UBIk+xZ5Oj2Kn5h5Lf5Dtq511cfb7T8xWpo4VXxTvO2Y3V+ZnWydzKn5A8
ssFgMBgMBoPBvUR8JyS3Nj/IT3TeEN9I7pb3Et/Z5OZrq3xKd3p8OH3pbvvH
n4A/prqyTS5+scfjNf3hUq8/1PjNV/tx8kb5nl4Xf85gMBgMHgXkH8cvD6+p
Dgtes/l7Xu71t32Wp0Zel38/tjO9TiEeDk8Wv8+dIf/HJpdc73lTxaHwv5SP
kr8nnpJ9ttZHn8Pq78k/tD2/17p/pjj3Zif+h/5c1Sn/zreHdrPzrq3fp3qc
DT/j3Y7Hvcpd+PZmz744W3edP/PSzz8YDAaDwWAwuAzK7yXOm79j4xef6zyj
+CT549nlycfi3/CbzY/hCz1f2L32U1yduCpx6uTv3x7bhZ6X6qknh3an91dd
0KbffTz1NoPBYDB4pJEfXstTc7rnq5EvkT9h/dzyRb7U+TL2S35/8h7izcR7
PCh+n3jeNg4vrPxfb3c/2yZPXexxMfwyf2Zsb/Y8OuQr+Qf424pjxy//7Ngu
bP75e4b20oo3fa7LN+SaiuzWkJ2av6m6jPjxqb/ox7qd2PnqZTkfj7vUc1Cv
iX9qi9d/ptvp5VniV7r0vAkGg8FgMBgM7i82OfvKyg/y6S6Hi2MiR+IP8aDq
ff7O2C6u/A8e7nrQD43tQo/fuld5k5+neDzxVT7TM+gB/i/fv/ugr8lbv/T4
B4PBYDB4P5Hfpzzd+DVx7/JGqkcozvrXxvZa/yy+gp3TPsr+6fujXv+FPMM/
0jiw9+Il5f/hJznlMT/X48vlCfg3Y7vZ/SvxpZUPFU8jn88Tjw/t1up3z/e8
6pX/xGNCxznPdfCF4s7ZwWGrQ3R785mnh7b750zu3Cse0nxr43Oz87P+nzie
YDAYDAaDwQcTyZ3kXjwhfw1+IZXvxB+S88nj/EToP40H/UzXg+61v/wP8K30
Ln4KPzq2LX9V/ahyfs0bFQwGg8Hgg4DqyohLxruxB/IDxNeJb29xz8f7fs6e
qW4Nfzt2R/6MS9/v3o7bCx3VTcdn4jm/8uWhXdz8o7Hd2HzH2M5v4zkfe3Ro
NzoPyt/T+KnrI65FnSE8KPmKn6c6jvhKz835/DLJP5XHFPeCH6y41+PJTn23
1+eHLE7J/12v5XO40Z8Xu/lS8ycYDAaDwWAwuL9ITqz+nfwn+W3+1Nhudfle
Xi/6jTpBeEjxXvJ+3WseT0g/E58uzoucL59T0xceWfXzZudFN1YtfGcwGAwG
g1/s+STxl+yWUD139bvxevwR23l3en5QdWcqf7r0fe4VtjiWc53PJS/hC+VB
d/+NZ3t2NS5v9DwB5Cjfsz/LD9TyqV7p+YHUU+f/iceUt4BdmlzGv7Hi0uNX
cbf9wq/XuHvPpR4vz6i4fbwzeXK/7nOaJ+q5fh++997wt648bjAYDAaDwWBw
dyh+rfKdeEq8oXoH4tebXPnBze99d2i3u38BvpP+0+TJT3X/hnuVt/UXfyk/
v9/By/I3rXxny+/07q5nLD3+wYON8talbmwwGDzqaP+sfGfLb/N6lwPYGfl/
4jPxffwP8YHspI5f+j7vFsWdux/5cvBXlQcld7R6ip/s/oZ40OZv+XznifmD
qhvVxvuJVfz42R7HQu5649zQ3rzruPKDis1u/XIf17m6WMaRPMdP1TjZv50v
br/Jhx9d8dSfWOV1uPs883hJfqT6bX7Ia6s/5FDoPlxPXih8russ/VyCwWAw
GAwGDxtW/rDynXhQeaLI1+oC8ZOsfp/4zur3ea+8kXxS+qtuqLpI9A36l3qk
5Fz1Fehv/CCWfg7Bg43md3jPYDCoPg1eZun+7DXyh8N3qg/YeLtXNn91bKdX
+RKf7/6h/ObkuWnywrkuN9hvradL3+duEd+JP8NDkYfYV8kf+Eryj/jyxmNt
+Xuq29544tf69/LzkLOq3+bS43G3SO40f8iNeD78Yfv+sRVPfLqPp+NcD48+
59dq38YLqwNFHhQfdK+8Jzt7k09P9fxQ7X16o/eDfOy5Qrwnvnxaj+qh8J7B
YDAYDAaDu0R8IV5SPQNyorzv4tacRw6jD03lsI0N8ij5ba/0G/Fb8oidOjm0
qz1f078b20vb6szTQ9jLp3lGzy7+HIKHA8N77g/yk9mrvL/B4F4gPsW+Ia+K
/fCo1oH+xteHdrXv53hecdn2XZ/JDXie5sd2fpu/vP146fvbKeov+WYaj7wl
95CHyBn4LfuH/JzWN+OkrpA8nYdlPuHnfntsF3bMGzqu2Q/O9jwAvjeO+Mw6
b6pc6X3cbb9d33O5V97T/CeH+v/u5Iet5n71V9wV+Vae17vtbzAYDAaDweBR
R34b6hCRW8lV5EjyPP2u5vGs+oDr77Vew5+EnyY5ud4H/Yx+Sp+gh/hefNjS
zyF4OPCo8570NbhUP+i74j3pe/Q8ec7i9xLcT/Te40nEG0z5k7cODV+1U7TP
szPaR/lxirv22f5qnKr8UOPdl76/dYhXIk8YD/dT45Cr3FTrJrLDkkuM12Gd
N/IZNLnx1Z73SJ3JufPwi+ZJ5Qkr7+mz8fI79ivH1Thx6P3Fw0/9KPeOb9bP
OXm4/n9j1er3xqP6+apvtfQ+HQwGgw862kfUBZTXW7wLey/7p8/kn3XoeNcn
d4pP8PtzeOL42LZd1/XsNw1f6NdlB7Sf6v/0+De3Xdd51d5Lb6vH/9rYXlvb
b3m4WzzFiX7euvsQf7FunOBOn8vcfejf3Pj4vt5PrT9p/sC5ftbfqePu+c3N
m8anfWHbfRh//av9d77j6/VrXXGf9Wfufmo9dPO/zjvPvfYf/sHYrnV9w++2
cT/V/TmbfL8VvyYuXL5McVr4Qv+nB+mPOCTyZe2v+9I/8WD8J9STpUfq9zRe
7lwf/1Zn6VTPG2oc3V+7j2e6XFzvY+49rutVnT/qJfHb8Bzm3gvPAc6tP9bN
nb5vVf+Cdf7DOi/n3t+5+eR9rb8nHq8e73f00zia1/X9hXPvx9z7ta7fddzr
umk+1ev6DM3Xdc+j3udUX3th2/tg/PTHZ8cZ9/p77vdXxvbqtrwTc/2dG3/r
gfxy+q2fc+PvOvqtv3P7rn7X5+B9ch/qclg/qz5Y31uf5+SNuv6s28f0v+4D
tf+PPza0m329gvpDHqjz2ff1/7Xfdb037tYL/69yxNz83+n6Y7zqfVR//nof
dX6te5/Xvb87xdrfej9VDsIfeF7mVV0/PQfzs65X67DKDfU9n5Ob5/aDKofW
51Dnj/2ujpPrr+u/fb7xRy/2z83f8/xq3z7Xx884iyeucsJ0PTy3bf7U3//p
sd3ZNj53+/7OnVefb80PTo7AgzrPZ+eRO8RRkzv+5q+H9tlep2in88f7a12d
22/ffn6+sE0Pc191/tT54X133Ny8edfY7vQ6Vy1O/fi2515R/fq2f13v+QPU
vaz54tt5H+zx457LxqpN5+mW/Nj4+dvb5ELPwXH1vTTeO5V7zGfvm/vBa3ov
/Z5+z+mVsO4n9XnU9bPO/zn9sa7HdR2q8hus62zdb+q8mZs/VX+p6+E6+bOO
v/7W+zC++rWu/1XfpO/ImzUnP9f1Z93+W59X7b/+1X133fu7DufWfeM7p5fW
8Z6bL/5feZ45ubP+zpy+W9f9Od5kjh/YqZ5S5fi67879Tr2/Od5qTl6u+9NU
njoxw/NsrfNz/Z/j3Wr/d8oP+b0qd5rPc+vLHH9VnwP9oo7run1/Tm6bW3/0
Z53caR2t/a12zcOO7ID83/bquvLVqNe4X/ehDvf9/r39Qu/R0v046Cjv1FSf
fnK1vlzbfOXlsXV5kN9nWyee6v6d7PqVByVf4jvJndYv827d8/JetPpEJ3re
/8afPrOqn3Csx9l5L/l5WhfxNX6v8bg3ejx/lRuWfj7Bg43mtfl0r+uo863L
S9/fHGZ93R3Kg9ye72e6f6p6GUdt/z0qaJ57XvX7ne5fRxWr/GCfxj/J06ie
O56TfZ88wf4yt//Oje9+jz+5HB/eeMrT2+Ro/Kfzqh7EfkzuMI7stuSjvdoH
yEl3q6/IH3m3v+/+vEdTXuaDxQ9067zW3/f1PAnynFS7iOvW8a/vrd9hB3d+
jQ+veK/y4HT837f5W2M73/Pd+n1xDHV82P3rPH/Q159gcD/xfvE+waOJS/ub
BoPB7chvklzOP4OdqdULJe9d7foJ/pLdmr5S7feu6//32k927RYvdmtbfB3e
8zvfHtrNza98eWgXu5zJ3o6v4hfg/NQxOph4UOPHxa3t1byZ+l2/1d+jwxrn
GGxonax+qoe9/shRx/oeLt2fg472Y/Hc+E31eab13m/376scYT3F+xyU9b/6
1U39orb8+PBQU//gJ7u/fI1jX/q+1uE0X+m9X488h+dt47M1L/hf4svVdVp3
3ernVL+f1uH6+L7Pq+rnbP7P9ZdfwX71LxgMBoPBYPCoIblTXQJy+4+N7UqP
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
/WatU8S+/+OxXS9290uTdv5e4a+N7XzXP+Bj237l812/ar9j32Bc7B/2Wr8R
DAaDwWBw//FvPjW0Yz2vzamTY+vxKfjMGucurzl7wu/xlewv9pH/Y181u+Qr
Pc8PfvM3x3a5x63LO9TstNd6Xs83Xh/a+cVf/eXQvtDrMVY/9cay1fiVucf9
oOIUXx0MBoPBYDAYnAfxnfhK+ZuaHf/s0h5+bfGfx3Zh8c1vDO3C4h8/PbQv
L35+bJc6TyofVLPLv7ysM/T24tP/MLTr3V7/6bGdm6xT9Ld/M7TnlrrSF2az
H+kz7B/Y+/SqdB3e99rn9juxf4PBYDAYPHrY+MLrS7vo7WUczH2Lnxjbl3q+
zMZjPrW0s651ewlPyo5gL9U4GDpPv3fcnxvbxW6HNb71ze6HxXvKw/5bY7uy
hffkh3Yc9pn/x3uyc+Ye94OG+M4HHxjapcXvje3ctuOrgsFgMBgMBoO7g/SJ
7Np/N7arneds8ekvLn51bGe7LvTXx3as6zbxnXhK9jTdAr7T/7Df5f1s8Van
++eO0/QOz/f6P3PzhXSsdJ70pzWeXT/r/qDqNILBYDAYDB4d5C+W5wePePzY
0C52HpQO02v2Rc0Pzq+MF2VXicf572O7svTLPrXMo35t8dijQ7ve+Uz85C+P
7friZ8Z2fsmXXll8/WtDO9f7ix/Ff67ytG8u7bqpPD/Bxl/jk19ffPtbQ7vU
x3Xu/gWDwWAwGAweNcQjssN+YWyXu/2Kp2z85qudZ6Tn/Lu7hnZyyVe+0ut/
sq9/cmxnun3ne780tmuL3x6bfJ/vLOPdX+s6BnyrPKB0pezquccPH9v6+2Ln
Ne0DVuuZah/0143fvbp49/TYZj+fYDB4+JAef+5+BIPBacRHsl8gf7H8n+yl
5vd9qefzwWs2u+jUklc8vviNsR3vr9lt8m22fOtP97iYu/52aM/3972G+E3+
Z7pQ7/N/N172s8s4nzd6P+hKG197z+zjftDQfN3svveWfvzLHW/3+H8ythvd
Pp37fIPBYDAYDAZvF9UJEh/D3sEX4jMrytukjjo7Wx4oPN63vjk0Os6LS57y
VK9b1OziU53npC+Qn5Pd3uzpy71/+iGPlO/hAR2n2YcvL8/v5Z6fau5xh/Ju
tXF7p9choHOovKc4N6/Fx//s2C7Mfj7BYHD/0Hzxve8O7eriF8d2pet+puZv
84j9szok8pD4XvjQYPDwoTqHeFH+ZMj+gu3915ZxI692VE+SXrMi3ejU5+w/
r/Gb/21sZ/v/4Fn5pZt+9Vj3c+/VOLGv2MFPPD60m1u+x88ubn9qHq2/2y/+
8OSJoV3u6H357ekD8N/r5nX5oegUsg4Eg8FgMLj3yG7YrePh99gDc5/fbuNT
Tw5ta90gdh0+EG/Z9JYvdF5Svkhx063ezuvdXoV4RP59cVbH3hjahS16TzqE
E8fHtuT1LnV9KPuK/e33vvfQg0O7vLj3nqFt2s8/NbazPc+ReCu6T3HiB43v
hPJ02ReoY2pcV+srbWzIo+W1uP6Den7BYHDvEK/R/ExvLXXir/T5jz9InGvT
e73a59eWF/Ba39e2fMfHe/xrm68v9fWiIp51t9fpYDC4f8jOqDrS/cb9ridp
HjNPyg/gc/sE/Kt5EfI7T+VJ4tfG83qfXV7n0+pv8r3HHxva5vxqH8NeZH/z
+/ueuCrrAntTHawpPpNdKY9U7MtgMBgMBvce+Vfr++yJKeSHrojX408WRy3P
5LrjVmT3TP3fdnG7/6dOuniW+jl7pfl9T/Q8S/i/+r94tFofnN5QvRyfiyf3
Pv88frQer9YZ91peJ3ks7a8/ObbLi4+N7Uy/TuLU2XF4UOdFlyDeW37Rue/f
KWTfqt8uv5ZxMn7uf/m8Vq/DV5Y88xuzn08wGJwP1Ve2PzX/Nb/Wle7f+oOx
Xer108y7dKP2/fIii3Ot6wA0T9OJzj0OwWAwuF1889TQri7xVLfLfI4fVDfK
/GnelF+g2XFb7U3zJN6RfcdeNa/CZtc/2O1kegC6BceVX0p+d/O2dcD35F9l
Z7Of/W41nmhzvyVfqH7OfZ2CwWAwGDwMyG7A1zW9ydlJ3q0inq2+j5dbx6+t
Q/ybfd66/nw4T/j2Mt7lrS39WYf1d/W4zhPSYbb8SMe2/M550FfKnyluvO5f
2T+rdcIfm9znrjs/4+/34t99/vGxne/1e+hMW3/PLPNHnVzafye6naZeJTuw
2o3iqardd1ART03fKi6t8p51PL3vtes19/kEg8GDi9aZ++8b2oXJur/8SOJP
rSOpExwMBg8q0i3i7apOYOp34tTxnuKV6vdW6y293XlO9TfZY+xcOnh6Cn5q
8yk7zrwKq303la+TTl9/puxevKfjqjtFT+B98z79At6TfTr39Q0Gg8FgcE4U
19Hi4i5N8mP4OTwevyO+sfJm9G/8nuuw2gnr+LqK+kEnuFOdpvNxfjvlTbd7
fHE2zlt++fp95y8OHe9Z+2kfjFeu/DK7jj+4+p/XnQ++ruZbZwfqR7Mbj/Xx
x4vSfX7tq0M7u+U+qv2c+3nYKbLLnYdxpt9kd9JTVT+B1/JzzX0+wWDw4KL9
rzwj5pfKZ5q3m3/y7uW8e3H2/geDweAUyk8svwc7WJ2mqpeEdPHqPLG36vfw
qfzxjo8XrHqFVp9pUxdqvp2adyvaX019D18r3gxfW/OImvfZz/KUynuCj+U/
N+87H/u7ua9vMBgMBoNzovWYnlP8h/yL8og1PueJ/rqt0690v2dF9Rv5I5uu
776+X5PHBtL5sSem8pBB+STpCBvvdrHv7+rx1yG9IjtHXnH2gnGp/fB+Pd6n
/npoF7q+E3/Z7K3nO19Zf+f/ah5Mdl/NzwnlNfI/U9eljr/zaPzrlcVjjw7t
es8L7/qpO1T7/8D9Q7vY7VF2Gx7P/31ibBe6vca+nfv+v13Ee6of1fj395ev
H+48qPhUcfDs1covz30+wWDw4KL5Wd0584h5X76SNv98cblO/0XPEz13/4PB
YHAK2U/sePk+2Pv2HfV38nfiM8U/1e/VfJt4UHap/6/6zdvVyT/5xNDe28I/
Nvvv/W5vNz3qtS15RvGeTff6dLfXzf9eOx91RulBovMPBoPBYHAT5dtW11se
HHEhlZ/DM6rPPcVPytdtXVaHEA+Gt1OHQX4ycXz4vor4uCkesCJ+yv+qR16/
J8+P/6FjrO/Xz+txxJnwv+KN/S+esv6OTtD+1XVQVwiPKN+n64H/XXc9jD87
yHnwI+NH6VLZT3Se7Cp2o7xKxqcd993Fz4/t0uK73xnalSPDc1Z0HfGZ3q91
3L32ufHCe/L348vnPq9gMHjw0L7dPGt9tp9W7858I4+Ifffc/Q8Gg8F1WHk6
dqs8xdWfT+/Y8sc/2u1v9jA7bKr+z17XOVcvrv3Py8u4qO3Px+pFmefxvM6v
Hk/eUHpS/OpeX7dgMBgMBg8DVr6RrrPVl31xkk+c4iXxZlO6w7Yfe6bzeE1n
ebz7c+XbwRNO6TTxf/SIeMKWf/xM/57P/a+6jDvVhe4U9a/xvg91/+u63+EN
+bnpcdl/NX4Gqhu03eth/Olt2VV4anweuwvf3PKvb9ZbonulR+I3P+r2lrqa
fzq2m338xFuxRyvvWfMx0CewV+c+r2AweHBRHhH1/Ozrzf9tnfts90s99eTQ
ju48HAwGjy7i+dif4tOrX18+pfvuHdr5/ru588XXOJ9b5VntB+SF2mu+NhgM
BoPBo4zsBHHL6iLuFOXr5m+07lcU3wHr59VPWxHf9ztju9n5OfoW3/O+49bP
K37j60M733mrqe/h/fC1fufz1t7vfNa684HNX32+6wkhPpj9VFGcD96yXo+p
8XeeTWd6rucddVz8t3huedVbnaVpP/pRRzpi+aXY3fhMn8sX5Xd4UHWhEuce
DAa3i+qnyTtiHpHXTh4S/sy5+xsMBoM7RXHu8ieJA5/Kh17rrNe67nNhja/f
6e/l4TK/1/iiYDAYDAaDO0f6vKazvNrj6MSRbBcrX7ddbLzgS5O83n4hfeZ2
v9d4z89s+3frkI6w8sn0O3SflceUx41/m731s2O7sGW8/V+tZ+n/HJe95nhH
Xce5XZS3E69d6xzVOkarv9/YMI7hPYPB4HaRftP8/VNjO7vkA54udfEyTweD
wcOD/On2E/zJ7FHxSvV36gNUPejc53O7KL9nszO/fGD43OD2sO63pva/6mv5
Hb2O91u+s/OpUxUMBoO7jOKoxVffqu5zpygfJL/ulE70qCMdZtWBiieXH7Ku
my0f5xeXus1NHrXlWX2rj7PrWv+XbvFO1W/uFI2v8VvHe7JbNlbaB4u//J9D
+/zs5xMMBg8PygtM99n8bnclX0YwGDy0KC5qVVdwpuenajzQuf59fnk6T7xn
rQ90WJHuVf26Ft/2Tn9/7v4Ffzzab8m/Xfe9LW/Y5a6foUNp+eY266bCltf1
RM/bZt+3ur+Y/7yDwWDwsCE9mryT4qDl6fb57SKdJ30K/oiebh02/9dzfb3Y
7u92ivipW/29fopzhi0O/ZFeB6l+Dts6ePdyvduM+4HqUlYeU7xjdJq7i41v
Pt11tut4T683VtoH5f35zysYDB58tF7yv2wsG95g7v4Fg8H1eO89QzvX7cvG
azy/bbtSvt9b/f8WX6S++clbtm/525sf5sFut354vMs0slfVWW35LB/v+fvp
AnxfPvmWj+l6z38593XdbWx6/vO9TkDm+cOB6/a/9mkby6Z+l/2E74nzkJdM
XYGfG9vFvj80j5hX5j7/YDAYPKhoH1XzgrEz1K0Rd/JHY7s2qQ+s67LXkC6l
+auu9vVc/sjK682NeMVb/X2z465tGYedojj2qXV07vvoTsGa33Md77lq/2sf
JM49GAzeMuI9G/9wJetAMHiIkN3NDsD30S16zY5s+rHN1/iOKX/59vC5JW/4
Vj8+bHVCn+r1TL1u//v5rsusfCd0HtsdD/OXOF86i3X6zaM+76kXkLzNRwtX
98kbG55n+4l1v8f30wM33eifR08RDAaD28RqP1Rezfq70zqx6/xeVZd4VHHu
6xvcHbxd3tM+J7xnMBi8VcQLJD9JMHh4Ef8p7ofuq8YBea3+JJ6Dzstr/KT8
F/V1ixu6b4mfXfzq2F7tddEg3hUv6jVetMW7vNP5TbyNeo471XvC2MvBOwFv
l/dc1YGe7sdp88GryXsTDAaDwWDwtvF2eU+vw3sGg8FgMBjEb24sW+VFfK/a
D3QDe2VPqK9T7ZqPju3Gknc923lPPOh2eU+8b+Jzg3cS3i7vCWserebneKXn
PZv7PIPBYDAYDB5eZJew9+XfD+8ZDAaDwWBwu6guCbsB/zHFe+JHax6kvaqT
iPeU34rd439X8xFO5TWfPv5qvv/EcQfvDKzPt+d6p3W5wnsGg8FgMBjcK6z6
TrqHu/95aGe22P+rv9/YoBMN7xkMBoPB4J2L1Z6ovOeH84faJn+yqhfdvf7h
PfEo+ut/5RmuOs/kGQwGp3GK99zpcSrvmecuGAwGg8HgbmHdp9T9yQ9/MLQb
E/sQLfXcg8FgMBi8k3EqT849dw/t7FreU5x7s0NO73r//uPYXll859tDu9zz
Cbb8njcX/9fYnl38l7Fdv+W6RsHgnYRTce6tjtiFyd/RR3ve5PNU3+iTY7s8
+/kFg8FgMBg8/DjFe9b4s8p7qlcgn9Ve6TOCwWAwGAwefJziPSuu/k7b5E/2
Kn6k8p5/d9fQXuh1U2qeH/zN/zu2t2cf32DwIOKt6j1b3bHryzplJ5fP32e6
P8L+Yu7zCwaDwWAwePhxivdcrce6lfdUJ9U+xvfnPp9gMBgMBoP7j7fKe9J5
+nyveM/Wv1eXPMuVru/892O7vqX/7J74dYN3IuIda/7diqv11rfm95zCXxrb
tcVvju3E4l+P7fXFb43tyuznHwwGg8Fg8OigOgT/99jeWTzx+NBubqmvqs4A
e8W+gA5ir+LSgsFgMBgMHnzEG/KLTvGfvo8fqbznXtVDl9/z/xnbta7v/K9j
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
GAweFJSv8yNju9rtr52ieJx1+Kdju9l5TMhf3Piky0u/+Bs9voYd1eKGjvd8
/HQwjsPeZE+KM7Kf+eoHQzvTedO5xz94sLHynvRCVWflc/GEeM92338uvGcw
GNw1NJ9E77m7+Dtju7n4h78f2pcWHx3b4fGf0tc1f9vZ2eKk71T82bGp//Pw
8v2NDbwgP+jqddG2Pt9znw97mU7V89D8v4/3fjqvf/nR0N7rr+VHV/d97vMJ
BoPBYDB45yEdQ+NrXl7qMO/r+6jtYvXrel3j0yuyg9r3Xuv8KR3Gu6eHtsmX
quPwX8b21vL9J5b9eK7ztuL//A4v2n7/WOehxONMnde6/u836g+dYe3vdo/z
n8b22uz332FBPCeefCq+FO8pD2h4z2AwuFdoPmn+vvl0YUcN2SGNr7mxXG/n
y7O4XVRHRl7GxLvMg+KU6CA9n+wD8e13//PQzmzJf+O5Pij2AvsHf9l0BWf6
eeA/nQf7n5511e5+InHvwWAwGAwG9x3Z9/jP7eo1K+KBKt8obqzqOmtcfcsX
dGIZ7/7IMh/V052no5/Tb/7kxx8b2o0t+k18lPzq9i3yFW33vNb1HzZdyLXF
Y48O7fra70+h3/vfOq51fCtu93+++52hXVn2+80et2Tc8aKpx7mK+Gbjjd/0
+Woc/OM93m2K91Q/KfuAYDC4UzSfxK+yN8g+Eicur6F1eO7+VVRvBt+ZuPZ5
kH96Y9laXqbrnf9rfvvN13hFv/c81/fnxqov/+EPhnaj25HqNXnN7sZ/Gg95
/GP3BIPBYDAY3G/89bFd7Hkx1+XnrLpDWD+vfOU6/LOxvd/j4P/72K70/J0b
yyZ+Bq/p/+QZdTw8538d27vdzvT9W92/+B07Txx0/V/juu54zY48vu1xn8Lb
vQ/Y2d/8xtAubBlvfJ7+Os/b/d/DgvQMeHf7gMp/Grcax2b81DGYun+CwWBw
Ha7ynlv9MMHdReNMzzY3/9ny/7y+OHF8aJdSn31mfOP1oZ3vddrxg6v259t9
3Z/ymx7059i8w57mp99YNvZMPV/6UOOy6m9fXw81GAwGg8Fg8HaR3hOPpa7k
7aJ8nRvLVuPKax0kfNq6/uKdan/xozX+vuo8fX81Tnm66bd+Om6NN5cnYN3x
amv86LHO8+50nFfr6azvf0W62srT4qH59ev/Gm/njYfG6829L9xtZO+7/yqv
ufr9jQ3fc33sA+T5qnrpuc8vGAweHuRXxDMcdL7kqKB5u61/7+y738q6Yn2e
ezyCDfHQ7MGW3/NU5z0rr+n16nG0+c9nHTpP9z/+k11c84DiP9U98nvx89vV
CQSDwWAwGAweFlQnUn1I/Cj+r/Fmn+lx75UXrbrOingkdmXlQcXFbzeOSLwY
u449d6t8lf6zF/dLN+k8Kn+Jb91YNnFWlR9dt78TX+e4R01/gvdkv6/eP9oH
/bX9qX0OjL4zGAzeLlrP+FXCe86D1rvdntfZCXgkfsZvf2tol2Y/72BDfF3z
/z6zfH9jg13rOZWf3mv8uftm1X89/3mtw+r3rfUf/+ovh3au2/fscHY/P7Dz
Nn7hP4PBYDAYDO42tvqMF7rer9bJUQcd/1jzZqpLxI6rv2ev+556kM1eemky
T2iz7zf5RfaiOGPxNeoZOT47Co/oeJV/Wv391vpMjldRfi88oHyiU9+vWMep
8btPbRnf20X/V3WJ6/Kz0v3KO2nc/+ZTQ7u4+NWxvdr/x/U07vKcTh3/sOsa
nQ89q/HdWDY8KDu+7gPcd3hT4zz3eQWDwcOH/DCHJT72qKP1odZ3URceD1TX
R3UXrdvsivb7Vw98PaU7FdlLbd1XF/SNxcfGtln3R/2i1bwUp/t1ZU8d1vy8
Ne8nO8h5i2+R1xS/idenB2128Jt933HsjaFdWDz5xNDeO3J+9GAwGAwGg3uP
4qOm6uRM1dOBNW68fs7u4df9w7Fd7XE/8kXWeHd1ddj/vzm2E1v61+ykm52X
W/Wjv7qsN/lU5+Va3tLT/XdT/XX8elyoLpD9jLqWPm981/XF9783tM06QlUf
ulfof9TTkV9+ih/Ft67ysq92e3PqvjBe4t/97sfzsc/1/dzU/XPQ8vhPYdVr
OE/7XfY+HsL33Pft/N9etHoHL85+PsFg8PBheM+DjeJDrMc17+Oqf/j5Xj8e
nzZ3/4Mfjuzn118b29J+uqvzd388tuvd3lm9/o91e5H/030w93ndLlb+ttZv
8j77x/iwm9ih5rF2vONLe/SNxSfHdnlpz7+Xul3BYDAYDAYnEa/U/KmXur1d
7XB6TvrG7eoZIfsGD4cnYudU3QPeCy+JL2x+4QvLvEn3dvupvX562b/LW47z
K2O7WfzNn588v1of4laR3tH+Zt040dnudHyn0PjWeOw6PnSG/OjscP53fLPx
Mu6OX4+7jjfHc1bdY9WnOu5B50H13/26ev6fK7z85vecL76cfR/dZzAYXId1
PgzvGQzuH+I7v/PtoV1exsE829f9tr5f6nZn1Xni+9gLq/FPh3/9r35g9twU
/ymvZ8Mv9/h2v5f3qtlP73Q/PR700UeGdm3x7umhhQcNBoPBYDC4iR8f2/me
J+rBB4Z2aUu+R3FX+DCvv/udoV3p/NgU8n+vwxYvfk+Pe9cv2PjR1xbf+ubQ
Lnb76RNju7D49D8M7cXOa7JDW57Jtzt/ineD7CW87HbrpfufGu9e8T+P7Y0t
/zuFjzw8tKtrx9X1mDqO+OvanzaOX+j9brzbK8u49bOT9ZKMD/0CnPof2Pr5
5X4df3tsV/vx6nWo/dfPb3x9aOcP3L7g98Z2rvPb3sc/iHP/b2PbrGvK3ncf
uU+bXf+VrmOY+/yCweDBw7auXFi09n6ZT852XmXufgaDRxEfenBolxf/aWyv
Leu3v774j2M7s/jJsZ3pegL2jfVdXnn+iaP6vPJbN57yS4X3vdHHBy9qnOwD
jOPxY2Nb2r8n+z6gxcm8tYwf+2KvL8bO9D/01uFDg8FgMBi885BehB4SP1d5
K3Za5SF3G9W//N53h3a119d5+KGhXVn8zNjOl/rpz3c/MD5QXDmeyfemzqfp
604v7afpOunsJ3xd5enW4bo67C1O6lzndz+c9/1C16ficbdb532q/x8Z29VJ
3lK+AXal8VSXtPKi9bwrb+58HMf1wG/WftPN/tbYrvS6xXM/P5Bd776seQzo
Ff5obNdKnrdrPX+V8bQPavuo87OfXzAYPPiITzDvWCfm7lcweJRQHm/rNb+x
PDX4OPnP6QP4lflD2d/sgcOaz3O7yB5k73jNXm/5z19d/M7YbnYdbbMf31zq
GI51O8o4njg+tq7baOP6bo9Hcl3wp+yuKXsVzj1ewWAwGAwG58PHHxvaen7v
VrHyb/i2v/+7oX2x84E/O7YLPT6+6eJe6vs8fuWmB31rCz/I3mk83tUtvOgU
ruNtxec4Hp6Q3bVdHenPj+3SlvHxP9s9zlT/m7348uKnx3Zurb7Ta/bplL6T
PWsc/J+4dePteHhXdqg4sHpcfn/7CL//k7EdHPsUH4vnxD/UekZ4duOFr/fa
OLW4tzeS3y0YDK5F+jGvj6p+LBicA9XREb8uboPek93G397irU93P2b1d9a8
T+yFuc9zrxDPW+0feWzF8TTe853Fb4zteN8XVP7TPoDdxe5XN4zu8+SJoV3e
kk9XndVqr7Lf1+kHoH3R3OMbDAaDwWDw8CI7kz0kfye/sLii9v6Jng/oD8Z2
qdtB7JkWf/RK58/EXzd/8aXuX6YzrXHlLc7m4iSKt5d/He/a8mNe3nK8ls9T
HoAr/f93iuvi4SF7nf5APKRxgXhRvG3jk1/tfGf9/zpe4r/sA9il8v77H9eP
PfsLY9s8H3Yl3k9cPZ5bP/VDfoC571v9E3/lPIx3y8fwVn+t3pTX7b442XkL
+ya67LnPLxgMHjzkx/I6+T2Dwd1DeZXYk/zx1m+8Gj83vg2/Z31X10hepq9/
bWjner6Kuc9zr9F54ofZS+xScVfN7j/d/b/sSnpO+wD2ZNNJnO/7BPlC2/uv
9zyg4trwneoG/P7YLnb9qDyt6s03Pe4r3b5nvzb//GuT9jCee+5xDwaDwWAw
eHgRH9b87eeW9tDLnV9jTz1w/9AudnsEH9f4xpM9Hqbxeq90/z37qH1+rL+e
QnYQXhVf6H35iRyPPVftt52i46zrn+/h06b4Uzxt4z1PdbuRH7z+v/wEtR9T
4+9/+PkrH+r39Ev6xy5ufPa1btcaZ/y3789lb7ovK//pfO2D8OW+57Vxxn/S
ObvP537ugsHgwcMaJ2v+nrtfweBRQHl21OMRj4JPYz+Kp+bH5X/n/+Q/xoPe
KXxnRefd7LezPV8V/YK4dfYqPzcdrfxX7Tqc6/wje5Qdyd5X/53/X1529jc7
FK/JTq92KP5VfmX2cTuPu5d5D57qv2f/0TfQO7BPj7rONxgMBoPB4O6jOo50
cd/8xtAudHuGXYSHZBdVvSG9qN97vU7vCdlZlVesx79VfWfFxqNdWsb/TPer
8ZIXun2mfijekL0HjY/XU3pPWMdJPR88MP5OPk8626pLbfV9bnSer/K7dLTi
mOwnfmls1zqPKE7K+/t9P+I/7Y/YvfQdzf59oes/6Uca73yi280NL/b9lTyp
9f/c9we17n0wGNw7rLyn/CJz9ysYPMwo3kh++dW4mHe31Gn/w7Fd7fHYPpfX
Bz+a+OiG6gyxl5rdeL37seW9Zz+zK/GN7NTVeKtL3c/Obqzflye0xlv5Hf8/
/Wez4+7p119e118b2+vdXmt+6xN9H4AHb/fRE1vi1MRD4XHDgwaDwWAwGLxd
xAexY9V3ZJeyYyvi19i1UBwhxAuuO95eof+tdUKhuKGmP3ik22vr+q9+prpD
9X8bz3i6xx85nn03f71x8z/1OLU/8mK6fj/8wdBu9O/z+7NjPz628/262qfg
C/G++33fiXdrfv9Hu32r/gE7+PQ7Y+t6Y6+Nr7xXdFz0J/4n+oFg8M7Fynsm
zj0YvHW0jjb94PmePx7fxf6wPstDyS/L/uCP5z+Wl/LPxhb/ZMWnnhza+92/
+3Nju9jns4+N7UzHZjee7/rZaldW+9f79BCu49Tv5AGt9jRUh37K7q/f93+t
v68u7697l/bcyf49eQDwsfFnB4PBYDAY3GtUvxOyY/FrEJ86t32in7V/lTec
win7brtInzhlh+L5at5/dijejz7U5/hceez449mz+E/+88ZXb+U/G17Y97qd
Tcf6du/nL47tSueFjYtxwmPgc+lH5Gd489TYuk52rvstGAzOj+E9g8HdQ/Uw
rcvyejY/5onOd7Jj5JUUZyLfOHuEPTMVrxH8cMQPux5Nb3mmY7U/8Y/i5b2G
vsfPXu1QyA5TB6naz/zS6+zhdfY2e44/u/3fc8vzfXOZX/SNPr/jQdU/mPv6
BIPBYDAYDB42FG+EN8XjQnFB6+w8/Jw8/zUOjB3H3qz62Sne0/d97jhVP8ke
ZRfjPeUtsG+R32C/eEPjyN7VP/2WN9/42VfRNdCRNL3um12H6zz2m8cNBoMH
B82j5rPwnsHgzpHfWnw1Horf0rpsHf/G14d2fpm/552l3XJu8adju9nzx7M/
5vaLHxVkp7JL+cX/69g2/e/sT3548UbyQ1X+1HFcX/bmOn0A3edHx3ajv88O
rnYd5Nf2e3UA2HV0xvz77N6WP+ps7qdgMBgMBoPBfUJxSewvOgd+6RYntJlP
Xh1Tea7kX3ri8aHd7L+TV2m1btKFbseKC6KXZC/aX9x/39Au9Pgy+QrUhWcH
y8skn+he1003XvLby0f6ve8O7WrP70mPQN+6au++2s/X+ft8rnymwWBwPsR7
8n+E9wwGt49PPjG093rctDqZtU6jPJF4qK99dWibdXmsv/JQslvECc19nkcV
6R/ZoeZB+YDk2/ztsZ3qfmb5OsUbOZ7rzl6s+ezF67i+7EzHdZ/ITyQPkTyl
+FXfcx+1OJ6r3X/Fz61/8vOzf/2ePUjnOvf1CAaDwWAwGLzTUJwSe5Q9J28T
P7i8WfYL6m3+/tguLnm9Z3o9Jval+Cd8qLyi9iX0nuzKmo9LHnvxaeoOiZPf
q3H53bG91/Pbs29bfaOr3Z4Vz85OFg/FflcnCk9qPOeqZx8MBvcf23xxvr8O
7xkMbh/FY/zjp4f29tKOeKjXfcQrsU8euH9om3kn1Wmkw8M/4VPnPr87Hdmf
P/j+0K5P1jPyfXpfvCj70PWHeM2Wv/165zXVM+LX58+mM22/u9n501pXXpw7
HYH5vdl/Dy91pF9e3ref69jswqvdD6af8kLNfR2CwWAwGAwG7zQUp/TLY7ve
9wktn5Z8ls92HaO6SfSj7Ek6Tr9n34lnEi9vn2JfIk5cvk928Gqe0XN7ptOg
+3T+7Twv9P+n82x88JmuJ6ErwIPKf+985YuSN5/+NXqTYPDoIp1Zi8e90fNn
zN2vYPAwoPrqzf/4pV7/scVlnOx2g+eKH5V98tijQ7ve41Nq3cHg4UI8eM2b
hLekC2aPtfc344r+YGyXOm+pPpb7A58qjl4eI3WvWlzUW513r/ma+Lfb/ffZ
Zb83NvC73//e0K51Pr7xspvHc15zj3MwGAwGg8HgnYZVF8ovT+/Z/NuPdZ0n
u/OhB4d2ue9P8Jx+x29PLyofF77xvnuHdr7H1X9ybJe7fpQOFZ+wV+cvvp6+
0/m0PE/XelwTu9V56nfTAXyx6w/ww80ef67rWKM/CQaPHvKTmEc/MbYLs/cr
GDzIaF2XdweP1eIxTneeix+Rjg5fhaeiz7Nui4+e+/yCt4fsL3pO8yu/Pd1m
4ymv93yd7FXxR+4n/Dr7tubNl8eIXdvsuqtdh4zvFMev7hL+XTyVvAzyOMk3
675kH+ND2ZPu97nHPRgMBoPBYPBOQzwoe63lXbrQ7Ur1VtXblEdU/dUWn3ax
57nnb5dvnl1Z7c5W/+hy99vTgfDbt/z5u5dPnv6T/Sy/lPh3cfktfv3NngdA
nLz9ms+dh7xWlf/c7f4Hg8H5kD7Ja/qkufsVDB5EZFeog9N4z88s8aluD4ij
wGeyG8Rn/OHYri4/f6HbC6m3fTQQz7nd68mvjCfFX9IL4yPZa+zSH/1waDe7
3539Jh8+3pPdK66p3Yf39bpa7us/GduNHvcu3p3fnG6U3ex48ie57+ce/2Aw
GAwGg8E7FdmVje+73PlBdVPZbfzZ6mH6njg1cUXyJKkLL56e3ckvz35kN8rP
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
sr/Yn+oDNR3nuf5cPPzQ0K70+53Os/KgXvNj04/Se/7p2G4ufmFsl7v/nB9A
nUzHo/dczXP/cs/vpK67//vrvxra+Y6OU/3p4uubP+LZ3u+90gsEg8FgMBgM
3ulov9T87s93O67xiI8uHn1kaNeWdd7f7Hk0/Z6e5HfG9s7iD8d2denvfnEy
j9Nu91/+KPXo5S3VD/HwNY8p/pM9K/6v/e6tfty9Po9gMBgM3llIl9byzZzv
+jD5Avkdf3FsVzqvKY6Xn09dInWN8Cu/NLZrnXcR/z73eQfvDBR3TncpDpwu
Ury6+17ezZ8a29keR175zZbf4XLXh4pnxzd+dGw3ui7z58d2afn50z1PEl2m
/tFlNny1++/ZmexAeSPwsOxgPCkdgOe62dcnOg+r3ihdNz+9/hsX88Pc1zEY
DAaDwWDwqCB7q9WhfK7bZS1O/Iud95Q/Hq9o38VPL86o8obyNO1V/1s+qDOF
h73Z94Hs3VrHyfdr3BJ72HnTA7CnU6czGAwGgz8O6bfwNfRv1g+8CP6mxfW+
3uPa/3hs1zuvie/kf/S+9au9vtnrG1kX8TZzj0fww7HeJxDPBvF/7qO5+70O
8ZbsycYvPtLtLufF7vq7u4Z2sus7Pzm2y4ufHtu5Hq8uPxF7jp7Tcds4vdSP
99ijQ7ve9dKfGNuFrn+mq2Y34kGb3Xeu60vZgfpFr0kPirflf6db5VfXX7wt
nlU8Pf62+T2eWeKF/vyGBw0Gg8FgMBjcHWRf0UPK/6n+kXz0zV/+le6/VxfJ
+3jD5v9+a8mnHt8zu02/6TvFTcnL1OzfF/p56Tc/u32k+EF8bbOjr/c6UHhh
+absM+e+bsFgMBg8WIhnkc/QuuM1vlMeavoxv1Nf0LpknaKP43fE6+A7+fvm
Pv87BSs/OYWul/sAPvjA0C51Pg8vhy+E8raKx67Hgdvtz37n8cFb4uvF1+BD
3f8t//qxzgfSUeo3vzV7k335ox8O7WbXS9J5qu/1rW8O7WL3w/MrND3m5e5v
oAd96MGhXe7/K39u4zlf7nHy4ufpqVv/n+161/b/V7ve0/XFY+NrHVdeiuPH
xtbtUTys/sf/HgwGg8FgMHh7KP8X++3++4Z2oduP8hOxO9lp9Cv87exG/vCv
fjC0M3vWb/agvJ/6KW+9eqL2m+pyskfF+bOPmz//2OInx3amn6fjN3v9zW4P
Jx9oMBgMBv93bLzm1V5vr8bn8iuKm8D7NB7oUl+X8EV4mFMnh3alfz/12fcG
2UPWeeOuDg4dYIuHObkFm91wYhl38nrnsSqyT/xPxfa/Jyd/D/HoU/2B4rWd
R8X2vSv9//Hxtzuejfd/o48Lf7TXnhe8qPwO+q1/7LTGe17q/gT1iuRpan7v
K/15as/Z6Z4HF68K8bP4yPZ8vt793fwQnkv8Zb1f3BdN33mi9/uN14d2vqN8
S3hveU/pBtjPTb/9VO+3OHzjlXxMwWAwGAwGg7eG9lHND/7lzvOJ+2EPyw/6
38d2pfOE9Cr0DKvx81f3TC9Z6x5V/Qu/OTtaXBX+k65CPJPz8Dt8KvuZ3uAb
Xx/a+a7rmPv6BYPBYHAeXI3jPdv9hvhN8Qn4MPVS6NVanMEby7iEV/p6iz+x
nqZO0e0hPq/yjMaZPcBeMO54RvzcFF8pz6o456nvTSF7Cd+Kj6w8pc+//a2h
Xep2injpelw86xR/Sn/ovOWb9X/yzuqf4+IPp/zAngd8P/0mflB9Scd3XOej
f+28NnWw/Nj0sPI80GXqP//1ap33c51HNX7y1fPn4z/lyxV/v87f7frrt/HU
X/yq+Cr9UX/JvKH/Pze2i91vIk+AOvSuD3ucDjV++WAwGAwGg8Efj+xj9po8
Y+yspl8513lD+7Zm523m3ZQ3CW/Kvttr/pPdyx5kR9Orspsr/4m/9b7vyeNk
v8SOpscxLuza2JvBYDB4tFBeRutdjWe2buI5xfNWP1njczbXE/ou+Ftju9L1
eVX3Ofc4HDSs9bineET2gPUc78a/y2+Kr/L7Ou5TfKXju35Qvseqv6TTrHpN
/Ja4Z3V3Kk/Z7LDXum5SPHXTFb4+qeus/Oyfje39zrv5nJ3j//TD/avf+Dl1
e/yPfAyeCzpPcUCVP3UeeFD3P7vK9/gFxOfgBateVf/Zn+w018X32KX0tT6X
l5O/+1btVv+Dz/zmN4Ymr8GFfh/SC9CxGqcWP/9mz+fUeOMv93lGXVL2rfP1
P/IhHJY8scFgMBgMBoP7heJ42LtV78AeZeeyy9iFbZ/w9rJuw/luR7LH2MF7
3X/8q/3Eaj6otztPy94XT4T/ZA+LR3Ic8UrNPr/cdaH4Yefvd9mvBoPB4OFG
64d5HV9mPeRvW80X/VbnifBD+A18h7qANV628V4X+//Off5zo3XU+mvcXQdI
RzuFLU/AxeX1uN75MjpJx1eHZuo49IXiZPDW+Cn/wz6gz/Q9dhBdo+tNT8p+
0p/qT9W/yptPoftR/+/+56Gd6XHXbRxe6J+zg/w/XhlP6nrot/+R18H9ju/D
k+Lh6ED9n/MxrvW4dfz539U5qp/rv/HHM/rcc8wfQf/JXuUP1+8a375TdD7u
u9pf54lnxc/js+la3R/qMxk3PCk7G88sfsnneGR+nLmf62AwGAwGg8G5Ea/H
v84u42dvuGlvstPZteLN2WvsN3XT1RHaq/7bL+Jt2e/qeP7M2M53XYX8pPI6
sR/Vl5DfSZyWfQu7Wj0k42Ef7PvsfPuf2J3BYDB4sLHqOfE5eCRonan8kvkf
30nXZh2kK6t5DOc+7/1COjT6P+s0ewLPg7ea4sGMW637ow4NXSC+DL8mv4D1
vfKF9X8cl56RrrDlLzjf1/l6HPcBHny7fOXtYuVHnQe/b7XjKhp/vF29DpXH
VZ+czpVeuY33K71+kf/VjykesPZ76n3HdZ3r9/0POxT/h/+EzhdfyL+vbuZu
3fetf+8vfnls17ecl/46L/Y0e9N1rfw8e5W+VR36lp/qwW7Xsu+jAw0Gg8Fg
MBhsyB9e+U+6RvmR2FPyILXX5/o+EP/JP89+22v+k30nP5R+0dfIJy++Sp4n
cUJ0nM1uPNHtSnayzyG7udrz9KTi2OwT5KsPDxoMBoPzonlYfRTrl3or/FnW
C4hnsE5Y3+SNrnwnHpSuiz6Qnm7ucdhtxGfiB9kR+Eb+1KqjtN4aR7wjv2bV
HVp3K4/k+MZfHhvrM/7J8Wtdmsof6jfe1Pvq4FjvKx+Fn4V0qnjzKf6Rf9b3
fndsp7d8r/KYdLH6b1zpIY2b+895GJ/VvEVv9ucAn+l932MHtrwBn++6w4+N
7Uzvj3yb+oH/b/rnrXpI/WRHus4P3D+0zbyd7fm81P3L7DT2HP90uw+udfuQ
7tbzS+epDvxePx/4R/eh+wNPW+878UeruvJLfd7xffdd092eWtrB9/U8CezV
3eZ1g8FgMBgMBg8b/suPhvZetxvFQ9EvtDxlX+p2Jj0DO5X+oda5FHdD17HX
5/H97w3tWt83tHimk8v9w3ud36XnsT9Sn0DeJftUdrd88pUv5Z933vZ79CE/
P7bNOgTyZ/l/duzc1z8YDAaPKuIZ8TDqT+N18DSrdW1e7f47eqyax8U83vDF
zkdYF1s860t93TmseaHxVda5dv5b6+ZYN50vXR57QF7t/zC297bwMOKs8TyO
V9dj9b5rXst77xnauc7/4K+n+ksnh/d0/epx5clhT+ABGz93qt9Pjuu6O768
krXuN3T/tOM803/XeLmHO+8qzyOd5VT9Ive1fAr4ePaH/uGfaz0jceD6rX/1
/Dwnq3lq3+njQy+Lp+UHaPzla/06rz4v7y0+OrYb3V+MT3U9/U4eXs81e4yf
m96TXei8jAM/Nh58rufrqSeH9v7iV8Z2s/P/q/ztm338zTvud3mo8LeeU/WR
XEfj9+QTQzt881AwGAwGg8HgbiH+k90k/xG9CzufnUqfIH9UrSfA3rRfYZ/u
9Xk8+sjQrnV+kt/bfgl/W+MW7XPYy86bvcl+lMeeXe9/5KO3DzJe/Pk1zt7/
1nxxdLb2m3PfF8FgMHhYsOml3uv8gHo2Td95crke3NP1auZr8ziei99P3We6
qT8Y26Wi47vQ/Vx4ITzaYeE7rX90rdVPh//l16v8oPVe3Ln1vuYLgPiaWlfH
+/Rw/I38k3g2dobfNR3f8/1zfJt1t9Zzl5ey1iOiG9UvvGnlYWt9Hnyr4+Ix
ofdX8dTip8Z2th8Hui9bHM5TS57yz5fXa7Opf+O4dKL0nz7Hkzmu8aq8KX6/
1guij2z9eGp5Hzzf+Wx1vPiPnVfTmR7r/Ct+lN+31nXHz+El2XOuJ90nXarr
5nnEb/JPuE6r/PPr/Tk/aDpIPGizv9/rzxU/jPOuz6HzY9/yP+DR23x3d+fN
43cPBoPBYDB4p6P4IDoD+wT2qDh39RrwoOwv+xH+arwf+3m/6gBVnaf9KH96
219d63pVugb7PPtbcf72xfY99g/scJ/LK8oet78Q/84OZ88aN3aouC2/M+70
GXPfH8FgMHhQ0LxpXsaD0d/zI5nfzcN4Srwaf5b1SzysdcA6Zh1pfOj5rlPD
r+I7n3h8aAe/XpH1C2+2yite7vZAPZ/KY+Kt5Hm0fokPqTpH41n1oKt1x091
Pgf/jM/Cq+qn9dH3WxzwVl2kuOwp/SV+yX3T+LQv9fuq8ecvdD5ztZ75pd4v
8dp4uMoTq7dO5+c+gvSv6jLV37M32Av6Lw681f9+p+sr9bvpJB9bXsetrf3f
XcvzeaDzZuoZtc//qY8Pf4C4f/aW86Mj5e/lf5aXiJ3EPhTX7vmSf2lV9/pW
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
3/G55hF2zNz26U7ROHvO2/k92s/H/O25pZf3/BtPOmp5glbzWDyxpe6YelWe
b/MQf9dR9asHg8FgMBg8Oii/E76NXWk/if9jT/L/0396/d3vDO1Kt5/Zl4el
7ox4KPU05CNj54nnUpfUvo1eZbUe0cZGs0O/0HVF9Aj1f+3P/Z4OxnHwBK6L
8fV7dil7Fdr31vq3FXeqc6p5tMSprfKwJ3v/Nfsp9xGd7a1eL+Pejnf46hkE
g3Ogecs84vkVVzwVF+r75qHq73EcPBd+zXM/lf/EvFjnpY1lM/+K21x3fuYV
/YRzzxPG3XqKh7HOWHd833Uwns5DfW38Ra2/7rq4HjWPJT6Dv0wd6Xp9HM86
Uq+H+R8vXuONg4cLPd90f+5P9pvry67jh13HX/M7y8cqblv9Hfe1+Gv3dbWD
8OpQXgf8qufF888OYrepf84/Qjepnj17be7rcKtY7S7X07jXuvG+18bpc1vq
wLsO1S51vfze/O991yX5h4LBYDAYDB5UtE/Fd7Kjmh/42c5z2mexb/Bu7B78
p/rm1X6e+zxvFe1Lq71c+UXft89m52+Uxt70O/tRdrzj0FXY71a7U2OfOp59
rH77fKdY7eSpVnlPfK37R94u/RdvZV+yUx4UXxLdUDD4wRZ/iNfmJ/OV+b3y
VHiDyj96nuu8YH5ZzetxvD/v+E78hryd/EDq68j3WY8/dZ6edzyG+WNj2cwv
t+tX2S3UX3HproP10ffwBPT6lbfhn3Re/I2Vd8ZX4JGsK9Yb6xH/lXnU9TKO
rgP/0tzjGNxb9PyzN9yf+M3d5rHEG9Frui/ZCeaRyqvhPd2f5jn5ICrvZp5j
t9Ihy/OuP5U3NP9N+asPOhof8+yU/51fxPgb72q/GWfzkNfmqY3S5MnHl4YH
DQaDwWAweFCQHWr/ZB+0Gt/yRo8TrDrPyn/iOSv/We3Nw472hdu1m6teEla7
03HwiVUnyf60T2ZfslPxDPa9lc+gW2UPV95ku6gf7ovKv1b9xhRvq/l8u/UI
Duu+JBi8FXS/e26rPtLrqed5ijek46MvNK9XHZV5qOYttm7IB2L+MT/xc/Cj
iNes/ZvSfWp4QzrJw6E33JzHK49ofF2H6j/0ufm1rgff+ubQLpb59nO9rrN1
Bb9R9Z61jtDBGK/gQUH2m/mBH0WeCHUwd/t/8a/8x+r1sC/YW54X/hf85xTv
5vmTd2NVz7z5/9Xv63nx/Mx9XbaLVW9b43T4pWp9MeNZ7Te8s/E3P1X7X/yY
ePujav8Hg8FgMBg8vLgaP8w//sYWnaf9lvw+7Cp5v+T/8b46E/LBycM29/nu
FYrLrHWO5LuSDxPPqQ5y+96mvWk/L9+8+pzsennZGk99T9cTsW8/ObbN+gNQ
fXn9hOoT1Pxuq/v2x3r9q5oPrtUVeLHrBeSta+fxdqnbdL7nVfV9fI54uq9+
MLQzkzyoz/E59je17tRO0XEOW70N/dR/aL8B6+cVa3xscG8Q/1frqsl7hw+z
T1cX2TxR64psLFt7nk/2fap9Z3v9VH/+8Yb+v9apM9/gB/CleLkf/mBoN5bP
/Vu9vpp1Ql4+84b5quYPNn/U+eijYzuofOYmj2y+oet0PuY935dXD19k/pOn
0/NLB4c/oNOVRxtfKa9qG/fNfNTy+eGB5E90vxyW+Sx4sPDhh4a2NU84HaW8
m7Vu427ndXVc85T/97x4ntgp7C321FtvDu1an/88r+Ynx/dcywuvjpI6QeqK
VftN3lB1yOa+buvQem/eNY+x3+RZNn5eq09lPhNfVMe98cX39vXJOiLObO7z
DwaDwWAweOeifPB0NeoYqeeurszHxnam+8HZxc1uPN39xPKtqwdEv3KnxilX
OxMfyH62n1C/tNnX6odc7Xa4fewqj3Cy1w9wPPzqVD36Wo+p4hOPD+1mrxds
v4En1z/8C7vYPpydi7fxOR6u7l/k2aczUceDjli/HMc+3/nVOh14VbqNinQP
+GTHaeN7vF+nKX50r3nD7fK6eJF6vfFXsH5eEc9ex7vypnM/RwcNp3jnqecK
L7Z6nZ7o9WYaXuzPs/og9Xqt9mNjg85Svj51zdw3nkv5Jtt9/2rn4cz35nO/
85o/xDzV/BivF77tZr/frCPqpNBzGYe5r9t20XOo3863zjfmxRpvqz6M73u+
zBd4GPOdusuul3p81lF8pzwo5it8jPpR8WME9xKt+/TiXuPbzVvW6932e/O/
qEvJT4SPw1eqA+R76rxb1+T/9Ps6z5qXPf94u2bXXOr2Df+PukGH9flznq4n
fzTem59MPACdBD2EcbHOseeMk/kwOtBgMBgMBoNzITvNvgl/xq4RR2cfjP+0
X8MTibtmf/Kzq0vO7pz7fA8aGn/8c9Vj8sPTc9nn4j3xHuqqVx0VpP/yuuo3
t4v4D7reFgf3Zr9v7Od/eWzX+3mIr9JfdjQe1XnJA9jwL7bwlvhfOigoHs9+
a4rnE8/Gfvd7fGz9fzzqFI84xRtOIbu/vv8rY7vZ+Q3xrK6b/rgO4hLrOGwX
jaN62ZU3phu0r/P8TvHAcz9He4VNz7iV33Sf21e7P2o9c/ctHqvdf5e6n0j8
uPu/1kGv+m18HL03vxO9Jd4U34bfbP6SK32ewUfgz/Fu5hvn4/6mx6RzooNa
rY/3SH9+PO9VFzn39ZzCquc0j7gu+F/zZ+W53QfmR/t/9w8du/VRfZX2nJ/p
95N5lO4Wn2Lc1W02roeVZwkebmz3/ef6esYPVONe+Df3ap2w7tb5rj1f50p9
pac6n+f5rnXpH3pwaJtxM55nPKh5mb+n5Sm90L9nvjQu9LDmgbmv23aRP6fa
b8bH5+K6zEvsfv6v5m97rfubV9eX3dMFB4PBYDAYDG4X7Z/48fFZ4pnEubB7
6Pr4g+2f2T/2d/gl++p19YSDq2gfTj9Fn6XukrhT40mvSZ9Ab+X6VnQ9Kvq9
13S87Tqf6nlh7TPwHvYfeB77EveBeHVxUV7TFXvffURfJi5eXir/73/xwPJZ
TaG8ib82ttf7caB9ER4DP0VHUo9HN2ofKJ4Xf7VRmu/X91f53X/q+j28pzho
9SBanolX+//rv9euy2p+hM3z9HvHo1PDp9x/39A2z9N50XH4nXGauo9uFfFs
9G/ub/ulncbv0gk5DnTeU/2ge8b/4rvdp20/d6bXl5Gf7hNju9DHCbbvv7L4
6bGdWxw/NrSLnY9s43uh+5vq7/0PHs71tq+X74Je3HmYP2r/f3JsZxYPPjC0
S4tHHxnatX6cFq/9TteJev7pDulLxWvzf+HzxEFaJ+aeTyE+Ap9PD1ufl1r3
x3i6HsZfvC1+w33l/uHHcHz3h3HnZ8Bf8wuZR9v1PNXjS8N3BvcD27pzc4td
4Hl2/1dek93ReLA3+/Oy1/01z7FjrZv8ouxUfkP5Icy3TZe4WR/dc+25Ywe0
ee+FHm9v3mzP7Vv9uKv5K65tWX/YdwedFzV+1kHja54yrvIfNfvqfOeJV+2k
zfpI8kNHFxEMBoPBYHC/se3LLne+6e5/HtqZzv/QF4m/puds+Y3e7XYn/si+
mV7UfpIdzJ7GS8x9/gcd5cv8vbGd67wf/oQ9T28kvx+7vWLlw/Bl7Pf6OX+9
fbr8fvplv4/vWK3rfrl/jg/FG9E32WfIK+u82u9P9P2C+wZ/gMesPGA9L/cd
nQLdBl6DXkEcHP5+Nb/eF7bEyTsuvZ34fbqu2h+I16x5EJ13RbyX1/YbxoNu
DF/ptc/xiM6vHt/38TP6Z3zpOBzfa7q4jdLwuY7jvOlM8cXQ/dx0kc91vs34
mo/MM9vlUSvPC+3T9B+vW3nsdn1Odv0dPbPnyP3h+fM+XtD41rx5+rHqP3hz
y3NL74dfkF/ZONs/4lPNy6v+gS/1fbvxw2/qh/1682u91p8v4+h58fzQAfkf
emr9t8+1b55r3sTfeM7xy/hIcZh4TnVWrIP0r86Tvt7zZ16iH8P/wro+ug78
gcaZX9E4msePep7s4MFE+YPb8/LZPr/V9YsfvP6ef8q6s9/9Z0/U9d98Jn+x
ddU8b17jX5Kv1+/MDzX/pefX/7IffG5e1Q95oNgdlRc9aHHh4lL02/zpfNl1
/G7ilMTTmDdX41g+09fh8J/BYDAYDAb3G/FU8jWJzxTHYz9WdZ72dzUOhp+Y
PVd5N3mAar60ucfhoCG+CZ+MP8LD4Fdq/smq29gp4ivxF403O9H1p3gXOr1m
x17v+kp2LX7I/eR+qHoBeRTwDngcuozKP+CFGs+6lQ/TH9+TT9F52BfRL1Z+
DD9kHOhf5bWq/KHrhP+hH6n9wjPijev/Qs8hXmqKR12HU/yf55M+Tf+Mp/Ov
z63XPq//h/d2PPcj/qf24+tfG9q5Pi70Isa16ozsmyp/OoVT1wnvVPVJlQ9c
5YPP9Hy9eGT7NvNY5RXpJd1/7kfjg9+yf/S++VE/3YfiSelM6fRdN98z3u6j
Wm8NP7s6n1/rcaLiPGv/7W89X+26bNa7o0f3uXlsv+qyG0/X1XPu/lRXyvNJ
94n34P+pei3znevKL4A/pYcynlVvax7E45sPXR88TPjO4JxoHZZnpebp9RzT
mx9U3sp8Wtcv8zo/pfWAfl28k/nP803Hye7y/DpOXWfxhOabB+4f2sU+n7b5
4OEtflR2gXXgoNnF+OzVunzPLr7/vaFd6/cHfaz13bxo/J0vf6f1U92ouc8z
GAwGg8Hg0Uf5zMQZi7sTZ43/lD9OXlB+bbo9cY/ikelqxD/jIcSBinu2H/e9
uXVD+43sXOfNHqQ/Ut+CDg1vZbwgfRj//HaRHkk9K3Hm+B/5m8R10ze6zq6/
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
+13UE2vz3SNFd7nJ27p/jL9+Vd4fuh6uj3FwXzt/84LnQL5h9zPe0/ib/+l+
1NGzr1X/qj439f4339f7Qf/tg/ljrCt01ZVvpsfCc3oO+QOm+IbaPzznXq8D
weCcaB1Wd8f6K078TuH5zd/mG3YEO0GeZPOGPCN0AnVe4f80T/JfmW/qvFPt
Z/OV+dm8rO7cQdGbr+o6N/cL5mV+wTq/Vp654QudR7XOhAcNBoPBYDC4V2j/
al9ZeU92CbsN72n/bb/MzmHHtbxJ53vcDD4BP4WXwiuob7xOv/dHY7u2Yx6l
+tfX8VVT9uit2p/4JHHJ4jzFN/382C71ft0qD2ZcpuqQy9/p+3RW+Iid8qBT
57ndvPbreM/tIl0qu7zmT6BDwzeJ8/Z6ipfdLfT/O71/nFe9nhVv1Q9Q+V/7
te3ef55X+tV1/dwprrs/6L6rPtT8U/tdeUPnQY+7W/fjOvQ/4kvxlB+e7+Js
f27FX9fxn5o36/m7vut4T+/X+b/me5AXAj9u/6sevDh7/Kv+G3/zvuttHvI9
SD9Kty6PgrwdU+etv66v/9nr6xu8M9E6UvV/c/cruD2kL2c/mC/EadR1tvJ8
4rxr/pHKe1qH2J94UPeL+bd+/6DoQMWXGAfrVB0P9iV9v3UKz1l1oPYXeGj2
5GHJcxUMBoPBYPDgI3uPPWOfyV6r+TnVB5Evif/XPta+Vn5Ids5jjw7tes+7
5/j2sXSE9ste4yHr/htO1eP2OR0p3rXWp5jKKykPlv6yO+U3lD8Sj0ufVPMX
4Wfk22Qfrua72349I/kJK9/juuEfjAOdpzqv7Ex6M7z37fI+dF9z38/B7aHn
3nWXX2zqvpM/sz4PdBr2KZ7nmpfT87LdvLVTKA/nVz8Y2pktzwH9qv7JJ2Ef
O3eejPZ8vt/7KR8cPZH5hF9K/42/ecT8Zt7BGzbd89U+D8jnaR41T+A7+Xf8
Xn5R86X5033Q+n1fv97un8cfG9qNnve58bVf7nld+UOMv/m95uGVP89x6Ljp
n9xv+uV+o4ulD898FNwPxMvQbbufPT/u86nf84cdFF1fcHtofjH/ra5/m/k8
zV/sYPMhu/W3x3aqz8fmc/FY7Gvrwrr7ab+x+b/e6/n9rSN4YPMzu7nyo/zV
Nd92e/3ilvz4yQ8aDAaDwWBwt5Ad9/3vDe1a99Oy4+Q9b3nlTnS7Rj14fAMd
o7yh+FP15R2f3VPzy+NX4FT+P3YWu0s8/Lp8mLWuda1bzZ9deSHx8eph+H/n
Xeuc4FnbfvydHg/V/ue5Xk+m1t+o/C1scaBvdjtZ/9iDeNRaZ7vm5695/3br
/jkodUqDu4vyDjR94iZfat/zp2O72XXc7j/POd3xTutbTfkl+Gn0A4rXPOi8
l+dVXWH1jrw2n9Z6UXSb/Ex4TPmU8af8U+Yl8xa/iflEna5a59114+/iP8HH
mtfty/XPPh5fW/XO5kX/b/73f/hax8dnOg+6ebyx+c59Ofd1Dd5ZyI/h/mTH
1LzcU79f5bnOzX4+wdtD/kTzGfur2WvP9nnSPCq/Cb+P+6jZh5e6PUo/Wuf1
uc8XypfATpbXx3rFb8f+buvEZjwAXpMegD+Q/8s6hwfFj1p/7DduNw9NMBgM
BoPBOxcrD9r4uXO9voR6uuyZtn9+odtz7DZ2PbvNvlf+JPYhXSj7qfIa/On4
RLofx6t1zR3X76fqWeNN8YlV14Z/YHeJS8I/OL7+s/PkOWSfsQfb95/o+eXo
BSrPM6VnwxdM6eLobdVtXa1P/Fbns3fbTmT3z33fBoMHGT0n4hzb/vD+rovx
nOMpzWPb1XvSTa7Wj3u1Hwc/oy6SedXxzSPmGX6ZJ58Y2nt9H26e93mbj7/U
+Uj8pf+3v/3DsV3tcej4ALrUWt/d7/ABd0o+wuDhQH4W9c3kMVzHe67m/T4x
qWdjD3gePP/h+w82muddP/Mm3cCjjwztWvfXixsXX//gA0O71O1ZdlvNR3rQ
9MJ40OaHe6/7v5qfbXMcxG3Qw1ov7r1naOf6+bPP7S/oSe0nrAt0sp6Pucch
GAwGg8Hg4UV2HF5SPPhqvM6z3R6j76RnYq/Ra+EB8ZWr8divFZ3Ts0u76cTi
/vuGdmFL3d6K9bgVm9309HK//UrPU88uEwcuTla/8ZT0Z/bpdf/vNXtN/sHG
dzzW9/POT7/kz9MP/Cn/ueswlR9R3j12ofhV5+t61f75P7zFuvvhT8Z2o9u5
3j9oeoRg8CCh54Xfo81zD3RdeHv/y/25pU+3vzMP8TfJz+w5lg/TvCTvprxy
5tHGrz7Tec+aF8B8IL6dn6v5vR7ufI3jtPnwn7peR35Sce54VjrTxvu83P1I
+idu2PxkPqM7nvv6BYMfhvyq/ML8pFPf53+g057KQ+s5UM+LPpAdRHdaf+e5
YldYl9kT7AzHb3rq890Omns8jxrKH8pfJM4I70nf3uKCnlrOo+/2PCLmR7p4
9iMelV0+93lOIf8A+9L95jmx/tU8V+5HPOlq/cy3lnzx53s9Jc+H9cf6ZL3i
b5t7PILBYDAYDB4eZG+Lb8Zj0nnKJ2mfS9fU9I4v9boe+NOaT341/8/1nr+N
zgEPaD9gnw7lA7Rft8/+6bGd6/pMcbiVNxWHY9+An3TcykuyT+3z+avFrfJT
Nzvss/3/K2/Jrqv1wOXl1J9V3uJ4R/YwfRZew//bL+F75V3ij1fX2ffFFTk+
+7qN5+Z+i5+ennbu+zMYPMjIf8E/Y34xb5pPxKHTw5g//c5ziw+ls7Fvrn4j
+hnzDx2oeHn7RfOPecnn9o+r/p+7uo6dnpMOSd5n+3xxi87PfGz/qr6F+mPh
O4MHGfE58pOLY274fNf74XvwjJ5Lfo/2fHy+f+771nM8Jt2ffDVTeT1W89hs
bPBDN135zT4fsA/ac/zQko96evZxPWrI34X/ZFe5D6oeH98nv5HrSddofnd/
8Ldvt77kXGg+pwO1f5DnSj4oKH6KDgFfz06lmxWXJt6Bv44fzTrKL8H+NX5z
j0swGAwGg8HDg+pW4CfZaezzti/+XLev8aDNfnuy83le20fLL4fnE9/OPuS/
Xaf/XI2rvNT/j3/da7ytepR41xoPP6UrtX+hv7Lfx8+KN1+Nn396i94Un2pf
U/lRvAVdl/6wn+1rjKO8ongLdqV8pa5f5W+Ng+PTp7DX9bvZk1/cwoeu5rU6
0c8Lf1N1uI7LHrVv3O371f0wpZcJBvcS7YPl36SjlMej1nnHb9JZy6vKj2G+
8Rzx29Clt33jjT5fVb3nR8Z2tR/Xc+r5NS+uzt/HSt7NZ/pr+3DxvO31tZ7f
je7cPtb58dfMfX2CwZ2gdZq+mv9C3kLPIful1pG0vtJ143Xwongfv/McN3/I
M/15pOuUx4Y9sup33dQVWvfZEfzEOz1/+jzzBbvHvFO/Lw/Pnfa8m/ebf+lG
5+HYPewS14M96L7hV/qjsV1b3j/Xe55L9w195GEZ31onz3ogrwkdp/xS7FJ8
pvWp2sur9+OmXS4ubVXn/Gy/j+cej2AwGAwGg4cP2dX8uvSV/LvskI1lazzn
413/0+yQz/T4T/5bebTsC/h31yG+1b6E//xnxrZZ77jl53q9H9/vHMe+Qf4l
/Cj7jT2GnxWHgwfAHxoXOknfZ/fRVXlff+g/8SN4Tvsd9i5ehT1Hf4V/xT9W
Pat8U+xOfGatB76q873U++v667fzcz84ruPgW/CtdDN4XPG8zt99I07qnruH
drbnZ6VrWXdfzv18BO9s5CfyPOI18Z3i4T237nvx5PIIut89T+5v8fJ4BnlD
PW+ea/p5x691hMXxykvans8H+3NNl0P/SV9Ptyk+03xjvnW+0XUGjwLiW9gX
ns+6fsr7wB7gx/S91bpgb/XnUj4h+Xw9l82PeqZ/rj9t3f/zHg+t7hL0f+wV
eXis69s9bzyn+Yaf0/zme+wtPJX4HvbU3Ndvv9F1Zu/wU4t7xwOa/+nuK+JR
8e7uq3b9n+p86Dq76KBg9Z/X+oZ4/B/9cGibefvZh5DfwXrHL8COp6uwHrF7
7Td2+hwEg8FgMBgMQvtb+3J2n/26+Ej2sLgV+2+IZ2PP1DpIU+j74tDpHfnL
2eONx3y08wuQHovOip1Ed7HKwz7TeUQ8Ad7A9+QBsB/AY7LX2H+w1mmio2I3
i5N3fPsY/bffwROqZ4JnledvtS7nZjwe3ah+QjoU/cQ/+lx9JTwlZI/jcdt+
7oudx3W98bjOH59S++s85E+gk7Gvqv23LxVHrF/6v/r6jZ6Pa+7naB3q/9z9
CP545Kdwv7bn7Lmu28QX8ieIkzRv4j/k0+AvMg/YF8oP4n37OnoX8y1/hOfZ
c0KXRm/U+ndP16nZT7d5z3N0b58X6TrxnNFZB48ies7UG5uqb1R5z6n8nnhS
+SvwO5UX8j18o/f5Pe/+56FtxsXX+HjH8/zv9PkUv4JfNW/hlfBy4mbEJ1un
Kl97p6HrwY6jq+evkl8ID84+Yo+YX407f5lxZh+Zj9mb7s+DPh9XO9jzwP7T
/2rvs2/Zl+IR5Mf2e89Nzf8kHyu73/M093gEg8FgMBg8/IgXrXbOFN7q/9Tj
4B/sW+zj8Qr4N7om+xa6KLqKjWVrr/+i65+8jz8Q9y+eib1b9Z7Vf81+w8fZ
Z9TzYPexfxtPca7rJvGx8o3yp9dxqbpMeZSm+ouf8bry1dDv6WTpXvHRU3pP
vA69L/0YPYT9QIsDvLpFn1r77//r+eDfa7/x5K57vT63ilVvW/lhccOuv31L
/R6MnvVwofmGftz9xQ/jfq469zY/neq6IPc5vt/9QEePj+E34k8QJ0tX5vnF
r6ofz39AH0afhFeha+evou93nFoHLRg8Stj4p/e6fux2ec+K654fvNdqvsQz
/fVenTfe0/zFvyqu5RtfH9r5bk84D/HY1u29vj4HHdld8oGIc+c3lo/EdZY/
CX/nfsKDqnNn3PHm7B3zPF1ojaM56P7TqX0Au9d66HkUJ++5EN+FR3Wf0gvI
J9H0pW/1uPnwn8FgMBgMBoMN5bXCA+IVoTibjWWjx5w6Hj5YPJzj4BfkyZcX
gH7CfoSO0mv5Pe1TTr8zts5j1O/jPfAXOx0P9eUdryI72z4Rz1iPQ7/Gfq3j
Ws9jozT5y+r/3+p57RbitdjpXtfzg+4DcV/1c9fVeePf63jPdb53Gq67//HY
q/Gn7/b7Gbrv3SeeF8fBh9Jpmh/oicT5mR/kTeMP0F/HpTuld8Gnqz/kc88V
Perc4x0MzoH8jt/9ztCuTPKenm/r8HZ5z+2i428s217zns7Teau/pB/yUfJj
mn/4i8MjfTia57/21aFt1tlU58q4V7ttNb/SUz2/JTtzyt6RL7TaE/z4q3mp
5h+fnY6j9dH71kX6A3a78cY7G1evrdNT+WuDwWAwGAwGgx+O/NP1ffuGKZ6Q
/YrP8Dt2HruVHef37Dfv1/+tvNsUj1gbvq3iFH9XEU+Dt3HcZrff3e3Pqf3k
OmTfruOhd9rod6d4LfF+lU/eK5w6f/qImocVn0yPbH+wyqdt6g53Ou6HHT1f
7ru273x1zfhvNrrMqfvefYn/cD/hE/EWro/9r/sJn+C5t+81Tzie71WdzCoP
vvkc6w+eU5ykOhvhOYPBTfQ8eG6n1inzLdzbfm1sTNkXu4XmJ/MZ/gzvJh6D
3pCOTnzN3p7/4UdxK+Z/eZPM09Zl6wj7iX1n3P2+/e6fSh79afvBelHtNH52
eZ2sI1N+67mxjqN1kX1T/YnuU/7G6k9mF+P75z6/YDAYDAaDwcOO1e6Eq3zH
57o/f0rvSV8CN0pjx/Fnb1cHWeOhbpWvY3/W41cet/K5lZf12njQq7JndzsO
nG5gu/zufiO9RtuXPL1W72l/QAc4pSOt4z2lp71dvfA6rPHY6+4zzwPdTNXb
0nHYv1cUp4lP2C29Fr2Y5xq/Se/pfq//V/lq+177NfPHOr2n41a9J55zr/mT
YPAwYvUb1bpGc/XLvF39XLuF4vXrPGX+xMOJZ2dXsFfMt3ONz2FF65D12HpW
/ZLG3/pM94nnlP9S/qZ18SLVbrBe/fHYrm+xy6xHnou5x60iuw2Pq5/yVq/m
f3q3j6/Pq93p+3OfVzAYDAaDweBhxSmeTr77ts861+04+xwojxEekD1KRynf
nzxR9i/yPqlnX+vbq8PS9AfPl3pN0/k9p1DdFbyN+inyLcnnaT9Z62JB+Qfr
8cWFGxfxu45fz6MinYX+yYuo37X+aq3/tF+oLlYdF/GGzr/WwZI/9B/+fmhf
6vn963HkCzP+9j2Oq05PvQ/lnTTeU+Msnm67+VHpihy//i8UT+m50f/tojxg
xkG+TOMN6/XY7nnQU7ou6iO3+/Raz/spf5t9KJ5U3SB5O+1r8Q3qW7gP1Edz
HvLI7RVPEgweJVSvhx8Bylc9d//2C81z7IU2P57u8+a99wztXLdT2B3hPXcH
1am0ftBftnE+29cF+czlXcbzWfdrnUp6XP6zb31zaBd73mn5pv3OemNdUQdP
/U/6UryofLi3m69/t/CXx3Z98RtjO97zzsq/zb6QV0qdKf5k/LD1mV2UvNbB
YDAYDAaD28Na350eDz/Crt3u8ei27EfYy3hFcWv2deqCNj5sE+XH5y/HK03x
P+sQz6OOEb5Wf/GzPzW2s8v+fXkLH8vuVyfI8R3HOOJ78Hj1POzb6HnUXap1
jhxHfaIp3o0egL5ip7zwdtH/GRf7Ezyt/Yx9Z+X1/N79McUzul+ML76XvV/5
UseHlT9dh/V4U4j3qzwt/8Gt3p/qS6m3W8d7Cj86thuT54Un+cTYLiz+dGw3
e50FuhLji7d0Xu5LvKV9qfvTeLvv1cOw33Ue0XMGg9tHz1Ore3K9152Zu1/7
jeYvOkLzFR35qr/opb6OhPfcXXQd1EVij8jjI86HXWf82XfWAfwlP5v1jh3R
/M6bdY/Ygew160vjWV/s/lP+O7yn9QoPiwdl3841jsZlNe/Sue43xAsbh3Y/
X+p8J16UH4S9nHqTwWAwGAwGgx+O7CRxpngUdiL/dP3+Tv+n2surdRc29Z7s
5soH/buxPdx1HOt4oCms+sPKZ9Jjyq+oXoxxwFeyT9mt7HnjyE798Pc3/6/y
sVXfUPWe6/i4/7+9e1uy7KrOBJyP4D5ddDv6HcwZDHS+QmPcB+Ow+xUwNMbG
4Wg/AhhHGxu3zQUXviIonY8lgUASAqEqqUoqqVTnc5VK4mRAdOPo2Gvub6T3
SE2tvTN35sqsGvPmj8y99tpzzbXWnGP88x9jtHG6MdcPnNkzvWfmNfFiHxza
ll+D92Kv5+vgr+IR1VMau49ZV7w4rt+N+wiNb+968NfL6j7x5vl38birPpf8
uj8Y2nadKP7RuBl/vIjvrXof8QTiGJv/emLbOLou8aW5bjKdjrjUHK8/9TxX
WFh4+BEPRq//iaEdj/0i6w3+q+af/UF8vPXMOrm4fj69bf2xrtiHy/ZU00Ve
nduNrwbf+YGhXdmm91zkTS8F//rJoV2a77cf2/z00M5H/MzUz4n9wEU9wOux
roq7wBPL543/V7/LOBjP4kELCwsLCwsLCxvSEbK38FD2j9UnYkc1XuRy8B87
rRuAr5G/if1Jryge/vNDuxZ5AcXbruv6xe3TD8pX9VdfnrVLiZf8duSvWtQj
Ho3jjFdGdrjrwCu7HvmcIN5Uf/CJ+pH7Iz5ePkW6iMZfXYnf2S3iLf1Ou/5v
hC6WX+J44yr+n44h5wFrfuypiF/3HHrujJvnxPOXMT8/xg8a3/x/fHHvvFBd
Ef0ZQ/33nEH6Xu8Pv673/Bhf951fpP/yRrhuet/8XEHPhefqfUO7FPyw+ET+
pTi8ll/1TPiPVW+2sLCwsPDdEC+a192ePWO/V70766k4BPYH+8G6hAel92SP
ZF6WPWK/z372k0/M2vQ8oX1Q6zGdgPxAR745a+fDXsL74z/Zpw3P71ne88LC
wsLCwsLCw4J4HPvE9907a5dSnNjRyKfZ6na+NucFX9oxDyn/od+3L42H+R9D
29KR+Xvq+s653/Sr2Z7vYbbzjW/mueR/GuPV/H7j087F95v/cDzpHb+9Y9TP
Fm/5/fgdOsnMj9LlyJ/anpen4rra9y9vPvTgrF0L3k19U/4Ofo8/5Lp6/KDz
0BfjHcW1OQ7/6HP5wnrn9by7/t74tH2Brwcf3PysU6EPxnerw+G98tz3eErY
413pRfg3ePZ8HZnHp5tq4/FE8Ofe/9a/Z4KX1U96z1Xfn+JJCwsLCwv/JdoH
ZyfZ77ZOydtpvy3bD/K1iAun5xRfL0+E/JniEuQjxSuyA6YeD8jeVB/RfqS8
oOJe7PdmewQPKn/NqvmqCgsLCwsLCwvvNMSn0OfRj7GjHMc+pUds/NaJHeeN
l29JPJJ+TB13tF/Y40ez3T+G+Kx8nnXxxD29Bl4y90e8tDxU9BU57yU+Ey8n
/+QjD8/ajeAn5RnAuz1w/6xt17HiB9WLpQuRtzXziD4f4xvVKX/7l7N2fZv+
1HhkXrbpVs/Gdbkfvuc89K493hWqZ7/o33wj8qPp76o6Xs9bq0d/PuqG7JTf
zIiP1f/Mf3rfezpb/t9U72lhYWFh4f4iu1LeFPuE8ujIx2I/Hh8q/0GLU3g+
1rfFepQvBx8ov85BqX/Uw2Z3vxz2k/xC7XovxH6x/ze75+ngQdlb7A5299TX
VVhYWFhYWFi430h3Ke9S5j0hHkM8fOMzVucl8EH25Ssv4OFE94sdTYfadLrn
QqchT1XTWZyOeLSMnxnaxc2f/mTWLkZ+VHVNnaf5KS8En7ZYB/ZUoOcs/38M
+UfOn+tmqKtAX7ks+p7z0Fv3jjcueEr1PHJ/+YP623jMY6Mob5i8ak13u/v6
KXSongP+l/66Dr9rXNxv+l86l6xv3em8U1hYWFh4OJGdap2y/9ry1bwa+Xjo
IPGF9vPkgbGu+p78ouwYdo282tafqa+f3U13IJ4987l4YuuruP6NeVOfU7y8
OJmpr6+wsLCwsLCwcL8Qr5njguXjZP/tNG4Vb9HqsZyJOjz4rsrHfmdh9lPY
4+47/lIcufgtuobMZ+L/6DD9/TtDuxj+DN50VV7S953P7/CLVuVPe4i/xVf2
jsMH4inl4zWesPGFNw+M/yLfgXpk5hP9dR3udxuPe6Oehbg8+VfdH+f1/6mv
s7CwsLBwGmRfLO7bvRrrJ55TnUp1K8WNyKcpTv49Q7uw+bGhvRHrKrsAn5r7
gSfd7/gEOgVxI+rDt/Xxe9FveaPoYOW5ETciX5J8PBVnUVhYWFhYWHinI/st
57Fs8UQ3w37EP4ydjy4LT4rvUBeb/k/e+YMeb1S4XuS3/P7Qbm3j83pI74AP
pHOka2i85YuRD2uMh8Q/+n7WRfq9Zfs3hvwR9YjGjp/6Pu0UxSPSe+b9Evss
bT/kB3F8+V2FhYWFhaug9UXeFjyofUt1gdRFkg9UPh5x4/Jqio+3DuMNs06S
LqDHi+41qs9kf9F1iJcQB5/zAtlvtj+JL3W8vEN71e+c/6fivQoLCwsLCwv3
G584Omtvhp0kL3yzS84FXznGy2Q+i45OXWl1OH2eeU/23NTjUXiwUT5KemR5
E1ZFeuSpr+dOQf4mPhnP7HN+Dn2nPKniF6fuf2FhYWHh4UL1DD85tEuxnqiv
KF+4fPXqF6qPSA/qe+zef/71rN2Ov+3jT329kP3i+ug88Z/yV7V691eirtNi
3fjXop584yVfj+sU/8Ku321/5UfHU6uvWnFfhYWFhYWFhfuFTz4xa2/FfvZi
fPHJeTzNtyP+dNnztnpGZyMfvTzs7NR8fPGehYWHH9XdVTdeXV2f08uoQ0X3
yS+auv+FhYWFhYcT6UDlv2THWofkV2k6yJOhl8QP4g3pQK1XeEX5e/CCU18v
tA+Mp8VvNt7ydOwzNr709cjHTefg7xbv/0jkEXUe47HbuBT7o+8d2sW1nbew
sLCwsLBwHPFtd1vcteuVPz3/X11rcbrsklyHuXd+vKd6M/IqsR//fGi3t+WV
n3pcCgsLd450MvzHVo/h2LZ9DfsfdCfqUkzd/8LCwsLCw43yquDt8J/0jHhO
vJ/j8KP4Q/Hx4sBbnpxr8/j583P96PJ6gP1CPCg+E4/ZeM/HNs+dHVrkB8ID
u96zZ4YWeYXkERAXTwdBZ7tqHQD2vnwExn9VfUVhYWFhYWHh8kjniH+TN713
vP1fx02V52e3+IdDezP2gZf9Hnsy5yVk94hb+dTQXpvn97y8+dCDs3Yt8gy1
ekdbef0q7riw8M5BvKb58bFHZ+3W3N88GflUm77kuXm83T2RV2Pq/hcWFhYW
Hm5Ur1OcO/6v8Z/HIu/KR4d2K/br8HzqJfk/PpDf8IGhXQm+UH6nqa8bymNF
3yDfpzpJbVye3vzs0C7F9WWeWP1I/29850uh2/zLL83ahXncxqlYx+URaDzr
dl0DO+H//mrWbpbus7CwsLCwcA1IT9Tbl7SP2/zy74adk4+jh5QHXR1mdsTU
19lDfKR6RfL6yA809n3jpi6RvD/ylbNf8MeOs+9s3ORRynZQL/69sLDw8KP3
Xx3ZNv9cjHhB85C8bGP7T4WFhYWFhcsg/pPd+pmhXYy67/hA/Bt/odUPurz5
haHdDH2j/E0trunNyNOibiI9aKsfdHB4PHY2e971tXxWL87z07wSukt+jXzd
8tiI22rxHOcjr/divcmLEdcu3gsfar2nI5l6XAoLCwsLC+8EpDcS34GHy8fd
c2TWLsT6j/fMcRfsHHWfHdfW+xthJ6hvvl92j/3n3ud0mupbivNhD46dXz0Z
dWF8D5/hOl13L195G78fxvny58V3FBbe+SjOzTwCPze0K+GPTu03LuZ7Oz6f
9y9PPn6FhYWFhTtD6w97XX1z8z3+898O7TvzffxTwRf+3tBeDX3j54d2LfSK
1gnnO2h2LX2CuC91642HOkcQL9zs+zNz/cRLoXN9/9AuB4qj97e6AXhT+b0b
P/rigR2nwsLCwsLCw4R4yhaH8a1tvKd9S3Etv3p71m6EPdP2OZ+N48WNsIPw
d+oDHX181m4HH9iL71g3+j36KfvVeMZm35yNuJ6d5jN1nfn/rrN3XnZOy5/0
SoxjPg4/u9fjVVh4mNA8Iy7NvDV1vzLm+WfV+g8fH9rtmCfoRNadT4R/p66S
+rf6q95C84+/MV8HrocfN/U4FxYWFhbuDu230Wua79nNfza0W/N1YqvukXhv
8fO+Ly+o84qHojMQ70QPar2behwgu1y/7TviMVv/f7D5W0M7H9eLN25xcM9G
/iz7mHSg4uObzvTEXDe7FX/PD7Me87OmHpfCwsLCwsLDgPKON7/1ofB3xXP8
x6E9Ps83eSZ4O3V31DPHM9gftc738prLp2N9Z0c53ufsIMfpX88ewh+2fOXb
+UXx+uwI9hgd5n6Pv/7++Eezdn5uD56ruPbCwhWQPqX5E0c23zO0C2v/Hfzi
mD9mPsQTmo/4MfzHlsfz/NK/b1/lI0O7MZ8vX4p9KPNmrse2LDb/9eR8/n54
8757Z+1SzMPq2arPZJ/Mfoy8xQc9r0lhYWFh4XIo3loeFvlW6D39rd5ns2tf
jnyh9Izy2eM18YJ0AS2//VYeUfmt2f87XdfWjfSgxoWew/qOF2UH2CdUx5T/
8YmhHZ/7Wc+HrhRfzO+S97/pU45v/tHQLkTeAOOFT+VXTD1OhYWFhYWFBwmt
x22dfSDWZfuIrZ7htS4viDe07uLrWp6g07G/mb/36COzdjO+Z3/UPqZ6520d
v7D5vqFdCn6U/ZXPa9+U/551kzludK/q1BsX2DtuUW97POym3vFV17mwcDt6
z/lH9Ou7Pa99GHF7dC38FrxmnmdanNtT4b80P+Tp8JPoYeRFW7Vf5o28b2W+
FEeof8ZlbD6SX8y877rUre3lQTHvi/NrvO4PJ38uCgsLCwvXg9Yvuodf/HzW
rkbdvWZPvxD7Zep1qotuHRHPDeXPsn8n/7068Q8+MGtXgyfkJ1jXDoou1L4k
xOfShcq3xf9gBzT++HLETYifV2eg5Q/Yiqen36BPEefS1v3vxHjjjYsHLSws
LCws3M57qiOMdxyLQ5fPsq2/D4YfTu/Jf3Y8XZZ83+wjcaptP/e1sG98X/y5
fuEhWl7SH8z1SG/M90VPh+5LnvWe/nOvkH3Yy0uOV6afkgeejkodTP3+2NDe
mNtFX4k6knhl+VR9b7+us7DwIGDm3cxnY99rOgt5N87F96B5pM1v1+J95K+1
+exo1G3FN5qn8JPmPefln7z04tBiv6b5NSfje/J7mefMG/Qf5g3zaJ439ZeO
xnnzOPidxtfeG7pz/pn5tpe/k5/HT+3tdxUWFhYW3hlo3seD2mezD4d/Ewcm
z7/659YdeSvty7XjXo110v/FFdBN4P/whOoUOG9vvdtv7OkrxI/Qf7AH6Dbp
RV1n40fvm9sjz0Qe0d8e2s2w/9v4/+NcV/u14EUd73xTj0thYWFhYeF+In+4
8ZBPJr3PM8Fj9nhDdg99FZ6grbd/Eet0O89Tkc+G/6wehnVbPrnWn2NhF/gd
fvhnh7alc6JDWqybLq/Oq8Gz6je/PPOGrnfx+p/acb5A8Z7NHmOXvRE6MPGk
bdy3dFS57pG4mo15EydrH5fdqD4kXezUz1dh4X4iHrPlC/tu9711XJvXzgWP
aB7ynorbNg8szhvXw//66NBuRdzf2TNDi/nK+5jj/8Spqd8qrq3t/zwX8zF9
i7oR4gTt6+BZ6eyzPr+XdxjS+ZuPjI/PXR89jn0Xn2c+mH5/6uehsLCwsHB/
0DpArynuKufLos+kc6QDFS9PH6m+fFtvjoV/wG+gE7Ve21/E69FBLNr5Byf/
ND6U3yLeyz6rfU3XyZ8QJ2K87KfyW9q4noh9SOsyHtQ6X/lBCwsLCwvvBmQX
2IdlH/Cf23p6Nfi4Mb+56YFuBM/I/oD0nPg88S/0i/gCcZr2idVDzL/nPM6v
vhK9kzzjjbfY4iXYB/ojfob9QLe6mF/9L4JHGRtXdpV9VTqtZq/dHzyL/IPy
IWVeme6r1S3JvPPGBn6G3SQe1XXjg6d+zgoL9xPNB2PvrX0SOs/2vl6Kea7p
sG/G/oq8GuoW5P0YaF7h59GdPHD/rF0J/bx5gJ4l5+Xgr+if/L/04+ZlfiG/
b6d5gX/y41m7EP3MOnXnV8cXn+tzvGmLO7wc/Zr6eSgsLCws3F9kl/Iv8KD4
OzoJdnbWcWa9p/yX9htbXb9rsd9P7ymuW14s6zGe0L4d+/ygxUexI3LdV+Nj
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
sPkTb4Y/gfds9+9c5ONqegp5q04dev6xsLCwsLCwcP0oX06Lcz8T+6r0COKu
xKfZ35RXvuWrOr6N53zP0C6ETpQOhZ6BDpS/lXlQ/oQ8X/s9Luxj+lT+jLxc
8gW43neO23ss/E3XiVf1O+J2+E1TPw+FhYWFhQcL5blr6+KZWHfonOgm8Z5t
P+7F+fr13ahbmPPgyVOjno71ufEHz05+3etGfGVeh3uYdVww87j+xsfZJ7bP
yw6wX2rcNxbaj4LXm3qcDhri6z3/4t2z7rn3fXYrPrp4z4ON7o/8k/wNvKc8
uPLl+r98XI0vPTv5dRQWFhYWFhYeXORffWpoN8OuwOfRddpn9bfPm470mYhD
wROyN/1N79D28V+JvDh0pPJgicvDCy7rr+wW6QPkI3Wd+itPmutQ39F1+tzx
/MkWr/hynN94j8WXOA5O/ZwUFhYWFu4v2ke0TuI96T7FZ1ivcr2jJ5+Yte18
z2J+0GPBM0x9vevGVXlP/MvYuot3W6y/cybiY+RnpcvFn2ae0/hPPU4HFdlJ
dM/L6j49z/avi/c82EjnKR9XjnM/8s1ZOx91BnzvT4Z2/Y6dvwoLCwsLCwv3
Dtn77HQ6Bfxes0NfDd6zfX5yrmM8G/F4jlc3if1p39bnOd9o00nciHqs4s/5
f3vFg4oTdP0tz+f14HtzfVZ/4zfxnvhfPCfe1/f8njxkOZ6OnU/vULxnYWFh
4d2J4iLst0H5u/EA9g0ffGDWrsb60juvOGLrsfVu6uudGpflPY0X3a384C1u
5MnQf+I13ze0S2E3OM/Pfjpr+5ef8LCh+4BHZm95D4ynuOeWD/TW/O/7w04t
3vNgY7Of34q6Oo3HvDfmP3n4c11z+aXki2A3T309hYWFhYWFhYcf8aHyxfOz
7MfiPfGd8l/2eE/2a9OrPBdx5nSf6gGJY8G7sof26jrlA3Cd6ky4Hnyw68F7
4knxuC1+8Po2e63HezovHnbq+52Rfka839T9KSwsLLxTkd6p5aV5PvLLPPbo
rPXnX/on/GjVdVkvsoMef2zW3gjdmbqF9mn9X56fzHsWH7catn3kNzYffmjW
rgfvZT9cviS8tPeknv/DgepRtf2DL0Y+fXUE8vHis9jd9O977R8UFhYWFhYW
3j3Yq8eK36M/aXnJrsd+fY5Xsh/PL/B/8S6trvrxsGvoW+QFlZdzr6+XPSa+
KtcVNR4fHtr1OH7svPhDdaXYcY0/Pjh52vl57o99+an7VVhYWHino3yFdE32
23p5DvFv8klP3f+7Bdk/9k3pFf2dec/CwsItpPtU141dLG9uPp7/gd9WV4B/
UPXKCwsLCwsLC3eLdH/LHs/utz//05/M2sXgQcWJfWho10LX0nSgj4QfJ4+Z
ukH8QbrRdesQ/9vQrkX+obHjVj1/rpeAVz392qztfV7TMXTf5JWjR91p/cyq
Y19YWFi4Gppv6T7VOVqsK761Ppm3p+53D+mxrH/sgnwddxoW71lYOI72C+wj
jOmi6Xnp23/19qzdOPDzYGFhYWFhYeGdj5kHbfznyblf8ELUcfj00M5H/aTm
7z00z+N0OuLgmy70wtr5T7rNXpxU06VeWpv+kX+b68bu9/2B4vjcF7rdfz+0
5ffR8Z1TX09hYWHhYUX5VFoc+1NzHvTMofPvrR94TvuKd3o8cvGehYWFhYWF
hYWFhXcvfnxotyOOvflzj8/5zlcij2jLm/Xi3M/7xjzf5neinir9i7rq6gw5
/7r6K//mp4Z2M/Lp89vEq4+dxz62/vm++J398gNbPqxTEWd0/32zdjnihZr+
9LXNPx/a7cizlfvfO3+7j9fWfh8KCwsL7xb87NAubf7dV2ft+/P18pn5Ondw
8qKMYS9eRD3AOzXvpX3DqftRWFhYWFhYWFhYWDgd4t3EeasXL8+nuuj/eWjH
5vzbY5t/MLQzEff+4x/N2vmIp5f3Z1314Pll6hPlPKf5b/jE0Vnb0rmOHb9X
mPOH0rXyR+UVaDrW72wefXzWbnf7m/82zlD+1pwXtbCwsLBwORRfYL0TZ6Au
YNOBXop1tHee/zK0K4FTXxfM9f/uNKx4h8LCwsLCwsLCwsJCSOeoPpI66ni4
3x3a5eDn8J+NH/1W1IFU/73pP69t/quhXQgdKf1hyyd6NXjJvb4u8X1+P/Og
e4342uz3PvnErL0VeUZXra/Eb216pFtz//z25h8P7eqO84IWFhYW3u2I9xQv
LX+IefffDe273bh3dd7bOnhkHrdwar5+/iDyxqyrv789tJvz+I2+zl+8gXpN
9hX1R/+mqqcnf/fYdRQWFhYWFhYWFhYWFq6K9BF4zj8Z2vXIB9r8kVci7prO
Uz5K+T7b90/M/akXNt83tEuRF7TF1720dB32dWGOi+cn7tfv9+IN8Z/+ln/t
5/80a32/2PXk+PxWh/hG5Kfbr+srLCwsvFMw856Z3xQn0XjNb237vOXH/srm
2TNDS/k1z87jKM4Hv2idxJdC8Rfi7Z0v91d+bvM+3hDPqW7hbwzta/N1+Kmo
Q289x+e2487vmv/Uj7F6hK2f16NeinWNnbDfcRqFhYWFhYWFhYWFhXcu4ufo
WtQX//JfztqLofdUD6n5SVfCL1P/AW/nOPqSXl3c/UK/e9Drnfd40jGUtxU/
PfV1FBYWFh4UNC/K09LyRr8WfCKeTr6Wtu93JXT7zmO/qtUNenXzZz+dta24
d+fL+TPFHYinaOvhA/P6eqc3Pze0K5snTwxtvo/1vTj/fx3ay3F++3d4RfuN
6hnhQ63TeMSHHpy1a/N1+/T88/sjn7Y6z3SqY+Nqv05cyO8M7cXIt6L/ve+L
E2n7p7e2jfNO7/dUutXCwsLCwsLCwsLCwoOP/J7fG9qN4AnFqYuHa38/vfme
oV0IfYw6uPwm8df8Mv7RWH60vcJeHaMcZ7ffepNl9Z4Z6Y3odu/0er2FhYWF
O0X7cW2f6MH5/zc22jx6NPK9yEPSOw/+1LqH58Tf2e/L37P/9jdfmbVTkU/b
5+raOb//W5fFV/hd35dvpq1fz891nq9t/vOvZ62/z4d/tT7vdFzxnPLfvP3L
Wbsedft631vU1R6N7+32PvfGv7CwsLCwsLCwsLCwcAz5N/Jltri+U6FPaXqZ
q+HPNL/n6fA38Yvq8GR9437V5eEPQn5m9nfl39wv/hN/aRzl6xR/2fzbG8F3
/urtWbsR4/9PP5u10rkUFhYWZszxCNaxjL38nRkzb4j32yvezXpl3rf+mvfx
rsvWa6d7dZ6d9gcf6/qNo/qIY99XHzGv//Jjr1qvqHjPwsI+ep+8n03f8Hzk
6Wh69+/GvgV7dOp+FxYWFhYWFhZOjXhD/Bu/A8/5m0M7HTzoF4Z2c17/6Jl5
vrGz+15/aFXEg+40Dg/P24vDy7zn1NdbWFhYeNjR/hG+U3z1bs9r3Ws86TeC
P9wv3g1vSA+617/X+/2mYz27+X/+btZej3Ucf9Jbz+zjOc744T+tt3hd+3+9
fDA+L96zsHA7mifky6CzludCXg/7/+ZL+zv2N7y35lH7HY7nB8iDLL9+r19N
//5svL/5c3ax/Me98ziO7iLzt/o99X0oLCwsLCwsnA7ZC7n++KrIrmD32Efm
d4rL4yeKe99pXsvDhnQ4OY4R7pT3ZC/ul162sLCw8LBgjj9fF++53yj/DJy6
P3jPlv/m9aiP9Nijs3Yr6jmJ78jfV4+v1Yt6LXgVvAt9bts3fXSen+CV0Tzh
rS7Ut8KuqPwvhYVbeXO9d/L2y1fV+x79O3v9E0M7Prdnz4XefTHe663Njwzt
xrxe2rH5e7zdPm37G69H/mN11/Lv41/b/siz2/wGx7XrezX6xf/I+e+tA22/
5gebHx7a9W3zBV2sOnA9f6X16x/nf29s6K/8YPfdO2uX5vb/sRgXdRTkcX7i
6Kxtn9/w0vJi5X64v/wI824b1xNx/b3xNa9C/3e834M5z1bv+fE8OO9U9er0
e9l4iMLCwsLCOwvls1RP4Q+Gdibsj7a/2q9L0EP5Me0rf/VvZ+25zXuOzNqF
qN/a9nmv33V1W+U3VT+jtx/OTqB7YY81++p62G3l1xUWFha+M94pvGfTVV0M
nLo/eE/jal/z80O7Fv4+nsX3+J0fGNqVuf//5Dy/6n1RN4pf3fjOZ7q8yTvj
xsbvDu3y5seGVvX+Cu9u9N596Yuzdn4eb/XKnEf74dLnOfLNWTs/t19PzvcZ
LoTOAX/oePYtHrL5GdvzDsu7kflP9m37/Gbwtd7vzP/996Fdn1/nk7Gvkv0M
x9GF0qs//tisbc0X9m/UgWOP9/qP/8z9N3+pf6B/fzq0G/P+nArM5zeueEz1
Z52f34VP3Zg3epbG/74+z//8XPQPPyvvtOvIvK04tU8O7VLkyW7r0Yvd54Ue
xnmNu/k9Ix5Vnd3MU2Ze1vGwd77GL1+M9Sofh0/O9Sc8N/l3FvXFW7xu/ny3
/pnz3C36oMLCwsK9RvN24ydvRp0E+5K9/cdl0b6vdXequu6HDe3Psjf8DdlB
Vce9sLCw8J3xsPOe1kv+pvrvU/cL7ymuVB359w3tUuijmn+8lTf1vUO7uI13
EW/b/O2rUVeR/fD7Qzs9aj80v/8val0sLHwHxMPQHeAZl82j6z1Wt9R7RrfI
zlenzffks2rv9Zlufg78WE+3jf/0Of4znwe/Jv7M/JL5T/Y1Xtb38vnk5fK7
y/K3PV0q3lP8F95tbNyNH/5TnJfxMR744bH9IvkI6FTG7r/xM55jeQyMJx61
h/a93C9IZ2x86IPx0G1cfhh5EPL5rJvuW7veI3Fc0/88Hvofz7X+423pftv+
3vHAPxna9bjv/ObfGdqL83XrVpeXzbpafK//e69a/y7H/4sHLSwsLFwPfnRo
tzZfPjm02NcVZ9H73qp5L1etV3CnoHHK+5g5jiSva+wNaP2ruI3CwsLCd0Z6
P7wnHm7qfi2L9EfqzTdeb3uelP3Gjw/t9jyP9yuhP8JT8ufl+7TuGX/Xgyd5
5OFZu7H5V1+etZfifOLm/T2Wz1Qe8anHp7DwIOPRx2ft9lz/99qc/3l+x7oE
84H3t+nmzkV8l/cbH5X1eOLRoTpLdHr0jPg9vFvOI+r75s0H7p+1K+HP6Efu
P36t9ets8Ll+z/nML3SzPftb3o7Gf13cpv97+5ezdn2ub394nq/qpRhHmM+L
F7PfhAd0/b5n/PWjp1P1PfdlqnxZdDf0o+6v6826SfcLj5nrEfr+o4/M2s05
L/rUNn7X/Wu89rU4r8+tX+IWfd6e80ubf/fVWfv+/D16JO6j+hY+b3z0ifk4
fz3uu/y43j/Hb8xb26d9JeIoPH8fHNre1YHwvHseMub3bVV/3n3N+by9d85v
/9P37Lf6nr899/qT9zdcT55nct4HuNPrKiwsPHxovnj4oVm7HnERdBg9Ps68
sywPx1/arZ601/+pxy/zxNbttq7dCl2M6xeP8j+HdjnqOTiPeBhxg7XfV1hY
WPjOaB6Wz4VOphcnPnX+MesD/43drX77X//vWXs5/Oipx5efIk4UD/DbQ7s5
19m8FHwDP0e+m7bebfEQ7Ab6FnlD2Qn43jH7Qhzp1ONTWHgY0Hvc5penw+7c
6fn4Afgb7/Mi7/OdmA/o130OfV/+TfOffQ+8Ft2kOHvfN9+zl/GA/Brncf14
FLpU9VjxceZj58MT4tUyP+K86kdlPg3vLB8pfab9INdrXcp6CONnfn3owVm7
FusXnsc4uv6sw4Xi/PV3TMe5V5ifH3EDdJOZ//Tc4nfzfXC8+0j36X6O9cfz
go/FN2b/y3sjX1zOT5b7m/PFOt5zjQ+V5yXz5jkfw7rQ84aHta+gP1D+Azzv
T38yaxfjPerxha7X9bfn7Rvxe/KEe5+9h/TVrT8Xoh/O4z3K+YQXddAnor/+
dj799n74ffEpmffVH3+7H719I9fNHvWcZ3vTc9nj+yF+eIyXtl/Uu9/2o81H
vf2WjL39qsw702nnfBxjvPN+Y85Tsdv8FK7LdY7dh8KGY/rKVY9b9jzuE//C
fqn5QnyM92VVvhN6b73fu+1/5l/HjjcPOX5ZHjHP58aNv2r96u2vGjf74Plz
46hfzkMnY10Uf5F1oLsdx8LCwsLDjuxLdutLLw5t7ldu+fXmWf//wtBuht2y
LjtoDNmH8mQ2/+x45KezL3ZQ9KrWb7oVfgK/UJxirptCByouUB4C6ydelz/C
PsCPjq1zdFCLf9e6WFjYf1+29IftvTu+tB3dQzyAOmy9OHP+uc/HkO4NL9Y7
zjwkn4Z9E/OJ4+TZwKMs8rVbf9vHWeRLvhVx1uKp2e/4B/rCxs8e2zZO+AZ5
PPDEbdxeDb0J/u3BB2btapwfv2s+FXdtXBf3lZ6I+ZW/k3V7jUe9EteX+Qz+
u3G0zo7F6e/0+Vnc73oh+Evrs/7jv8UF5PO5L9YV8ehj/qfvWVfEP3pfHOd9
sW47PvM6+uu5Uscvx8E7vulKn9qmG17XOGekb/W8jL23bf2/Ebx5vg+Z7zGe
eHg8tPsAvb/yfeO12We5354L709+3z1P+uu68Kwb8+b3Ms+rn/L3mlfcH/Nm
b99I/zw/+pn3F/y/9/xA/WnX+bVt/TWv2T/p3W96WfdP/oyx50zeBfOhvA5+
17xvXwuPgUeyv5N558w/93jdMb4388/2ucxXzu+5dt88t+7Xsr+b31t8vHwY
6tbhy/Uz6531j33d7ssbEbeWj19V/7bs/OF3e5/zh7xfPf57VbRe5XUpo/3H
3ue9/a+8XvV4Q/yc59U6vtv9QPsxzR/dvX5F/7MuPiPeselYb27b1x37HfmA
PG+ug/0x9n3f48f2rsN96+0fyXOU9492O46FhYWFhx3Ns+wHegR+nflVXjD2
LN0Af1Mdj2zXrBvN+/az8IPWm6nHM2O2l/lx4hKMqzrPvqdOO/+QntN1Wr97
eojlxnGL96x99sLCcTS/sYe9v2P29J2K/AF+Dh27+TnrDpp/dGlbPshPDO1C
fL/3e8a/2fNb+TvNi87vvGMo34D5tfXzhahXa31UR0ldh7YOnop9K/F+9g3x
Qs7j9/Y67tr9wB/LjyJ/6OI6s7GReUmId7Oui1PI+pf83LMX+Kt4DTyE7+mH
8aYbyrog6zv+yv1lpzhO3jl8lu/t1ThD63lP39pDvAP9Jh4sr8N4SPfTfcjj
7nf3Ku5cv4yv5z/rgfE77pf77/3HJ+AZzQP59+yPiJORT9Z1eg7kB+6Nv3nB
/kwvP8XYvGM87bfTF9O993gR4+M6zQf2geQpoSdQ/87zixfF89KZy1vhuN78
Zl6Sz12+XvMdflt//V477uXgIT2HePWxedV1LfLOx+K++T3+RHuPTkf+J+Pq
uu0vGDf2NB5dXJT8Fp4LfCp72zxhvcp2M95Xvq9eHmvoveU/5fxS9uvuv2/W
Lsd7o7/WD9fp84x4RXEdrst9zMdbh9z/3vnVDV+8njeDb/e8967ffC1ftnmK
fWR/CI75h+aZzw7tUlxvfm8X79NbkedLPZ/M8+H/+K25X9A8g9//0NC2Hwfx
z+Yd8SrywahLa7x9z7qb53v6ULod1+e++D5+2XzSm68q3r2wsLDw3bHZOVfD
rzDP8i+tQzn/G/u/p9+/29B6xc7nN9v3p1/hV+b1id3V0zvsFvGeU+WpKyw8
zEhH4f3cqc5sp/sWBwWtD4e1Dqvxx3uYZ3txC5nHgPISiKf/xc9n7Wr4P9bP
ZXUju0X+FP+XzizXQ4K9fS9+Kr0Zvw5PKU4k81/+5jdbb/iVnhu8GD1hju/L
1/GTH8/ahdgXNP7Nr7we+l/8SC9P7boQP0T3Sx+5bNyLccKfWPd9bl7A1/g8
80f7hX4X/5b7iwfx/8arfW9bHIrnwH3Nz0/mGe034K8cjz8y/n4nj3/bVzne
5WuXRfvYzoNHxKeIyxlbB/D+eDo80eJ93v784DmNf4839n3jga/Gg/X26fTb
eobnXHW8jDderrc+eO7lz856ROPRvn829Mk+xzcaB8+deYXu2XH2y+SnlhfE
c2m+waeaN3vX6bk078hXzJ7P64p+tvnuSvDn4iT4X+rKmk/wW+05+X7oqPGy
eT2yj4gf53fk4zLf7/01zp7L3vW7D56Xdl0nI4+zfM/6jc/kJ2a7x/jZB8Dv
5n0uv2ucrQue88zX5v3SzNOLwzOPyM+j346zrtCvt7j+Z7ftC5gX8v1xnqxX
z3nZs13oOc3993tj72Pxn4WFhYXvjOZndkiOZ2E/5HmU/VK8Z0P7kfal+Zf8
OnEM9vezHWrc8cl4lnXlEbDeZnuisLBwHM1/7HR6DDr5Zf1E/hn/7rDyn3c7
8kvlc9wvveGyyL+lL8Rf8Zuy/5W/z28Ud83vwvvleAWIR1nU552I7+sXv7mX
nxQaV3qkrJ9SR6nZI2cj3+he2yWLeXZfXzmfnXhI/nK+D+YFPA59HHuN/ZB5
+Z3ye2OY+Tc6QZ+7/obnggdjR7pediY7qPf8eG7wTHm/Fq/jefZ5zpfp+aeX
WnV8Mm+L1/H+4Ofw8mP8p32Exn89GP0fe37yvgW73OfidRfzUZ0NHWRPJ7Yu
NN72M+z/5OPkG3GccezFdRtv/c92M77QOMp70tOZyzOcdYj6T7eQ+61f7p/3
Vh4WeaTt7+TvZ/sB/+368WX5+aRfFk/Q8nvd7NoN4lG8p6vqHJbNi2ne5td4
T98/tMtx//Dg7s+ydk/vPfU9uuX2fLy2bb9l7DrzPp11je7Tc2T8/N9z5H7R
vdKXizfPv0fv2dvvGkPv97J8pvuz7PkLCwsL7za0nvJX2BM9O87+YOkHGzb/
8K3Yt8SLqNPX7P5Hwz/L32ef8Q/ph9aVp5x9xT7P9aKmHr/CwsOA3kc6H/Yr
v9p73Js32dfirflJxX8eLjTfi2eUv5FeZ+r+QXo1/t1iHtbjkf906n4uex05
73XWy3xmaBf3XG8rLhG/s+o6vairPbKtvhfk7/Kn5TFov/9K8Iiwx7usC/EX
nvesH1OPWB1iemjfk8cn20HsTfNpzhfsvjqvOpyNB38o+B77x+zYRR3YxsZO
xwdPguekC7Tv1fr/SujQxvhP9rNxbHkArnbXAc991o8Z/zwfea/Zn/jPXh7B
dSF+2P6D8fA5vbh+4PPxY+ZPz5H8GZnndj/oDdwH62vmob2v1l2fL7vu2leQ
16HdvycjLtp7qb+9ecc84Tj3caxuouPki+jV4Vt8Xk5HHPqyzz1ezfUuy5/x
H+0zeF8X8wucizi4sf73MOc9kyeh7XO9Hvyj/bDeeXLebvs6+mmfLfPp6q97
X/HddJnW1azLtn7Zr6AvxZ+a53t5tT03nmd+t3khH1+8Z2FhYeFyaP2yfyd+
wvyc12v7d1P3e2rkf1lP2VU/++msXYp9+l5ddXY/e9q++Lr6Z33nVxTvWVi4
e5S/go7avEkHxo6G3m/xh+Ld1l3/pnB/kE7r00M7f+B4T8jvMv/TrTR/7fEu
73ZY0HrGH1T3EB910PxA/uuyemF+Lz2f+2jeoSfa6/Xcc0TnhmfK/Kc4Z/nu
9BcPlnmBzHtmZE8t5g89F/YUXTKe0+84znl2Oj7GH38kvpe9zL6iR2Y393Rr
+I12/7fyVvbqZeVxooMUb0+nmOu6GX96QXqzXrz8upBOka7V7/Ej5MGkA8Yv
GQ/3zTi6n9bPPM/iP91/1+tvPDh+nE4w5+ccQ8fja+03qK8knn5s3sFX2S/1
3PR06q6D3yVfVk8nvLhPtMV/9vKXZt4N/9nrv/HnDxpfceL08Op3qVulfpn3
edn9Itfjb++Hecfz5L7LE6z/mTfUf+PDbrO/lOcj8QX+v5gH/HrokN0X9yuj
/Z487+fx93evXrx5KL8H3rM8XoWFhYWF74zZfrC/Tc8vPs1+dfFmi2i9Mi7y
wCzmNTsZefzZP4vxK+fCv7Fu77ZugXWwVz+5sLBw5+j9WtRTb/ffIX90zH8p
LNwL5H+JDxQXudd6sL1G66/9iIOah8A+h/UYHzN1v5ZFOi78237phvFCuW54
zpPA/lp3PJJ4aPac54odR+9Pj8ue6/FZ/o+PFCfU2z/Ba+DXxBEZf3yzdYjO
Ub4lvBC+eK/yIhh/vBL9XObHrZt4w7xOyg/pPtKTGp9enlj8qPfLeOFVT56Y
tcsr67Q9Z/pLr4svy/surj/b8fptnsJ7Oj4/L66XHybfJN1hvg7jmvnP3j5F
rkPfu37+IX0qft1zbr+XLhlfiB81z7kvvbg2/GJ+nvydeU/zfh5/61yui+78
xh3/7Pv5eNeX+c/e/gRe0nXKiyCvKD7Y85h1wq7Hc5Lz0vIXs94TD7tTPW1h
YWHh3Yr2s6yD4jnEn5SfvhyyJ6xD1rfGf94f9pl1mt2AF7HerStPtf3iqcel
sLCwsHAa5FfhUcQfq9swdf92i/xocYiuq5eXdL9RXDJdHL946n4ti54feT7F
m/d4c3qodp1XD8x92Ol1q7dEJ5Z1dOJZxd+K9+/lTRQ3JT9Db38az4oXu+/e
WbsUdWXkXci/k/ud66TslR4aT4ZfWhe/j4/q6QGMQ/NTXgg9Ox5pt3nz8cvi
8/GJzkt/6H65bs9J7jfeVFyYfA3em8X8uW/FeyRPqLpz5r3sn7kP6jHt9D7g
3fCQPVRv3fNmnlNP3v1xXL4f/KRV5wnnaX7UG3F/cn0s9aTsD3g+HZ/fB+Pp
fW7vT3+/Wr/plJ0fn8+fc5/Ve6P7Ns7mkdwffDn+0/+dd111IQoLCwvvNjTf
8o+qTtzukF2wWN90K07Eemzfcd3jbV9z6nEoLCwsLJwWcz2Usbxohw3t0/Jv
9yrf507Rfqj9yLF6yuywnn++bhyrY4W/lc+H/jPnE2THPPjArF2N80417rvF
rGfMeSxh5j9dt+cw68Xwn+17j4Vd6POsA/X8yKep/nQvnyO+jv2p/lT+nXUj
XZq8j/I85rhdxy/Wt7ocdWzGfsdx+C06gsY7PRs65d1ej3mT3rDtG30rrgPv
5Pcy/5nfW/yVuu/mA/F17pvj8W14RPd/LC7M79AtGt+x68W/LnsfMn5waFeD
D7Y/0vNvxKnDsfMbH+PvuaIfse8lH4X3hu4eP2v+9Z7SUXvPG396LOpj9XjP
XKfL8y/PLp0sP8/vqE/vPPhq80jOH5/vt/tUfnphYWHhztC8al2pfaT1YG/f
1Dq87nG2/spHNPX1FxYWFhYeLByLczxsaB3lnx40fxB/Ij8jPZb6JfxtKJ/j
fun15A/FP/T4TzwCHo1uKR+HJ8L/HNa8Cu7bYh6oE928mXgLfJ/jW37dLV2m
OHpxsOq0uM85H2XWbeO/xnhl9qa4dzzYbvN+uq89/s040AerU5X1qd5XfCye
f+z3czy53xOPrq7RWL3yZZG9Lo4/50l2fzL/2Yt/h/ha75G48sx/eh7kaW7x
+yfi85wHQL11+w/e6/we8k/waPq103nGeDsvvbLxycfjL3v8vf0s71OvDr2/
x/a9cr1K401P7Tk0H7bndysPr/c2+23mSyiuvb13D0eebflm7Du6z3hm70OO
e8/3w/rWG9fCwsLCwsK7Aa3r7PSp+1NYWFhYWFi4xc+q/6GuIX0SnoIuV35B
+f744evu16KeaWNDPDVdEsTPNf7nO3Ne7RuRtxJ/o46b72X949T3oYf4k8zD
yE8oLl3ez/x931NfXdwr/noxj+BbYa/hI41nr394Ds8JvWhPv+15c7z+t/jj
V3bMC/o+Pid/jqdTV6g9X09Enkp8lr/x5E2vd2qUJzd++GTPrzhnfBN+kl55
p8+Fcfcc9PKE5Pj3XHctP/946c8P7Vo8V/7vvro+OmB1pJxHXah8Xs+bfsgH
YNzzePb+ngo9R/wZz43nA+Y8nPSVxq837+AP5cfN+Qbwtu6r8+Nhnafx9ddi
vP9waG/G79onErdOf0uPjf/0PtonMN9D15Ovf+r7VFhYWFhYOCVmu6iwsLCw
sLDw4GDO08cP51/zt/nFe51vHV9AB5XrCsFe3SH15uU3zLwEvnfqce8hHhqf
iLels2t88HPB8/qcbq/xYdcj36y6NI0n/nrESWc+uX1+X/Cf+XPYdJZPRR1t
56Mj83+8HL6ZTnGRrz4aukjHZezxonhKek7jAeU5XdQFH5k/v+fic/w4NF45
LyV9etap08Xhx3xO97dTXrc3HuLS2/24ZxtPi/e2X+E9yvxn7hedaOMjn478
kHhc12e+wDsbb/VT83WYPxb1t/8Y+UX36j1S51XcO97Zdfbi3NTZ9Te++dFH
Zu1mfG9RL/vG/D24EONv/jR+ePd8fvHu3tvcrx7/+8jDs3Yj5sHMkzoOT0vf
bxx+9fas3Zi/j5eD55TvgN7UvOn+4729H47bq/tYWFhYWFh4GFA9wan7UVhY
WFhYWHh4cKf8Kl4m87n8/YOeP0l/e3wvPgf6v/h/vHXmQeR3l9ezd37n6X0O
8UfO72/13PGudMSQro1uMX+eEW/Tu894mJav/uXoT857iHfzd/4d9XroM/GJ
zo//ynG96ubkPAI7fX71f2xc8Jnq0OOh7E80Pu1W6HzVM8OXNh54i/9u8dFb
/Krrb7zdk9v4cvVS2+df2+zps6Hvb8xb4z+/su04em08btZJ+jvrojOPiy98
79Auzvn4W/Hc4KXz+C/m070Vx/X4R/OKOPCsm8Svu258sn67nl5elKy39X/P
s/fReHku9Btf+emhnY/3qfHnF+fP7zORjzXnQ8j5LtSF8PyoQ7yu+a+wsLCw
sPAwYrPDLm3ec2TWtufhLywsLCwsLCws3FvE46w7Hx8+KNfx8Ts+h5k/zJ9n
HPv9xfyny+cL7v0evkc8MB44f1+eRcevi093HnxWr590pfKz6gf+Fb/s/2N1
0fFhxhGOfW/dKD47686Njzhw/cM74t/kQXU8fSVdI/4TP+84PGK+D3kfIedV
zcc7T+vXufnvnY56QupDLbsPQ//9nqFdiH74Xu4nlOcA74q/NM7yf+Kb5fe0
f+D5zv3Rb/sEOb9BYWFhYWHh3Yj2wbN9UVhYWFhYWFhYuLeIp8GD7NXv9PhU
PBDeZzG/48vb+Kb9QvyPuN7M87ieHi81xlfhgV3fqrwo3d7YcVknmOOw/b48
jvI/rGsc133/8LbyVebPe+PY4uZvhL+BX8x1x93X9vnJqP8kf7HzyROQf6en
421x5Dcij4D+y1ch/wP+VZ4Gz2FvPPC+WXcJ3c98Hxzf9L7ng6+kF/a8y/sg
f2njy5+JuHf9dF79ffihWbu+TedcWFhYWFh4N6J6ji0epvJeFxYWFhYWFhbu
F+51PtYxxFOJy5fHUPy4/Iv7zZ/oV9bPrev8mTfFo+Gn6O1636dLXNd1ygf5
2quzdmPt17nb87j/nge8sfo7+PseT+j5avl7z2z+6dBuhG4231+8pLwP6qj7
/LFHZ+1WHEc3qZ+5rhB+km4263LV9aIHocfFP8KezhnP2Kv/1Ht+8Z+e85/8
eNYuxPGup/HDZ+Z627NR18445OfJ71Y8X2FhYWFhofX4XOyn7vZ8//zrWbsd
OPX1FRYWFhYWFhYW3hko/yceDK6LL1xV/0mnSH8nD6N8juxh/dT/lq/zavRb
PskxfeF+Id4s1+HpoetQZwefic9zvXSuvmecjKPxb/lIX4vj5N3Mv4vXHdO1
4hfVVXM+cfYtn+mpeV7Nb8+v59W4DvdPvtZ8HbtF19Ebb/33/Cx7XuO+rn4W
FhYWFhYeRpRPare852J9xO12SWFhYWFhYWFhYeE7Id4LD5Y/x/vgodiveEW8
2xj/6fw93gp/lnWSfo+dq74MvrPHu6nTg6+io1WfCM+5rF4AT0fvt2ye1b3C
zHfm63Dd6opnXtf1jOme3ff8f8/Fqn6M82Wetvc7Y/dDfaNe/aN3/t7x0Mvi
2dVxb3XoX982zu05PN29Dz5veQK+Gzzubu9zYWFhYWHh4ceNjZ3ynuwZdUjZ
D9bfvL+dv8/u83ne983H5ziXwsLCwsLCwsLCw4VZp5f1buzCxtu8GLwZXmpM
90bnlo/DU2X+jR38+aFdi/38fF52aNMHbuVtxNvJ19jjb6F+LatT1b9mNz+9
rU7VVLgsb+t63T98sPu92zwG/Ab5YFtc+PPzePUHt/kP+o1nxGe3/J4n4vt4
Q5/jy/Ubz6jOVq6f1Otv73PjKJ/nbw7tdOST9T60eu1H5nlTvxf9pGN1vavy
uIWFhYWFhXciyouz27pG8nY3e+PFyCcjX9GXvjhrxzbPnhla5CfPefybXXcs
6kWyH9YVh19YWFhYWFhYWDgtrpp3suWFvB11XPCMmb/EG31kaDe2fS4fYm9/
faxeUq537//680dDuxC8Ft6JnZ15WNdDN4qHy/XE/e265BfN+TFzntL9up/8
ADhWD31ZnarryHWNcr101+28X/3bWbsZ+TLlE208aK5rJK7+Zuh45Qtt9dOv
Bh/Kv+nphT1XYzyu8fnA0Lbz4/rV8o0+E3/j1Ztu+FTk/czPubj9zw2t6jcU
FhYWFt7d+A9/P2tnN3/8o1nbPa/44aFdj3WYvaB+ov1S9gk7z3rd9isvhv3o
uL/80qxVXu7CwsLCwsLCwsOOvXrcmY/886HdnuscrwbfKL6ZbtDx7Mle3DQ7
E3+IJ/W7Y7whXsxx+qGfnxnaxeC97OOrB4T3xHs5L14Xn8l+zvXTs16A7nNd
9YtWRTxj5jH1t1cPy/gvW9dLfaPe8+P63cfm37wZfOm/HtrFbtyY50bc+ckT
s3Y56s3/m6G9NL+eLZ4xjzses1f3atk4eOPp/hon4ybP6MeHdjveA8+dvAy9
vKiFhYWFhYV3E1rH779v1i7v+nzsAHYC/L2hsW/Ohd0pjkS+o15dx8LCwsLC
wsLCwjsT8UHsUbwVe/Gv//esvbz56COzdnPOK52OePOsw8x14DOP1PbTj0ec
ER6pxRf369XgxXJce8uneDLVg38jdJ7i2VvexjeiXji7+Y+HdjX0ko7Dq/r9
n//TrF3Zpu/DA+63/UyfCtd9fnyeuC9/Z54Pz2h8fN99+JuvzNqzcf/Gftdx
mZ/Nf3ueeuOeefn3D23r91fNz+p49eXxuvKM4d/xs+8ZWulGCgsLCwvvbmRP
yWe0rvPKi/SLn8/a1W1xJ/9paG9GHLzj/X/qcSksLCwsLCwsLNwffOLorL0Z
+Qz9H78nj7x9cvakPIsZHY93bHkQb4Sdiae6955Zw6te3Xz4oVm7vrZ6Qfgx
/YafGtrNbTwexJP26ruzn7Necln95Lowj/u6z5/zrBo/fsteX694ds/nGK+c
eWr9dR/97T5/aGjXgsfs6ZXpgfHLnmv645xnwPthX2CvxqewsLCwsPAwoLzv
686faV2XP549xH6wn85+YNc89OCsXdu2P1pYWFhYWFhYWHhnYuaLIP4Hj7Ps
+RzPHsX/0MX5Pfzhp4d2vsszrhvxr5k3FJ+s3/iwnPc+61ldDz3i1HXe14XG
If9f/SLX23t+VkX+B90w3ac8C2M8a2/85RPTT+f5raGdn//9QsSlu+78/C8+
16eC58zPEf00vn/q+1hYWFhYWDglyreJ91yX3QBzHIq8OvbV5aXx+y1/97U7
xl4rLCwsLCwsLCx8Z2Tv4Ysyr7fsebJeMn+eedB8frpPPNJUdije85NDuxTx
8H/15Vm7tC1eKsdf3+n2Mz8Fyofgvu32/HhD4zz23PT6l/+f9b7uE93qbwzt
yTm/+nKX74WZN8+fZ73n/wcvWKzp
       "]]}]}], 
  ";"}]], "Input",ExpressionUUID->"e29f4177-cc5b-4f3d-8360-a1b1f88a9e4d"],

Cell[BoxData[
 RowBox[{"IGEulerianQ", "[", "graph", 
  "]"}]], "Input",ExpressionUUID->"c49b87dc-c34d-43fd-9d7f-4a06a4d57b35"],

Cell[TextData[{
 "Removing the edge ",
 Cell[BoxData[
  RowBox[{"A", "\[TwoWayRule]", "D"}]],ExpressionUUID->
  "146f5d7c-85ce-4a19-9db1-abf4874b2dec"],
 " makes it Eulerian:"
}], "Text",ExpressionUUID->"90fa8194-626f-42f8-81d1-acca40895578"],

Cell[BoxData[
 RowBox[{"IGEulerianQ", "@", 
  RowBox[{"EdgeDelete", "[", 
   RowBox[{"graph", ",", 
    RowBox[{"\"\<A\>\"", "\[TwoWayRule]", "\"\<D\>\""}]}], 
   "]"}]}]], "Input",ExpressionUUID->"55714064-3ea4-4802-be31-379ed7bd231d"],

Cell["\<\
But it will only have an Eulerian path, not an Eulerian cycle:\
\>", "Text",ExpressionUUID->"19f0f851-c5ff-4025-b575-770ae64d893c"],

Cell[BoxData[
 RowBox[{"IGEulerianQ", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"EdgeDelete", "[", 
    RowBox[{"graph", ",", 
     RowBox[{"\"\<A\>\"", "\[TwoWayRule]", "\"\<D\>\""}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Closed", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"be93465c-3652-4043-a68c-71efb5340a80"],

Cell["One possible path is the following:", \
"Text",ExpressionUUID->"9c3f7279-b9d0-4bcd-a2d9-bf05de0e51a8"],

Cell[BoxData[
 RowBox[{"IGEulerianPathVertices", "[", 
  RowBox[{"EdgeDelete", "[", 
   RowBox[{"graph", ",", 
    RowBox[{"\"\<A\>\"", "\[TwoWayRule]", "\"\<D\>\""}]}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"bf184ce9-db2e-4c8d-bfd3-520883d2ac77"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGEulerianPath and IGEulerianPathVertices", \
"Subsubsection",ExpressionUUID->"6d1ce0e7-e944-45dc-b4dc-de80c8d9b7f6"],

Cell[BoxData[
 RowBox[{"?", 
  "IGEulerianPath"}]], \
"Input",ExpressionUUID->"2f0ac2a6-eb32-4eff-93b2-9395005abb67"],

Cell[BoxData[
 RowBox[{"?", 
  "IGEulerianPathVertices"}]], \
"Input",ExpressionUUID->"f648821b-4f69-48aa-b6f7-c0454229ddd2"],

Cell["Find an Eulerian cycle through an icosidodecahedral graph:", \
"Text",ExpressionUUID->"3f69d231-1044-4477-b353-61c7b0a53645"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"GraphData", "[", "\"\<IcosidodecahedralGraph\>\"", "]"}]}], 
  ";"}], "\n", 
 RowBox[{"cycle", "=", 
  RowBox[{"IGEulerianPath", "[", 
   RowBox[{"g", ",", 
    RowBox[{"Closed", "\[Rule]", "True"}]}], 
   "]"}]}]}], "Input",ExpressionUUID->"b4337b02-ee7d-48e5-a74b-26ed8949822a"],

Cell["Visualize it using colour hues:", \
"Text",ExpressionUUID->"cc68db3f-61b7-4ce8-a4d2-d8780cadf8c6"],

Cell[BoxData[
 RowBox[{"HighlightGraph", "[", 
  RowBox[{"g", ",", "\[IndentingNewLine]", 
   RowBox[{"MapIndexed", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Style", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"Hue", "[", 
         RowBox[{
          RowBox[{"First", "[", "#2", "]"}], "/", 
          RowBox[{"Length", "[", "cycle", "]"}]}], "]"}]}], "]"}], "&"}], ",",
      "cycle"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"GraphStyle", "\[Rule]", "\"\<ThickEdge\>\""}]}], 
  "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"1bd3298f-3c42-466e-9b47-fb86b9061c7a"],

Cell["Direct the edges of the graph along the cycle:", \
"Text",ExpressionUUID->"0f05ed52-b6a3-4b41-80d9-62dfc86e4518"],

Cell[BoxData[
 RowBox[{"Graph", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"VertexList", "[", "g", "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"DirectedEdge", "@@@", 
    RowBox[{"Partition", "[", 
     RowBox[{
      RowBox[{"IGEulerianPathVertices", "[", 
       RowBox[{"g", ",", 
        RowBox[{"Closed", "\[Rule]", "True"}]}], "]"}], ",", "2", ",", "1"}], 
     "]"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"EdgeStyle", "\[Rule]", 
    RowBox[{"Arrowheads", "[", "Medium", "]"}]}], ",", "\[IndentingNewLine]", 
   
   RowBox[{"VertexCoordinates", "\[Rule]", 
    RowBox[{"GraphEmbedding", "[", "g", "]"}]}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"d59383c4-d84d-4508-bc8d-cbdac4a819c8"]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Graph colouring", \
"Section",ExpressionUUID->"2b456f4e-dd43-4eeb-8a04-eab1e68fb7c3"],

Cell["\<\
The graph colouring problem is assigning \[OpenCurlyDoubleQuote]colours\
\[CloseCurlyDoubleQuote] or \[OpenCurlyDoubleQuote]labels\
\[CloseCurlyDoubleQuote] to the vertices of a graph so that no two adjacent \
vertices will have the same colour. Similarly, edge colouring assigns colours \
to edges so that adjacent edges never have the same colour.\
\>", "Text",ExpressionUUID->"ae7781ee-58dc-4866-85f5-3bd888186f31"],

Cell[TextData[{
 "IGraph/M represents colours with the integers ",
 Cell[BoxData[
  RowBox[{"1", ",", "2", ",", "\[Ellipsis]"}]],ExpressionUUID->
  "a64d7420-6758-44c7-8075-8112d115666e"],
 ". Edge directions and self-loops are ignored."
}], "Text",ExpressionUUID->"b92f7698-1a0c-44d7-b65a-59c39f544e51"],

Cell[CellGroupData[{

Cell["Fast heuristic colouring", \
"Subsection",ExpressionUUID->"7398ca29-10b0-4ff7-ae79-8a938c702fa0"],

Cell[BoxData[
 RowBox[{"?", 
  "IGVertexColoring"}]], \
"Input",ExpressionUUID->"612386be-73a9-42b2-8d37-1f1fb83cbbdf"],

Cell[BoxData[
 RowBox[{"?", 
  "IGEdgeColoring"}]], \
"Input",ExpressionUUID->"439df01f-c655-4037-9af3-1e6cad2e853f"],

Cell["\<\
These function will find a colouring of the graph using a fast heuristic \
algorithm. The colouring may not be minimal. Edge directions are ignored.\
\>", "Text",ExpressionUUID->"01a4acec-bb99-442c-a778-814e01fee13b"],

Cell["Compute a vertex colouring of a Mycielski graph.", \
"Text",ExpressionUUID->"8a65c88a-676c-4b59-8dd5-e298da067c15"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"GraphData", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<Mycielski\>\"", ",", " ", "4"}], "}"}], 
   "]"}]}]], "Input",ExpressionUUID->"e905508f-a069-4a0d-842e-f106a0ca732e"],

Cell[TextData[{
 Cell[BoxData[
 "IGVertexColoring"],ExpressionUUID->"5ec09a46-1462-42aa-a6e1-300ae13a4cfd"],
 " returns a list of integers, each representing the colour of the vertex \
that is in the same position in the vertex list."
}], "Text",ExpressionUUID->"c42f6ec1-06ed-4f4d-ade6-16b1208e1840"],

Cell[BoxData[
 RowBox[{"IGVertexColoring", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"925fa3c7-a73b-4d08-987d-3663f5ce5b65"],

Cell["Associate the colours with vertex names.", \
"Text",ExpressionUUID->"e6971661-e6cb-456e-ac10-056e1191a8c8"],

Cell[BoxData[
 RowBox[{"AssociationThread", "[", 
  RowBox[{
   RowBox[{"VertexList", "[", "g", "]"}], ",", 
   RowBox[{"IGVertexColoring", "[", "g", "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"18ac14c2-0780-47c3-b5e3-b212030e71b2"],

Cell[TextData[{
 "Visualize the colours using IGraph/M\[CloseCurlyQuote]s property mapping \
functionality. See the ",
 StyleBox["Property handling functions",
  FontSlant->"Italic"],
 " documentation section for more information."
}], "Text",ExpressionUUID->"091e1ae7-ae3b-45c9-82c9-45774f11aa1e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Graph", "[", 
   RowBox[{"g", ",", 
    RowBox[{"VertexSize", "\[Rule]", 
     RowBox[{"1", "/", "3"}]}], ",", 
    RowBox[{"EdgeStyle", "\[Rule]", "Gray"}]}], "]"}], "//", 
  "\[IndentingNewLine]", 
  RowBox[{"IGVertexMap", "[", 
   RowBox[{
    RowBox[{"ColorData", "[", "97", "]"}], ",", 
    RowBox[{"VertexStyle", "\[Rule]", "IGVertexColoring"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"61293282-9e02-4012-9cdb-a027d63b58cb"],

Cell["Visualize an edge colouring of the same graph.", \
"Text",ExpressionUUID->"d582df77-905c-42a8-bf09-ceb086e7b562"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Graph", "[", 
   RowBox[{"g", ",", 
    RowBox[{"GraphStyle", "\[Rule]", "\"\<ThickEdge\>\""}], ",", 
    RowBox[{"EdgeStyle", "\[Rule]", 
     RowBox[{"Opacity", "[", "0.7", "]"}]}], ",", 
    RowBox[{"VertexStyle", "\[Rule]", "Black"}]}], "]"}], "//", 
  "\[IndentingNewLine]", 
  RowBox[{"IGEdgeMap", "[", 
   RowBox[{
    RowBox[{"ColorData", "[", "106", "]"}], ",", 
    RowBox[{"EdgeStyle", "\[Rule]", "IGEdgeColoring"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"ac174e26-71e7-40f9-890b-6befdb6eea8e"],

Cell["\<\
Compute a checkerboard-like colouring of a three-dimensional grid graph.\
\>", "Text",ExpressionUUID->"accd31c9-5576-4665-99c6-4539aaa9ee6a"],

Cell[BoxData[
 RowBox[{"IGVertexMap", "[", 
  RowBox[{
   RowBox[{"ColorData", "[", "97", "]"}], ",", 
   RowBox[{"VertexStyle", "\[Rule]", "IGVertexColoring"}], ",", 
   RowBox[{"Graph3D", "@", 
    RowBox[{"GridGraph", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"4", ",", "4", ",", "4"}], "}"}], ",", 
      RowBox[{"VertexSize", "\[Rule]", "0.8"}]}], "]"}]}]}], 
  "]"}]], "Input",ExpressionUUID->"9b719ba8-2b84-4161-895e-4a5d356e06ae"],

Cell["Compute a colouring of a Voronoi mesh.", \
"Text",ExpressionUUID->"a9f13969-b191-49f1-b6bb-6385534434a5"],

Cell[BoxData[
 RowBox[{"mesh", "=", 
  RowBox[{"VoronoiMesh", "[", 
   RowBox[{"RandomReal", "[", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{"20", ",", "2"}], "}"}]}], "]"}], 
   "]"}]}]], "Input",ExpressionUUID->"e7342c9a-fcb6-49e6-ad12-12d405826810"],

Cell[BoxData[
 RowBox[{"col", "=", 
  RowBox[{"IGVertexColoring", "@", 
   RowBox[{"IGMeshCellAdjacencyGraph", "[", 
    RowBox[{"mesh", ",", "2"}], 
    "]"}]}]}]], \
"Input",ExpressionUUID->"497a8fd6-3a97-4cf7-841d-f4dace455a71"],

Cell[BoxData[
 RowBox[{"SetProperty", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"mesh", ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "All"}], "}"}]}], "}"}], ",", 
   RowBox[{"MeshCellStyle", "\[Rule]", 
    RowBox[{
     RowBox[{"ColorData", "[", "97", "]"}], "/@", "col"}]}]}], 
  "]"}]], "Input",ExpressionUUID->"bc230bb2-9212-47cc-8889-dadb718c3314"],

Cell["Compute a colouring of the map of African countries.", \
"Text",ExpressionUUID->"0119c994-2ab7-4209-9537-c9015930af64"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"countries", "=", 
   RowBox[{"CountryData", "[", "\"\<Africa\>\"", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"borderingQ", "[", 
   RowBox[{"c1_", ",", "c2_"}], "]"}], ":=", 
  RowBox[{"MemberQ", "[", 
   RowBox[{
    RowBox[{"c1", "[", "\"\<BorderingCountries\>\"", "]"}], ",", "c2"}], 
   "]"}]}], "\n", 
 RowBox[{
  RowBox[{"graph", "=", 
   RowBox[{"RelationGraph", "[", 
    RowBox[{"borderingQ", ",", "countries"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.727252980594573*^9, 
  3.7272529975709248`*^9}},ExpressionUUID->"2fa5c2c4-b58b-4d93-9bec-\
14ed94cc19f2"],

Cell[BoxData[
 RowBox[{"GeoGraphics", "@", 
  RowBox[{"MapThread", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"GeoStyling", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Opacity", "[", "0.5", "]"}], ",", "#2"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Polygon", "[", "#1", "]"}]}], "}"}], "&"}], ",", 
    RowBox[{"{", 
     RowBox[{"countries", ",", 
      RowBox[{
       RowBox[{"ColorData", "[", "97", "]"}], "/@", 
       RowBox[{"IGVertexColoring", "[", "graph", "]"}]}]}], "}"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.727252283582326*^9, 3.727252283584001*^9}, {
  3.727252574252823*^9, 
  3.72725261939513*^9}},ExpressionUUID->"e35eeb27-e5db-4d2e-bf89-2f841530fce7"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "73df470b-931d-4bc6-a9a3-cc7d88f18066"],
 "-colouring"
}], "Subsection",ExpressionUUID->"e6796064-5a61-4d5b-b4c2-edfe8bf3e8f3"],

Cell[BoxData[
 RowBox[{"?", 
  "IGKVertexColoring"}]], \
"Input",ExpressionUUID->"63650a36-2866-4ba2-a74c-7accee59c8a7"],

Cell[BoxData[
 RowBox[{"?", 
  "IGKEdgeColoring"}]], \
"Input",ExpressionUUID->"e39dbb55-bf3f-4069-90a8-6c7916a3ad58"],

Cell[TextData[{
 "These functions find a colouring with ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "4e0e4e43-5f44-4144-b190-912549bcf9a6"],
 " or fewer colours. They work by transforming the colouring into a \
satisfiability problem and using ",
 Cell[BoxData[
 "SatisfiabilityInstances"],ExpressionUUID->
  "43f8af73-a884-4fac-b40b-9e25d420529d"],
 "."
}], "Text",ExpressionUUID->"4a203761-3927-4bc1-89f6-3ad45dc830df"],

Cell["The available option values are:", \
"Text",ExpressionUUID->"3db4685b-5b18-4c98-a51a-2f4f3783dec4"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<ForcedColoring\>\"", "\[Rule]", 
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["v", "1"], ",", 
     SubscriptBox["v", "2"], ",", "\[Ellipsis]"}], "}"}]}]],ExpressionUUID->
  "9e42e0d5-d093-4a57-9b05-00d7954243a4"],
 " forces the given vertices to distinct and increasing colours. Normally, \
the vertices of a clique are given (which require as many colours as the size \
of the clique). The main purpose of this option is to reduce the number of \
redundant solutions of the equivalent SAT problem, and thus improve \
performance. When using edge colouring functions, a set of edges should be \
passed."
}], "Item",ExpressionUUID->"1b19c8ae-a937-4da3-8b76-a571605f166a"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<ForcedColoring\>\"", "\[Rule]", "\"\<MaxDegreeClique\>\""}]],
  ExpressionUUID->"94bc8e4b-ecdb-4d32-97a5-59cef79cae56"],
 " attempts to find a clique containing a maximum degree vertex, and forces \
colours on the clique members. On hard problems it may perform orders of \
magnitude better than ",
 Cell[BoxData[
  RowBox[{"\"\<ForcedColoring\>\"", "\[Rule]", "None"}]],ExpressionUUID->
  "288006e4-a45a-43b8-8ed4-3a325ab9bb96"],
 "."
}], "Item",ExpressionUUID->"29940da3-9698-4196-b634-4f09d438c738"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<ForcedColoring\>\"", "\[Rule]", "\"\<LargestClique\>\""}]],
  ExpressionUUID->"0d50a00b-9b64-4380-b8a9-7540bd6d45cd"],
 " finds a largest clique, and forces colours on the clique members."
}], "Item",ExpressionUUID->"4f90b413-d4eb-4f46-971d-8908809901d5"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<ForcedColoring\>\"", "\[Rule]", "None"}]],ExpressionUUID->
  "a75b9bf7-1cee-4f49-a943-32dde018ab9a"],
 " does not force any colours. It is usually the fastest choice for easy \
problems."
}], "Item",ExpressionUUID->"7edd7506-64d9-491e-aea8-63f44994f4dd"],

Cell[TextData[{
 "The default setting for ",
 Cell[BoxData[
 "\"\<ForcedColoring\>\""],ExpressionUUID->
  "926db2cc-b55d-44d3-9dec-390292851c1d"],
 " is ",
 Cell[BoxData[
 "\"\<MaxDegreeClique\>\""],ExpressionUUID->
  "97c98f99-0b27-499e-a6c7-81a59921850f"],
 "."
}], "Text",ExpressionUUID->"2a164176-307f-4e60-8e40-be2908764814"],

Cell["\<\
The Moser spindle is not 3-colourable, so no solution is returned.\
\>", "Text",ExpressionUUID->"fb912a8d-3fe7-481c-bd30-5fad64361e8f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"moser", "=", 
   RowBox[{"GraphData", "[", "\"\<MoserSpindle\>\"", "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"033f0cf7-a43d-46c3-ab09-4862cc324430"],

Cell[BoxData[
 RowBox[{"IGKVertexColoring", "[", 
  RowBox[{"moser", ",", "3"}], 
  "]"}]], "Input",ExpressionUUID->"a44316ec-64a8-4b0c-945d-609c596a13b7"],

Cell["Find a 4-colouring of the Moser spindle ...", \
"Text",ExpressionUUID->"09e34151-b047-4ab5-a296-285897b6bfeb"],

Cell[BoxData[
 RowBox[{"IGKVertexColoring", "[", 
  RowBox[{"moser", ",", "4"}], 
  "]"}]], "Input",ExpressionUUID->"861c3e84-47f6-40aa-a5b1-d181aae0f0f2"],

Cell["... and visualize it.", \
"Text",ExpressionUUID->"2ea4d13f-b787-4f21-836f-4f0ea8dadcd2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Graph", "[", 
   RowBox[{"moser", ",", 
    RowBox[{"GraphStyle", "\[Rule]", "\"\<BasicBlack\>\""}], ",", 
    RowBox[{"VertexSize", "\[Rule]", "Large"}]}], "]"}], "//", 
  RowBox[{"IGVertexMap", "[", 
   RowBox[{
    RowBox[{"ColorData", "[", "112", "]"}], ",", 
    RowBox[{"VertexStyle", "\[Rule]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"First", "@", 
        RowBox[{"IGKVertexColoring", "[", 
         RowBox[{"#", ",", "4"}], "]"}]}], "&"}], ")"}]}]}], 
   "]"}]}]], "Input",ExpressionUUID->"b947f388-2013-48d9-857d-ab10e79f6782"],

Cell["Find a 4-edge-colouring of the Petersen graph.", \
"Text",ExpressionUUID->"ca990302-e6ff-4ed4-ae60-eed755d6ec58"],

Cell[BoxData[
 RowBox[{
  RowBox[{"PetersenGraph", "[", 
   RowBox[{
    RowBox[{"GraphStyle", "\[Rule]", "\"\<ThickEdge\>\""}], ",", 
    RowBox[{"EdgeStyle", "\[Rule]", 
     RowBox[{"Opacity", "[", 
      RowBox[{"2", "/", "3"}], "]"}]}]}], "]"}], "//", 
  RowBox[{"IGEdgeMap", "[", 
   RowBox[{
    RowBox[{"ColorData", "[", "112", "]"}], ",", 
    RowBox[{"EdgeStyle", "\[Rule]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"First", "@", 
        RowBox[{"IGKEdgeColoring", "[", 
         RowBox[{"#", ",", "4"}], "]"}]}], "&"}], ")"}]}]}], 
   "]"}]}]], "Input",ExpressionUUID->"64e3e6bd-da7a-4887-a5a4-8454b1ed747c"],

Cell[TextData[{
 "The following examples illustrate the use of the ",
 Cell[BoxData[
 "\"\<ForcedColoring\>\""],ExpressionUUID->
  "6ebf4a36-d745-4f32-afcc-0fac0c0386f6"],
 " option. The 6th order Mycielski graph has chromatic number 6. A \
6-colouring is easily found even with ",
 Cell[BoxData[
  RowBox[{"\"\<ForcedColoring\>\"", "\[Rule]", "None"}]],ExpressionUUID->
  "3b7ca3e6-a315-4ea1-9ddf-032a87b9ac2d"],
 "."
}], "Text",ExpressionUUID->"df85944b-8f8b-4422-8432-34b02de3f830"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"GraphData", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<Mycielski\>\"", ",", " ", "6"}], "}"}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"a98c0100-f1dd-46e0-be2e-6969e8c8426b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGKVertexColoring", "[", 
   RowBox[{"g", ",", "6", ",", 
    RowBox[{"\"\<ForcedColoring\>\"", "\[Rule]", "None"}]}], "]"}], "//", 
  "Timing"}]], "Input",ExpressionUUID->"1489d9ed-eb46-464f-bc39-b5fec878c674"],

Cell["\<\
However, showing that the graph is not 5-colourable takes considerably longer.\
\>", "Text",ExpressionUUID->"dc20e7a7-c4f6-455f-bdd8-22a37d872a51"],

Cell[BoxData[
 RowBox[{"TimeConstrained", "[", 
  RowBox[{
   RowBox[{"IGKVertexColoring", "[", 
    RowBox[{"g", ",", "5", ",", 
     RowBox[{"\"\<ForcedColoring\>\"", "\[Rule]", "None"}]}], "]"}], ",", 
   "5"}], "]"}]], \
"Input",ExpressionUUID->"3f1c852a-3edc-4809-996f-d3926698a473"],

Cell["\<\
Forcing colours in the appropriate way reduces the computation time \
significantly.\
\>", "Text",ExpressionUUID->"cbc5e584-cdd5-4ff8-937f-4920880111fc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGKVertexColoring", "[", 
   RowBox[{"g", ",", "5", ",", 
    RowBox[{
    "\"\<ForcedColoring\>\"", "\[Rule]", "\"\<MaxDegreeClique\>\""}]}], "]"}],
   "//", "Timing"}]], \
"Input",ExpressionUUID->"23afc819-cb31-4672-bd3d-6fea44ffb137"]
}, Closed]],

Cell[CellGroupData[{

Cell["Minimum colouring", \
"Subsection",ExpressionUUID->"6f2cbbfc-a4f2-4c00-81fd-c951d7f3d826"],

Cell[BoxData[
 RowBox[{"?", 
  "IGMinimumVertexColoring"}]], \
"Input",ExpressionUUID->"cb103e40-87b9-4344-80ab-8c5f14f958af"],

Cell[BoxData[
 RowBox[{"?", 
  "IGMinimumEdgeColoring"}]], \
"Input",ExpressionUUID->"580bfb55-5e57-4ea4-8a78-c0be8aee9e36"],

Cell[TextData[{
 Cell[BoxData[
 "IGMinimumVertexColoring"],ExpressionUUID->
  "f155ad8e-fa4c-4529-924c-c2cfc46e32ca"],
 " and ",
 Cell[BoxData[
 "IGMinimumEdgeColoring"],ExpressionUUID->
  "3ae4f6ce-3b5c-4763-8075-50f7952d56c4"],
 " find minimum colourings of graphs, i.e. they find a colouring with the \
fewest possible number of colours. The current implementation tries \
successively larger ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "ebd5faee-f048-443b-bd17-cbb8a896dfb3"],
 "-colourings until it is successful."
}], "Text",ExpressionUUID->"5d8622e5-930b-431a-ba70-ce29164134bb"],

Cell[TextData[{
 Cell[BoxData[
 "IGMinimumVertexColoring"],ExpressionUUID->
  "0b110512-a8d4-4b0c-ba1e-118fbc9af325"],
 " and ",
 Cell[BoxData[
 "IGMinimumEdgeColoring"],ExpressionUUID->
  "c5a17155-e059-47eb-848c-9509a2ace71b"],
 " can use the same ",
 Cell[BoxData[
 "\"\<ForcedColoring\>\""],ExpressionUUID->
  "bb0880e7-d7e4-472d-b7df-64edd612ad09"],
 " option values as ",
 Cell[BoxData[
 "IGKVertexColoring"],ExpressionUUID->
  "4ff21781-f030-4de8-86cf-555fbc842495"],
 " and ",
 Cell[BoxData[
 "IGKEdgeColoring"],ExpressionUUID->"74432600-8927-4c48-ab1c-393023a89b43"],
 "."
}], "Text",ExpressionUUID->"995d7d82-3443-42a8-b12a-a290ea025178"],

Cell[BoxData[
 RowBox[{
  RowBox[{"WheelGraph", "[", 
   RowBox[{"7", ",", 
    RowBox[{"GraphStyle", "\[Rule]", "\"\<BasicBlack\>\""}], ",", 
    RowBox[{"VertexSize", "\[Rule]", "Large"}]}], "]"}], "//", 
  RowBox[{"IGVertexMap", "[", 
   RowBox[{
    RowBox[{"ColorData", "[", "97", "]"}], ",", 
    RowBox[{"VertexStyle", "\[Rule]", "IGMinimumVertexColoring"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"f11e4a80-7762-490a-8b59-ce2f645d9006"],

Cell["Find a colouring of a large graph.", \
"Text",ExpressionUUID->"cf8c1d69-9f2c-4896-b48b-11431d73abd1"],

Cell[BoxData[
 RowBox[{"IGMinimumVertexColoring", "@", 
  RowBox[{"RandomGraph", "[", 
   RowBox[{"{", 
    RowBox[{"100", ",", "400"}], "}"}], 
   "]"}]}]], "Input",ExpressionUUID->"2050696a-ec5b-48da-af49-0d6ccc879b40"],

Cell[TextData[{
 "Implement a multipartite graph layout: vertex colouring is equivalent to \
partitioning the vertices of the graph into groups such that all connections \
run between different groups, and never within the same group. The colours \
can be thought of as the indices of groups. ",
 Cell[BoxData[
 "IGMembershipToPartitions"],ExpressionUUID->
  "72dfd102-e0c9-4ab8-b0a5-f1749aadc973"],
 " can be used to convert from a group-index (i.e. membership) representation \
to a partition representation."
}], "Text",ExpressionUUID->"664f7770-e37f-49a5-8f32-e4e84e856973"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"multipartiteLayout", "[", 
    RowBox[{
     RowBox[{"g_", "?", "GraphQ"}], ",", 
     RowBox[{"separation", ":", 
      RowBox[{"_", "?", "NumericQ"}], ":", "1.5"}], ",", 
     RowBox[{"opt", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "n", ",", "partitions", ",", "partitionSizes", ",", 
       "vertexCoordinates"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"partitions", "=", 
       RowBox[{
        RowBox[{"IGMembershipToPartitions", "[", "g", "]"}], "@", 
        RowBox[{"IGMinimumVertexColoring", "[", "g", "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"partitionSizes", "=", 
       RowBox[{"Length", "/@", "partitions"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"n", "=", 
       RowBox[{"Length", "[", "partitions", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"vertexCoordinates", "=", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"hl", "=", 
            RowBox[{"N", "@", 
             RowBox[{"Sin", "[", 
              RowBox[{"Pi", "/", "n"}], "]"}]}]}], ",", 
           RowBox[{"ir", "=", 
            RowBox[{"separation", " ", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"n", "\[Equal]", "2"}], ",", 
               RowBox[{"1", "/", "2"}], ",", 
               RowBox[{"N", "@", 
                RowBox[{"Cos", "[", 
                 RowBox[{"Pi", "/", "n"}], "]"}]}]}], "]"}]}]}]}], "}"}], ",",
          "\[IndentingNewLine]", 
         RowBox[{"Catenate", "@", 
          RowBox[{"Table", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"RotationTransform", "[", 
              RowBox[{"2", 
               RowBox[{"Pi", "/", "n"}], " ", "k"}], "]"}], "[", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{"#", ",", "ir"}], "}"}], "&"}], "/@", 
              RowBox[{"Subdivide", "[", 
               RowBox[{
                RowBox[{"-", "hl"}], ",", "hl", ",", 
                RowBox[{
                 RowBox[{
                 "partitionSizes", "\[LeftDoubleBracket]", "k", 
                  "\[RightDoubleBracket]"}], "-", "1"}]}], "]"}]}], "]"}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"k", ",", "1", ",", "n"}], "}"}]}], 
           "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"IGReorderVertices", "[", 
       RowBox[{
        RowBox[{"Catenate", "[", "partitions", "]"}], ",", "g", ",", 
        RowBox[{"VertexCoordinates", "\[Rule]", "vertexCoordinates"}], ",", 
        "opt"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"fa21f52b-980a-45fb-9e61-1de11ae8fa19"],

Cell["Lay out a bipartite graph.", \
"Text",ExpressionUUID->"bade0d29-49db-4450-aabf-37bee0af8e11"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"IGBipartiteGameGNM", "[", 
    RowBox[{"10", ",", "10", ",", "30"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"multipartiteLayout", "[", "g", 
  "]"}]}], "Input",ExpressionUUID->"5ce3376b-e828-4df0-a8d5-7b37dbe44c2d"],

Cell["Lay out multipartite graphs.", \
"Text",ExpressionUUID->"3960c137-66d6-4a44-bbbc-2d7116c50afb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"RandomGraph", "[", 
    RowBox[{"{", 
     RowBox[{"40", ",", "40"}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"multipartiteLayout", "[", "g", 
  "]"}]}], "Input",ExpressionUUID->"475a25d5-832e-481e-8eed-b99bc407366e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"RandomGraph", "[", 
    RowBox[{"{", 
     RowBox[{"40", ",", "160"}], "}"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"multipartiteLayout", "[", 
  RowBox[{"g", ",", 
   RowBox[{"GraphStyle", "\[Rule]", "\"\<BasicBlack\>\""}], ",", 
   RowBox[{"EdgeStyle", "\[Rule]", 
    RowBox[{"Opacity", "[", "0.2", "]"}]}]}], 
  "]"}]}], "Input",ExpressionUUID->"8d37ad1c-84e6-481d-98b8-f33dc0c6db92"],

Cell["\<\
Compute a minimum colouring of a triangulation. It can be shown, e.g. based \
on Brooks\[CloseCurlyQuote]s theorem, that any triangulation of a polygon is \
3-colourable.\
\>", "Text",ExpressionUUID->"5df0e352-fce8-4a4d-8219-c419e13caafd"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"mesh", "=", 
   RowBox[{"DelaunayMesh", "[", 
    RowBox[{
     RowBox[{"RandomReal", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"20", ",", "2"}], "}"}]}], "]"}], ",", 
     RowBox[{"MeshCellStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", "\[Rule]", "Black"}], "}"}]}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"col", "=", 
   RowBox[{"IGMinimumVertexColoring", "@", 
    RowBox[{"IGMeshCellAdjacencyGraph", "[", 
     RowBox[{"mesh", ",", "2"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"SetProperty", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"mesh", ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "All"}], "}"}]}], "}"}], ",", 
   RowBox[{"MeshCellStyle", "\[Rule]", 
    RowBox[{
     RowBox[{"ColorData", "[", "97", "]"}], "/@", "col"}]}]}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.7331268479782887`*^9, 3.733126871359865*^9}, {
  3.733127632150155*^9, 3.733127638411281*^9}, {3.733128037126593*^9, 
  3.733128052830562*^9}},ExpressionUUID->"8c1c4a9a-85f8-4e07-a52c-\
18741ceb2105"],

Cell["Find a minimum edge colouring of a graph.", \
"Text",ExpressionUUID->"01fb412e-4838-4120-b2ff-ce5e17f5ff26"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Graph", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"GraphData", "[", "\"\<SixteenCellGraph\>\"", "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"GraphStyle", "\[Rule]", "\"\<ThickEdge\>\""}], ",", 
    RowBox[{"EdgeStyle", "\[Rule]", 
     RowBox[{"Opacity", "[", 
      RowBox[{"2", "/", "3"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], "//", 
  "\[IndentingNewLine]", 
  RowBox[{"IGEdgeMap", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ColorData", "[", "104", "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"EdgeStyle", "->", "IGMinimumEdgeColoring"}]}], 
   "\[IndentingNewLine]", 
   "]"}]}]], "Input",ExpressionUUID->"37ffd1df-bc2a-44cc-985a-dff7a5595b6b"]
}, Closed]],

Cell[CellGroupData[{

Cell["Chromatic number", \
"Subsection",ExpressionUUID->"bb9a872d-b69a-4eab-a4ae-c3125344bae5"],

Cell[BoxData[
 RowBox[{"?", 
  "IGChromaticNumber"}]], \
"Input",ExpressionUUID->"a0f0566e-9bb4-4740-89e6-265b73e021d4"],

Cell[BoxData[
 RowBox[{"?", 
  "IGChromaticIndex"}]], \
"Input",ExpressionUUID->"3d4634ad-f3b4-4196-87b9-2283236b1129"],

Cell["\<\
The chromatic number of a graph is the smallest number of colours needed to \
colour its vertices. The chromatic index, or edge chromatic number, is the \
smallest number of colours needed to colour its edges.\
\>", "Text",ExpressionUUID->"7de5fce7-da23-4607-872a-9692ad1da200"],

Cell["Find the chromatic number and chromatic index of a graph.", \
"Text",ExpressionUUID->"961fcd71-d41d-421a-a05d-488e67795f3b"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{
  "GraphData", "[", "\"\<IcosahedralGraph\>\"", 
   "]"}]}]], "Input",ExpressionUUID->"80d7efe9-0d86-4592-9b67-94fc805bc4af"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"IGChromaticNumber", "[", "g", "]"}], ",", 
   RowBox[{"IGChromaticIndex", "[", "g", "]"}]}], 
  "}"}]], "Input",ExpressionUUID->"f8d3486f-3326-45bd-8b93-8167cc1cb256"],

Cell[TextData[{
 "The implementation of ",
 Cell[BoxData[
 "IGChromaticNumber"],ExpressionUUID->
  "55673bb3-2a97-4fbe-bcc0-e22209c26591"],
 " and ",
 Cell[BoxData[
 "IGChromaticIndex"],ExpressionUUID->"23a17cb8-42b1-475f-9d37-6c00f822fca9"],
 " is effectively the following:"
}], "Text",ExpressionUUID->"39a52ed5-68db-4404-82c0-54dc977aa357"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Max", "@", 
    RowBox[{"IGMinimumVertexColoring", "[", "g", "]"}]}], ",", 
   RowBox[{"Max", "@", 
    RowBox[{"IGMinimumEdgeColoring", "[", "g", "]"}]}]}], 
  "}"}]], "Input",ExpressionUUID->"006d8917-8cf5-4cd0-8e12-3c626b90c80c"]
}, Closed]],

Cell[CellGroupData[{

Cell["Perfect graphs", \
"Subsection",ExpressionUUID->"c62b98bc-c87c-4f79-9e07-dd90d63b32fb"],

Cell[BoxData[
 RowBox[{"?", 
  "IGPerfectQ"}]], \
"Input",ExpressionUUID->"2fbb1ee2-00ca-4a41-9fac-1f12e1dbb1f4"],

Cell[TextData[{
 Cell[BoxData[
 "IGPerfectQ"],ExpressionUUID->"f3b90ee2-86fe-48b4-8b1b-e70de101f9b4"],
 " tests if a graph is perfect. The clique number and the chromatic number is \
the same for every induced subgraph of a perfect graph."
}], "Text",ExpressionUUID->"cc277954-e2e6-4c8e-a357-04425b97567e"],

Cell[TextData[{
 "The current implementation of ",
 Cell[BoxData[
 "IGPerfectQ"],ExpressionUUID->"e05c1efe-15a2-47bc-81b0-4a0b2eedd4b9"],
 " uses the strong perfect graph theorem: it checks that neither the graph \
nor its complement have a graph hole of odd length."
}], "Text",ExpressionUUID->"677c8aaa-1f45-4c7a-9501-98f79d17ca2d"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"GraphData", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<GeneralizedQuadrangle\>\"", ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}]}], "}"}], 
   "]"}]}]], "Input",ExpressionUUID->"2d08dc18-54a0-4087-a245-9b581757f34a"],

Cell[BoxData[
 RowBox[{"IGPerfectQ", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"98513c4f-8d94-4934-b771-561297c704e1"],

Cell["\<\
The clique number and the chromatic number is the same for every induced \
subgraph.\
\>", "Text",ExpressionUUID->"070a855e-8dde-45bc-89e0-e419a610fa99"],

Cell[BoxData[
 RowBox[{"AllTrue", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Subgraph", "[", 
      RowBox[{"g", ",", "#"}], "]"}], "&"}], "/@", 
    RowBox[{"Subsets", "@", 
     RowBox[{"VertexList", "[", "g", "]"}]}]}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"IGCliqueNumber", "[", "#", "]"}], "\[Equal]", 
     RowBox[{"IGChromaticNumber", "[", "#", "]"}]}], "&"}]}], 
  "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"3d0e3be7-8065-45f3-8a9e-d0af574fa2f9"]
}, Closed]],

Cell[CellGroupData[{

Cell["Utility functions", \
"Subsection",ExpressionUUID->"94cd5399-89e8-4708-86af-bb6c8ea5fb0b"],

Cell[BoxData[
 RowBox[{"?", 
  "IGVertexColoringQ"}]], \
"Input",ExpressionUUID->"902bf7ad-bd22-4054-b195-f8201b817da1"],

Cell[TextData[{
 Cell[BoxData[
 "IGVertexColoringQ"],ExpressionUUID->
  "fad79c91-f2cc-4a76-a76f-a4129baa5602"],
 " checks whether neighbouring vertices of a graph are assigned different \
colours."
}], "Text",ExpressionUUID->"decfdf6b-d6d9-471d-9251-f4a353ab331d"],

Cell[TextData[{
 "The colours may be given as a list, with the same ordering as ",
 Cell[BoxData[
  RowBox[{"VertexList", "[", "graph", "]"}]],ExpressionUUID->
  "769a7259-286c-4664-90db-20b4705ab418"],
 "."
}], "Text",ExpressionUUID->"ded559e4-28ee-41d7-a027-4a56a395335e"],

Cell[BoxData[
 RowBox[{"IGVertexColoringQ", "[", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3}, {Null, 
         SparseArray[
         Automatic, {3, 3}, 0, {
          1, {{0, 2, 4, 6}, {{2}, {3}, {1}, {3}, {1}, {2}}}, Pattern}]}, {
        GraphLayout -> "CircularEmbedding", VertexLabels -> {
           Placed["Name", Center]}, VertexSize -> {Large}}]]}, 
      TagBox[GraphicsGroupBox[{
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
          {Arrowheads[0.], 
           ArrowBox[{{-0.8660254037844384, -0.4999999999999994}, {
            0.8660254037844389, -0.5000000000000012}}, 0.34641016151377535`]}, 
          {Arrowheads[0.], 
           ArrowBox[{{-0.8660254037844384, -0.4999999999999994}, {
            1.8369701987210297`*^-16, 1.}}, 0.34641016151377535`]}, 
          {Arrowheads[0.], 
           ArrowBox[{{0.8660254037844389, -0.5000000000000012}, {
            1.8369701987210297`*^-16, 1.}}, 0.34641016151377535`]}}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
          0.7]}], {
           DiskBox[{-0.8660254037844384, -0.4999999999999994}, 
            0.34641016151377535], 
           InsetBox["1", {-0.8660254037844384, -0.4999999999999994},
            BaseStyle->"Graphics"]}, {
           DiskBox[{0.8660254037844389, -0.5000000000000012}, 
            0.34641016151377535], 
           InsetBox["2", {0.8660254037844389, -0.5000000000000012},
            BaseStyle->"Graphics"]}, {
           DiskBox[{1.8369701987210297*^-16, 1.}, 0.34641016151377535], 
           InsetBox["3", {1.8369701987210297*^-16, 1.},
            BaseStyle->"Graphics"]}}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{73.8671875, Automatic}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], 
  "]"}]], "Input",ExpressionUUID->"ef398216-37d5-4c75-9b8b-afc711376599"],

Cell[BoxData[
 RowBox[{"IGVertexColoringQ", "[", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3}, {Null, 
         SparseArray[
         Automatic, {3, 3}, 0, {
          1, {{0, 2, 4, 6}, {{2}, {3}, {1}, {3}, {1}, {2}}}, Pattern}]}, {
        GraphLayout -> "CircularEmbedding", VertexLabels -> {
           Placed["Name", Center]}, VertexSize -> {Large}}]]}, 
      TagBox[GraphicsGroupBox[{
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
          {Arrowheads[0.], 
           ArrowBox[{{-0.8660254037844384, -0.4999999999999994}, {
            0.8660254037844389, -0.5000000000000012}}, 0.34641016151377535`]}, 
          {Arrowheads[0.], 
           ArrowBox[{{-0.8660254037844384, -0.4999999999999994}, {
            1.8369701987210297`*^-16, 1.}}, 0.34641016151377535`]}, 
          {Arrowheads[0.], 
           ArrowBox[{{0.8660254037844389, -0.5000000000000012}, {
            1.8369701987210297`*^-16, 1.}}, 0.34641016151377535`]}}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
          0.7]}], {
           DiskBox[{-0.8660254037844384, -0.4999999999999994}, 
            0.34641016151377535], 
           InsetBox["1", {-0.8660254037844384, -0.4999999999999994},
            BaseStyle->"Graphics"]}, {
           DiskBox[{0.8660254037844389, -0.5000000000000012}, 
            0.34641016151377535], 
           InsetBox["2", {0.8660254037844389, -0.5000000000000012},
            BaseStyle->"Graphics"]}, {
           DiskBox[{1.8369701987210297*^-16, 1.}, 0.34641016151377535], 
           InsetBox["3", {1.8369701987210297*^-16, 1.},
            BaseStyle->"Graphics"]}}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{73.8671875, Automatic}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "2"}], "}"}]}], 
  "]"}]], "Input",ExpressionUUID->"38caac36-2b67-4fdc-8b12-462d11293c66"],

Cell["\<\
The colours may also be given as an association from vertices to colours.\
\>", "Text",ExpressionUUID->"38b52390-6e2c-48db-947e-2baa7f3dff46"],

Cell[BoxData[
 RowBox[{"IGVertexColoringQ", "[", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3}, {Null, 
         SparseArray[
         Automatic, {3, 3}, 0, {
          1, {{0, 2, 4, 6}, {{2}, {3}, {1}, {3}, {1}, {2}}}, Pattern}]}, {
        GraphLayout -> "CircularEmbedding", VertexLabels -> {
           Placed["Name", Center]}, VertexSize -> {Large}}]]}, 
      TagBox[GraphicsGroupBox[{
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
          {Arrowheads[0.], 
           ArrowBox[{{-0.8660254037844384, -0.4999999999999994}, {
            0.8660254037844389, -0.5000000000000012}}, 0.34641016151377535`]}, 
          {Arrowheads[0.], 
           ArrowBox[{{-0.8660254037844384, -0.4999999999999994}, {
            1.8369701987210297`*^-16, 1.}}, 0.34641016151377535`]}, 
          {Arrowheads[0.], 
           ArrowBox[{{0.8660254037844389, -0.5000000000000012}, {
            1.8369701987210297`*^-16, 1.}}, 0.34641016151377535`]}}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
          0.7]}], {
           DiskBox[{-0.8660254037844384, -0.4999999999999994}, 
            0.34641016151377535], 
           InsetBox["1", {-0.8660254037844384, -0.4999999999999994},
            BaseStyle->"Graphics"]}, {
           DiskBox[{0.8660254037844389, -0.5000000000000012}, 
            0.34641016151377535], 
           InsetBox["2", {0.8660254037844389, -0.5000000000000012},
            BaseStyle->"Graphics"]}, {
           DiskBox[{1.8369701987210297*^-16, 1.}, 0.34641016151377535], 
           InsetBox["3", {1.8369701987210297*^-16, 1.},
            BaseStyle->"Graphics"]}}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{73.8671875, Automatic}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "3"}], ",", 
     RowBox[{"2", "\[Rule]", "2"}], ",", 
     RowBox[{"3", "\[Rule]", "1"}]}], "\[RightAssociation]"}]}], 
  "]"}]], "Input",ExpressionUUID->"feb08f57-9057-48bb-9f8e-fb33ef69e5f6"],

Cell["\<\
Any expression may be used for the colours, not only integers.\
\>", "Text",ExpressionUUID->"3ae4f5e7-34ea-47e1-afce-dccb0e8a78eb"],

Cell[BoxData[
 RowBox[{"IGVertexColoringQ", "[", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3}, {Null, 
         SparseArray[
         Automatic, {3, 3}, 0, {
          1, {{0, 2, 4, 6}, {{2}, {3}, {1}, {3}, {1}, {2}}}, Pattern}]}, {
        GraphLayout -> "CircularEmbedding", VertexLabels -> {
           Placed["Name", Center]}, VertexSize -> {Large}}]]}, 
      TagBox[GraphicsGroupBox[{
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
          {Arrowheads[0.], 
           ArrowBox[{{-0.8660254037844384, -0.4999999999999994}, {
            0.8660254037844389, -0.5000000000000012}}, 0.34641016151377535`]}, 
          {Arrowheads[0.], 
           ArrowBox[{{-0.8660254037844384, -0.4999999999999994}, {
            1.8369701987210297`*^-16, 1.}}, 0.34641016151377535`]}, 
          {Arrowheads[0.], 
           ArrowBox[{{0.8660254037844389, -0.5000000000000012}, {
            1.8369701987210297`*^-16, 1.}}, 0.34641016151377535`]}}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
          0.7]}], {
           DiskBox[{-0.8660254037844384, -0.4999999999999994}, 
            0.34641016151377535], 
           InsetBox["1", {-0.8660254037844384, -0.4999999999999994},
            BaseStyle->"Graphics"]}, {
           DiskBox[{0.8660254037844389, -0.5000000000000012}, 
            0.34641016151377535], 
           InsetBox["2", {0.8660254037844389, -0.5000000000000012},
            BaseStyle->"Graphics"]}, {
           DiskBox[{1.8369701987210297*^-16, 1.}, 0.34641016151377535], 
           InsetBox["3", {1.8369701987210297*^-16, 1.},
            BaseStyle->"Graphics"]}}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{73.8671875, Automatic}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "\"\<a\>\""}], ",", 
     RowBox[{"2", "\[Rule]", "\"\<b\>\""}], ",", 
     RowBox[{"3", "\[Rule]", "\"\<c\>\""}]}], "\[RightAssociation]"}]}], 
  "]"}]], "Input",ExpressionUUID->"ae232dc9-43d1-402e-a967-9cec527ac0dd"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Processes on graphs", \
"Section",ExpressionUUID->"0e9fa4cf-7afe-492c-b590-da23bc40d809"],

Cell[CellGroupData[{

Cell["Random walks", \
"Subsection",ExpressionUUID->"48a7aaca-8a7b-4093-8c7c-0b1669e532fa"],

Cell[CellGroupData[{

Cell["IGRandomWalk", \
"Subsubsection",ExpressionUUID->"bb27ecba-c592-4b1d-b977-2800e7e81c42"],

Cell[BoxData[
 RowBox[{"?", 
  "IGRandomWalk"}]], \
"Input",ExpressionUUID->"d6bb65bb-9a9d-4b89-8f02-417a9fef8e42"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGRandomWalk", "[", "]"}]],ExpressionUUID->
  "24029970-284f-4f7d-9966-872a62e8afba"],
 " takes a random walk over a directed or undirected graph. If the graph is \
weighted, the next edge to traverse is selected with probability proportional \
to its weight."
}], "Text",ExpressionUUID->"41dc5d47-b376-49f0-b6bb-b5e0e04fdd0a"],

Cell["The available options are:", \
"Text",ExpressionUUID->"c2873e39-d520-4373-a1cc-9a56dd0ed628"],

Cell[TextData[{
 Cell[BoxData[
 "EdgeWeight"],ExpressionUUID->"00e0f459-4066-4f0d-bfbb-ce313e06a60e"],
 " can be used to override the existing weights of the graph. ",
 Cell[BoxData[
  RowBox[{"EdgeWeight", "\[Rule]", "None"}]],ExpressionUUID->
  "aa188e4a-3886-47d4-9074-60225dade3d2"],
 " will ignore any existing weights."
}], "Item",
 InitializationCell->
  True,ExpressionUUID->"1578a00a-26ec-41dc-881d-1d5968134671"],

Cell["\<\
Traversing self-loops in different directions is considered as distinct \
probabilities in an undirected graph. Thus vertices 1 and 3 are visited more \
often in the below graphs than vertex 2:\
\>", "Text",ExpressionUUID->"b0aa6801-b716-400e-89da-4a30286a9665"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"Graph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "\[UndirectedEdge]", "1"}], ",", 
      RowBox[{"1", "\[UndirectedEdge]", "2"}], ",", 
      RowBox[{"2", "\[UndirectedEdge]", "3"}], ",", 
      RowBox[{"3", "\[UndirectedEdge]", "3"}]}], "}"}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], 
   "]"}]}]], "Input",ExpressionUUID->"7bb5f44f-024f-4a1d-ade6-a935bfbde42e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IGRandomWalk", "[", 
    RowBox[{"g", ",", "1", ",", "100000"}], "]"}], "//", "Counts"}], "//", 
  "KeySort"}]], \
"Input",ExpressionUUID->"a02cf9f9-2b1f-456a-9d3a-906b6e620fc1"],

Cell["This is consistent with their degrees:", \
"Text",ExpressionUUID->"76417e6e-8b99-4c9d-bd06-2dc5a5b2a463"],

Cell[BoxData[
 RowBox[{"VertexDegree", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"128a35c0-0330-4035-a81e-5d88f48e737e"],

Cell["\<\
Convert the graph to a directed version to traverse self-loops only in one \
direction.\
\>", "Text",ExpressionUUID->"4d19f158-ca87-45ec-82a3-e4f39039f380"],

Cell[BoxData[
 RowBox[{"dg", "=", 
  RowBox[{
  "DirectedGraph", "[", "g", 
   "]"}]}]], "Input",ExpressionUUID->"96c6ae03-f094-4b66-807a-3ffa7c8b72f3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"VertexOutDegree", "[", "dg", "]"}], ",", 
   RowBox[{"VertexInDegree", "[", "dg", "]"}]}], 
  "}"}]], "Input",ExpressionUUID->"e42ed0e0-998e-4862-8ca2-d1d5498b4882"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IGRandomWalk", "[", 
    RowBox[{"dg", ",", "1", ",", "100000"}], "]"}], "//", "Counts"}], "//", 
  "KeySort"}]], \
"Input",ExpressionUUID->"a9a44d33-3361-44cd-98ad-fdd72048aca4"],

Cell[TextData[{
 "If the walker gets stuck, a list shorter than ",
 Cell[BoxData["steps"],ExpressionUUID->"9f17e18d-5f84-472d-a5fa-398f448b2a0e"],
 " will be returned. This may happen in a non-connected directed graph, or in \
a single-vertex graph component."
}], "Text",ExpressionUUID->"0ba0366f-9eb6-498f-a230-cfc268040c12"],

Cell[BoxData[
 RowBox[{"IGRandomWalk", "[", 
  RowBox[{
   RowBox[{"IGEmptyGraph", "[", "1", "]"}], ",", "1", ",", "10"}], 
  "]"}]], "Input",ExpressionUUID->"8354af4f-0faf-4ae9-8c26-c4418252dc19"],

Cell[BoxData[
 RowBox[{"IGRandomWalk", "[", 
  RowBox[{
   RowBox[{"Graph", "[", 
    RowBox[{"{", 
     RowBox[{"1", "\[Rule]", "2"}], "}"}], "]"}], ",", "1", ",", "10"}], 
  "]"}]], "Input",ExpressionUUID->"b603c48e-012e-45d0-ad45-caf10fb5d207"],

Cell["\<\
How much time does a random walker spend on each node of a network?\
\>", "Text",ExpressionUUID->"4518dfc8-355d-41de-8e5d-f56ef6a53d3f"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"IGBarabasiAlbertGame", "[", 
   RowBox[{"50", ",", " ", "2", ",", 
    RowBox[{"DirectedEdges", "\[Rule]", "False"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"01ab28ff-e8e0-4656-8b9d-749cc83dbe3e"],

Cell[BoxData[
 RowBox[{"counts", "=", 
  RowBox[{
   RowBox[{"Counts", "@", 
    RowBox[{"IGRandomWalk", "[", 
     RowBox[{"g", ",", 
      RowBox[{"First", "@", 
       RowBox[{"VertexList", "[", "g", "]"}]}], ",", "10000"}], "]"}]}], "/@", 
   RowBox[{
   "VertexList", "[", "g", 
    "]"}]}]}]], \
"Input",ExpressionUUID->"b5ed91c5-020d-456b-a8f1-00b40c3cebe0"],

Cell["\<\
The exact answer can be computed as the leading eigenvector of the process\
\[CloseCurlyQuote]s stochastic matrix:\
\>", "Text",ExpressionUUID->"315304b3-a37e-4f4a-8a18-23f495468999"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"sm", "=", 
   RowBox[{"Transpose", "[", 
    FractionBox[
     RowBox[{"AdjacencyMatrix", "[", "g", "]"}], 
     RowBox[{"VertexDegree", "[", "g", "]"}]], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "val", "}"}], ",", 
     RowBox[{"{", "vec", "}"}]}], "}"}], "=", 
   RowBox[{"Eigensystem", "[", 
    RowBox[{
     RowBox[{"N", "[", "sm", "]"}], ",", "1", ",", 
     RowBox[{"Method", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<Arnoldi\>\"", ",", 
        RowBox[{"\"\<Criteria\>\"", "\[Rule]", "\"\<RealPart\>\""}]}], 
       "}"}]}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.700471250162715*^9, 3.7004712609878902`*^9}, 
   3.700471575707294*^9, 
   3.700471758894938*^9},ExpressionUUID->"fe392bc2-70e4-4838-80c4-\
2aacd7ffb4a9"],

Cell["Compare the exact answer with a finite sample:", \
"Text",ExpressionUUID->"fcb097bc-c2f6-48f6-9bb3-f679991be27f"],

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     FractionBox["vec", 
      RowBox[{"Total", "[", "vec", "]"}]], ",", 
     FractionBox["counts", 
      RowBox[{"Total", "[", "counts", "]"}]]}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<exact\>\"", ",", "\"\<sampled\>\""}], "}"}]}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"PointSize", "[", "0.02", "]"}]}]}], 
  "]"}]], "Input",ExpressionUUID->"4f53d052-090f-4156-9740-749ead274d5c"],

Cell["Random walk on a square grid.", \
"Text",ExpressionUUID->"7bbe06c3-eca0-43e4-b6a8-0c748465efdc"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"grid", "=", 
   RowBox[{"IGSquareLattice", "[", 
    RowBox[{"{", 
     RowBox[{"50", ",", "50"}], "}"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"counts", "=", 
   RowBox[{"Counts", "@", 
    RowBox[{"IGRandomWalk", "[", 
     RowBox[{"grid", ",", "1", ",", "5000"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Graph", "[", 
  RowBox[{"grid", ",", "\[IndentingNewLine]", 
   RowBox[{"VertexStyle", "\[Rule]", "\[IndentingNewLine]", 
    RowBox[{"Prepend", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Normal", "[", 
       RowBox[{
        RowBox[{"ColorData", "[", "\"\<SolarColors\>\"", "]"}], "/@", 
        RowBox[{"Normalize", "[", 
         RowBox[{"counts", ",", "Max"}], "]"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "Black"}], " ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"colour", " ", "of", " ", "unvisited", " ", "nodes"}], ",", 
       " ", 
       RowBox[{
        RowBox[{"i", ".", "e", ".", " ", "default"}], " ", "colour"}]}], " ", 
      "*)"}], "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"EdgeShapeFunction", "\[Rule]", "None"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Background", "\[Rule]", "Black"}]}], "\[IndentingNewLine]", 
  "]"}]}], "Input",ExpressionUUID->"2705c14d-1f14-47af-895b-c8539e441b89"],

Cell[TextData[{
 "The fraction of nodes reached after ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "d3aa7867-0024-4d90-beee-69db84803b2d"],
 " steps on a grid and a comparable random regular graph."
}], "Text",ExpressionUUID->"731b4fe1-8f09-4213-bff4-ea717e1bc7d4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"nodesReached", "[", "graph_", "]"}], ":=", 
  RowBox[{
   RowBox[{"Length", "@", 
    RowBox[{"Union", "@", 
     RowBox[{"IGRandomWalk", "[", 
      RowBox[{"graph", ",", "1", ",", 
       RowBox[{"VertexCount", "[", "graph", "]"}]}], "]"}]}]}], "/", 
   RowBox[{
   "VertexCount", "[", "graph", 
    "]"}]}]}]], \
"Input",ExpressionUUID->"940e8f89-9f25-48d3-a35f-7a44b9ab9463"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"grid", "=", 
   RowBox[{"IGSquareLattice", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"50", ",", "50"}], "}"}], ",", 
     RowBox[{"\"\<Periodic\>\"", "\[Rule]", "True"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"regular", "=", 
   RowBox[{"IGKRegularGame", "[", 
    RowBox[{
     RowBox[{"50", "^", "2"}], ",", "4"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"84e2690e-e6d9-427b-aa66-69d305785911"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"nodesReached", "[", "grid", "]"}], ",", 
       RowBox[{"nodesReached", "[", "regular", "]"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", "5000", "}"}]}], "\[IndentingNewLine]", "]"}], "//", 
   "Transpose"}], "//", "Histogram"}]], "Input",
 CellChangeTimes->{{3.7320909738747272`*^9, 3.732091186008028*^9}, {
  3.732091274569211*^9, 3.732091292695613*^9}, {3.7320913303263702`*^9, 
  3.732091331949128*^9}, {3.732091371475749*^9, 3.732091397098412*^9}, {
  3.7320914887877817`*^9, 
  3.7320914890560102`*^9}},ExpressionUUID->"3fc77ed8-1211-44b7-9f73-\
520145c45392"],

Cell["\<\
Generate random spanning trees using loop erased random walks.\
\>", "Text",ExpressionUUID->"41d53b24-6e88-4976-a343-faa0e24a14ba"],

Cell[BoxData[
 RowBox[{
  RowBox[{"randomSpanningTree", "[", 
   RowBox[{"graph_", "?", "GraphQ"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"visited", "=", 
       RowBox[{"<|", "|>"}]}], ",", 
      RowBox[{"i", "=", "2"}], ",", 
      RowBox[{"k", "=", "1"}], ",", 
      RowBox[{"batchSize", "=", 
       RowBox[{"2", 
        RowBox[{"VertexCount", "[", "graph", "]"}]}]}], ",", "walk"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"walk", "=", 
      RowBox[{"IGRandomWalk", "[", 
       RowBox[{"graph", ",", 
        RowBox[{"RandomChoice", "@", 
         RowBox[{"VertexList", "[", "graph", "]"}]}], ",", "batchSize"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"visited", "[", 
       RowBox[{"walk", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
        "]"}], "=", "True"}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"While", "[", 
         RowBox[{
          RowBox[{"k", "<", 
           RowBox[{"VertexCount", "[", "graph", "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "register", " ", "a", " ", "traversed", " ", "edge", " ", "only", 
            " ", "when", " ", "it", " ", "leads", " ", "to", " ", "a", " ", 
            "yet", " ", "unvisited", " ", "vertex"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"TrueQ", "[", 
               RowBox[{"visited", "[", 
                RowBox[{
                "walk", "\[LeftDoubleBracket]", "i", 
                 "\[RightDoubleBracket]"}], "]"}], "]"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Sow", "[", 
               RowBox[{
                RowBox[{"walk", "\[LeftDoubleBracket]", 
                 RowBox[{"i", "-", "1"}], "\[RightDoubleBracket]"}], 
                "\[UndirectedEdge]", 
                RowBox[{
                "walk", "\[LeftDoubleBracket]", "i", 
                 "\[RightDoubleBracket]"}]}], "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"visited", "[", 
                RowBox[{
                "walk", "\[LeftDoubleBracket]", "i", 
                 "\[RightDoubleBracket]"}], "]"}], "=", "True"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"k", "++"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"i", "++"}], ";", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{
             "if", " ", "the", " ", "walk", " ", "has", " ", "not", " ", 
              "yet", " ", "visited", " ", "all", " ", "vertices"}], ",", " ", 
             
             RowBox[{"keep", " ", "walking"}]}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"i", ">", 
              RowBox[{"Length", "[", "walk", "]"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"walk", "=", 
              RowBox[{"Join", "[", 
               RowBox[{"walk", ",", 
                RowBox[{"Rest", "@", 
                 RowBox[{"IGRandomWalk", "[", 
                  RowBox[{"graph", ",", 
                   RowBox[{"Last", "[", "walk", "]"}], ",", "batchSize"}], 
                  "]"}]}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}], ";"}]}],
          "\[IndentingNewLine]", "]"}], "//", "Reap"}], "//", "Last"}], "//", 
      "First"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",ExpressionUUID->"6a715f0a-af4b-4add-a922-2065324e3f97"],

Cell["\<\
By taking random spanning trees of spatially embedded planar graphs, we can \
generate mazes.\
\>", "Text",ExpressionUUID->"6d3df847-1c26-47df-9399-c7d77005e195"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"graph", "=", 
   RowBox[{"IGSquareLattice", "[", 
    RowBox[{"{", 
     RowBox[{"15", ",", "15"}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Graph", "[", 
  RowBox[{
   RowBox[{"VertexList", "[", "graph", "]"}], ",", 
   RowBox[{"randomSpanningTree", "[", "graph", "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"VertexCoordinates", "\[Rule]", 
    RowBox[{"GraphEmbedding", "[", "graph", "]"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"GraphStyle", "\[Rule]", "\"\<ThickEdge\>\""}], ",", 
   RowBox[{"VertexShapeFunction", "\[Rule]", "None"}], ",", 
   RowBox[{"EdgeStyle", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[0.5, 0.6, 0.8], Opacity[1], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        DefaultBaseStyle->"ColorSwatchGraphics",
        Frame->True,
        FrameStyle->RGBColor[
         0.33333333333333337`, 0.4, 0.5333333333333334, 1.],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       StyleBox[
        RowBox[{"RGBColor", "[", 
          RowBox[{"0.5`", ",", "0.6`", ",", "0.8`", ",", "1"}], "]"}], 
        NumberMarks -> False]],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[0.5, 0.6, 0.8]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.5, 0.6, 0.8, 1],
     Editable->False,
     Selectable->False]}]}], "\[IndentingNewLine]", 
  "]"}]}], "Input",ExpressionUUID->"4c82fa0d-a570-4013-a828-955d31d4c984"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"graph", "=", 
   RowBox[{"IGMeshGraph", "@", 
    RowBox[{"DiscretizeRegion", "@", 
     RowBox[{"Disk", "[", "]"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Graph", "[", 
  RowBox[{
   RowBox[{"VertexList", "[", "graph", "]"}], ",", 
   RowBox[{"randomSpanningTree", "[", "graph", "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"VertexCoordinates", "\[Rule]", 
    RowBox[{"GraphEmbedding", "[", "graph", "]"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"GraphStyle", "\[Rule]", "\"\<ThickEdge\>\""}], ",", 
   RowBox[{"VertexShapeFunction", "\[Rule]", "None"}], ",", 
   RowBox[{"EdgeStyle", "\[Rule]", 
    RowBox[{"Directive", "[", 
     RowBox[{
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {RGBColor[0.8, 0.6, 0.5], Opacity[1], 
            RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          
          FrameStyle->RGBColor[
           0.5333333333333334, 0.4, 0.33333333333333337`, 1.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 
             1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"RGBColor", "[", 
            RowBox[{"0.8`", ",", "0.6`", ",", "0.5`", ",", "1"}], "]"}], 
          NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = 
            RGBColor[0.8, 0.6, 0.5]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["RGBColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       RGBColor[0.8, 0.6, 0.5, 1],
       Editable->False,
       Selectable->False], ",", 
      RowBox[{"AbsoluteThickness", "[", "4", "]"}]}], "]"}]}]}], 
  "\[IndentingNewLine]", 
  "]"}]}], "Input",ExpressionUUID->"2340ef04-7e71-425a-8dc6-cfbfb8725f0c"],

Cell["\<\
Take a sample of a large graph using a random walk. The following graph is \
too large to easily visualize, but visualizing a random-walk-based sample \
immediately shows signs of a community structure.\
\>", "Text",ExpressionUUID->"56d98ae1-246e-40a2-978f-2bd8df84c4a8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{"{", 
     RowBox[{
     "\"\<NetworkGraph\>\"", ",", "\"\<AstrophysicsCollaborations\>\""}], 
     "}"}], "]"}]}], ";"}], "\n", 
 RowBox[{"{", 
  RowBox[{
   RowBox[{"VertexCount", "[", "g", "]"}], ",", 
   RowBox[{"VertexCount", "@", 
    RowBox[{"IGGiantComponent", "[", "g", "]"}]}]}], 
  "}"}]}], "Input",ExpressionUUID->"58bc6d20-c568-4c64-96f8-259bb70cd26e"],

Cell[BoxData[
 RowBox[{"Subgraph", "[", 
  RowBox[{"g", ",", 
   RowBox[{"IGRandomWalk", "[", 
    RowBox[{"g", ",", 
     RowBox[{"RandomChoice", "@", 
      RowBox[{"VertexList", "@", 
       RowBox[{"IGGiantComponent", "[", "g", "]"}]}]}], ",", "200"}], "]"}]}],
   "]"}]], "Input",ExpressionUUID->"9d19f1e1-7d8a-4cfa-a7a0-ac8f19cba2d8"],

Cell[BoxData[
 RowBox[{"CommunityGraphPlot", "[", "%", 
  "]"}]], "Input",ExpressionUUID->"5ff5def9-498a-4bb3-87a1-581985a6f7d8"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGRandomEdgeWalk and IGRandomEdgeIndexWalk", \
"Subsubsection",ExpressionUUID->"db51fa53-2dcc-4547-a770-4cbf91676ce0"],

Cell[BoxData[
 RowBox[{"?", 
  "IGRandomEdgeWalk"}]], \
"Input",ExpressionUUID->"f2ccc595-8651-4279-b697-9ff268853856"],

Cell[BoxData[
 RowBox[{"?", 
  "IGRandomEdgeIndexWalk"}]], \
"Input",ExpressionUUID->"d31255a3-f65d-4d13-aa77-7529e27fb7fd"],

Cell[TextData[{
 Cell[BoxData[
 "IGRandomEdgeWalk"],ExpressionUUID->"94ba92be-25e4-4540-b8c8-7671071e50e6"],
 " takes a random walk on a graph and returns the list of traversed edges. If \
the graph is weighted, the next edge to traverse is selected with probability \
proportional to its weight."
}], "Text",ExpressionUUID->"cf55b1e4-c2f5-485a-a3ce-d8045a69ba28"],

Cell["The available options are:", \
"Text",ExpressionUUID->"b033a79e-c098-4d95-bae1-ccd2c2f3fc9e"],

Cell[TextData[{
 Cell[BoxData[
 "EdgeWeight"],ExpressionUUID->"a2251010-80f9-446b-bfba-5e06f8e9cfce"],
 " can be used to override the existing weights of the graph. ",
 Cell[BoxData[
  RowBox[{"EdgeWeight", "\[Rule]", "None"}]],ExpressionUUID->
  "7374767c-e63e-4e48-ad0b-b1c592dd315b"],
 " will ignore any existing weights."
}], "Item",
 InitializationCell->
  True,ExpressionUUID->"d173dbfd-342a-40a0-9725-b9e38a808b14"],

Cell["\<\
Take a random walk on a De Bruijn graph, and retrieve the traversed edges.\
\>", "Text",ExpressionUUID->"930cf56b-5b1b-47f6-8345-cfd9b54b8727"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"IGDeBruijnGraph", "[", 
    RowBox[{"3", ",", "3"}], "]"}]}], ";"}], "\n", 
 RowBox[{"IGRandomEdgeWalk", "[", 
  RowBox[{"g", ",", 
   RowBox[{"RandomChoice", "@", 
    RowBox[{"VertexList", "[", "g", "]"}]}], ",", "20"}], 
  "]"}]}], "Input",ExpressionUUID->"dc186e4d-684f-4300-84a7-f40de0ac0906"],

Cell[TextData[{
 Cell[BoxData[
 "IGRandomEdgeIndexWalk"],ExpressionUUID->
  "4e618bb5-fd31-4754-a923-50b060e5b2ad"],
 " returns the list of indices of the traversed edges instead. This makes it \
useful for working with multigraphs, as it allows distinguishing between \
parallel edges."
}], "Text",ExpressionUUID->"f0bf8b59-db06-4c5f-9b2f-cdbf80c77c16"],

Cell["\<\
As an example application, let us consider the following set of affine \
transformations:\
\>", "Text",ExpressionUUID->"c3bd6bfe-16ac-4052-ba07-a7f9dac1f989"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"scale12", "=", 
   RowBox[{"ScalingTransform", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "/", "2"}], ",", 
      RowBox[{"1", "/", "2"}]}], "}"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"a11", "=", 
   RowBox[{
    RowBox[{"TranslationTransform", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "/", "4"}], ",", 
       RowBox[{
        SqrtBox["3"], "/", "4"}]}], "}"}], "]"}], "@*", "scale12"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"a21", "=", 
   RowBox[{
    RowBox[{"RotationTransform", "[", 
     RowBox[{"Pi", "/", "3"}], "]"}], "@*", "scale12"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"b21", "=", 
   RowBox[{
    RowBox[{"TranslationTransform", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"3", "/", "4"}], ",", 
       RowBox[{
        SqrtBox["3"], "/", "4"}]}], "}"}], "]"}], "@*", 
    RowBox[{"RotationTransform", "[", 
     RowBox[{
      RowBox[{"-", "Pi"}], "/", "3"}], "]"}], "@*", "scale12"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"a12", "=", 
   RowBox[{
    RowBox[{"TranslationTransform", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "/", "2"}], ",", "0"}], "}"}], "]"}], "@*", 
    RowBox[{"ScalingTransform", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "/", "2"}], ",", 
       RowBox[{
        RowBox[{"-", "1"}], "/", "2"}]}], "}"}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"a22", "=", "scale12"}], 
  ";"}]}], "Input",ExpressionUUID->"c352de74-f85f-43f4-aa11-c08f3d6a6fab"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trafos", "=", 
   RowBox[{"{", 
    RowBox[{"a11", ",", "a21", ",", "b21", ",", "a12", ",", "a22"}], "}"}]}], 
  ";"}]], "Input",ExpressionUUID->"fdc47f92-459f-419b-b72c-e30029afebff"],

Cell["\<\
Let us visualize them by showing an initial (black) triangle and its (red) \
transformation.\
\>", "Text",ExpressionUUID->"0c75bf21-2866-4023-8276-cc1903a2e5f6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"tri", "=", 
   RowBox[{"Triangle", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"1", "/", "2"}], ",", 
        RowBox[{
         SqrtBox["3"], "/", "2"}]}], "}"}]}], "}"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Graphics", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tri", ",", "Red", ",", 
       RowBox[{"GeometricTransformation", "[", 
        RowBox[{"tri", ",", "#"}], "]"}]}], "}"}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "Tiny"}]}], "]"}], "&"}], "/@", 
  "trafos"}]}], \
"Input",ExpressionUUID->"08499770-7252-4c1d-9b71-58955ee55336"],

Cell["\<\
These transformations describe the mutual self-similarity structure of two \
fractal curves, according to the following directed graph. Each edge of the \
graph corresponds to a transformation.\
\>", "Text",ExpressionUUID->"b22b35ed-2d38-4e8e-8de2-7fdb9c1bcd09"],

Cell[BoxData[
 RowBox[{"graph", "=", 
  RowBox[{"Graph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "\[Rule]", "1"}], ",", 
      RowBox[{"2", "\[Rule]", "1"}], ",", 
      RowBox[{"2", "\[Rule]", "1"}], ",", 
      RowBox[{"1", "\[Rule]", "2"}], ",", 
      RowBox[{"2", "\[Rule]", "2"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"VertexLabels", "\[Rule]", 
     RowBox[{"Placed", "[", 
      RowBox[{"\"\<Name\>\"", ",", "Center"}], "]"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"VertexShape", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", 
        GraphicsBox[
         TagBox[RasterBox[CompressedData["
1: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
           "], {{0, 
           314}, {360, 0}}, {0, 255},
           ColorFunction->RGBColor],
          BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
          
          Selectable->False],
         DefaultBaseStyle->"ImageGraphics",
         ImageSizeRaw->{360, 314},
         PlotRange->{{0, 360}, {0, 314}}]}], ",", 
       RowBox[{"2", "\[Rule]", 
        GraphicsBox[
         TagBox[RasterBox[CompressedData["
1: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
7RXAA9QNAKUoGgAAAAAAAAAAAACAYf4G0E7JMg==
           "], {{0, 164}, {360, 
           0}}, {0, 255},
           ColorFunction->RGBColor],
          BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
          
          Selectable->False],
         DefaultBaseStyle->"ImageGraphics",
         ImageSizeRaw->{360, 164},
         PlotRange->{{0, 360}, {0, 164}}]}]}], "}"}]}], ",", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"VertexSize", "\[Rule]", 
     FractionBox["1", "3"]}], ",", 
    RowBox[{"ImageSize", "\[Rule]", "400"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",ExpressionUUID->"e3a9e101-4bf9-4424-9ba7-fb5e726ac6d8"],

Cell[TextData[{
 "Let us compute a random walk on this graph, and iteratively apply \
transformations to the point ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"0", ",", "0"}], "}"}]],ExpressionUUID->
  "3904fd5e-df7e-4b6a-baf0-862c1ac42079"],
 " according to the traversed edges."
}], "Text",ExpressionUUID->"0109693d-16d5-4a39-b59e-4b14d23830c8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"walk", "=", 
   RowBox[{"IGRandomEdgeIndexWalk", "[", 
    RowBox[{"graph", ",", "1", ",", "20000"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"pts", "=", 
   RowBox[{"Rest", "@", 
    RowBox[{"FoldList", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"#2", "[", "#1", "]"}], "&"}], ",", 
      RowBox[{"{", 
       RowBox[{"0.", ",", "0."}], "}"}], ",", 
      RowBox[{
      "trafos", "\[LeftDoubleBracket]", "walk", "\[RightDoubleBracket]"}]}], 
     "]"}]}]}], 
  ";"}]}], "Input",ExpressionUUID->"bb0031f6-6894-4730-a3aa-6424dc8001f3"],

Cell["\<\
The resulting list of points will approximate the union of the two fractal \
curves.\
\>", "Text",ExpressionUUID->"656d6ab6-d05a-43bc-894a-62a15d26ea23"],

Cell[BoxData[
 RowBox[{"Image", "@", 
  RowBox[{"Graphics", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"AbsolutePointSize", "[", "1", "]"}], ",", 
     RowBox[{"Point", "[", "pts", "]"}]}], "}"}], 
   "]"}]}]], "Input",ExpressionUUID->"24ad112e-931e-4812-be8f-cf7869c83506"],

Cell[TextData[{
 "The two curves can be separated by filtering points according to which \
graph vertex the corresponding directed edge targets. For example, if the \
point was generated by a transformation corresponding to ",
 Cell[BoxData[
  RowBox[{"1", "\[DirectedEdge]", "2"}]],ExpressionUUID->
  "3025dd7c-862e-45b9-9e7b-d7c5f1c51869"],
 ", it will belong to curve ",
 Cell[BoxData["2"],ExpressionUUID->"569d8274-cbff-4dee-aa60-50536df21484"],
 "."
}], "Text",ExpressionUUID->"b8b2f72f-b1e0-4e83-a39e-70484cf83d75"],

Cell[BoxData[
 RowBox[{"targets", "=", 
  RowBox[{"Last", "/@", 
   RowBox[{
   "EdgeList", "[", "graph", 
    "]"}]}]}]], \
"Input",ExpressionUUID->"55c0be18-9047-43de-b292-d8f4da34e6f1"],

Cell[BoxData[
 RowBox[{"Image", "@", 
  RowBox[{"Graphics", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"AbsolutePointSize", "[", "1", "]"}], ",", 
     RowBox[{"Point", "@", 
      RowBox[{"Pick", "[", 
       RowBox[{"pts", ",", 
        RowBox[{
        "targets", "\[LeftDoubleBracket]", "walk", "\[RightDoubleBracket]"}], 
        ",", "1"}], "]"}]}]}], "}"}], 
   "]"}]}]], "Input",ExpressionUUID->"d7a955f7-9a68-4da5-9011-5effc65605c5"],

Cell[BoxData[
 RowBox[{"Image", "@", 
  RowBox[{"Graphics", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"AbsolutePointSize", "[", "1", "]"}], ",", 
     RowBox[{"Point", "@", 
      RowBox[{"Pick", "[", 
       RowBox[{"pts", ",", 
        RowBox[{
        "targets", "\[LeftDoubleBracket]", "walk", "\[RightDoubleBracket]"}], 
        ",", "2"}], "]"}]}]}], "}"}], 
   "]"}]}]], "Input",ExpressionUUID->"94902cbf-b010-42df-bfc8-25b83fde685f"],

Cell[TextData[{
 "The technique described here is taken from \[OpenCurlyDoubleQuote]",
 ButtonBox["Generating self-affine tiles and their boundaries",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.mathematica-journal.com/2009/01/generating-self-affine-\
tiles-and-their-boundaries/"], None},
  ButtonNote->
   "http://www.mathematica-journal.com/2009/01/generating-self-affine-tiles-\
and-their-boundaries/"],
 "\[CloseCurlyDoubleQuote] by Mark McClure."
}], "Text",ExpressionUUID->"768f3661-fa65-486a-9f55-bbd9e6193547"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Epidemic models", \
"Subsection",ExpressionUUID->"41ec00aa-b581-48f5-8321-5e522691fe5c"],

Cell[CellGroupData[{

Cell["IGSIRProcess", \
"Subsubsection",ExpressionUUID->"4e454d72-f6eb-4dbd-a566-4cd90376ef42"],

Cell[BoxData[
 RowBox[{"?", 
  "IGSIRProcess"}]], \
"Input",ExpressionUUID->"7d39453a-416f-4564-bdde-b58d92005cad"],

Cell[TextData[{
 Cell[BoxData[
 "IGSIRProcess"],ExpressionUUID->"01db7658-1aa3-4214-977a-433a65bc6794"],
 " simulates a stochastic version of the well known SIR model of disease \
spreading. In this model, each node of the network may be in one of three \
states: susceptible, infected or recovered, denoted by ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "2e18e07e-cd4c-4e0a-965a-1d431d99240d"],
 ", ",
 Cell[BoxData[
  FormBox["I", TraditionalForm]],ExpressionUUID->
  "bbba1b25-a0fc-4d00-9259-d2c8036e0511"],
 " and ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]],ExpressionUUID->
  "abafa3fa-d2f1-4597-a4ce-def4b1764ec9"],
 ", respectively. A susceptible node with ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "f37fa7ff-5a5a-4218-b753-8287935d94cc"],
 " infected neighbours becomes infected with rate ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", " ", "\[Beta]"}], TraditionalForm]],ExpressionUUID->
  "b2e16bc0-364b-4e75-902a-66913287e8bf"],
 ", while an infected node recovers with rate ",
 Cell[BoxData[
  FormBox["\[Gamma]", TraditionalForm]],ExpressionUUID->
  "44607de4-6dd3-437b-b8f7-a9b5f7391214"],
 ". At the start of the simulation, a random node is chosen to be infected. \
The simulation runs until no more infected nodes are left."
}], "Text",ExpressionUUID->"3f165716-d148-4999-b49a-db7db4648753"],

Cell[TextData[{
 "When performing a single simulation, ",
 Cell[BoxData[
 "IGSIRProcess"],ExpressionUUID->"9882ff62-10d0-43b9-9412-654040a54d03"],
 " returns a ",
 ButtonBox["TimeSeries",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TimeSeries"],
 " expression of ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"s", ",", "i", ",", "r"}], "}"}]],ExpressionUUID->
  "752a6eb4-6219-4164-a5d0-281e0fd7a965"],
 " values. When multiple runs are requested, the resulting time series are \
combined into a ",
 ButtonBox["TemporalData",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TemporalData"],
 " expression."
}], "Text",ExpressionUUID->"7f27facb-431e-4720-a56a-48250eee304e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"IGWattsStrogatzGame", "[", 
    RowBox[{"100", ",", " ", "0.05"}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"ded4f967-1aae-4d44-9ddb-dc23c091add8"],

Cell["Perform a single SIR simulation:", \
"Text",ExpressionUUID->"cbd5f5e5-e305-4b35-83e7-3d95e25b169b"],

Cell[BoxData[
 RowBox[{"ts", "=", 
  RowBox[{"IGSIRProcess", "[", 
   RowBox[{"g", ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "1"}], "}"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"51b8b63f-473b-4dc8-a437-7106bf1aa117"],

Cell["Plot the results with a legend:", \
"Text",ExpressionUUID->"4e491e8e-ec34-484c-bcf3-902ef36a0bae"],

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{"ts", ",", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"ts", "[", "\"\<ComponentNames\>\"", "]"}]}]}], 
  "]"}]], "Input",ExpressionUUID->"d1a0d3e6-9728-4428-803c-dd5e4087f816"],

Cell["Plot only the number of infected nodes:", \
"Text",ExpressionUUID->"d20e772c-35df-427b-afae-acd4e28a6e46"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"In", " ", "Mathematica", " ", "12.0", " ", "and", " ", "later"}],
     ",", "\[IndentingNewLine]", "   ", 
    RowBox[{
     RowBox[{"ts", "[", 
      RowBox[{"\"\<PathComponent\>\"", ",", " ", "\"\<I\>\""}], "]"}], " ", 
     "can", " ", "also", " ", "be", " ", 
     RowBox[{"used", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"ListLinePlot", "[", 
   RowBox[{
    RowBox[{"ts", "[", 
     RowBox[{"\"\<PathComponent\>\"", ",", "2"}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"AxesLabel", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<time\>\"", ",", "\"\<infected\>\""}], "}"}]}], ",", 
    RowBox[{"PlotStyle", "\[Rule]", 
     RowBox[{
      RowBox[{"ColorData", "[", "97", "]"}], "[", "2", "]"}]}]}], 
   "]"}]}]], "Input",ExpressionUUID->"49291bfd-58ed-4913-a84e-e9e14605b1ff"],

Cell["\<\
Find the number of susceptible, infected and recovered nodes at a specific \
time point:\
\>", "Text",ExpressionUUID->"830a2a47-04d6-447d-b4f3-84342cf2605d"],

Cell[BoxData[
 RowBox[{"ts", "[", "1.0", 
  "]"}]], "Input",ExpressionUUID->"6aa72ebc-165c-498b-b364-9315a14d75c9"],

Cell[TextData[{
 "The ",
 ButtonBox["ResamplingMethod",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ResamplingMethod"],
 " of the ",
 ButtonBox["TimeSeries",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TimeSeries"],
 " object is set to 0th order interpolation, therefore the last value is used \
beyond the last available time point."
}], "Text",ExpressionUUID->"2b82d8f4-1d61-443e-a2e4-a67730da23b6"],

Cell[BoxData[
 RowBox[{"ts", "[", "10", 
  "]"}]], "Input",ExpressionUUID->"3349a0cd-c3c2-4bde-8c5f-bc8bbe00e608"],

Cell["Perform 100 simulations simultaneously:", \
"Text",ExpressionUUID->"a61d32f2-d8fd-4eca-ad80-a1de2f20fa46"],

Cell[BoxData[
 RowBox[{"td", "=", 
  RowBox[{"IGSIRProcess", "[", 
   RowBox[{"g", ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "1"}], "}"}], ",", "100"}], 
   "]"}]}]], "Input",ExpressionUUID->"0a115a0a-2008-4544-8ccb-2d69846d0b6e"],

Cell["\<\
Plot the median number of susceptible, infected and recovered nodes:\
\>", "Text",ExpressionUUID->"47dd7c6d-d25c-4c1f-8485-81b1498281ba"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Show", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ListLinePlot", "[", 
       RowBox[{"#", ",", 
        RowBox[{"PlotStyle", "\[Rule]", 
         RowBox[{"GrayLevel", "[", 
          RowBox[{"0", ",", "0.1"}], "]"}]}], ",", 
        RowBox[{"PlotRange", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"VertexCount", "[", "g", "]"}]}], "}"}]}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Quiet", "@", 
       RowBox[{"Plot", "[", 
        RowBox[{
         RowBox[{"Median", "[", 
          RowBox[{"#", "[", "t", "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"t", ",", "0", ",", "4"}], "}"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", "Red"}]}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}], "&"}], "/@", 
   RowBox[{"td", "[", "\"\<PathComponents\>\"", "]"}]}], "//", 
  "GraphicsColumn"}]], \
"Input",ExpressionUUID->"9d20f850-ba80-4745-9287-474c4b829e57"],

Cell[TextData[{
 "The sum of the three components, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"S", "+", "I", "+", "R"}], TraditionalForm]],ExpressionUUID->
  "85e43b87-5d92-499b-bc7a-00ff302a8a52"],
 ", always equals the total number of graph nodes."
}], "Text",ExpressionUUID->"030d747c-878f-47e5-b5f4-74553a66b5fa"],

Cell[BoxData[
 RowBox[{
  RowBox[{"First", "@", 
   RowBox[{"Normal", "@", 
    RowBox[{"Total", "[", 
     RowBox[{"td", "[", "\"\<PathComponents\>\"", "]"}], "]"}]}]}], "//", 
  "Short"}]], "Input",ExpressionUUID->"9a4537b5-8717-4acb-abad-ebcbe88ae421"],

Cell["\<\
In the next example, we compare epidemic spreading on a periodic grid, i.e. a \
network that only has spatially local connections, with a rewired version of \
the same network which also includes long range links. We rewire 5% of links \
while ensuring that the graph stays connected.\
\>", "Text",ExpressionUUID->"08e82ff3-60ed-4c0a-aa1c-d444c612f09b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g1", "=", 
   RowBox[{"IGSquareLattice", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"30", ",", "30"}], "}"}], ",", 
     RowBox[{"\"\<Periodic\>\"", "\[Rule]", "True"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"g2", "=", 
   RowBox[{
    RowBox[{"IGTryUntil", "[", "IGConnectedQ", "]"}], "[", 
    RowBox[{"IGRewireEdges", "[", 
     RowBox[{"g1", ",", "0.05"}], "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.790618781232785*^9, 3.790618782101542*^9}, 
   3.790619794869104*^9},ExpressionUUID->"3468152d-031c-4c2f-a378-\
6012094785f2"],

Cell["Generate 1000 simulations for each network.", \
"Text",ExpressionUUID->"cba88440-c7eb-4256-9b88-af0b7948aab0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"r1", "=", 
   RowBox[{"IGSIRProcess", "[", 
    RowBox[{"g1", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], ",", "1000"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"r2", "=", 
   RowBox[{"IGSIRProcess", "[", 
    RowBox[{"g2", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], ",", "1000"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.790618810675172*^9, 3.790618836795781*^9}, {
  3.790618877300055*^9, 3.7906188783151073`*^9}, {3.790619810575077*^9, 
  3.790619814255632*^9}, {3.79061994357511*^9, 
  3.7906199524773083`*^9}},ExpressionUUID->"7291aee0-0d27-4157-a764-\
db0723cf368a"],

Cell["Plot the histogram of the total duration of the epidemic.", \
"Text",ExpressionUUID->"b07dd4f1-f1ab-4dda-8639-ad408a4bea45"],

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"r1", "[", "\"\<LastTimes\>\"", "]"}], ",", 
     RowBox[{"r2", "[", "\"\<LastTimes\>\"", "]"}]}], "}"}], ",", 
   RowBox[{"ChartLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<grid\>\"", ",", "\"\<rewired\>\""}], "}"}]}]}], 
  "]"}]], "Input",ExpressionUUID->"57b21fb0-6e61-43f5-aa70-a1ee42412693"],

Cell["\<\
Plot the fraction of recovered nodes at the end of the epidemic.\
\>", "Text",ExpressionUUID->"78c9bb3f-83e9-40ea-abb3-2a4acc9680ba"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"tmax", "=", 
   RowBox[{"Max", "[", 
    RowBox[{
     RowBox[{"r1", "[", "\"\<MaximumTime\>\"", "]"}], ",", 
     RowBox[{"r2", "[", "\"\<MaximumTime\>\"", "]"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{"Histogram", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"r1", "[", 
         RowBox[{"\"\<PathComponent\>\"", ",", "3"}], "]"}], "[", 
        RowBox[{"\"\<SliceData\>\"", ",", "tmax"}], "]"}], "/", 
       RowBox[{"VertexCount", "[", "g1", "]"}]}], ",", "\[IndentingNewLine]", 
      
      RowBox[{
       RowBox[{
        RowBox[{"r2", "[", 
         RowBox[{"\"\<PathComponent\>\"", ",", "3"}], "]"}], "[", 
        RowBox[{"\"\<SliceData\>\"", ",", "tmax"}], "]"}], "/", 
       RowBox[{"VertexCount", "[", "g2", "]"}]}]}], "}"}], "//", "Quiet"}], 
   ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0.02"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"ChartLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<grid\>\"", ",", "\"\<rewired\>\""}], "}"}]}]}], 
  "\[IndentingNewLine]", 
  "]"}]}], "Input",ExpressionUUID->"e0d081e1-ba65-4347-b40f-6c4cb97dad1a"]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Planar graphs", \
"Section",ExpressionUUID->"223f3638-31f2-4426-a20c-15974909b154"],

Cell[TextData[{
 "A graph is said to be ",
 StyleBox["planar",
  FontSlant->"Italic"],
 " if it can be drawn in the plane without edge crossings."
}], "Text",ExpressionUUID->"ee7cb247-5a10-4c14-9828-54bfc750c2cc"],

Cell[TextData[{
 "A useful concept when working with planar graphs is their ",
 ButtonBox["combinatorial embedding",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Rotation_system"], None},
  ButtonNote->"https://en.wikipedia.org/wiki/Rotation_system"],
 ". A combinatorial embedding of a graph is a counter-clockwise ordering of \
the incident edges around each vertex. IGraph/M represents combinatorial \
embeddings as associations from vertices to an ordering of their neighbours. \
Currently, only embeddings of simple graphs are supported."
}], "Text",ExpressionUUID->"65c67031-c233-4487-9441-6d2ee9768f5f"],

Cell[TextData[{
 "Some of the planar graph functionality makes use of the ",
 ButtonBox["LEMON Graph Library",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://lemon.cs.elte.hu/"], None},
  ButtonNote->"http://lemon.cs.elte.hu/"],
 "."
}], "Text",ExpressionUUID->"fa137ed0-62ba-4d7a-8ab9-f20ace023df1"],

Cell[CellGroupData[{

Cell["IGPlanarQ", \
"Subsubsection",ExpressionUUID->"0f7f246e-a6c9-4ed4-bac5-69b4e5446c62"],

Cell[BoxData[
 RowBox[{"?", 
  "IGPlanarQ"}]], \
"Input",ExpressionUUID->"8a8e270b-c623-4a89-a1e6-91518d310e52"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGPlanarQ", "[", "graph", "]"}]],ExpressionUUID->
  "97829770-ad8a-4c76-9fb6-6cbb7498e5fb"],
 " checks if a graph is planar using the Boyer\[Dash]Myrvold algorithm."
}], "Text",ExpressionUUID->"84ec25a8-9480-47b5-a240-cded7dbdc398"],

Cell[BoxData[
 RowBox[{"IGPlanarQ", "@", 
  RowBox[{"GraphData", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<Apollonian\>\"", ",", " ", "6"}], "}"}], 
   "]"}]}]], "Input",ExpressionUUID->"eaddd3b9-a0f6-410d-9f4c-10e2fc22ea94"],

Cell[BoxData[
 RowBox[{"IGPlanarQ", "@", 
  RowBox[{
  "CompleteGraph", "[", "5", 
   "]"}]}]], "Input",ExpressionUUID->"48220b29-dbc3-43a9-a801-27b5e84c7f34"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGPlanarQ", "[", "embedding", "]"}]],ExpressionUUID->
  "05aeffc6-3472-4af6-9375-d36f42b0039c"],
 " checks if a combinatorial embedding is planar. The following are both \
embeddings of the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["K", "4"], TraditionalForm]],ExpressionUUID->
  "e7e02426-b656-445b-b3eb-97337002160d"],
 " complete graph. However, only the first one is planar."
}], "Text",ExpressionUUID->"0b28c3ac-3582-458c-9145-b72e6a6e9eff"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"emb1", "=", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"1", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3", ",", "4"}], "}"}]}], ",", 
     RowBox[{"2", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", ",", "4", ",", "3"}], "}"}]}], ",", 
     RowBox[{"3", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"2", ",", "4", ",", "1"}], "}"}]}], ",", 
     RowBox[{"4", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"3", ",", "2", ",", "1"}], "}"}]}]}], 
    "\[RightAssociation]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"emb2", "=", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"1", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"2", ",", "4", ",", "3"}], "}"}]}], ",", 
     RowBox[{"2", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"4", ",", "3", ",", "1"}], "}"}]}], ",", 
     RowBox[{"3", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "4"}], "}"}]}], ",", 
     RowBox[{"4", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"3", ",", "1", ",", "2"}], "}"}]}]}], 
    "\[RightAssociation]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"d1ded8c7-f7ec-4789-81ae-75ed9476f708"],

Cell[BoxData[
 RowBox[{"IGPlanarQ", "/@", 
  RowBox[{"{", 
   RowBox[{"emb1", ",", "emb2"}], 
   "}"}]}]], "Input",ExpressionUUID->"dd2ca01b-5dcf-49d7-8f23-b756a74c83bf"],

Cell["\<\
The second embedding generates only 2 faces instead of 4, which can be \
embedded on a torus, but not in the plane (or on a sphere).\
\>", "Text",ExpressionUUID->"ac5522d0-e04e-48ed-8f1c-e56e2fae28f0"],

Cell[BoxData[
 RowBox[{"Length", "/@", 
  RowBox[{"IGFaces", "/@", 
   RowBox[{"{", 
    RowBox[{"emb1", ",", "emb2"}], 
    "}"}]}]}]], \
"Input",ExpressionUUID->"14d57c8b-6969-4582-993f-630cb5fcee90"],

Cell[TextData[{
 "Unlike the built-in ",
 Cell[BoxData[
 "PlanarGraphQ"],ExpressionUUID->"f89faa1c-6a62-450f-a4f8-9da7ef57f7e8"],
 ", ",
 Cell[BoxData[
 "IGPlanarQ"],ExpressionUUID->"ca1ab2f0-fb13-496d-b71d-5e58f53dc7af"],
 " considers the null graph to be planar."
}], "Text",ExpressionUUID->"cf07dcf8-ec47-4c4c-8a80-554e2ca22cac"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"IGPlanarQ", "@", 
    RowBox[{"IGEmptyGraph", "[", "]"}]}], ",", 
   RowBox[{"PlanarGraphQ", "@", 
    RowBox[{"IGEmptyGraph", "[", "]"}]}]}], 
  "}"}]], "Input",ExpressionUUID->"5a9bf41a-c57d-4b6b-b968-0a9af8891ad7"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGMaximalPlanarQ", \
"Subsubsection",ExpressionUUID->"e1eec1f6-27fb-4341-b130-e035c1bcd4fe"],

Cell[BoxData[
 RowBox[{"?", 
  "IGMaximalPlanarQ"}]], \
"Input",ExpressionUUID->"63f8bf9d-0b87-454d-aa6b-8494c8de7310"],

Cell[TextData[{
 "A simple graph is ",
 StyleBox["maximal planar",
  FontSlant->"Italic"],
 " if no new edges can be added to it without breaking planarity. Maximal \
planar graphs are sometimes called ",
 StyleBox["triangulated",
  FontSlant->"Italic"],
 " graphs or ",
 StyleBox["triangulations",
  FontSlant->"Italic"],
 "."
}], "Text",ExpressionUUID->"e86136a6-51b3-4cff-a4e1-1765c9b7c6be"],

Cell["The 3-cycle is maximal planar.", \
"Text",ExpressionUUID->"a43311c5-c864-4f40-bc4d-c018b23bfb16"],

Cell[BoxData[
 RowBox[{"IGMaximalPlanarQ", "[", 
  RowBox[{"CycleGraph", "[", "3", "]"}], 
  "]"}]], "Input",ExpressionUUID->"2ef5dc7b-197f-4e96-9a50-936b61fcca77"],

Cell["\<\
The 4-cycle is not because a chord can be added to it without breaking \
planarity.\
\>", "Text",ExpressionUUID->"b243f2f1-bb20-430f-b0c9-e1a8ffa9a40b"],

Cell[BoxData[
 RowBox[{"IGMaximalPlanarQ", "[", 
  RowBox[{"CycleGraph", "[", "4", "]"}], 
  "]"}]], "Input",ExpressionUUID->"1b2cb39c-0196-430d-b810-92c4bdc8b74c"],

Cell[BoxData[
 RowBox[{"IGPlanarQ", "[", 
  RowBox[{"EdgeAdd", "[", 
   RowBox[{
    RowBox[{"CycleGraph", "[", "4", "]"}], ",", 
    RowBox[{"1", "\[UndirectedEdge]", "3"}]}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"7aab7082-6ba4-4328-9980-a103204a2fe4"],

Cell["Apollonian graphs are maximal planar.", \
"Text",ExpressionUUID->"0d36e74e-99c0-4fce-8c95-d77bf329ecce"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"GraphData", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<Apollonian\>\"", ",", " ", "2"}], "}"}], 
   "]"}]}]], "Input",ExpressionUUID->"10135dfb-f269-4a62-b06d-98ca3861c662"],

Cell[BoxData[
 RowBox[{"IGMaximalPlanarQ", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"de944189-2853-458a-a3c6-3e2c583ca681"],

Cell["All faces of a maximal planar graph are triangles.", \
"Text",ExpressionUUID->"68d632c4-e2b6-41b0-b492-b4a1628b148c"],

Cell[BoxData[
 RowBox[{"Length", "/@", 
  RowBox[{
  "IGFaces", "[", "g", 
   "]"}]}]], "Input",ExpressionUUID->"05dd6eb6-e800-47da-8dff-3c3692a8c634"],

Cell[TextData[{
 "Therefore the edge count ",
 Cell[BoxData[
  FormBox["E", TraditionalForm]],ExpressionUUID->
  "5473ee52-ef2c-45c5-b99a-a1d8aca0efd8"],
 " and the face count ",
 Cell[BoxData[
  FormBox["F", TraditionalForm]],ExpressionUUID->
  "1fc02170-fa66-4d45-b94d-bf88de003802"],
 " of a maximal planar graph on more than 2 vertices satisfy ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"2", "E"}], "=", 
    RowBox[{"3", "F"}]}], TraditionalForm]],ExpressionUUID->
  "fcf44cc0-1ee7-40c5-8d03-867e75012e4a"],
 ". Each edge is incident to two faces and each face is incident to three \
edges."
}], "Text",ExpressionUUID->"b14e76c7-d21b-4801-827e-c7dbd6094f19"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"2", 
    RowBox[{"EdgeCount", "[", "g", "]"}]}], ",", 
   RowBox[{"3", 
    RowBox[{"Length", "@", 
     RowBox[{"IGFaces", "[", "g", "]"}]}]}]}], 
  "}"}]], "Input",ExpressionUUID->"fb1a3496-7cb8-4874-a029-2e3249193365"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGOuterplanarQ", \
"Subsubsection",ExpressionUUID->"50f6e797-59d7-423d-b04a-68d742024214"],

Cell[BoxData[
 RowBox[{"?", 
  "IGOuterplanarQ"}]], \
"Input",ExpressionUUID->"af385042-2bda-46ee-99c1-801bfd3f4f94"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGOuterplanarQ", "[", "graph", "]"}]],ExpressionUUID->
  "82af032e-8738-4e03-8721-b431ce540915"],
 " checks if a graph is outerplanar, i.e. if it can be drawn in the plane \
without edge crossings and with all vertices being on the outer face."
}], "Text",ExpressionUUID->"383eba58-9f2d-4fc8-901c-3d38f91b018d"],

Cell[TextData[{
 "Outerplanar graphs are also called circular planar. They can be drawn \
without edge crossings and all vertices on a circle. See the documentation of \
",
 Cell[BoxData[
 "IGOuterplanarEmbedding"],ExpressionUUID->
  "84fd0d88-3d27-48a3-80e2-7aa8dbc6ad15"],
 " for an example."
}], "Text",ExpressionUUID->"b9983171-00c1-4bd4-965e-44357a571d25"],

Cell[BoxData[
 RowBox[{"IGOuterplanarQ", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {Null, 
        SparseArray[
        Automatic, {12, 12}, 0, {
         1, {{0, 2, 5, 7, 10, 14, 17, 20, 24, 27, 29, 32, 34}, {{2}, {4}, {
           1}, {3}, {5}, {2}, {6}, {1}, {5}, {7}, {2}, {4}, {6}, {8}, {3}, {
           5}, {9}, {4}, {8}, {10}, {5}, {7}, {9}, {11}, {6}, {8}, {12}, {
           7}, {11}, {8}, {10}, {12}, {9}, {11}}}, Pattern}]}, {
       GraphLayout -> {"GridEmbedding", "Dimension" -> {3, 4}}, 
        VertexSize -> {Medium}}]]}, 
     TagBox[
      GraphicsGroupBox[
       GraphicsComplexBox[{{1., 1.}, {1., 2.}, {1., 3.}, {2., 1.}, {2., 2.}, {
        2., 3.}, {3., 1.}, {3., 2.}, {3., 3.}, {4., 1.}, {4., 2.}, {4., 3.}}, {
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
          {Arrowheads[0.], ArrowBox[{1, 2}, 0.1]}, 
          {Arrowheads[0.], ArrowBox[{1, 4}, 0.1]}, 
          {Arrowheads[0.], ArrowBox[{2, 3}, 0.1]}, 
          {Arrowheads[0.], ArrowBox[{2, 5}, 0.1]}, 
          {Arrowheads[0.], ArrowBox[{3, 6}, 0.1]}, 
          {Arrowheads[0.], ArrowBox[{4, 5}, 0.1]}, 
          {Arrowheads[0.], ArrowBox[{4, 7}, 0.1]}, 
          {Arrowheads[0.], ArrowBox[{5, 6}, 0.1]}, 
          {Arrowheads[0.], ArrowBox[{5, 8}, 0.1]}, 
          {Arrowheads[0.], ArrowBox[{6, 9}, 0.1]}, 
          {Arrowheads[0.], ArrowBox[{7, 8}, 0.1]}, 
          {Arrowheads[0.], ArrowBox[{7, 10}, 0.1]}, 
          {Arrowheads[0.], ArrowBox[{8, 9}, 0.1]}, 
          {Arrowheads[0.], ArrowBox[{8, 11}, 0.1]}, 
          {Arrowheads[0.], ArrowBox[{9, 12}, 0.1]}, 
          {Arrowheads[0.], ArrowBox[{10, 11}, 0.1]}, 
          {Arrowheads[0.], ArrowBox[{11, 12}, 0.1]}}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          DiskBox[1, 0.1], DiskBox[2, 0.1], DiskBox[3, 0.1], DiskBox[4, 0.1], 
          DiskBox[5, 0.1], DiskBox[6, 0.1], DiskBox[7, 0.1], DiskBox[8, 0.1], 
          DiskBox[9, 0.1], DiskBox[10, 0.1], DiskBox[11, 0.1], 
          DiskBox[12, 0.1]}}]],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None], 
  "]"}]], "Input",ExpressionUUID->"34e08c56-3213-4882-ae31-c91e4bc577c3"],

Cell[BoxData[
 RowBox[{"IGOuterplanarQ", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3, 4, 5, 6, 7, 8}, {Null, 
        SparseArray[
        Automatic, {8, 8}, 0, {
         1, {{0, 2, 4, 7, 10, 13, 16, 18, 20}, {{2}, {3}, {1}, {4}, {1}, {
           4}, {5}, {2}, {3}, {6}, {3}, {6}, {7}, {4}, {5}, {8}, {5}, {8}, {
           6}, {7}}}, Pattern}]}, {
       GraphLayout -> {"GridEmbedding", "Dimension" -> {2, 4}}, 
        VertexSize -> {Medium}}]]}, 
     TagBox[
      GraphicsGroupBox[
       GraphicsComplexBox[{{1., 1.}, {1., 2.}, {2., 1.}, {2., 2.}, {3., 1.}, {
        3., 2.}, {4., 1.}, {4., 2.}}, {
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
          {Arrowheads[0.], ArrowBox[{1, 2}, 0.1]}, 
          {Arrowheads[0.], ArrowBox[{1, 3}, 0.1]}, 
          {Arrowheads[0.], ArrowBox[{2, 4}, 0.1]}, 
          {Arrowheads[0.], ArrowBox[{3, 4}, 0.1]}, 
          {Arrowheads[0.], ArrowBox[{3, 5}, 0.1]}, 
          {Arrowheads[0.], ArrowBox[{4, 6}, 0.1]}, 
          {Arrowheads[0.], ArrowBox[{5, 6}, 0.1]}, 
          {Arrowheads[0.], ArrowBox[{5, 7}, 0.1]}, 
          {Arrowheads[0.], ArrowBox[{6, 8}, 0.1]}, 
          {Arrowheads[0.], ArrowBox[{7, 8}, 0.1]}}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          DiskBox[1, 0.1], DiskBox[2, 0.1], DiskBox[3, 0.1], DiskBox[4, 0.1], 
          DiskBox[5, 0.1], DiskBox[6, 0.1], DiskBox[7, 0.1], 
          DiskBox[8, 0.1]}}]],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None], 
  "]"}]], "Input",ExpressionUUID->"4b09ba43-7377-4246-9e9e-404bdf55e659"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGOuterplanarQ", "[", "embedding", "]"}]],ExpressionUUID->
  "a9c9fb33-3771-415d-822b-8c4a1383b975"],
 " checks if a combinatorial embedding is outerplanar. Not all planar \
embeddings of an outerplanar graph are also outerplanar embeddings."
}], "Text",ExpressionUUID->"4e62837f-2f27-42ff-a1ea-1331be3a638b"],

Cell["Consider the following outerplanar graph \[Ellipsis]", \
"Text",ExpressionUUID->"53809d58-43a9-49a6-877a-a30116f3afc6"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{
  "IGShorthand", "[", "\"\<0-1-2-3-4-2,1-4\>\"", 
   "]"}]}]], "Input",ExpressionUUID->"48381764-bf96-4b01-9371-4d8948dc550d"],

Cell[BoxData[
 RowBox[{"IGOuterplanarQ", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"d15a7eee-a4cf-4cd7-860c-d16116dead06"],

Cell["\[Ellipsis] and two of its embeddings:", \
"Text",ExpressionUUID->"ed392086-80ef-4e09-bf58-bccc8278ca70"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"emb1", "=", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"0", "\[Rule]", 
      RowBox[{"{", "1", "}"}]}], ",", 
     RowBox[{"1", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"2", ",", "0", ",", "4"}], "}"}]}], ",", 
     RowBox[{"2", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3", ",", "4"}], "}"}]}], ",", 
     RowBox[{"3", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"2", ",", "4"}], "}"}]}], ",", 
     RowBox[{"4", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"3", ",", "1", ",", "2"}], "}"}]}]}], 
    "\[RightAssociation]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"emb2", "=", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"0", "\[Rule]", 
      RowBox[{"{", "1", "}"}]}], ",", 
     RowBox[{"1", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"0", ",", "2", ",", "4"}], "}"}]}], ",", 
     RowBox[{"2", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3", ",", "4"}], "}"}]}], ",", 
     RowBox[{"3", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"2", ",", "4"}], "}"}]}], ",", 
     RowBox[{"4", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"3", ",", "1", ",", "2"}], "}"}]}]}], 
    "\[RightAssociation]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"f93be589-f3e7-400e-95c0-f42a95ae94e4"],

Cell["\<\
They are both planar, but only the second one is outerplanar.\
\>", "Text",ExpressionUUID->"6d16526f-6fba-495e-ba77-814489191edc"],

Cell[BoxData[
 RowBox[{"IGPlanarQ", "/@", 
  RowBox[{"{", 
   RowBox[{"emb1", ",", "emb2"}], 
   "}"}]}]], "Input",ExpressionUUID->"d0bd259f-2796-4e64-a4f9-189fff4ad21a"],

Cell[BoxData[
 RowBox[{"IGOuterplanarQ", "/@", 
  RowBox[{"{", 
   RowBox[{"emb1", ",", "emb2"}], 
   "}"}]}]], "Input",ExpressionUUID->"502aa83f-9430-4d5c-aa67-e496868dfbc6"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Graph", "[", 
    RowBox[{"g", ",", 
     RowBox[{"VertexCoordinates", "\[Rule]", 
      RowBox[{"IGEmbeddingToCoordinates", "[", "#", "]"}]}]}], "]"}], "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{"emb1", ",", "emb2"}], 
   "}"}]}]], "Input",ExpressionUUID->"5c744a7a-0beb-4884-9de3-2ce1b1d41aa6"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGKuratowskiEdges", \
"Subsubsection",ExpressionUUID->"3e1af7a9-356b-4d10-9ded-1198069f9bfa"],

Cell[BoxData[
 RowBox[{"?", 
  "IGKuratowskiEdges"}]], \
"Input",ExpressionUUID->"82d57f57-070d-44b5-8f05-5fe3dfa3f7f3"],

Cell[TextData[{
 Cell[BoxData[
 "IGKuratowskiEdges"],ExpressionUUID->
  "9a46d2c3-7bf5-4769-a7ad-75c48bf81cc5"],
 " finds a Kuratowski subgraph of a non-planar graph. The subgraph is \
returned as a set of edges. If the graph is planar, ",
 Cell[BoxData[
  RowBox[{"{", "}"}]],ExpressionUUID->
  "a46c5235-7e96-4aea-a90d-3c2b193b9a59"],
 " is returned."
}], "Text",ExpressionUUID->"dfd88258-63d8-459d-90ee-0bc435f089eb"],

Cell[TextData[{
 "According to Kuratowski\[CloseCurlyQuote]s theorem, any non-planar graph \
contains a subgraph homeomorphic to the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["K", "5"], TraditionalForm]],ExpressionUUID->
  "5fdcf4a6-48f2-443e-8bed-86ba717af70f"],
 " complete graph or the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["K", 
    RowBox[{"3", ",", "3"}]], TraditionalForm]],ExpressionUUID->
  "7a601d5b-95b5-4aee-953b-3b7b0d438d9f"],
 " complete bipartite graph. This is called a Kuratowski subgraph."
}], "Text",ExpressionUUID->"179b89c7-a211-4942-a856-2a8905a4fdcd"],

Cell["\<\
Generate a random graph, which is non-planar with high probability.\
\>", "Text",ExpressionUUID->"89c3278e-e829-44ad-bed3-e9e8514de4ec"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"RandomGraph", "[", 
   RowBox[{"{", 
    RowBox[{"20", ",", "40"}], "}"}], 
   "]"}]}]], "Input",ExpressionUUID->"41418303-a0b3-4866-b95a-f59695dd92d3"],

Cell[BoxData[
 RowBox[{"IGPlanarQ", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"1c6db07b-c11e-4c32-9897-1bd9dd3e57c5"],

Cell["Compute a set of edges belonging to a Kuratowski subgraph.", \
"Text",ExpressionUUID->"3d06f5c8-7d5e-413c-a65f-2db1f23e04d8"],

Cell[BoxData[
 RowBox[{"kur", "=", 
  RowBox[{
  "IGKuratowskiEdges", "[", "g", 
   "]"}]}]], "Input",ExpressionUUID->"ebcb9171-f43d-4a56-ac28-4f9bb6a057fb"],

Cell["Highlight the Kuratowski subgraph.", \
"Text",ExpressionUUID->"b9d7d2a4-acee-4f04-8b8e-e1552f8d9735"],

Cell[BoxData[
 RowBox[{"HighlightGraph", "[", 
  RowBox[{"g", ",", 
   RowBox[{"Graph", "[", "kur", "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"ad75d64a-2c1b-4546-a73b-8ebc2d237b4d"],

Cell["Display the Kuratowski subgraph on its own.", \
"Text",ExpressionUUID->"18370d70-beea-48a7-bf78-10208594c4e8"],

Cell[BoxData[
 RowBox[{"Graph", "[", "kur", 
  "]"}]], "Input",ExpressionUUID->"b4718063-f5de-406e-b365-d16eb0b0c8a9"],

Cell[TextData[{
 "By smoothening the Kuratowski subgraph, we obtain either ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["K", "5"], TraditionalForm]],ExpressionUUID->
  "0158778c-e662-4a72-b73c-a35bd99f7a5d"],
 " or ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["K", 
    RowBox[{"3", ",", "3"}]], TraditionalForm]],ExpressionUUID->
  "b1e09115-376a-49e0-96f4-2e9fe28361e9"],
 "."
}], "Text",ExpressionUUID->"04402c3c-d798-4b62-86c8-b05ecfaae715"],

Cell[BoxData[
 RowBox[{"IGSmoothen", "@", 
  RowBox[{
  "Graph", "[", "kur", 
   "]"}]}]], "Input",ExpressionUUID->"4f3a0e2c-1842-49f9-8f2f-999186ce5051"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IGHomeomorphicQ", "[", 
    RowBox[{
     RowBox[{"Graph", "[", "kur", "]"}], ",", "#"}], "]"}], "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"CompleteGraph", "[", "5", "]"}], ",", 
    RowBox[{"CompleteGraph", "[", 
     RowBox[{"{", 
      RowBox[{"3", ",", "3"}], "}"}], "]"}]}], 
   "}"}]}]], "Input",ExpressionUUID->"b04a8739-da1c-48da-a607-e0f03e540cd8"],

Cell[TextData[{
 "For planar graphs, ",
 Cell[BoxData[
  RowBox[{"{", "}"}]],ExpressionUUID->
  "7c85e921-c3e2-4ae0-9115-7cf271f19d52"],
 " is returned."
}], "Text",ExpressionUUID->"54d2c36b-b964-4384-886a-943443293708"],

Cell[BoxData[
 RowBox[{"IGKuratowskiEdges", "@", 
  RowBox[{
  "CycleGraph", "[", "5", 
   "]"}]}]], "Input",ExpressionUUID->"677cde7e-eafb-4550-a1a0-2be26ae63cbc"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGFaces", \
"Subsubsection",ExpressionUUID->"f7a1fd56-7d17-4757-a821-60d69c0e286b"],

Cell[BoxData[
 RowBox[{"?", 
  "IGFaces"}]], \
"Input",ExpressionUUID->"221aff5a-4cbc-4b57-a3f7-9a2c1cce7ea3"],

Cell[TextData[{
 Cell[BoxData[
 "IGFaces"],ExpressionUUID->"8cbd8869-fdd9-4f25-a2d7-9d05dad3bdd1"],
 " returns the faces of a planar graph, or the faces corresponding to a \
specific (not necessarily planar) embedding. The faces are represented by a \
counter-clockwise ordering of vertices. The current implementation ignores \
self-loops and multi-edges."
}], "Text",ExpressionUUID->"a54b3526-93c9-42f5-9ce4-db036de473be"],

Cell[TextData[{
 "The faces of a planar graph are unique if the graph is 3-vertex-connected. \
This can be checked using ",
 Cell[BoxData[
 "KVertexConnectedGraphQ"],ExpressionUUID->
  "7eb3ea07-398a-4638-9752-87404878a72a"],
 "."
}], "Text",ExpressionUUID->"44c447a9-1084-4f25-b3b1-a7ba54a56814"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{
  "GraphData", "[", "\"\<DodecahedralGraph\>\"", 
   "]"}]}]], "Input",ExpressionUUID->"ab342b9f-0d67-41b5-85d8-da2aaeb444ec"],

Cell[BoxData[
 RowBox[{"IGFaces", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"be14a042-8e3b-470f-964d-896e4017d975"],

Cell[BoxData[
 RowBox[{"KVertexConnectedGraphQ", "[", 
  RowBox[{"g", ",", "3"}], 
  "]"}]], "Input",ExpressionUUID->"a2e933c6-4210-41aa-84e8-34f714c49266"],

Cell[TextData[{
 "If the graph is not connected and has ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]],ExpressionUUID->
  "c4ace7ce-323d-4d93-bcc7-7d990f1ba850"],
 " connected components, then ",
 Cell[BoxData[
  FormBox[
   RowBox[{"C", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "ab4b2307-2a9b-4c30-808a-2b8231ceb44a"],
 " faces will be redundant."
}], "Text",ExpressionUUID->"d1c278dd-bb94-4aad-91a2-09191e9cbdf9"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"IGDisjointUnion", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"CycleGraph", "[", "3", "]"}], ",", 
      RowBox[{"CycleGraph", "[", "3", "]"}]}], "}"}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", "Automatic"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"96b8ce29-0200-4f66-a404-4be79a41c13f"],

Cell[BoxData[
 RowBox[{"IGFaces", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"d597ca4d-3bc3-4d98-b6d7-fc0134217157"],

Cell["\<\
In the above-drawn arrangement, the outer faces of the two triangles are the \
same face. However, one triangle could have been drawn inside of the other. \
Then the inner face of one would be the same as the outer face of the other. \
Thus the choice of faces to be eliminated as redundant is arbitrary, and is \
left up to the user.\
\>", "Text",ExpressionUUID->"f11db524-d595-4b14-9d4e-97946aa230d9"],

Cell[TextData[{
 Cell[BoxData[
 "IGFaces"],ExpressionUUID->"f1294f25-5c4c-446b-967e-f35deb95218e"],
 " can also be used with a non-planar combinatorial embedding. The below \
embeddings both belong to the 4-vertex complete graph, however, only the \
first is planar."
}], "Text",ExpressionUUID->"85db1e92-584b-4532-840e-686a42242f5e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"emb1", "=", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"1", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3", ",", "4"}], "}"}]}], ",", 
     RowBox[{"2", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", ",", "4", ",", "3"}], "}"}]}], ",", 
     RowBox[{"3", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"2", ",", "4", ",", "1"}], "}"}]}], ",", 
     RowBox[{"4", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"3", ",", "2", ",", "1"}], "}"}]}]}], 
    "\[RightAssociation]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"emb2", "=", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"1", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"2", ",", "4", ",", "3"}], "}"}]}], ",", 
     RowBox[{"2", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"4", ",", "3", ",", "1"}], "}"}]}], ",", 
     RowBox[{"3", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "4"}], "}"}]}], ",", 
     RowBox[{"4", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"3", ",", "1", ",", "2"}], "}"}]}]}], 
    "\[RightAssociation]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"a9ba5fa0-1068-400d-8687-244629fc07d2"],

Cell[BoxData[
 RowBox[{"IGFaces", "[", "emb1", 
  "]"}]], "Input",ExpressionUUID->"7336c9b3-dde6-48b7-818c-d0e02ac92526"],

Cell[BoxData[
 RowBox[{"IGFaces", "[", "emb2", 
  "]"}]], "Input",ExpressionUUID->"ae6e6727-08ba-4a5d-ad8f-5649a06e08ea"],

Cell[TextData[{
 "Determine the genus ",
 Cell[BoxData[
  FormBox["g", TraditionalForm]],ExpressionUUID->
  "3f95092f-923b-4553-aa0e-05fb67b0f5f9"],
 " of an embedding belonging to a connected graph based on its face count ",
 Cell[BoxData[
  FormBox["F", TraditionalForm]],ExpressionUUID->
  "1ec7e7a2-901a-4638-a09e-84769c2666ad"],
 ", vertex count ",
 Cell[BoxData[
  FormBox["V", TraditionalForm]],ExpressionUUID->
  "6cfbd159-43ae-48c9-a75f-e6ffff52d237"],
 ", and edge count ",
 Cell[BoxData[
  FormBox["E", TraditionalForm]],ExpressionUUID->
  "069fec55-6f88-4384-9c3a-6dc9f2826e65"],
 ", using the formula for the Euler characteristic ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"2", "g"}], "-", "2"}], "=", 
    RowBox[{"\[Chi]", "=", 
     RowBox[{"V", "-", "E", "+", "F"}]}]}], TraditionalForm]],ExpressionUUID->
  "d714dd98-a7c8-4a22-a899-8cb26feaa726"],
 "."
}], "Text",ExpressionUUID->"adde1f6d-88f1-4f41-a0a7-5d76d27a8657"],

Cell[BoxData[
 RowBox[{
  RowBox[{"genus", "[", 
   RowBox[{"emb_", "?", "IGEmbeddingQ"}], "]"}], ":=", " ", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"2", "+", 
     RowBox[{
      RowBox[{"Total", "[", 
       RowBox[{"Length", "/@", "emb"}], "]"}], "/", "2"}], "-", 
     RowBox[{"Length", "[", "emb", "]"}], "-", 
     RowBox[{"Length", "@", 
      RowBox[{"IGFaces", "[", "emb", "]"}]}]}], ")"}], "/", 
   "2"}]}]], "Input",ExpressionUUID->"233df00f-b487-4f3c-bd8a-a4bb9279c91c"],

Cell[BoxData[
 RowBox[{"genus", "/@", 
  RowBox[{"{", 
   RowBox[{"emb1", ",", "emb2"}], 
   "}"}]}]], "Input",ExpressionUUID->"bc7bf7a3-9950-4b80-9ac0-55f2bcfc0e13"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGDualGraph", \
"Subsubsection",ExpressionUUID->"974d7c82-80f6-42d9-8727-b7be2ebcaa64"],

Cell[BoxData[
 RowBox[{"?", 
  "IGDualGraph"}]], \
"Input",ExpressionUUID->"e20f4364-9696-44c6-ac75-466bd314b001"],

Cell[TextData[{
 Cell[BoxData[
 "IGDualGraph"],ExpressionUUID->"1629f0f8-5dd1-45aa-82f7-babb27d426ad"],
 " returns a dual graph of a planar graph, or the dual corresponding to a \
specific embedding. The ordering of the dual graph\[CloseCurlyQuote]s \
vertices is consistent with the result of ",
 Cell[BoxData[
 "IGFaces"],ExpressionUUID->"54799f84-84e3-44ac-b3a1-18d81925bc53"],
 "."
}], "Text",ExpressionUUID->"1ba95f47-7ee1-4f3f-b5ee-0c730b7e93c2"],

Cell["Limitations:", \
"Text",ExpressionUUID->"401e7a35-111e-4aff-bc84-2c997ad67869"],

Cell["Multi-edges and self-loops are currently ignored.", \
"Item",ExpressionUUID->"72306d6d-5a49-41af-9999-480c4a0c744f"],

Cell["\<\
The result is always a simple graph. No multi-edges or self-loops are \
generated\
\>", "Item",ExpressionUUID->"4c86a902-f51e-4d79-a167-aba36668f1a3"],

Cell["\<\
The dual of a simple 3-vertex-connected graph is simple and unique, thus such \
graphs are not affected by the above limitations.\
\>", "Text",ExpressionUUID->"00c206ea-8369-4386-a874-0c9bd339eab7"],

Cell[BoxData[
 RowBox[{"TableForm", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"CompleteGraph", "[", "k", "]"}], ",", 
       RowBox[{"IGDualGraph", "@", 
        RowBox[{"CompleteGraph", "[", "k", "]"}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"k", ",", "1", ",", "4"}], "}"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"TableHeadings", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"None", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<graph\>\"", ",", "\"\<dual\>\""}], "}"}]}], "}"}]}]}], 
  "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"27b4b698-74fd-4e09-bf9e-5669c2344066"],

Cell["Currently, if the input is a graph, it must be planar.", \
"Text",ExpressionUUID->"a88318fc-c291-4291-b67e-51f7ebca72cb"],

Cell[BoxData[
 RowBox[{"IGDualGraph", "[", 
  RowBox[{"CompleteGraph", "[", "5", "]"}], 
  "]"}]], "Input",ExpressionUUID->"24ef1bf9-8da3-4c5a-9711-fd4a1617ec2d"],

Cell["\<\
If the input is a combinatorial embedding, it does not need to be planar.\
\>", "Text",ExpressionUUID->"848147e5-c9b2-4454-8861-0fe9e7ccc75b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"emb", "=", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"1", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"2", ",", "4", ",", "3"}], "}"}]}], ",", 
     RowBox[{"2", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"4", ",", "3", ",", "1"}], "}"}]}], ",", 
     RowBox[{"3", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "4"}], "}"}]}], ",", 
     RowBox[{"4", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"3", ",", "1", ",", "2"}], "}"}]}]}], 
    "\[RightAssociation]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"IGPlanarQ", "[", "emb", 
  "]"}]}], "Input",ExpressionUUID->"40282f28-ad86-4aa6-a05a-67947ae834d4"],

Cell[BoxData[
 RowBox[{"IGDualGraph", "[", "emb", 
  "]"}]], "Input",ExpressionUUID->"64cb1124-db6f-4d35-8ec9-575fcd5ba321"],

Cell["\<\
Find the dual of a square lattice graph. The dual graph also includes the \
outer face as a vertex.\
\>", "Text",ExpressionUUID->"a937d8d6-200c-4674-9c77-b0b5c7b2f151"],

Cell[BoxData[
 RowBox[{"IGSquareLattice", "[", 
  RowBox[{"{", 
   RowBox[{"5", ",", "5"}], "}"}], 
  "]"}]], "Input",ExpressionUUID->"966f0ac0-6fb3-47e9-a76f-2474e254c237"],

Cell[BoxData[
 RowBox[{"IGDualGraph", "[", "%", 
  "]"}]], "Input",ExpressionUUID->"46bbea20-9a0a-491f-a161-4eea73b4dfec"],

Cell[TextData[{
 "The dual is unique if the graph is 3-vertex-connected. This can be verified \
using ",
 Cell[BoxData[
 "KVertexConnectedGraphQ"],ExpressionUUID->
  "ec5cdddf-039f-44e9-8a9d-faa7202df076"],
 ". In this case, ",
 Cell[BoxData[
  RowBox[{"IGDualGraph", "@", 
   RowBox[{"IGDualGraph", "[", "g", "]"}]}]],ExpressionUUID->
  "f6e1131a-81dd-43f3-9b6c-375ebd2c7dd8"],
 " is isomorphic to ",
 Cell[BoxData["g"],ExpressionUUID->"3fcde518-911b-4829-9c4d-6988a6f170d6"],
 "."
}], "Text",ExpressionUUID->"c9622504-0181-4c7c-beb8-cba20892062d"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{
  "GraphData", "[", "\"\<IcosahedralGraph\>\"", 
   "]"}]}]], "Input",ExpressionUUID->"402dcddc-6449-4f23-8543-111255900053"],

Cell[BoxData[
 RowBox[{"dg", "=", 
  RowBox[{
  "IGDualGraph", "[", "g", 
   "]"}]}]], "Input",ExpressionUUID->"f6898f5b-d395-4973-aa35-6bb57cffbcd5"],

Cell[BoxData[
 RowBox[{"IGIsomorphicQ", "[", 
  RowBox[{"dg", ",", 
   RowBox[{"GraphData", "[", "\"\<DodecahedralGraph\>\"", "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"08afbf54-9d79-4b9e-838d-c2f0aa1e4773"],

Cell[BoxData[
 RowBox[{"IGIsomorphicQ", "[", 
  RowBox[{
   RowBox[{"IGDualGraph", "[", "dg", "]"}], ",", "g"}], 
  "]"}]], "Input",ExpressionUUID->"272cac16-4b4d-474d-9add-e66f992d618e"],

Cell["\<\
If the graph is not connected, the dual of each component is effectively \
computed separately.\
\>", "Text",ExpressionUUID->"b3fb4341-08cb-497b-88b9-44ee04e11bb8"],

Cell[BoxData[
 RowBox[{"IGDualGraph", "@", 
  RowBox[{"IGDisjointUnion", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"CycleGraph", "[", "3", "]"}], ",", 
     RowBox[{"CycleGraph", "[", "3", "]"}]}], "}"}], 
   "]"}]}]], "Input",ExpressionUUID->"4374f349-5e86-4e9d-83ce-78cb6a690514"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGEmbeddingQ", \
"Subsubsection",ExpressionUUID->"45c172e2-8946-455e-9387-90aa4ab29aa1"],

Cell[BoxData[
 RowBox[{"?", 
  "IGEmbeddingQ"}]], \
"Input",ExpressionUUID->"de0509ed-2066-412a-bbab-154c3fa0463c"],

Cell[TextData[{
 Cell[BoxData[
 "IGEmbeddingQ"],ExpressionUUID->"310cf11e-8753-4cca-b301-42336be625f3"],
 " checks if an embedding is valid, and whether it belongs to a graph without \
self-loops and multi-edges."
}], "Text",ExpressionUUID->"91476813-7af8-465a-82bc-ec9ee3848543"],

Cell[TextData[{
 "This is a valid combinatorial embedding of the graph ",
 Cell[BoxData[
  RowBox[{"1", "\[UndirectedEdge]", "3", "\[UndirectedEdge]", "2"}]],
  ExpressionUUID->"80d8c8d1-3e33-4bb3-82a1-0e8aaa94b5f9"],
 "."
}], "Text",ExpressionUUID->"e900ed9f-8b15-45f8-aba9-7d74fb672e6a"],

Cell[BoxData[
 RowBox[{"IGEmbeddingQ", "[", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"1", "\[Rule]", 
     RowBox[{"{", "3", "}"}]}], ",", 
    RowBox[{"2", "\[Rule]", 
     RowBox[{"{", "3", "}"}]}], ",", 
    RowBox[{"3", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}]}]}], "|>"}], 
  "]"}]], "Input",ExpressionUUID->"aa357243-05f2-431b-b8e0-6033e128bfa9"],

Cell["\<\
The following embeddings do not belong to simple (i.e. loop free and \
multi-edge free) graphs:\
\>", "Text",ExpressionUUID->"f6949036-0584-4c94-8991-eda8e2d6a1cb"],

Cell[BoxData[
 RowBox[{"IGEmbeddingQ", "[", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"1", "\[Rule]", 
     RowBox[{"{", "3", "}"}]}], ",", 
    RowBox[{"2", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"3", ",", "3"}], "}"}]}], ",", 
    RowBox[{"3", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "2"}], "}"}]}]}], "|>"}], 
  "]"}]], "Input",ExpressionUUID->"cbb33134-0428-42f5-8ad9-8b6d774c2598"],

Cell[BoxData[
 RowBox[{"IGEmbeddingQ", "[", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"1", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}]}], ",", 
    RowBox[{"2", "\[Rule]", 
     RowBox[{"{", "1", "}"}]}]}], "|>"}], 
  "]"}]], "Input",ExpressionUUID->"b20c8102-6834-479d-ae05-0d8dc139ec3c"],

Cell[TextData[{
 "The following embedding is not valid because it does not contain the arc ",
 Cell[BoxData[
  RowBox[{"2", "\[DirectedEdge]", "1"}]],ExpressionUUID->
  "60b34132-396c-4a37-aec0-d064d9318339"],
 " but it does contain ",
 Cell[BoxData[
  RowBox[{"1", "\[DirectedEdge]", "2"}]],ExpressionUUID->
  "d2ae2977-f4a5-4f04-94b9-44efe6683aba"],
 "."
}], "Text",ExpressionUUID->"91a55fb5-f7b7-45ee-80ff-72c5332c25b6"],

Cell[BoxData[
 RowBox[{"IGEmbeddingQ", "[", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"1", "\[Rule]", 
     RowBox[{"{", "2", "}"}]}], ",", 
    RowBox[{"2", "\[Rule]", 
     RowBox[{"{", "}"}]}]}], "|>"}], 
  "]"}]], "Input",ExpressionUUID->"8bc2cb68-ce0d-4cdd-8dfe-c3886a66b42a"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGPlanarEmbedding", \
"Subsubsection",ExpressionUUID->"5df3d8d3-b88b-457c-8441-5354a111599a"],

Cell[BoxData[
 RowBox[{"?", 
  "IGPlanarEmbedding"}]], \
"Input",ExpressionUUID->"405a22c6-daae-4687-af05-851c3c9215e1"],

Cell[TextData[{
 Cell[BoxData[
 "IGPlanarEmbedding"],ExpressionUUID->
  "7feb579b-586c-48b8-9cc7-9355a0e6b3af"],
 " computes a combinatorial embedding of a planar graph. The current \
implementation ignores self-loops and multi-edges."
}], "Text",ExpressionUUID->"e2e55497-ebb0-4913-9b55-e05a091e4955"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{
  "IGShorthand", "[", "\"\<a:b:c:d -- a:b:c:d\>\"", 
   "]"}]}]], "Input",ExpressionUUID->"5ea554bf-4ac9-45cb-a409-07210bea0e26"],

Cell[BoxData[
 RowBox[{"emb", "=", 
  RowBox[{
  "IGPlanarEmbedding", "[", "g", 
   "]"}]}]], "Input",ExpressionUUID->"a2140181-8ae5-4aa2-98b6-6f34e5bbc395"],

Cell[TextData[{
 "The representation of a combinatorial embedding is also a valid adjacency \
list, thus it can be easily converted back to an undirected graph using ",
 Cell[BoxData[
 "IGAdjacencyGraph"],ExpressionUUID->"bb8eb073-98ef-4a09-b357-28e112b9e954"],
 "."
}], "Text",ExpressionUUID->"7968cd43-2fea-47af-8691-b808011a9f33"],

Cell[BoxData[
 RowBox[{"IGAdjacencyGraph", "[", 
  RowBox[{"emb", ",", 
   RowBox[{"VertexLabels", "\[Rule]", "Automatic"}]}], 
  "]"}]], "Input",ExpressionUUID->"f1c4d154-3ad6-432d-8441-bd185b2c89a9"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGOuterplanarEmbedding", \
"Subsubsection",ExpressionUUID->"8df73305-2c6b-4c96-aa27-f1216790065c"],

Cell[BoxData[
 RowBox[{"?", 
  "IGOuterplanarEmbedding"}]], \
"Input",ExpressionUUID->"92c1ec8b-0343-40ec-8786-bf78b6670a31"],

Cell[TextData[{
 Cell[BoxData[
 "IGOuterplanarEmbedding"],ExpressionUUID->
  "796636c8-4501-40e1-9f88-aec4d5503a2c"],
 " returns an outerplanar combinatorial embedding of a graph, if it exists. \
If the corresponding graph is connected, then one face of such an embedding \
contains all vertices of the graph."
}], "Text",ExpressionUUID->"c2ec5caa-516d-49a7-aad3-73b6768827fe"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"IGTriangularLattice", "[", 
   RowBox[{"{", 
    RowBox[{"5", ",", "2"}], "}"}], 
   "]"}]}]], "Input",ExpressionUUID->"359e27e8-7426-4ada-aab4-d2e818ebd0d6"],

Cell[BoxData[
 RowBox[{"emb", "=", 
  RowBox[{
  "IGOuterplanarEmbedding", "[", "g", 
   "]"}]}]], "Input",ExpressionUUID->"4b2c2657-5b11-485c-9cc0-8950c57b8b01"],

Cell[BoxData[
 RowBox[{"IGLayoutCircle", "@", 
  RowBox[{"IGReorderVertices", "[", 
   RowBox[{
    RowBox[{"First", "@", 
     RowBox[{
      RowBox[{"MaximalBy", "[", "Length", "]"}], "@", 
      RowBox[{"IGFaces", "[", "emb", "]"}]}]}], ",", "g"}], 
   "]"}]}]], "Input",ExpressionUUID->"6178b3dd-de76-4301-9c89-2b854b48e682"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGCoordinatesToEmbedding", \
"Subsubsection",ExpressionUUID->"f9531765-6588-498e-9d38-27ff7dfef3c3"],

Cell[BoxData[
 RowBox[{"?", 
  "IGCoordinatesToEmbedding"}]], \
"Input",ExpressionUUID->"a4af7811-ec33-4ad0-b334-fba921084240"],

Cell[TextData[{
 Cell[BoxData[
 "IGCoordinatesToEmbedding"],ExpressionUUID->
  "bf301e87-d016-43e5-9170-07eed66f0586"],
 " computes a combinatorial embedding, i.e. a cyclic ordering of neighbours \
around each vertex, based on the given vertex coordinates. By default, the \
coordinates are taken from the ",
 Cell[BoxData[
 "VertexCoordinates"],ExpressionUUID->
  "62ad8960-d71b-4323-a3d1-b58ff377dca0"],
 " property."
}], "Text",ExpressionUUID->"85f581a9-98e0-4bba-803c-af553d28ffbf"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"CompleteGraph", "[", 
   RowBox[{"4", ",", 
    RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], 
   "]"}]}]], "Input",ExpressionUUID->"0994a304-b4bc-4325-873f-77ae4c451e7c"],

Cell[BoxData[
 RowBox[{"emb", "=", 
  RowBox[{
  "IGCoordinatesToEmbedding", "[", "g", 
   "]"}]}]], "Input",ExpressionUUID->"e156dec6-37b6-4400-bfd5-6b6751193510"],

Cell["\<\
The embedding can then be used to compute the faces of the graph \[Ellipsis]\
\>", "Text",ExpressionUUID->"88648d0f-a6fa-431c-9e35-e27eff24244c"],

Cell[BoxData[
 RowBox[{"IGFaces", "[", "emb", 
  "]"}]], "Input",ExpressionUUID->"edee150a-cc5b-434f-ae4d-b867b7145013"],

Cell["\[Ellipsis] or can be converted back to coordinates.", \
"Text",ExpressionUUID->"9a0cc130-9a84-4bbb-9843-eec964007211"],

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{"g", ",", 
   RowBox[{"VertexCoordinates", "\[Rule]", 
    RowBox[{"IGEmbeddingToCoordinates", "[", "emb", "]"}]}]}], 
  "]"}]], "Input",ExpressionUUID->"3e9ef5c8-c39e-4019-9b83-44eb0824eabe"],

Cell["\<\
If we start with a non-planar graph layout, the embedding will not be planar \
either.\
\>", "Text",ExpressionUUID->"c35b850d-2285-4274-8dbb-950b832bef66"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"CompleteGraph", "[", 
   RowBox[{"4", ",", 
    RowBox[{"GraphLayout", "\[Rule]", "\"\<SpringElectricalEmbedding\>\""}], 
    ",", 
    RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], 
   "]"}]}]], "Input",ExpressionUUID->"a9f7b496-5c9a-4567-9ea0-79ecfc8b7582"],

Cell[BoxData[
 RowBox[{"emb", "=", 
  RowBox[{
  "IGCoordinatesToEmbedding", "[", "g", 
   "]"}]}]], "Input",ExpressionUUID->"54cce1e1-ec17-4be1-b50c-0fd2a9507507"],

Cell[BoxData[
 RowBox[{"IGFaces", "[", "emb", 
  "]"}]], "Input",ExpressionUUID->"86c5825e-3cb2-4e89-8043-e62c281ba15a"],

Cell[BoxData[
 RowBox[{"IGPlanarQ", "[", "emb", 
  "]"}]], "Input",ExpressionUUID->"cf856a46-4b03-4479-8a57-f3a0802ae937"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGEmbeddingToCoordinates", \
"Subsubsection",ExpressionUUID->"1ebd3ec7-1fa8-4fd7-b460-875234a4544d"],

Cell[BoxData[
 RowBox[{"?", 
  "IGEmbeddingToCoordinates"}]], \
"Input",ExpressionUUID->"b71036cc-b216-4a3d-9a3e-9d285b7a7250"],

Cell[TextData[{
 Cell[BoxData[
 "IGEmbeddingToCoordinates"],ExpressionUUID->
  "6b56d9ee-11a8-4f11-99f9-4baf40b3e703"],
 " computes the coordinates of a straight-line planar drawing based on the \
given combinatorial embedding, using Schnyder\[CloseCurlyQuote]s algorithm. "
}], "Text",ExpressionUUID->"9c515aa0-4224-4f8d-b99e-3c368120703e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"emb1", "=", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"1", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3", ",", "4"}], "}"}]}], ",", 
     RowBox[{"2", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", ",", "4", ",", "3"}], "}"}]}], ",", 
     RowBox[{"3", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"2", ",", "4", ",", "1"}], "}"}]}], ",", 
     RowBox[{"4", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"3", ",", "2", ",", "1"}], "}"}]}]}], 
    "\[RightAssociation]"}]}], 
  ";"}]], "Input",ExpressionUUID->"e038d6f2-4115-4ef8-8f03-fc230b5736ea"],

Cell[BoxData[
 RowBox[{"IGEmbeddingToCoordinates", "[", "emb1", 
  "]"}]], "Input",ExpressionUUID->"cc9da225-4404-475b-87db-aebef5fc087a"],

Cell["The embedding must be planar.", \
"Text",ExpressionUUID->"3b0ad10f-d9b7-4297-bd20-9062e95e391c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"emb2", "=", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"1", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"2", ",", "4", ",", "3"}], "}"}]}], ",", 
     RowBox[{"2", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"4", ",", "3", ",", "1"}], "}"}]}], ",", 
     RowBox[{"3", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "4"}], "}"}]}], ",", 
     RowBox[{"4", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"3", ",", "1", ",", "2"}], "}"}]}]}], 
    "\[RightAssociation]"}]}], 
  ";"}]], "Input",ExpressionUUID->"76e9828d-bd36-433b-b872-57633707ab83"],

Cell[BoxData[
 RowBox[{"IGPlanarQ", "[", "emb2", 
  "]"}]], "Input",ExpressionUUID->"6df90b74-abce-45de-bdd1-a91d6dc00e40"],

Cell[BoxData[
 RowBox[{"IGEmbeddingToCoordinates", "[", "emb2", 
  "]"}]], "Input",ExpressionUUID->"9f72c4ea-e087-4956-ba11-c76637d1357a"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGLayoutPlanar", \
"Subsubsection",ExpressionUUID->"1a638b2d-98c2-4a8f-b261-4109f823a269"],

Cell[BoxData[
 RowBox[{"?", 
  "IGLayoutPlanar"}]], \
"Input",ExpressionUUID->"f6c48ba6-a5d3-4ba3-8e31-1c2111c6251b"],

Cell[TextData[{
 Cell[BoxData[
 "IGLayoutPlanar"],ExpressionUUID->"605b77dd-f3af-42d2-a303-07314db6ca63"],
 " computes a layout of a planar graph without edge crossings using Schnyder\
\[CloseCurlyQuote]s algorithm. The vertex coordinates will lie on an ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"n", "-", "2"}], ")"}], " ", "\[Times]", 
    RowBox[{"(", 
     RowBox[{"n", "-", "2"}], ")"}]}], TraditionalForm]],ExpressionUUID->
  "d3906d90-f764-4177-8c9d-f590131d13c2"],
 " integer grid, where ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "5dd9271a-c06b-4d03-bc0f-f7b60978cdd6"],
 " is the number of vertices."
}], "Text",ExpressionUUID->"09971e00-749a-4f87-ada0-b29457e4f17e"],

Cell["\<\
Create a random planar graph and lay it out without edge crossings.\
\>", "Text",ExpressionUUID->"1e3f942e-c939-41c8-b55f-7231cc2a2353"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{
   RowBox[{"IGTryUntil", "[", "IGPlanarQ", "]"}], "@", 
   RowBox[{"RandomGraph", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"10", ",", "20"}], "}"}], ",", 
     RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], 
    "]"}]}]}]], \
"Input",ExpressionUUID->"180d3417-d89e-4796-a4bb-3bee06cbcb2f"],

Cell[BoxData[
 RowBox[{"IGLayoutPlanar", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"6605e506-423d-40f3-bc8c-65add4ce5660"],

Cell[TextData[{
 Cell[BoxData[
 "IGLayoutPlanar"],ExpressionUUID->"35079dd1-c99e-44cb-8c66-2df3281d1537"],
 " produces a drawing based on the combinatorial embedding returned ",
 Cell[BoxData[
 "IGPlanarEmbedding"],ExpressionUUID->
  "883cfcfb-16c0-4f79-8fe7-778a2d5db950"],
 ". A combinatorial embedding is a counter-clockwise ordering of the incident \
edges around each vertex."
}], "Text",ExpressionUUID->"c01ced4d-30ed-45ab-973a-425d54c2427f"],

Cell[BoxData[
 RowBox[{"emb", "=", 
  RowBox[{
  "IGPlanarEmbedding", "[", "g", 
   "]"}]}]], "Input",ExpressionUUID->"8cb8df5b-0f58-4d22-b9f1-a90aa3379d58"],

Cell["\<\
The embedding can also be used to directly compute coordinates for a drawing.\
\
\>", "Text",ExpressionUUID->"f4e2fc62-25e5-4e3d-987a-891e19228b59"],

Cell[BoxData[
 RowBox[{"IGEmbeddingToCoordinates", "[", "emb", 
  "]"}]], "Input",ExpressionUUID->"70847274-72e0-478f-b91d-8e3f7fbb5b4f"],

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{"g", ",", 
   RowBox[{"VertexCoordinates", "\[Rule]", "%"}]}], 
  "]"}]], "Input",ExpressionUUID->"4591f4b5-8303-47a4-957c-244db6b5c512"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGLayoutTutte", \
"Subsubsection",ExpressionUUID->"80e4dd4f-51ef-4770-b86e-a1bf5a88543b"],

Cell[BoxData[
 RowBox[{"?", 
  "IGLayoutTutte"}]], \
"Input",ExpressionUUID->"3a3eb01a-9b01-49ae-9e0b-c6207b1f6dae"],

Cell["\<\
The Tutte embedding can be computed for a 3-vertex-connected planar graph. \
The faces of such a graph are uniquely defined. This embedding ensures that \
the coordinates of any vertex not on the outer face are the average of its \
neighbour\[CloseCurlyQuote]s coordinates, thus it is also called barycentric \
embedding.\
\>", "Text",ExpressionUUID->"594e1569-75b9-48f9-8d5a-22fbf2b966db"],

Cell[TextData[{
 Cell[BoxData[
 "IGLayoutTutte"],ExpressionUUID->"8a014bc1-760c-4fd1-b517-7841cc67b0c9"],
 " supports weighted graphs, and uses the weights for computing barycentres."
}], "Text",ExpressionUUID->"87a7a6db-8090-4f48-8792-c9495c34d436"],

Cell["The available options are:", \
"Text",ExpressionUUID->"52e60767-3e66-40dc-b057-c532bff60b24"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<OuterFace\>\""],ExpressionUUID->
  "562fbf42-a641-493d-9cac-3758f846e83b"],
 " sets the planar graph face to use as the outer face for the layout. The \
vertices of the face can be given in any order.  Use ",
 Cell[BoxData[
 "IGFaces"],ExpressionUUID->"aed53839-1262-49df-9a2f-96496c8387cc"],
 " to obtain a list of faces."
}], "Item",ExpressionUUID->"7a094d52-c3b5-4b0d-b2d8-acf0dbe2a0d4"],

Cell["By default, a largest face is chosen to be the outer one.", \
"Text",ExpressionUUID->"0f5a5cc5-a6a7-422f-a4df-5566cb80407a"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{
  "IGShorthand", "[", "\"\<1-2-3-1,4-5-6-4,1-4,2-5,3-6\>\"", 
   "]"}]}]], "Input",ExpressionUUID->"40acf7de-f6d3-4fba-8abe-38b98577d0da"],

Cell[BoxData[
 RowBox[{"IGLayoutTutte", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"90193de5-3169-4f3b-9f82-2605fa6dec6b"],

Cell["We can specify a different outer face manually.", \
"Text",ExpressionUUID->"09a79aaf-48c8-43ea-bfee-128cedafa090"],

Cell[BoxData[
 RowBox[{"IGLayoutTutte", "[", 
  RowBox[{"g", ",", 
   RowBox[{"\"\<OuterFace\>\"", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"5", ",", "4", ",", "6"}], "}"}]}]}], 
  "]"}]], "Input",ExpressionUUID->"4b88bb3e-9ec0-4f9f-8950-3b751cacf95e"],

Cell["\<\
For some graphs, the best result is achieved when the outer face is not \
chosen to be a largest one.\
\>", "Text",ExpressionUUID->"9c2e0bdb-e9dd-4064-893f-54118dd473be"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"GraphData", "[", "\"\<TutteGraph\>\"", "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"b1516d24-db92-49ca-80fe-86cbecc495b4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"IGLayoutTutte", "[", "g", "]"}], ",", 
   RowBox[{"IGLayoutTutte", "[", 
    RowBox[{"g", ",", 
     RowBox[{"\"\<OuterFace\>\"", "->", 
      RowBox[{"{", 
       RowBox[{
       "2", ",", "8", ",", "9", ",", "10", ",", "7", ",", "6", ",", "5", ",", 
        "4", ",", "3"}], "}"}]}]}], "]"}]}], 
  "}"}]], "Input",ExpressionUUID->"07300718-85bc-46ee-8a26-4de1e91e040a"],

Cell[TextData[{
 Cell[BoxData[
 "IGLayoutTutte"],ExpressionUUID->"e8086e00-f2b7-4c4a-9766-9598a06c83eb"],
 " requires a 3-vertex-connected planar input."
}], "Text",ExpressionUUID->"acb41c7d-e01f-47c9-897c-b47af83fa369"],

Cell[BoxData[
 RowBox[{"IGLayoutTutte", "[", 
  RowBox[{"CompleteGraph", "[", "5", "]"}], 
  "]"}]], "Input",ExpressionUUID->"f52221cb-3bbf-459f-88c7-b7b3552c8fa2"],

Cell[BoxData[
 RowBox[{"IGLayoutTutte", "[", 
  RowBox[{"CycleGraph", "[", "5", "]"}], 
  "]"}]], "Input",ExpressionUUID->"5e937eae-5340-4952-8770-0748261ea7cc"],

Cell[TextData[{
 Cell[BoxData[
 "IGLayoutTutte"],ExpressionUUID->"cf5e1cec-0f77-4d9b-a3e6-647e0e2f5609"],
 " will take into account edge weights. For a weighted graph, the barycenter \
of neighbours is computed with a weighting corresponding to the edge \
weights."
}], "Text",ExpressionUUID->"1f2c9b87-5cac-4ccc-8147-6c08e67a3a7d"],

Cell["\<\
A disadvantage of the Tutte embedding is that the ratio of the shortest and \
longest edge it creates is often very large. This can be partially remedied \
by first computing an unweighted Tutte embedding, then setting edge weights \
based on the obtained edge lengths.\
\>", "Text",ExpressionUUID->"769ba124-3a47-469e-a7cd-1bda6f4e14ac"],

Cell[BoxData[
 RowBox[{"pg", "=", 
  RowBox[{"IGLayoutTutte", "@", 
   RowBox[{
   "GraphData", "[", "\"\<GreatRhombicosidodecahedralGraph\>\"", 
    "]"}]}]}]], \
"Input",ExpressionUUID->"80812fd4-d06a-4dd3-b3ff-a7a797b7aef1"],

Cell[BoxData[
 RowBox[{"IGLayoutTutte", "@", 
  RowBox[{"IGEdgeMap", "[", 
   RowBox[{
    RowBox[{"Apply", "[", "EuclideanDistance", "]"}], ",", 
    RowBox[{"EdgeWeight", "\[Rule]", 
     RowBox[{"IGEdgeVertexProp", "[", "VertexCoordinates", "]"}]}], ",", 
    "pg"}], "]"}]}]], \
"Input",ExpressionUUID->"565b685a-0f99-40b2-950f-b88838b48c9a"],

Cell["\<\
By applying a  further power-transformation of the weight, we can fine-tune \
the layout.\
\>", "Text",ExpressionUUID->"4dd73b3b-8b80-4cb2-87c7-8c4d7a315751"],

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"IGLayoutTutte", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"IGEdgeMap", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"EuclideanDistance", "@@", "#"}], ")"}], "^", "power"}], 
        "&"}], ",", 
       RowBox[{"EdgeWeight", "\[Rule]", 
        RowBox[{"IGEdgeVertexProp", "[", "VertexCoordinates", "]"}]}], ",", 
       "pg"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"VertexSize", "\[Rule]", 
      RowBox[{"1", "/", "2"}]}]}], "\[IndentingNewLine]", "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"power", ",", "1"}], "}"}], ",", "0.5", ",", "3"}], "}"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellTags->
  "DeleteOutput",ExpressionUUID->"86ac2404-e110-4562-91d3-73aa9e7ca00e"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Geometrical computation and meshes", \
"Section",ExpressionUUID->"24d0e583-e2ae-4f11-8446-2c61dea61096"],

Cell[CellGroupData[{

Cell["Geometrical meshes", \
"Subsection",ExpressionUUID->"292415e2-3288-4891-a476-e1d3d5dd2fa2"],

Cell[CellGroupData[{

Cell["IGMeshGraph", \
"Subsubsection",ExpressionUUID->"56a0f36c-9354-46b2-a828-5e9989b37107"],

Cell[BoxData[
 RowBox[{"?", 
  "IGMeshGraph"}]], \
"Input",ExpressionUUID->"c4054c88-3a6c-4963-b636-9af6268fa0f2"],

Cell["The available options are:", \
"Text",ExpressionUUID->"b73d7daf-c257-4968-b038-06322735c6d3"],

Cell[TextData[{
 Cell[BoxData[
 "EdgeWeight"],ExpressionUUID->"880c57c3-f15e-4519-9b80-c3fcb4ff5f60"],
 " sets either the explicit edge weights, or the mesh property to be used as \
edge weights. The default value is ",
 Cell[BoxData[
 "MeshCellMeasure"],ExpressionUUID->"e9ff82c6-20ef-43b9-8cac-dc7c53f8e295"],
 ". Use ",
 Cell[BoxData[
 "None"],ExpressionUUID->"6063eb8c-01e2-449b-9276-339ad65583fa"],
 " to obtain an unweighted graph."
}], "Item",ExpressionUUID->"46327d9a-5801-4d37-80de-f69cb2876ea9"],

Cell["\<\
The following example demonstrates finding a shortest path on a geometric \
mesh.\
\>", "Text",ExpressionUUID->"b004cf61-81ef-44a3-b649-06fcab24b230"],

Cell[BoxData[
 RowBox[{"mesh", "=", 
  RowBox[{"DiscretizeRegion", "[", 
   RowBox[{
    RowBox[{"RegionDifference", "[", 
     RowBox[{
      RowBox[{"Rectangle", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "3"}], "}"}]}], "]"}], ",", 
      RowBox[{"Rectangle", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}]}], "]"}]}], "]"}], ",", 
    RowBox[{"MaxCellMeasure", "\[Rule]", "0.02"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.720531666878605*^9, 
  3.7205316727659683`*^9}},ExpressionUUID->"a537fe95-2997-4799-ba33-\
9d3dc462bfbb"],

Cell[TextData[{
 Cell[BoxData[
 "IGMeshGraph"],ExpressionUUID->"2fddd518-a182-416a-a3df-01cecc740ba2"],
 " preserves the vertex coordinates, and uses edge lengths as edge weights by \
default."
}], "Text",ExpressionUUID->"07cb381b-59ad-45ab-8196-77fb8c618448"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"IGMeshGraph", "[", "mesh", "]"}]}]], "Input",
 CellChangeTimes->{{3.720530403208596*^9, 3.720530468716012*^9}, {
  3.720530879322616*^9, 3.7205308799057617`*^9}, {3.720531286387629*^9, 
  3.720531359334012*^9}, {3.720531391142756*^9, 3.720531392092895*^9}, {
  3.7205315084257793`*^9, 3.7205315153695374`*^9}, {3.720531563490065*^9, 
  3.720531597060973*^9}, {3.7205316770381413`*^9, 
  3.720531678733333*^9}},ExpressionUUID->"10b523c7-8208-4560-b634-\
9fe7c31ffe81"],

Cell["Find the corners.", \
"Text",ExpressionUUID->"c7abf921-e541-4ec4-a186-a7ba034ace24"],

Cell[BoxData[
 RowBox[{"st", "=", 
  RowBox[{"First", "/@", 
   RowBox[{"Through", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"MinimalBy", ",", "MaximalBy"}], "}"}], "[", 
     RowBox[{
      RowBox[{"VertexList", "[", "g", "]"}], ",", 
      RowBox[{
       RowBox[{"Norm", "@", 
        RowBox[{"PropertyValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"g", ",", "#"}], "}"}], ",", "VertexCoordinates"}], 
         "]"}]}], "&"}]}], "]"}], "\[IndentingNewLine]", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.720530518656507*^9, 3.720530562973282*^9}, {
  3.720530620354545*^9, 3.720530626072632*^9}, {3.720531443515697*^9, 
  3.7205314443218803`*^9}, {3.720531526529374*^9, 
  3.7205315417038794`*^9}},ExpressionUUID->"c5cca954-82a2-49c3-9b49-\
eb95831486f7"],

Cell["Highlight the shortest path.", \
"Text",ExpressionUUID->"4a186f7a-8cdd-4129-a479-fa83f99de4e4"],

Cell[BoxData[
 RowBox[{"HighlightGraph", "[", 
  RowBox[{"g", ",", "\[IndentingNewLine]", 
   RowBox[{"PathGraph", "@", 
    RowBox[{"FindShortestPath", "[", 
     RowBox[{"g", ",", 
      RowBox[{"First", "[", "st", "]"}], ",", 
      RowBox[{"Last", "[", "st", "]"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"Frame", "\[Rule]", "True"}], ",", 
   RowBox[{"FrameTicks", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.7205304720332737`*^9, 3.7205305062953997`*^9}, {
  3.720530582743116*^9, 3.720530582854973*^9}, {3.720530634871773*^9, 
  3.720530635192234*^9}, {3.7205314138673*^9, 3.720531426313422*^9}, {
  3.720531488364881*^9, 3.720531488515215*^9}, {3.7205315468649187`*^9, 
  3.7205315493858*^9}},ExpressionUUID->"cfed510e-d3b4-47a4-baa6-2fa2acfb027d"],

Cell["Find a Hamiltonian path on a mesh.", \
"Text",ExpressionUUID->"bca07304-56d5-4691-b6cb-02c4abbe2d59"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"IGMeshGraph", "@", 
    RowBox[{"DiscretizeRegion", "[", 
     RowBox[{
      RowBox[{"Disk", "[", "]"}], ",", 
      RowBox[{"MaxCellMeasure", "\[Rule]", 
       RowBox[{"1", "/", "40"}]}]}], "]"}]}]}], ";"}], "\n", 
 RowBox[{"HighlightGraph", "[", 
  RowBox[{"g", ",", 
   RowBox[{"PathGraph", "@", 
    RowBox[{"FindHamiltonianPath", "[", "g", "]"}]}], ",", 
   RowBox[{"GraphHighlightStyle", "\[Rule]", "\"\<DehighlightHide\>\""}]}], 
  "]"}]}], "Input",ExpressionUUID->"a4fb75ce-2837-4400-b4ec-ed1e3cb517eb"],

Cell["Get a spikey as a graph.", \
"Text",ExpressionUUID->"5c4e298f-85e9-44a1-a0c2-e0ea81f46afe"],

Cell[BoxData[
 RowBox[{"IGMeshGraph", "@", 
  RowBox[{"PolyhedronData", "[", 
   RowBox[{"\"\<Spikey\>\"", ",", "\"\<BoundaryMeshRegion\>\""}], 
   "]"}]}]], "Input",ExpressionUUID->"5f71defd-7ef5-4f80-b271-0e02d6cdb447"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGMeshCellAdjacencyGraph and IGMeshCellAdjacencMatrix", \
"Subsubsection",ExpressionUUID->"2edb0faf-b5eb-4603-ac19-4631d73704e6"],

Cell[BoxData[
 RowBox[{"?", 
  "IGMeshCellAdjacencyGraph"}]], \
"Input",ExpressionUUID->"24b29374-237b-4b15-93be-5e62006c343b"],

Cell[BoxData[
 RowBox[{"?", 
  "IGMeshCellAdjacencyMatrix"}]], \
"Input",ExpressionUUID->"6ee2f81c-e855-48d2-bb52-499a08addcc0"],

Cell[TextData[{
 "The available options for ",
 Cell[BoxData[
 "IGMeshCellAdjacencyGraph"],ExpressionUUID->
  "f0618685-a64d-4bdb-b369-7a9d9b0c99ec"],
 " are:"
}], "Text",ExpressionUUID->"dee6af43-8903-4dea-890f-26cfef6df4bc"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"VertexCoordinates", "\[Rule]", "Automatic"}]],ExpressionUUID->
  "857adedf-1b3b-42fe-a268-cedc617a411b"],
 " will use the mesh cell centroids as vertex coordinates if the mesh is 2 or \
3-dimensional. The default is ",
 Cell[BoxData[
  RowBox[{"VertexCoordinates", "\[Rule]", "None"}]],ExpressionUUID->
  "7334f315-7c91-4239-abef-ee955472d3ce"],
 ", which does not compute any coordinates."
}], "Item",ExpressionUUID->"a1e1faab-3f48-4601-a565-b08a77be2a2e"],

Cell["\<\
Compute the connectivity of mesh vertices (zero-dimensional cells).\
\>", "Text",ExpressionUUID->"b51d2e78-9aa1-4e57-ba34-4ea2581b3a78"],

Cell[BoxData[
 RowBox[{"mesh", "=", 
  RowBox[{"DiscretizeRegion", "[", 
   RowBox[{
    RowBox[{"Disk", "[", "]"}], ",", 
    RowBox[{"MaxCellMeasure", "\[Rule]", "0.1"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"8d4cbebd-4d57-40cb-81f9-0239f16c0e39"],

Cell[BoxData[
 RowBox[{"IGMeshCellAdjacencyGraph", "[", 
  RowBox[{"mesh", ",", "0", ",", 
   RowBox[{"VertexCoordinates", "\[Rule]", "Automatic"}]}], 
  "]"}]], "Input",ExpressionUUID->"279e2ff2-8dfa-4fc5-b116-b0d4e6614290"],

Cell["Compute the connectivity of faces (two-dimensional cells).", \
"Text",ExpressionUUID->"639ad28d-90a2-4d56-8c9f-7efe51d5554b"],

Cell[BoxData[
 RowBox[{"IGMeshCellAdjacencyGraph", "[", 
  RowBox[{"mesh", ",", "2"}], 
  "]"}]], "Input",ExpressionUUID->"58076edb-189a-4ef3-bc07-fca9df005160"],

Cell["Create the graph of a Goldberg polyhedron.", \
"Text",ExpressionUUID->"43efa02d-a444-4919-b9ee-b8926446bfc3"],

Cell[BoxData[
 RowBox[{"IGMeshCellAdjacencyGraph", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"BoundaryDiscretizeRegion", "[", 
    RowBox[{
     RowBox[{"Ball", "[", "]"}], ",", 
     RowBox[{"PrecisionGoal", "\[Rule]", "1"}], ",", 
     RowBox[{"MaxCellMeasure", "\[Rule]", "0.5"}]}], "]"}], ",", "2", ",", 
   "\[IndentingNewLine]", 
   RowBox[{"VertexCoordinates", "\[Rule]", "Automatic"}]}], 
  "]"}]], "Input",ExpressionUUID->"c6973021-02e1-4a02-9e4e-6bb8158fcbd6"],

Cell["\<\
Compute the connectivity of faces and edges, and colour nodes based on \
whether they represent a face or an edge.\
\>", "Text",ExpressionUUID->"669c5e80-a7a4-4059-9d91-c060eb81d915"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"IGMeshCellAdjacencyGraph", "[", "\[IndentingNewLine]", 
   RowBox[{"mesh", ",", "2", ",", "1", ",", "\[IndentingNewLine]", 
    RowBox[{"VertexSize", "\[Rule]", "0.9"}], ",", 
    RowBox[{"VertexStyle", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"EdgeForm", "[", "]"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "_"}], "}"}], "\[Rule]", "Red"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "_"}], "}"}], "\[Rule]", "Black"}]}], "}"}]}], ",", 
    RowBox[{"EdgeStyle", "\[Rule]", "Gray"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"bfd368dc-2ac4-4a00-bfac-ea7d2c7fb5c2"],

Cell["This is a bipartite graph.", \
"Text",ExpressionUUID->"216534cf-af51-4d4b-a26b-c812eebff6b4"],

Cell[BoxData[
 RowBox[{"IGBipartiteQ", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"56dede61-45a9-42b9-a5a3-7a436248cb14"],

Cell[TextData[{
 "The vertex names are the same as the mesh cell indices (see ",
 Cell[BoxData[
 "MeshCellIndex"],ExpressionUUID->"400bea82-ab55-4647-8f64-1f3688b44c5d"],
 ")."
}], "Text",ExpressionUUID->"a00e7acf-4677-4071-bf04-c2950d61d26e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"VertexList", "[", "g", "]"}], "//", 
  "Short"}]], "Input",ExpressionUUID->"13630291-5ff7-48d5-a95c-6aec014d97df"],

Cell["Colour the faces of the mesh.", \
"Text",ExpressionUUID->"56b30d58-06cb-48fa-80bb-2f5ba3314862"],

Cell[BoxData[
 RowBox[{"SetProperty", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"mesh", ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "All"}], "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"MeshCellStyle", "\[Rule]", 
    RowBox[{
     RowBox[{"ColorData", "[", "100", "]"}], "/@", 
     RowBox[{"IGVertexColoring", "@", 
      RowBox[{"IGMeshCellAdjacencyGraph", "[", 
       RowBox[{"mesh", ",", "2"}], "]"}]}]}]}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"de1606f3-24fa-4595-8eab-1bf02a5ffa7d"],

Cell["\<\
The edge-edge connectivity is identical to the line graph of the \
vertex-vertex connectivity.\
\>", "Text",ExpressionUUID->"becdb0f7-96e5-4e10-aa32-8bddf7a79b87"],

Cell[BoxData[
 RowBox[{"IGIsomorphicQ", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"LineGraph", "@", 
    RowBox[{"IGMeshCellAdjacencyGraph", "[", 
     RowBox[{"mesh", ",", "0"}], "]"}]}], ",", 
   RowBox[{"IGMeshCellAdjacencyGraph", "[", 
    RowBox[{"mesh", ",", "1"}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"decf1187-3cf9-4f89-a30d-9423c4fe7cd4"],

Cell["\<\
Compute the adjacency matrix of the vertex-vertex connectivity.\
\>", "Text",ExpressionUUID->"d1f7d8dd-658f-4eca-928b-b5bb1a813a78"],

Cell[BoxData[
 RowBox[{"mesh", "=", 
  RowBox[{"DiscretizeRegion", "[", 
   RowBox[{
    RowBox[{"Sphere", "[", "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"PrecisionGoal", "\[Rule]", "1.5"}], ",", 
    RowBox[{"MaxCellMeasure", "\[Rule]", "1"}], ",", 
    RowBox[{"ImageSize", "\[Rule]", "Small"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"56b3d7b6-288c-44ee-801a-2d848e9bcb70"],

Cell[BoxData[
 RowBox[{"MatrixPlot", "@", 
  RowBox[{"IGMeshCellAdjacencyMatrix", "[", 
   RowBox[{"mesh", ",", "0"}], 
   "]"}]}]], "Input",ExpressionUUID->"0a12996f-95d9-44a7-8b0e-94f3f2480f56"],

Cell["Compute the adjacency matrix of the edge-face connectivity.", \
"Text",ExpressionUUID->"9c4914ce-d4db-4024-93c0-323806be2490"],

Cell[BoxData[
 RowBox[{"bm", "=", 
  RowBox[{"IGMeshCellAdjacencyMatrix", "[", 
   RowBox[{"mesh", ",", "1", ",", "2"}], 
   "]"}]}]], "Input",ExpressionUUID->"c557f7af-5990-47c5-a854-f53d083ffade"],

Cell[BoxData[
 RowBox[{"MatrixPlot", "[", "bm", 
  "]"}]], "Input",ExpressionUUID->"c3b41ada-73e6-42ea-9dd9-ce6a61809648"],

Cell[TextData[{
 "This is the (non-square) incidence matrix of a bipartite graph. The graph \
can be reconstructed using ",
 Cell[BoxData[
 "IGBipartiteIncidenceGraph"],ExpressionUUID->
  "9d57e336-4360-4989-830f-7e9fbe3ed79c"],
 "."
}], "Text",ExpressionUUID->"60202725-2c00-4c70-ac4b-b118952861e3"],

Cell[BoxData[
 RowBox[{"Graph3D", "@", 
  RowBox[{
  "IGBipartiteIncidenceGraph", "[", "bm", 
   "]"}]}]], "Input",ExpressionUUID->"ce660676-ffa3-4ba6-b72d-0cad389b29f1"],

Cell["\<\
Paint a Hamiltonian path on triangulation using a gradient of colours.\
\>", "Text",ExpressionUUID->"bd39285a-7618-434b-8e50-dbd35e663da3"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"mesh", "=", 
   RowBox[{"DiscretizeRegion", "[", 
    RowBox[{
     RowBox[{"Disk", "[", "]"}], ",", 
     RowBox[{"MaxCellMeasure", "\[Rule]", 
      RowBox[{"1", "/", "50"}]}], ",", 
     RowBox[{"MeshCellStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", "\[Rule]", "None"}], "}"}]}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"path", "=", 
   RowBox[{"FindHamiltonianPath", "@", 
    RowBox[{"IGMeshCellAdjacencyGraph", "[", 
     RowBox[{"mesh", ",", "2"}], "]"}]}]}], 
  ";"}]}], "Input",ExpressionUUID->"4a06544f-b655-4318-a23c-6b324ff4aa2f"],

Cell[BoxData[
 RowBox[{"MeshRegion", "[", "\[IndentingNewLine]", 
  RowBox[{"mesh", ",", "\[IndentingNewLine]", 
   RowBox[{"MeshCellStyle", "\[Rule]", 
    RowBox[{"MapIndexed", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"#1", "\[Rule]", 
        RowBox[{
         RowBox[{"ColorData", "[", "\"\<Pastel\>\"", "]"}], "[", 
         RowBox[{
          RowBox[{"First", "[", "#2", "]"}], "/", 
          RowBox[{"Length", "[", "path", "]"}]}], "]"}]}], "&"}], ",", 
      "path"}], "]"}]}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"7eb29e73-c3ff-41d7-9382-8cf7633a40d7"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGLatticeMesh", \
"Subsubsection",ExpressionUUID->"b71baf9f-05ca-4c26-9ffc-78970f44fc2a"],

Cell[BoxData[
 RowBox[{"?", 
  "IGLatticeMesh"}]], \
"Input",ExpressionUUID->"a2cea7da-ae74-4d2f-a8f2-4bdc97c8c3bf"],

Cell[TextData[{
 Cell[BoxData[
 "IGLatticeMesh"],ExpressionUUID->"4eea674b-51b2-46a5-91c4-9169aced0e86"],
 " can generate meshes of various periodic tilings. ",
 Cell[BoxData[
 "IGMeshGraph"],ExpressionUUID->"3aea4033-307f-4ac1-afc5-69d14be46357"],
 " and ",
 Cell[BoxData[
 "IGMeshCellAdjacencyGraph"],ExpressionUUID->
  "b8648c15-5a11-4c7d-b0db-02a1e9679123"],
 " can be used to convert these to graphs. The primary use case is the easy \
generation of various lattice graphs."
}], "Text",ExpressionUUID->"29028494-a62d-4f53-9433-001d654dcde2"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGLatticeMesh", "[", "]"}]],ExpressionUUID->
  "8f112bd5-8b78-428a-b05c-f573f70c87f3"],
 " returns the list of available lattices. Let us explore them using a \
graphical interface."
}], "Text",ExpressionUUID->"80a7b4be-3e52-4acf-9b10-5818f7ae4968"],

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"IGLatticeMesh", "[", "type", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"type", ",", 
     RowBox[{"IGLatticeMesh", "[", "]"}]}], "}"}]}], "]"}]], "Input",
 CellTags->
  "DeleteOutput",ExpressionUUID->"895fdab5-a9da-4617-871b-e42df135007b"],

Cell[TextData[{
 "IGraph/M knows about a subset of the tilings available in ",
 Cell[BoxData[
  RowBox[{"EntityClass", "[", 
   RowBox[{"\"\<PeriodicTiling\>\"", ",", " ", "All"}], "]"}]],ExpressionUUID->
  "8152dba8-b2f4-4a42-afbe-24a0445d4c57"],
 ". Use these entities to obtain additional geometric information about the \
tilings."
}], "Text",ExpressionUUID->"bacf0b22-98b1-4bc0-b11e-051fbe2a75da"],

Cell[TextData[{
 "Generate a ",
 StyleBox["kagome lattice",
  FontSlant->"Italic"],
 " consisting of 6 by 4 unit cells."
}], "Text",ExpressionUUID->"83aaf104-8b47-4422-9bad-29071ab72e4f"],

Cell[BoxData[
 RowBox[{"IGLatticeMesh", "[", 
  RowBox[{"\"\<Trihexagonal\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "4"}], "}"}]}], 
  "]"}]], "Input",ExpressionUUID->"9faa3c01-393c-4623-a179-d3d2e294b724"],

Cell["\<\
Create a hexagonal graph of 4 by 3 cells. Notice that the nodes are labelled \
with consecutive integers along the translation vectors of the lattice.\
\>", "Text",ExpressionUUID->"bcaec057-b7f2-40d5-ba02-c66ac946369a"],

Cell[BoxData[
 RowBox[{"IGMeshGraph", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"IGLatticeMesh", "[", 
    RowBox[{"\"\<Hexagonal\>\"", ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "3"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"VertexShapeFunction", "\[Rule]", "\"\<Name\>\""}], ",", 
   RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"c15b058e-cdb6-45db-a4b5-312df46614bb"],

Cell["\<\
This specific node labelling allows for the creation of convenient directed \
lattices.\
\>", "Text",ExpressionUUID->"95f071b6-eb96-40ac-ae9f-c8b1156cf182"],

Cell[BoxData[
 RowBox[{"DirectedGraph", "[", 
  RowBox[{"%", ",", "\"\<Acyclic\>\""}], 
  "]"}]], "Input",ExpressionUUID->"91c84959-e39b-4424-8191-6442dd3659d5"],

Cell["\<\
Create a hexagonal mesh from points that fall within a rectangular region.\
\>", "Text",ExpressionUUID->"637c98d0-c252-4f6c-8946-aeda4e3f4a0c"],

Cell[BoxData[
 RowBox[{"IGLatticeMesh", "[", 
  RowBox[{"\"\<Hexagonal\>\"", ",", 
   RowBox[{"Rectangle", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "5"}], "}"}]}], "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"35fa73ab-5da2-40f9-a041-c5c08f0908a0"],

Cell["\<\
Create a hexagonal mesh from points that fall within a hexagonal region.\
\>", "Text",ExpressionUUID->"c1313bf7-d041-4ab6-8702-b1de1029ffa9"],

Cell[BoxData[
 RowBox[{"IGLatticeMesh", "[", 
  RowBox[{"\"\<Hexagonal\>\"", ",", 
   RowBox[{"Polygon", "@", 
    RowBox[{"CirclePoints", "[", 
     RowBox[{"3", ",", "6"}], "]"}]}]}], 
  "]"}]], "Input",ExpressionUUID->"f36f7709-760b-405a-ac84-6c59463b46d2"],

Cell["\<\
Create a triangular grid graph in the shape of a hexagon, as the \
face-adjacency graph of the above mesh.\
\>", "Text",ExpressionUUID->"24cf816d-a87c-4f78-81ad-d0e31c6d8b28"],

Cell[BoxData[
 RowBox[{"IGMeshCellAdjacencyGraph", "[", 
  RowBox[{"%", ",", "2", ",", 
   RowBox[{"VertexCoordinates", "\[Rule]", "Automatic"}]}], 
  "]"}]], "Input",ExpressionUUID->"8c1aeee1-b7b9-4226-8977-7a3aa559df08"],

Cell["\<\
Create a face adjacency graph of the Cairo pentagonal tiling, and display it \
along with its mesh.\
\>", "Text",ExpressionUUID->"0469c85d-f771-4ecb-be84-f7793c0b068d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mesh", "=", 
   RowBox[{"IGLatticeMesh", "[", 
    RowBox[{"\"\<CairoPentagonal\>\"", ",", 
     RowBox[{"MeshCellStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"1", "\[Rule]", 
         RowBox[{"Darker", "@", "Green"}]}], ",", 
        RowBox[{"2", "\[Rule]", "LightGreen"}]}], "}"}]}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7338250318952513`*^9, 3.7338250476595488`*^9}, {
  3.733825450917251*^9, 3.733825456500626*^9}, {3.733825548003648*^9, 
  3.733825603622607*^9}},ExpressionUUID->"aa18365e-833e-4317-b9c1-\
9c35913df271"],

Cell[BoxData[
 RowBox[{"Show", "[", "\[IndentingNewLine]", 
  RowBox[{"mesh", ",", "\[IndentingNewLine]", 
   RowBox[{"IGMeshCellAdjacencyGraph", "[", 
    RowBox[{"mesh", ",", "2", ",", "\[IndentingNewLine]", 
     RowBox[{"VertexCoordinates", "\[Rule]", "Automatic"}], ",", 
     RowBox[{"GraphStyle", "\[Rule]", "\"\<BasicBlack\>\""}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"970676f8-a6ea-4936-af9c-021be1ed60a0"],

Cell["\<\
Compute a colouring of a periodic tiling so that neighbouring cells have \
different colours.\
\>", "Text",ExpressionUUID->"0b929319-416e-404a-b1fa-a98e8bcfb5e8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"colorMesh", "[", "mesh_", "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"SetProperty", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"MeshRegion", "[", 
       RowBox[{"mesh", ",", 
        RowBox[{"MeshCellStyle", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"1", "\[Rule]", "White"}], "}"}]}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "All"}], "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
    
    RowBox[{"MeshCellStyle", "\[Rule]", 
     RowBox[{
      RowBox[{"ColorData", "[", "8", "]"}], "/@", 
      RowBox[{"IGMinimumVertexColoring", "@", 
       RowBox[{"IGMeshCellAdjacencyGraph", "[", 
        RowBox[{"mesh", ",", "2"}], "]"}]}]}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",ExpressionUUID->"60594bd7-2d87-4c09-b338-20f3f2e4590d"],

Cell[BoxData[
 RowBox[{"colorMesh", "@", 
  RowBox[{"IGLatticeMesh", "[", 
   RowBox[{"\"\<Rhombille\>\"", ",", 
    RowBox[{"Rectangle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"10", ",", "10"}], "}"}]}], "]"}], ",", 
    RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"4101d4fa-4188-4459-9259-839666e62143"],

Cell[BoxData[
 RowBox[{"colorMesh", "@", 
  RowBox[{"IGLatticeMesh", "[", 
   RowBox[{"\"\<PentagonType2\>\"", ",", 
    RowBox[{"{", 
     RowBox[{"6", ",", "4"}], "}"}], ",", 
    RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"21d758d0-4ae0-4012-91b5-28aaf22b6d41"],

Cell["\<\
Explore the face-adjacency graphs of lattices. These correspond to the dual \
lattice.\
\>", "Text",ExpressionUUID->"14f345eb-79b5-48f2-abce-18f70d24adb6"],

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"IGMeshCellAdjacencyGraph", "[", 
    RowBox[{
     RowBox[{"IGLatticeMesh", "[", "type", "]"}], ",", "2", ",", 
     RowBox[{"VertexCoordinates", "\[Rule]", "Automatic"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"type", ",", 
     RowBox[{"IGLatticeMesh", "[", "]"}]}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellTags->
  "DeleteOutput",ExpressionUUID->"f962b869-6ad5-46d4-9ab7-c32d07753976"],

Cell["\<\
Make a maze through the faces of a lattice. We start by finding a spanning \
tree of the face-edge incidence graph of the lattice.\
\>", "Text",ExpressionUUID->"cb28f86f-b7ee-4704-af7c-d801928c0da5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"mesh", "=", 
   RowBox[{"IGLatticeMesh", "[", 
    RowBox[{"\"\<Square\>\"", ",", 
     RowBox[{"Disk", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", "9.5"}], "]"}], ",", 
     RowBox[{"MeshCellStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"1", "|", "2"}], "\[Rule]", 
        RowBox[{"GrayLevel", "[", "0.9", "]"}]}], "}"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"t", "=", 
   RowBox[{"IGRandomSpanningTree", "@", 
    RowBox[{"IGMeshCellAdjacencyGraph", "[", 
     RowBox[{"mesh", ",", "2", ",", "1"}], "]"}]}]}], 
  ";"}]}], "Input",ExpressionUUID->"2ca3d8c5-e0d9-4248-92db-554118f32171"],

Cell["\<\
The walls of the maze will be the leaves of this tree which are edges.\
\>", "Text",ExpressionUUID->"5d3e4cfc-f552-4798-bc40-4023b8533e9e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"walls", "=", 
   RowBox[{"Cases", "[", 
    RowBox[{
     RowBox[{"Pick", "[", 
      RowBox[{
       RowBox[{"VertexList", "[", "t", "]"}], ",", 
       RowBox[{"VertexDegree", "[", "t", "]"}], ",", "1"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "_"}], "}"}]}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"b8be1b73-640c-4a24-bdeb-07529927c346"],

Cell["We will remove two outer walls to serve as the ", \
"Text",ExpressionUUID->"d3958519-b631-4deb-8331-9adba6d24f01"],

Cell[BoxData[
 RowBox[{
  RowBox[{"exits", "=", 
   RowBox[{
    RowBox[{"SortBy", "[", 
     RowBox[{"walls", ",", 
      RowBox[{
       RowBox[{
        RowBox[{"PropertyValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"mesh", ",", "#"}], "}"}], ",", "MeshCellCentroid"}], 
         "]"}], ".", 
        RowBox[{"{", 
         RowBox[{"1", ",", "0.1"}], "}"}]}], "&"}]}], "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"{", 
      RowBox[{"1", ",", 
       RowBox[{"-", "1"}]}], "}"}], "]"}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"04d1a455-ef77-45cf-b524-98f564305664"],

Cell["Draw the maze.", \
"Text",ExpressionUUID->"98105d9c-efac-43d6-83a9-897717009de3"],

Cell[BoxData[
 RowBox[{"MeshRegion", "[", 
  RowBox[{"mesh", ",", "\[IndentingNewLine]", 
   RowBox[{"MeshCellStyle", "\[Rule]", 
    RowBox[{"Thread", "[", 
     RowBox[{
      RowBox[{"Complement", "[", 
       RowBox[{"walls", ",", "exits"}], "]"}], "\[Rule]", 
      RowBox[{"Directive", "[", 
       RowBox[{
        RowBox[{"AbsoluteThickness", "[", "4", "]"}], ",", "Black"}], "]"}]}],
      "]"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"Epilog", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"Text", "[", 
        RowBox[{
        "\"\<\!\(\*StyleBox[\"\[LongRightArrow]\",FontWeight->\"Bold\",\
FontColor->RGBColor[1, 0, 0]]\)\>\"", ",", "#"}], "]"}], "&"}], "/@", 
      RowBox[{"PropertyValue", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mesh", ",", "exits"}], "}"}], ",", "MeshCellCentroid"}], 
       "]"}]}], "}"}]}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"e18d006d-23f5-4bbf-92da-6238c5e6f005"],

Cell["\<\
Create a Moir\[EAcute] pattern by superimposing two rotated hexagonal \
lattices.\
\>", "Text",ExpressionUUID->"ddd0ae43-1280-4b02-843d-b94ddbc48cd7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"m", "=", 
   RowBox[{"IGLatticeMesh", "[", 
    RowBox[{"\"\<Hexagonal\>\"", ",", 
     RowBox[{"Polygon", "@", 
      RowBox[{"CirclePoints", "[", 
       RowBox[{"12.", ",", "6"}], "]"}]}]}], "]"}]}], ";"}], "\n", 
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Show", "@", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"MeshRegion", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"TransformedRegion", "[", 
         RowBox[{"m", ",", 
          RowBox[{"RotationTransform", "[", "angle", "]"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"MeshCellStyle", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"2", "\[Rule]", "None"}], ",", 
           RowBox[{"1", "\[Rule]", 
            RowBox[{"AbsoluteThickness", "[", "1.5", "]"}]}]}], "}"}]}], ",", 
        
        RowBox[{"PlotRange", "\[Rule]", 
         RowBox[{"13", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}]}]}]}], 
       "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"angle", ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "\[Alpha]"}], "}"}]}], "}"}]}], 
     "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Alpha]", ",", "0.15"}], "}"}], ",", "0", ",", "0.3"}], 
    "}"}]}], "\[IndentingNewLine]", "]"}]}], "Input",
 CellTags->
  "DeleteOutput",ExpressionUUID->"214a9d58-e302-493f-a1f4-784f3427fb89"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Proximity graphs", \
"Subsection",ExpressionUUID->"fca6d92c-9f56-4b8e-9455-c701bb4df1a7"],

Cell["\<\
Proximity graphs are connectivity structures of geometric points based on \
geometric criteria. IGraph/M implements several proximity graphs for points \
in two-dimensional Euclidean space.\
\>", "Text",ExpressionUUID->"01f6b963-f0bb-49b7-8c3e-e92e637d753b"],

Cell[CellGroupData[{

Cell["IGDelaunayGraph", \
"Subsubsection",ExpressionUUID->"d2d234b1-207b-4bf5-a9a7-40ec3700c37a"],

Cell[BoxData[
 RowBox[{"?", 
  "IGDelaunayGraph"}]], \
"Input",ExpressionUUID->"31780e02-a77a-470b-8b99-25a6438fc0ad"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGDelaunayGraph", "[", "points", "]"}]],ExpressionUUID->
  "d6d1aee3-c14d-434c-9a49-4b06496173dd"],
 " creates computes the Delaunay graph of the given points in one, two or \
three dimensions. It is equivalent to ",
 Cell[BoxData[
  RowBox[{"IGMeshGraph", "@", 
   RowBox[{"DelaunayMesh", "[", "points", "]"}]}]],ExpressionUUID->
  "811c0fad-bc17-4c24-b8a7-0b0853f2fc84"],
 ", but it is faster and it supports collinear points in 2D and coplanar \
points in 3D."
}], "Text",ExpressionUUID->"45e3ea1d-fb31-4f21-9aa3-6227fba0f979"],

Cell[TextData[{
 Cell[BoxData[
 "IGDelaunayGraph"],ExpressionUUID->"53e05647-38c5-4393-bd97-bd900a2c4671"],
 " works in 1D, 2D and 3D."
}], "Text",ExpressionUUID->"f7b60999-5643-4d5b-bb80-4f852fb30c1e"],

Cell[BoxData[
 RowBox[{"Table", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"IGDelaunayGraph", "@", 
    RowBox[{"RandomPoint", "[", 
     RowBox[{
      RowBox[{"Ball", "@", 
       RowBox[{"ConstantArray", "[", 
        RowBox[{"0", ",", "dim"}], "]"}]}], ",", "30"}], "]"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"dim", ",", "1", ",", "3"}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"ef97aba3-ac20-4720-b077-585deb53c6b2"],

Cell["IGDelaunayGraph works with collinear points in 2D ...", \
"Text",ExpressionUUID->"6a9b75cb-52a7-4bd2-bcbc-87d4ff0d75fe"],

Cell[BoxData[
 RowBox[{"IGDelaunayGraph", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"8", ",", "4"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6", ",", "3"}], "}"}]}], "}"}], 
  "]"}]], "Input",ExpressionUUID->"3b897673-49b5-4e41-a5ad-40fa3738dd58"],

Cell["... or coplanar points in 3D.", \
"Text",ExpressionUUID->"ace7b21c-be6a-4781-bf35-b43ff41d5b00"],

Cell[BoxData[
 RowBox[{"IGDelaunayGraph", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "0"}], "}"}]}], "}"}], 
  "]"}]], "Input",ExpressionUUID->"32a18e4d-60cd-4a4a-9fb5-3fca4f147a30"],

Cell["IGDelaunayGraph takes all the usual graph options.", \
"Text",ExpressionUUID->"0622ae86-86dc-456c-8186-46b6d79f34be"],

Cell[BoxData[
 RowBox[{"IGDelaunayGraph", "[", 
  RowBox[{
   RowBox[{"RandomReal", "[", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "2"}], "}"}]}], "]"}], ",", 
   RowBox[{"GraphStyle", "\[Rule]", "\"\<DiagramGold\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"f03c3f60-9138-4b37-9dc5-720554596ca5"],

Cell["\<\
When there is more than one valid Delaunay triangulation, only one is \
returned.\
\>", "Text",ExpressionUUID->"c1154ec6-0cec-461a-937b-5e6c0071f23b"],

Cell[BoxData[
 RowBox[{"IGDelaunayGraph", "@", 
  RowBox[{
  "CirclePoints", "[", "5", 
   "]"}]}]], "Input",ExpressionUUID->"f6d7beea-dae0-4029-b900-bbeaad6f5b7c"],

Cell["\<\
Find and plot an Euclidean minimum spanning tree of a set of points in three \
dimensions.\
\>", "Text",ExpressionUUID->"d64c739d-f3cb-486f-b3f8-1467af6586e6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"pts", "=", 
   RowBox[{"RandomPoint", "[", 
    RowBox[{
     RowBox[{"Ball", "[", "]"}], ",", "100"}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"d07daa4a-6bda-4dd3-81e1-d556bd5836eb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"dg", "=", 
   RowBox[{"IGDelaunayGraph", "[", "pts", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"IGTakeSubgraph", "[", 
  RowBox[{"dg", ",", "\[IndentingNewLine]", 
   RowBox[{"IGSpanningTree", "@", 
    RowBox[{"IGEdgeMap", "[", 
     RowBox[{
      RowBox[{"Apply", "[", "EuclideanDistance", "]"}], ",", 
      RowBox[{"EdgeWeight", "\[Rule]", 
       RowBox[{"IGEdgeVertexProp", "[", "VertexCoordinates", "]"}]}], ",", 
      "dg"}], "]"}]}]}], "\[IndentingNewLine]", 
  "]"}]}], "Input",ExpressionUUID->"5d36524f-faf6-4923-9ebf-242d02d0a642"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGLuneBetaSkeleton", \
"Subsubsection",ExpressionUUID->"60acf20b-1079-4362-929b-1205d008f4bd"],

Cell[BoxData[
 RowBox[{"?", 
  "IGLuneBetaSkeleton"}]], \
"Input",ExpressionUUID->"b371140e-8b70-48f4-8ce3-ca2af8e1b5c3"],

Cell[TextData[{
 "The lune-based \[Beta] skeleton connects two points ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "2d6e248c-5476-4204-b892-36d0e2d4c6a3"],
 " and ",
 Cell[BoxData[
  FormBox["B", TraditionalForm]],ExpressionUUID->
  "fc1b31d8-83e3-4419-9c7e-e866354aa3f7"],
 " when the intersection of two disks (a lune) having ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "90e1174c-ef00-4499-b929-534ee2c0cd0d"],
 " and ",
 Cell[BoxData[
  FormBox["B", TraditionalForm]],ExpressionUUID->
  "c2c5585d-b943-4db5-a023-6bf8981cbe36"],
 " on its boundary contains no other points."
}], "Text",ExpressionUUID->"9d441f2f-6644-4a92-9b29-4115445a421e"],

Cell[TextData[{
 "For ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Beta]", "\[LessEqual]", "1"}], TraditionalForm]],ExpressionUUID->
  "f1a30b78-1dbb-4058-b23d-a3e27d64dc91"],
 ", the lune is defined by disks of radius ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["AB",
     FontSlant->"Italic"], "/", 
    RowBox[{"(", 
     RowBox[{"2", "\[Beta]"}], ")"}]}], TraditionalForm]],ExpressionUUID->
  "4aebd079-ee1b-48cd-8ceb-272a5ed0e9be"],
 "."
}], "Text",ExpressionUUID->"5d08e1f6-af63-403d-bb18-6825d6bde354"],

Cell[TextData[Cell[BoxData[
 TagBox[GridBox[{
    {
     GraphicsBox[{
       {RGBColor[1., 0.340007, 0.129994], Opacity[
         NCache[
          Rational[1, 3], 0.3333333333333333]], 
        DiskBox[{0, 1.7320508075688772}, 2.], 
        DiskBox[{0, -1.7320508075688772}, 2.]}, {LineBox[{{-1, 0}, {1, 0}}], 
        {AbsolutePointSize[4], PointBox[{{-1, 0}, {1, 0}}], InsetBox[
          TagBox["A",
           HoldForm], {-1, 0}, {0, -1}], InsetBox[
          TagBox["B",
           HoldForm], {1, 0}, {0, -1}]}}},
      Frame->True,
      FrameStyle->GrayLevel[0],
      FrameTicks->None,
      ImageSize->120,
      PlotLabel->FormBox[
        TagBox[
         RowBox[{"\[Beta]", "\[LongEqual]", "0.5`"}], HoldForm], 
        TraditionalForm],
      PlotRange->NCache[{{
          Rational[-9, 4], 
          Rational[9, 4]}, {-3, 3}}, {{-2.25, 2.25}, {-3, 3}}],
      PlotRangeClipping->True], 
     GraphicsBox[{
       {RGBColor[1., 0.340007, 0.129994], Opacity[
         NCache[
          Rational[1, 3], 0.3333333333333333]], 
        DiskBox[{0, 0.7499999999999999}, 1.25], 
        DiskBox[{0, -0.7499999999999999}, 1.25]}, {LineBox[{{-1, 0}, {1, 0}}], 
        {AbsolutePointSize[4], PointBox[{{-1, 0}, {1, 0}}], InsetBox[
          TagBox["A",
           HoldForm], {-1, 0}, {0, -1}], InsetBox[
          TagBox["B",
           HoldForm], {1, 0}, {0, -1}]}}},
      Frame->True,
      FrameStyle->GrayLevel[0],
      FrameTicks->None,
      ImageSize->120,
      PlotLabel->FormBox[
        TagBox[
         RowBox[{"\[Beta]", "\[LongEqual]", "0.8`"}], HoldForm], 
        TraditionalForm],
      PlotRange->NCache[{{
          Rational[-9, 4], 
          Rational[9, 4]}, {-3, 3}}, {{-2.25, 2.25}, {-3, 3}}],
      PlotRangeClipping->True], 
     GraphicsBox[{
       {RGBColor[1., 0.340007, 0.129994], Opacity[
         NCache[
          Rational[1, 3], 0.3333333333333333]], DiskBox[{0, 0}], 
        DiskBox[{0, 0}]}, {LineBox[{{-1, 0}, {1, 0}}], 
        {AbsolutePointSize[4], PointBox[{{-1, 0}, {1, 0}}], InsetBox[
          TagBox["A",
           HoldForm], {-1, 0}, {0, -1}], InsetBox[
          TagBox["B",
           HoldForm], {1, 0}, {0, -1}]}}},
      Frame->True,
      FrameStyle->GrayLevel[0],
      FrameTicks->None,
      ImageSize->120,
      PlotLabel->FormBox[
        TagBox[
         RowBox[{"\[Beta]", "\[LongEqual]", "1"}], HoldForm], TraditionalForm],
      PlotRange->NCache[{{
          Rational[-9, 4], 
          Rational[9, 4]}, {-3, 3}}, {{-2.25, 2.25}, {-3, 3}}],
      PlotRangeClipping->True]}
   },
   AutoDelete->False,
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]],
 CellChangeTimes->{
  3.7488476345336857`*^9},ExpressionUUID->"ca7abd2b-0077-4c80-bf7b-\
e7a594642e68"]], \
"Text",ExpressionUUID->"0e8127d7-e014-4ea6-8bd8-3f0a75e47899"],

Cell[TextData[{
 "For ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Beta]", "\[GreaterEqual]", "1"}], TraditionalForm]],
  ExpressionUUID->"c3976341-d7b3-4a79-a1bc-dadb9eab8b2c"],
 ", the lune is defined by disks of radius ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Beta]", " ", 
    RowBox[{
     StyleBox["AB",
      FontSlant->"Italic"], "/", "2"}]}], TraditionalForm]],ExpressionUUID->
  "e324fb5c-4d6b-463f-bc15-5d3a34dcc910"],
 "."
}], "Text",ExpressionUUID->"67e086d2-cb6d-4495-b084-0c902610dce2"],

Cell[TextData[Cell[BoxData[
 TagBox[GridBox[{
    {
     GraphicsBox[{
       {RGBColor[1., 0.340007, 0.129994], Opacity[
         NCache[
          Rational[1, 3], 0.3333333333333333]], DiskBox[{0, 0}], 
        DiskBox[{0, 0}]}, {LineBox[{{-1, 0}, {1, 0}}], 
        {AbsolutePointSize[4], PointBox[{{-1, 0}, {1, 0}}], InsetBox[
          TagBox["A",
           HoldForm], {-1, 0}, {0, -1}], InsetBox[
          TagBox["B",
           HoldForm], {1, 0}, {0, -1}]}}},
      Frame->True,
      FrameStyle->GrayLevel[0],
      FrameTicks->None,
      ImageSize->120,
      PlotLabel->FormBox[
        TagBox[
         RowBox[{"\[Beta]", "\[LongEqual]", "1"}], HoldForm], TraditionalForm],
      PlotRange->NCache[{{
          Rational[-9, 4], 
          Rational[9, 4]}, {-3, 3}}, {{-2.25, 2.25}, {-3, 3}}],
      PlotRangeClipping->True], 
     GraphicsBox[{
       {RGBColor[1., 0.340007, 0.129994], Opacity[
         NCache[
          Rational[1, 3], 0.3333333333333333]], DiskBox[{-0.5, 0.}, 1.5], 
        DiskBox[{0.5, 0.}, 1.5]}, {LineBox[{{-1, 0}, {1, 0}}], 
        {AbsolutePointSize[4], PointBox[{{-1, 0}, {1, 0}}], InsetBox[
          TagBox["A",
           HoldForm], {-1, 0}, {0, -1}], InsetBox[
          TagBox["B",
           HoldForm], {1, 0}, {0, -1}]}}},
      Frame->True,
      FrameStyle->GrayLevel[0],
      FrameTicks->None,
      ImageSize->120,
      PlotLabel->FormBox[
        TagBox[
         RowBox[{"\[Beta]", "\[LongEqual]", "1.5`"}], HoldForm], 
        TraditionalForm],
      PlotRange->NCache[{{
          Rational[-9, 4], 
          Rational[9, 4]}, {-3, 3}}, {{-2.25, 2.25}, {-3, 3}}],
      PlotRangeClipping->True], 
     GraphicsBox[{
       {RGBColor[1., 0.340007, 0.129994], Opacity[
         NCache[
          Rational[1, 3], 0.3333333333333333]], DiskBox[{-1, 0}, 2], 
        DiskBox[{1, 0}, 2]}, {LineBox[{{-1, 0}, {1, 0}}], 
        {AbsolutePointSize[4], PointBox[{{-1, 0}, {1, 0}}], InsetBox[
          TagBox["A",
           HoldForm], {-1, 0}, {0, -1}], InsetBox[
          TagBox["B",
           HoldForm], {1, 0}, {0, -1}]}}},
      Frame->True,
      FrameStyle->GrayLevel[0],
      FrameTicks->None,
      ImageSize->120,
      PlotLabel->FormBox[
        TagBox[
         RowBox[{"\[Beta]", "\[LongEqual]", "2"}], HoldForm], TraditionalForm],
      PlotRange->NCache[{{
          Rational[-9, 4], 
          Rational[9, 4]}, {-3, 3}}, {{-2.25, 2.25}, {-3, 3}}],
      PlotRangeClipping->True], 
     GraphicsBox[{
       {RGBColor[1., 0.340007, 0.129994], Opacity[
         NCache[
          Rational[1, 3], 0.3333333333333333]], DiskBox[{-3, 0}, 4], 
        DiskBox[{3, 0}, 4]}, {LineBox[{{-1, 0}, {1, 0}}], 
        {AbsolutePointSize[4], PointBox[{{-1, 0}, {1, 0}}], InsetBox[
          TagBox["A",
           HoldForm], {-1, 0}, {0, -1}], InsetBox[
          TagBox["B",
           HoldForm], {1, 0}, {0, -1}]}}},
      Frame->True,
      FrameStyle->GrayLevel[0],
      FrameTicks->None,
      ImageSize->120,
      PlotLabel->FormBox[
        TagBox[
         RowBox[{"\[Beta]", "\[LongEqual]", "4"}], HoldForm], TraditionalForm],
      PlotRange->NCache[{{
          Rational[-9, 4], 
          Rational[9, 4]}, {-3, 3}}, {{-2.25, 2.25}, {-3, 3}}],
      PlotRangeClipping->True]}
   },
   AutoDelete->False,
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]],
 CellChangeTimes->{{3.7488425981362534`*^9, 3.7488426423964357`*^9}, 
   3.748842701993026*^9, 3.748842755878049*^9, {3.748842798609483*^9, 
   3.748842800684517*^9}, {3.748842838008831*^9, 3.748842863204792*^9}, {
   3.7488430446144323`*^9, 3.748843119204782*^9}, {3.748844430458769*^9, 
   3.74884452452078*^9}},ExpressionUUID->"1824922b-3d5b-40e5-9b10-\
0c22e24216ef"]], \
"Text",ExpressionUUID->"f7f110f7-ba65-4bd5-a120-01be885c4823"],

Cell[TextData[{
 "For ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Beta]", "\[GreaterEqual]", "1"}], TraditionalForm]],
  ExpressionUUID->"fe6ba0ba-5f91-4cb6-9d9b-e2aeb4564faa"],
 ", the definition generalizes to higher dimensions too. ",
 Cell[BoxData[
 "IGLuneBetaSkeleton"],ExpressionUUID->"e131e73d-c553-41f6-be91-44d638c604d1"],
 " supports 2D and 3D point sets."
}], "Text",ExpressionUUID->"f5b54f6d-d337-40c6-9b10-24c04b07f8d6"],

Cell[TextData[Cell[BoxData[
 Graphics3DBox[{
   {RGBColor[1., 0.340007, 0.129994], Opacity[0.3], SphereBox[{0, 0, 0}, 1], 
    SphereBox[{1, 0, 0}, 1]}, 
   {Thickness[Large], Line3DBox[{{0, 0, 0}, {1, 0, 0}}], 
    {PointSize[
      NCache[
       Rational[1, 30], 0.03333333333333333]], 
     Point3DBox[{{0, 0, 0}, {1, 0, 0}}]}}, {Text3DBox[
     FormBox["\<\"A\"\>", StandardForm], {0, 0, 0}, {2, 2}], Text3DBox[
     FormBox["\<\"B\"\>", StandardForm], {1, 0, 0}, {-2, 2}]}, 
   {EdgeForm[{Thickness[0.005], Dashing[{0.01, 0.03}], CapForm["Butt"]}], 
    FaceForm[None, None], 
    Polygon3DBox[
     NCache[{{Rational[1, 2], (Rational[1, 2] 3^Rational[1, 2]) 
        Cos[Rational[1, 30] Pi], (Rational[1, 2] 3^Rational[1, 2]) 
        Sin[Rational[1, 30] Pi]}, {
       Rational[1, 2], (Rational[1, 2] 3^Rational[1, 2]) 
        Cos[Rational[1, 15] Pi], (Rational[1, 2] 3^Rational[1, 2]) 
        Sin[Rational[1, 15] Pi]}, {
       Rational[1, 2], 
        Rational[1, 2] (3 (Rational[5, 8] + Rational[1, 8] 5^Rational[1, 2]))^
         Rational[1, 2], (Rational[1, 8] 3^Rational[1, 2]) (-1 + 
         5^Rational[1, 2])}, {
       Rational[1, 2], (Rational[1, 2] 3^Rational[1, 2]) 
        Cos[Rational[2, 15] Pi], (Rational[1, 2] 3^Rational[1, 2]) 
        Sin[Rational[2, 15] Pi]}, {
       Rational[1, 2], Rational[3, 4], Rational[1, 4] 3^Rational[1, 2]}, {
       Rational[
        1, 2], (Rational[1, 8] 3^Rational[1, 2]) (1 + 5^Rational[1, 2]), 
        Rational[
         1, 2] (3 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2]))^
         Rational[1, 2]}, {
       Rational[1, 2], (Rational[1, 2] 3^Rational[1, 2]) 
        Cos[Rational[7, 30] Pi], (Rational[1, 2] 3^Rational[1, 2]) 
        Sin[Rational[7, 30] Pi]}, {
       Rational[1, 2], (Rational[1, 2] 3^Rational[1, 2]) 
        Sin[Rational[7, 30] Pi], (Rational[1, 2] 3^Rational[1, 2]) 
        Cos[Rational[7, 30] Pi]}, {
       Rational[1, 2], 
        Rational[
         1, 2] (3 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2]))^
         Rational[1, 2], (Rational[1, 8] 3^Rational[1, 2]) (1 + 
         5^Rational[1, 2])}, {
       Rational[1, 2], Rational[1, 4] 3^Rational[1, 2], Rational[3, 4]}, {
       Rational[1, 2], (Rational[1, 2] 3^Rational[1, 2]) 
        Sin[Rational[2, 15] Pi], (Rational[1, 2] 3^Rational[1, 2]) 
        Cos[Rational[2, 15] Pi]}, {
       Rational[
        1, 2], (Rational[1, 8] 3^Rational[1, 2]) (-1 + 5^Rational[1, 2]), 
        Rational[1, 2] (3 (Rational[5, 8] + Rational[1, 8] 5^Rational[1, 2]))^
         Rational[1, 2]}, {
       Rational[1, 2], (Rational[1, 2] 3^Rational[1, 2]) 
        Sin[Rational[1, 15] Pi], (Rational[1, 2] 3^Rational[1, 2]) 
        Cos[Rational[1, 15] Pi]}, {
       Rational[1, 2], (Rational[1, 2] 3^Rational[1, 2]) 
        Sin[Rational[1, 30] Pi], (Rational[1, 2] 3^Rational[1, 2]) 
        Cos[Rational[1, 30] Pi]}, {
       Rational[1, 2], 0, Rational[1, 2] 3^Rational[1, 2]}, {
       Rational[1, 2], (Rational[-1, 2] 3^Rational[1, 2]) 
        Sin[Rational[1, 30] Pi], (Rational[1, 2] 3^Rational[1, 2]) 
        Cos[Rational[1, 30] Pi]}, {
       Rational[1, 2], (Rational[-1, 2] 3^Rational[1, 2]) 
        Sin[Rational[1, 15] Pi], (Rational[1, 2] 3^Rational[1, 2]) 
        Cos[Rational[1, 15] Pi]}, {
       Rational[
        1, 2], (Rational[1, 8] 3^Rational[1, 2]) (1 - 5^Rational[1, 2]), 
        Rational[1, 2] (3 (Rational[5, 8] + Rational[1, 8] 5^Rational[1, 2]))^
         Rational[1, 2]}, {
       Rational[1, 2], (Rational[-1, 2] 3^Rational[1, 2]) 
        Sin[Rational[2, 15] Pi], (Rational[1, 2] 3^Rational[1, 2]) 
        Cos[Rational[2, 15] Pi]}, {
       Rational[1, 2], Rational[-1, 4] 3^Rational[1, 2], Rational[3, 4]}, {
       Rational[1, 2], 
        Rational[-1, 2] (
          3 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2]))^
         Rational[1, 2], (Rational[1, 8] 3^Rational[1, 2]) (1 + 
         5^Rational[1, 2])}, {
       Rational[1, 2], (Rational[-1, 2] 3^Rational[1, 2]) 
        Sin[Rational[7, 30] Pi], (Rational[1, 2] 3^Rational[1, 2]) 
        Cos[Rational[7, 30] Pi]}, {
       Rational[1, 2], (Rational[-1, 2] 3^Rational[1, 2]) 
        Cos[Rational[7, 30] Pi], (Rational[1, 2] 3^Rational[1, 2]) 
        Sin[Rational[7, 30] Pi]}, {
       Rational[
        1, 2], (Rational[1, 8] 3^Rational[1, 2]) (-1 - 5^Rational[1, 2]), 
        Rational[
         1, 2] (3 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2]))^
         Rational[1, 2]}, {
       Rational[1, 2], Rational[-3, 4], Rational[1, 4] 3^Rational[1, 2]}, {
       Rational[1, 2], (Rational[-1, 2] 3^Rational[1, 2]) 
        Cos[Rational[2, 15] Pi], (Rational[1, 2] 3^Rational[1, 2]) 
        Sin[Rational[2, 15] Pi]}, {
       Rational[1, 2], 
        Rational[-1, 2] (
          3 (Rational[5, 8] + Rational[1, 8] 5^Rational[1, 2]))^
         Rational[1, 2], (Rational[1, 8] 3^Rational[1, 2]) (-1 + 
         5^Rational[1, 2])}, {
       Rational[1, 2], (Rational[-1, 2] 3^Rational[1, 2]) 
        Cos[Rational[1, 15] Pi], (Rational[1, 2] 3^Rational[1, 2]) 
        Sin[Rational[1, 15] Pi]}, {
       Rational[1, 2], (Rational[-1, 2] 3^Rational[1, 2]) 
        Cos[Rational[1, 30] Pi], (Rational[1, 2] 3^Rational[1, 2]) 
        Sin[Rational[1, 30] Pi]}, {
       Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2], 0}, {
       Rational[1, 2], (Rational[-1, 2] 3^Rational[1, 2]) 
        Cos[Rational[1, 30] Pi], (Rational[-1, 2] 3^Rational[1, 2]) 
        Sin[Rational[1, 30] Pi]}, {
       Rational[1, 2], (Rational[-1, 2] 3^Rational[1, 2]) 
        Cos[Rational[1, 15] Pi], (Rational[-1, 2] 3^Rational[1, 2]) 
        Sin[Rational[1, 15] Pi]}, {
       Rational[1, 2], 
        Rational[-1, 2] (
          3 (Rational[5, 8] + Rational[1, 8] 5^Rational[1, 2]))^
         Rational[1, 2], (Rational[1, 8] 3^Rational[1, 2]) (1 - 5^
         Rational[1, 2])}, {
       Rational[1, 2], (Rational[-1, 2] 3^Rational[1, 2]) 
        Cos[Rational[2, 15] Pi], (Rational[-1, 2] 3^Rational[1, 2]) 
        Sin[Rational[2, 15] Pi]}, {
       Rational[1, 2], Rational[-3, 4], Rational[-1, 4] 3^Rational[1, 2]}, {
       Rational[
        1, 2], (Rational[1, 8] 3^Rational[1, 2]) (-1 - 5^Rational[1, 2]), 
        Rational[-1, 2] (
          3 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2]))^
         Rational[1, 2]}, {
       Rational[1, 2], (Rational[-1, 2] 3^Rational[1, 2]) 
        Cos[Rational[7, 30] Pi], (Rational[-1, 2] 3^Rational[1, 2]) 
        Sin[Rational[7, 30] Pi]}, {
       Rational[1, 2], (Rational[-1, 2] 3^Rational[1, 2]) 
        Sin[Rational[7, 30] Pi], (Rational[-1, 2] 3^Rational[1, 2]) 
        Cos[Rational[7, 30] Pi]}, {
       Rational[1, 2], 
        Rational[-1, 2] (
          3 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2]))^
         Rational[1, 2], (Rational[1, 8] 3^Rational[1, 2]) (-1 - 5^
         Rational[1, 2])}, {
       Rational[1, 2], Rational[-1, 4] 3^Rational[1, 2], Rational[-3, 4]}, {
       Rational[1, 2], (Rational[-1, 2] 3^Rational[1, 2]) 
        Sin[Rational[2, 15] Pi], (Rational[-1, 2] 3^Rational[1, 2]) 
        Cos[Rational[2, 15] Pi]}, {
       Rational[
        1, 2], (Rational[1, 8] 3^Rational[1, 2]) (1 - 5^Rational[1, 2]), 
        Rational[-1, 2] (
          3 (Rational[5, 8] + Rational[1, 8] 5^Rational[1, 2]))^
         Rational[1, 2]}, {
       Rational[1, 2], (Rational[-1, 2] 3^Rational[1, 2]) 
        Sin[Rational[1, 15] Pi], (Rational[-1, 2] 3^Rational[1, 2]) 
        Cos[Rational[1, 15] Pi]}, {
       Rational[1, 2], (Rational[-1, 2] 3^Rational[1, 2]) 
        Sin[Rational[1, 30] Pi], (Rational[-1, 2] 3^Rational[1, 2]) 
        Cos[Rational[1, 30] Pi]}, {
       Rational[1, 2], 0, Rational[-1, 2] 3^Rational[1, 2]}, {
       Rational[1, 2], (Rational[1, 2] 3^Rational[1, 2]) 
        Sin[Rational[1, 30] Pi], (Rational[-1, 2] 3^Rational[1, 2]) 
        Cos[Rational[1, 30] Pi]}, {
       Rational[1, 2], (Rational[1, 2] 3^Rational[1, 2]) 
        Sin[Rational[1, 15] Pi], (Rational[-1, 2] 3^Rational[1, 2]) 
        Cos[Rational[1, 15] Pi]}, {
       Rational[
        1, 2], (Rational[1, 8] 3^Rational[1, 2]) (-1 + 5^Rational[1, 2]), 
        Rational[-1, 2] (
          3 (Rational[5, 8] + Rational[1, 8] 5^Rational[1, 2]))^
         Rational[1, 2]}, {
       Rational[1, 2], (Rational[1, 2] 3^Rational[1, 2]) 
        Sin[Rational[2, 15] Pi], (Rational[-1, 2] 3^Rational[1, 2]) 
        Cos[Rational[2, 15] Pi]}, {
       Rational[1, 2], Rational[1, 4] 3^Rational[1, 2], Rational[-3, 4]}, {
       Rational[1, 2], 
        Rational[
         1, 2] (3 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2]))^
         Rational[1, 2], (Rational[1, 8] 3^Rational[1, 2]) (-1 - 5^
         Rational[1, 2])}, {
       Rational[1, 2], (Rational[1, 2] 3^Rational[1, 2]) 
        Sin[Rational[7, 30] Pi], (Rational[-1, 2] 3^Rational[1, 2]) 
        Cos[Rational[7, 30] Pi]}, {
       Rational[1, 2], (Rational[1, 2] 3^Rational[1, 2]) 
        Cos[Rational[7, 30] Pi], (Rational[-1, 2] 3^Rational[1, 2]) 
        Sin[Rational[7, 30] Pi]}, {
       Rational[
        1, 2], (Rational[1, 8] 3^Rational[1, 2]) (1 + 5^Rational[1, 2]), 
        Rational[-1, 2] (
          3 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2]))^
         Rational[1, 2]}, {
       Rational[1, 2], Rational[3, 4], Rational[-1, 4] 3^Rational[1, 2]}, {
       Rational[1, 2], (Rational[1, 2] 3^Rational[1, 2]) 
        Cos[Rational[2, 15] Pi], (Rational[-1, 2] 3^Rational[1, 2]) 
        Sin[Rational[2, 15] Pi]}, {
       Rational[1, 2], 
        Rational[1, 2] (3 (Rational[5, 8] + Rational[1, 8] 5^Rational[1, 2]))^
         Rational[1, 2], (Rational[1, 8] 3^Rational[1, 2]) (1 - 5^
         Rational[1, 2])}, {
       Rational[1, 2], (Rational[1, 2] 3^Rational[1, 2]) 
        Cos[Rational[1, 15] Pi], (Rational[-1, 2] 3^Rational[1, 2]) 
        Sin[Rational[1, 15] Pi]}, {
       Rational[1, 2], (Rational[1, 2] 3^Rational[1, 2]) 
        Cos[Rational[1, 30] Pi], (Rational[-1, 2] 3^Rational[1, 2]) 
        Sin[Rational[1, 30] Pi]}, {
       Rational[1, 2], Rational[1, 2] 3^Rational[1, 2], 0}}, {{0.5, 
       0.8612812260087741, 0.09052430460833644}, {0.5, 0.8471006708862739, 
       0.18005680599195537`}, {0.5, 0.823639103546332, 0.2676165673298175}, {
       0.5, 0.7911535738303732, 0.3522442655536469}, {0.5, 0.75, 
       0.4330127018922193}, {0.5, 0.7006292692220367, 0.5090369604551271}, {
       0.5, 0.6435822975543765, 0.5794841035564564}, {0.5, 0.5794841035564564,
        0.6435822975543765}, {0.5, 0.5090369604551271, 0.7006292692220367}, {
       0.5, 0.4330127018922193, 0.75}, {0.5, 0.3522442655536469, 
       0.7911535738303732}, {0.5, 0.2676165673298175, 0.823639103546332}, {
       0.5, 0.18005680599195537`, 0.8471006708862739}, {0.5, 
       0.09052430460833644, 0.8612812260087741}, {
       0.5, 0, 0.8660254037844386}, {0.5, -0.09052430460833644, 
       0.8612812260087741}, {0.5, -0.18005680599195537`, 
       0.8471006708862739}, {0.5, -0.2676165673298175, 0.823639103546332}, {
       0.5, -0.3522442655536469, 0.7911535738303732}, {
       0.5, -0.4330127018922193, 0.75}, {0.5, -0.5090369604551271, 
       0.7006292692220367}, {0.5, -0.5794841035564564, 0.6435822975543765}, {
       0.5, -0.6435822975543765, 0.5794841035564564}, {
       0.5, -0.7006292692220367, 0.5090369604551271}, {0.5, -0.75, 
       0.4330127018922193}, {0.5, -0.7911535738303732, 0.3522442655536469}, {
       0.5, -0.823639103546332, 0.2676165673298175}, {
       0.5, -0.8471006708862739, 0.18005680599195537`}, {
       0.5, -0.8612812260087741, 0.09052430460833644}, {
       0.5, -0.8660254037844386, 0}, {
       0.5, -0.8612812260087741, -0.09052430460833644}, {
       0.5, -0.8471006708862739, -0.18005680599195537`}, {
       0.5, -0.823639103546332, -0.2676165673298175}, {
       0.5, -0.7911535738303732, -0.3522442655536469}, {
       0.5, -0.75, -0.4330127018922193}, {
       0.5, -0.7006292692220367, -0.5090369604551271}, {
       0.5, -0.6435822975543765, -0.5794841035564564}, {
       0.5, -0.5794841035564564, -0.6435822975543765}, {
       0.5, -0.5090369604551271, -0.7006292692220367}, {
       0.5, -0.4330127018922193, -0.75}, {
       0.5, -0.3522442655536469, -0.7911535738303732}, {
       0.5, -0.2676165673298175, -0.823639103546332}, {
       0.5, -0.18005680599195537`, -0.8471006708862739}, {
       0.5, -0.09052430460833644, -0.8612812260087741}, {
       0.5, 0, -0.8660254037844386}, {0.5, 
       0.09052430460833644, -0.8612812260087741}, {0.5, 
       0.18005680599195537`, -0.8471006708862739}, {0.5, 
       0.2676165673298175, -0.823639103546332}, {0.5, 
       0.3522442655536469, -0.7911535738303732}, {0.5, 
       0.4330127018922193, -0.75}, {0.5, 
       0.5090369604551271, -0.7006292692220367}, {0.5, 
       0.5794841035564564, -0.6435822975543765}, {0.5, 
       0.6435822975543765, -0.5794841035564564}, {0.5, 
       0.7006292692220367, -0.5090369604551271}, {0.5, 
       0.75, -0.4330127018922193}, {0.5, 
       0.7911535738303732, -0.3522442655536469}, {0.5, 
       0.823639103546332, -0.2676165673298175}, {0.5, 
       0.8471006708862739, -0.18005680599195537`}, {0.5, 
       0.8612812260087741, -0.09052430460833644}, {
       0.5, 0.8660254037844386, 0}}]]}},
  ImageSize->200,
  Lighting->"Neutral",
  ViewPoint->{0.8, -3.2, 1.2000000000000002`}]],
 CellChangeTimes->{{3.774684296293968*^9, 
  3.774684311271196*^9}},ExpressionUUID->"05ceaf1c-6f33-45b9-8cfa-\
d5c529859411"]], \
"Text",ExpressionUUID->"87eb3aae-a928-47fc-9420-37914e38b06b"],

Cell[TextData[{
 "For ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Beta]", "\[GreaterEqual]", "1"}], TraditionalForm]],
  ExpressionUUID->"1c0bb965-bb69-48ec-a8e5-261ef13c4907"],
 ", the \[Beta] skeleton is a subgraph of the Delaunay graph, thus its edges \
do not cross. For ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Beta]", "\[LessEqual]", "2"}], TraditionalForm]],ExpressionUUID->
  "d5b48428-d0f2-482c-8eee-3c81f69c45e2"],
 ", it contains the Euclidean minimum spanning tree, thus it is connected. \
For ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Beta]", ">", "2"}], TraditionalForm]],ExpressionUUID->
  "cb5322d4-1d9e-41fe-b113-dc9ba5caf770"],
 ", it is typically disconnected."
}], "Text",ExpressionUUID->"ee587657-d412-4812-bd72-6807ba6ae41d"],

Cell[TextData[{
 "The implementation of \[Beta] skeleton computation is efficient only for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Beta]", "\[GreaterEqual]", "1"}], TraditionalForm]],
  ExpressionUUID->"81d8f67b-42ab-4bff-941a-ad81b72d8f3d"],
 "."
}], "Text",ExpressionUUID->"c036c5ca-96b4-4ffa-bd11-b0e3f742efa4"],

Cell["\<\
\[Beta] skeletons can be used to reconstruct a shape from a set of points.\
\>", "Text",ExpressionUUID->"882b6a5c-40d6-46dd-b564-1f5eb45b85de"],

Cell[BoxData[
 RowBox[{
  RowBox[{"points", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2.21", ",", "3.83"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2.5", ",", "3.59"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2.9", ",", "3.49"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3.33", ",", "3.48"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3.79", ",", "3.55"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4.27", ",", "3.63"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4.74", ",", "3.65"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5.25", ",", "3.7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5.66", ",", "3.65"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5.98", ",", "3.58"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.25", ",", "3.47"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.43", ",", "3.23"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.47", ",", "2.86"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.35", ",", "2.39"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.19", ",", "2.02"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5.98", ",", "1.77"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5.8", ",", "1.57"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5.51", ",", "1.31"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5.32", ",", "0.94"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5.19", ",", "0.59"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5.", ",", "0.42"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4.83", ",", "0.31"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4.62", ",", "0.28"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4.5", ",", "0.37"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4.54", ",", "0.51"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4.7", ",", "0.58"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4.82", ",", "0.68"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4.87", ",", "0.91"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4.87", ",", "1.17"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4.9", ",", "1.6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4.91", ",", "1.81"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4.7", ",", "1.7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4.47", ",", "1.67"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4.2", ",", "1.7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3.89", ",", "1.72"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3.55", ",", "1.84"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3.53", ",", "1.61"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3.52", ",", "1.33"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3.51", ",", "0.95"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3.51", ",", "0.48"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3.4", ",", "0.25"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3.11", ",", "0.21"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3.02", ",", "0.34"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3.17", ",", "0.5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3.16", ",", "0.63"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3.07", ",", "0.94"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3.", ",", "1.27"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2.93", ",", "1.48"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2.81", ",", "1.61"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2.6", ",", "1.4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2.37", ",", "1.29"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2.11", ",", "1.1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1.83", ",", "0.99"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1.66", ",", "0.7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1.52", ",", "0.46"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1.33", ",", "0.53"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1.37", ",", "0.76"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1.47", ",", "1.01"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1.7", ",", "1.3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1.91", ",", "1.55"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2.1", ",", "1.73"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2.29", ",", "1.92"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2.54", ",", "1.78"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1.97", ",", "2.17"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1.76", ",", "2.5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1.6", ",", "2.74"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1.36", ",", "2.98"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1.29", ",", "2.92"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1.11", ",", "2.88"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.87", ",", "2.97"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.95", ",", "3.16"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.95", ",", "3.45"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1.09", ",", "3.78"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1.31", ",", "3.92"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1.46", ",", "4.01"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1.22", ",", "4.11"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1.09", ",", "4.31"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1.09", ",", "4.39"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1.3", ",", "4.34"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1.49", ",", "4.23"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1.56", ",", "4.07"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1.95", ",", "4.01"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.98", ",", "3.91"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.88", ",", "4.07"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.86", ",", "4.26"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1.04", ",", "4.17"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5.99", ",", "1.32"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.21", ",", "1.08"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.52", ",", "0.85"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.53", ",", "0.61"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.53", ",", "0.41"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.46", ",", "0.26"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.63", ",", "0.16"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.84", ",", "0.25"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.88", ",", "0.47"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.89", ",", "0.81"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.86", ",", "1.12"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.69", ",", "1.35"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.56", ",", "1.65"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.55", ",", "1.94"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.6", ",", "2.4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.61", ",", "3.39"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.77", ",", "3.72"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.81", ",", "4.18"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.76", ",", "4.6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.7", ",", "5.07"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.74", ",", "5.51"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.99", ",", "5.63"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7.3", ",", "5.71"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7.41", ",", "5.92"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7.17", ",", "6.11"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.74", ",", "6.11"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.34", ",", "5.86"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.17", ",", "5.46"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.08", ",", "4.98"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.15", ",", "4.57"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.25", ",", "4.19"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.21", ",", "3.77"}], "}"}]}], "}"}]}], 
  ";"}]], "Input",ExpressionUUID->"9606a0c4-07f8-48fd-88af-a01c993b9556"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IGLuneBetaSkeleton", "[", 
    RowBox[{"points", ",", "#", ",", 
     RowBox[{"PlotLabel", "\[Rule]", "#"}]}], "]"}], "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{"0.8", ",", "1", ",", "2", ",", "5"}], 
   "}"}]}]], "Input",ExpressionUUID->"da295c5d-08e7-4f08-8cfe-5bf926413460"],

Cell[TextData[{
 Cell[BoxData[
 "IGLuneBetaSkeleton"],ExpressionUUID->"530a10f5-9661-4f4d-b530-f0f53daaeec7"],
 " works in 3D for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Beta]", "\[GreaterEqual]", "1"}], TraditionalForm]],
  ExpressionUUID->"4c386a3b-2aca-4916-a810-121bd2d8f858"],
 "."
}], "Text",ExpressionUUID->"0f0ac713-6569-45ac-b817-edacf8dc526e"],

Cell[BoxData[
 RowBox[{"IGLuneBetaSkeleton", "[", 
  RowBox[{
   RowBox[{"RandomPoint", "[", 
    RowBox[{
     RowBox[{"Ball", "[", "]"}], ",", "20"}], "]"}], ",", "1.5"}], 
  "]"}]], "Input",ExpressionUUID->"18659220-72d5-443d-9210-add34eb4248f"],

Cell[BoxData[
 RowBox[{"IGLuneBetaSkeleton", "[", 
  RowBox[{
   RowBox[{"RandomPoint", "[", 
    RowBox[{
     RowBox[{"Ball", "[", "]"}], ",", "20"}], "]"}], ",", "0.5"}], 
  "]"}]], "Input",ExpressionUUID->"60238501-3931-4991-bc40-bc210327497b"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGCircleBetaSkeleton", \
"Subsubsection",ExpressionUUID->"f016e747-b3c1-4c7d-aa83-c809c3286bc9"],

Cell[BoxData[
 RowBox[{"?", 
  "IGCircleBetaSkeleton"}]], \
"Input",ExpressionUUID->"ecea3103-8839-44b3-9672-8e71358ad10f"],

Cell[TextData[{
 "The circle-based \[Beta] skeleton connects two points ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "e4ecbf65-5a48-42f7-9ac1-e1e6718d61bb"],
 " and ",
 Cell[BoxData[
  FormBox["B", TraditionalForm]],ExpressionUUID->
  "5db1a6f8-4696-4d6a-aa11-f19fa45de20f"],
 " if there is no other point ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]],ExpressionUUID->
  "3768eb41-c2d5-43f3-a5c8-76c98739c299"],
 " so that the angle ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[MeasuredAngle]", " ", "A", " ", "C", " ", "B"}], 
   TraditionalForm]],ExpressionUUID->"e89f74a6-a7ad-42ab-bcfc-f4acf23b2496"],
 " is less sharp the threshold"
}], "Text",ExpressionUUID->"2e0adb62-eef4-41d4-93b2-60c03ac587e2"],

Cell[BoxData[
 FormBox[
  RowBox[{"\[Theta]", "=", 
   RowBox[{"\[Piecewise]", "\[NoBreak]", GridBox[{
      {
       RowBox[{
        SuperscriptBox["sin", 
         RowBox[{"-", "1"}]], "(", 
        FractionBox["1", "\[Beta]"], ")"}], 
       RowBox[{"\[Beta]", "\[GreaterEqual]", "1"}]},
      {
       RowBox[{"\[Pi]", "-", 
        RowBox[{
         SuperscriptBox["sin", 
          RowBox[{"-", "1"}]], "(", "\[Beta]", ")"}]}], 
       RowBox[{"\[Beta]", "\[LessEqual]", "1"}]}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.7]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}], "\[NoBreak]"}]}], 
  TraditionalForm]], \
"DisplayFormula",ExpressionUUID->"10d10c11-b4bc-4868-b0c5-b971b15ab92f"],

Cell[TextData[{
 "This is equivalent to no point ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]],ExpressionUUID->
  "a1618712-8df8-45d1-9d48-e9f25facff61"],
 " being contained in the intersection or unions of the disks illustrated \
below."
}], "Text",ExpressionUUID->"9160bc59-942a-4d96-b01f-57b4ff7f0f1d"],

Cell[TextData[Cell[BoxData[
 TagBox[GridBox[{
    {
     GraphicsBox[{
       {RGBColor[1., 0.340007, 0.129994], Opacity[
         NCache[
          Rational[1, 3], 0.3333333333333333]], 
        DiskBox[{0, 1.7320508075688772}, 2.], 
        DiskBox[{0, -1.7320508075688772}, 2.]}, {LineBox[{{-1, 0}, {1, 0}}], 
        {AbsolutePointSize[4], PointBox[{{-1, 0}, {1, 0}}], InsetBox[
          TagBox["A",
           HoldForm], {-1, 0}, {0, -1}], InsetBox[
          TagBox["B",
           HoldForm], {1, 0}, {0, -1}]}}},
      Frame->True,
      FrameStyle->GrayLevel[0],
      FrameTicks->None,
      ImageSize->120,
      PlotLabel->FormBox[
        TagBox[
         RowBox[{"\[Beta]", "\[LongEqual]", "0.5`"}], HoldForm], 
        TraditionalForm],
      PlotRange->NCache[{{
          Rational[-9, 4], 
          Rational[9, 4]}, {-3, 3}}, {{-2.25, 2.25}, {-3, 3}}],
      PlotRangeClipping->True], 
     GraphicsBox[{
       {RGBColor[1., 0.340007, 0.129994], Opacity[
         NCache[
          Rational[1, 3], 0.3333333333333333]], 
        DiskBox[{0, 0.7499999999999999}, 1.25], 
        DiskBox[{0, -0.7499999999999999}, 1.25]}, {LineBox[{{-1, 0}, {1, 0}}], 
        {AbsolutePointSize[4], PointBox[{{-1, 0}, {1, 0}}], InsetBox[
          TagBox["A",
           HoldForm], {-1, 0}, {0, -1}], InsetBox[
          TagBox["B",
           HoldForm], {1, 0}, {0, -1}]}}},
      Frame->True,
      FrameStyle->GrayLevel[0],
      FrameTicks->None,
      ImageSize->120,
      PlotLabel->FormBox[
        TagBox[
         RowBox[{"\[Beta]", "\[LongEqual]", "0.8`"}], HoldForm], 
        TraditionalForm],
      PlotRange->NCache[{{
          Rational[-9, 4], 
          Rational[9, 4]}, {-3, 3}}, {{-2.25, 2.25}, {-3, 3}}],
      PlotRangeClipping->True], 
     GraphicsBox[{
       {RGBColor[1., 0.340007, 0.129994], Opacity[
         NCache[
          Rational[1, 3], 0.3333333333333333]], DiskBox[{0, 0}], 
        DiskBox[{0, 0}]}, {LineBox[{{-1, 0}, {1, 0}}], 
        {AbsolutePointSize[4], PointBox[{{-1, 0}, {1, 0}}], InsetBox[
          TagBox["A",
           HoldForm], {-1, 0}, {0, -1}], InsetBox[
          TagBox["B",
           HoldForm], {1, 0}, {0, -1}]}}},
      Frame->True,
      FrameStyle->GrayLevel[0],
      FrameTicks->None,
      ImageSize->120,
      PlotLabel->FormBox[
        TagBox[
         RowBox[{"\[Beta]", "\[LongEqual]", "1"}], HoldForm], TraditionalForm],
      PlotRange->NCache[{{
          Rational[-9, 4], 
          Rational[9, 4]}, {-3, 3}}, {{-2.25, 2.25}, {-3, 3}}],
      PlotRangeClipping->True], 
     GraphicsBox[{
       {RGBColor[1., 0.6333372222222222, 0.5166633333333334], 
        DiskBox[{0, 1.118033988749895}, 1.5], 
        DiskBox[{0, -1.118033988749895}, 1.5]}, {LineBox[{{-1, 0}, {1, 0}}], 
        {AbsolutePointSize[4], PointBox[{{-1, 0}, {1, 0}}], InsetBox[
          TagBox["A",
           HoldForm], {-1, 0}, {0, -1}], InsetBox[
          TagBox["B",
           HoldForm], {1, 0}, {0, -1}]}}},
      Frame->True,
      FrameStyle->GrayLevel[0],
      FrameTicks->None,
      ImageSize->120,
      PlotLabel->FormBox[
        TagBox[
         RowBox[{"\[Beta]", "\[LongEqual]", "1.5`"}], HoldForm], 
        TraditionalForm],
      PlotRange->NCache[{{
          Rational[-9, 4], 
          Rational[9, 4]}, {-3, 3}}, {{-2.25, 2.25}, {-3, 3}}],
      PlotRangeClipping->True], 
     GraphicsBox[{
       {RGBColor[1., 0.6333372222222222, 0.5166633333333334], 
        DiskBox[NCache[{0, 3^Rational[1, 2]}, {0, 1.7320508075688772`}], 2], 
        DiskBox[NCache[{0, -3^Rational[1, 2]}, {0, -1.7320508075688772`}], 
         2]}, {LineBox[{{-1, 0}, {1, 0}}], 
        {AbsolutePointSize[4], PointBox[{{-1, 0}, {1, 0}}], InsetBox[
          TagBox["A",
           HoldForm], {-1, 0}, {0, -1}], InsetBox[
          TagBox["B",
           HoldForm], {1, 0}, {0, -1}]}}},
      Frame->True,
      FrameStyle->GrayLevel[0],
      FrameTicks->None,
      ImageSize->120,
      PlotLabel->FormBox[
        TagBox[
         RowBox[{"\[Beta]", "\[LongEqual]", "2"}], HoldForm], TraditionalForm],
      PlotRange->NCache[{{
          Rational[-9, 4], 
          Rational[9, 4]}, {-3, 3}}, {{-2.25, 2.25}, {-3, 3}}],
      PlotRangeClipping->True]}
   },
   AutoDelete->False,
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]],
 CellChangeTimes->{{3.7488475080062847`*^9, 3.748847543693892*^9}, 
   3.748847617981687*^9},ExpressionUUID->"6684dd74-c115-4d98-b740-\
4fb04540ea88"]], \
"Text",ExpressionUUID->"c8e50a5b-4e39-487d-97d3-6a4e2fb4c68d"],

Cell[TextData[{
 "For ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Beta]", "\[LessEqual]", "1"}], TraditionalForm]],ExpressionUUID->
  "27591de9-b9d3-41e4-8fe7-bbd6ee2fd052"],
 ", the circle based and lune based beta skeletons coincide. For ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Beta]", ">", "1"}], TraditionalForm]],ExpressionUUID->
  "f5f65399-30c8-45b4-9060-088e17c8efdc"],
 ", the circle-based beta skeleton is a subgraph of the lune-based one."
}], "Text",ExpressionUUID->"d73f88c2-62e6-4114-a4b4-8aefedb125b2"],

Cell["Compute the circle-based \[Beta] skeleton of a random point set.", \
"Text",ExpressionUUID->"ff193f2d-dc78-4c4b-8b72-746bffeea859"],

Cell[BoxData[
 RowBox[{"IGCircleBetaSkeleton", "[", 
  RowBox[{
   RowBox[{"RandomVariate", "[", 
    RowBox[{
     RowBox[{"NormalDistribution", "[", 
      RowBox[{"0", ",", "1"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"100", ",", "2"}], "}"}]}], "]"}], ",", "1.2"}], 
  "]"}]], "Input",ExpressionUUID->"4a252f42-b72f-4224-a09c-5031592d5370"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGRelativeNeighborhoodGraph", \
"Subsubsection",ExpressionUUID->"2379c312-b0cf-457f-b1d0-a153abb6bbf0"],

Cell[BoxData[
 RowBox[{"?", 
  "IGRelativeNeighborhoodGraph"}]], \
"Input",ExpressionUUID->"7ade8c02-f026-4ab0-89d7-1468fd477337"],

Cell[TextData[{
 "The relative neighbourhood graph is constructed from a set of points in \
space. Two points ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "094b4e3f-be22-41a0-b64d-863b62543a6e"],
 " and ",
 Cell[BoxData[
  FormBox["B", TraditionalForm]],ExpressionUUID->
  "3ed07b64-af38-4d44-be5c-a31262f5b08f"],
 " are connected if and only if there is no other point ",
 Cell[BoxData[
  FormBox["C", TraditionalForm]],ExpressionUUID->
  "90f5aa71-bd4e-4837-913c-65a0a502db4d"],
 " so that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"A", " ", "C"}], "<", 
    RowBox[{"A", " ", "B"}]}], TraditionalForm]],ExpressionUUID->
  "e8c1dc6b-d87c-4ec1-87ea-bac10e241195"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"B", " ", "C"}], "<", 
    RowBox[{"A", " ", "B"}]}], TraditionalForm]],ExpressionUUID->
  "c273fd9d-2b65-4932-a7be-d0a3d00a7398"],
 "."
}], "Text",ExpressionUUID->"aef92e2b-0512-494a-a253-f6a6de5e0d03"],

Cell[TextData[{
 "The relative neighbourhood graph coincides with a \[Beta]-skeleton for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Beta]", "=", "2"}], TraditionalForm]],ExpressionUUID->
  "a65fc48a-4b07-4f7e-ba09-cc3e054224a8"],
 "."
}], "Text",ExpressionUUID->"7ac8f4be-70bf-46f2-80f2-3ee5d9a46fed"],

Cell["\<\
Compute the relative neighbourhood graph of a random set of points.\
\>", "Text",ExpressionUUID->"f5bc2c7c-17fb-4107-b5a8-2cb966046d93"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"IGRelativeNeighborhoodGraph", "[", 
   RowBox[{
    RowBox[{"RandomReal", "[", 
     RowBox[{"1", ",", 
      RowBox[{"{", 
       RowBox[{"1000", ",", "2"}], "}"}]}], "]"}], ",", 
    RowBox[{"GraphStyle", "\[Rule]", "\"\<VibrantColor\>\""}], ",", 
    RowBox[{"VertexSize", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<Scaled\>\"", ",", "0.005"}], "}"}]}]}], 
   "]"}]}]], "Input",ExpressionUUID->"65a217db-d2db-4a2b-b505-7500109010d8"],

Cell["Assign edge lengths as weights ...", \
"Text",ExpressionUUID->"9ff13730-79de-4d78-8a33-78da8d04ab26"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"IGDistanceWeighted", "[", "g", "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"b1b5c467-f3b3-4922-9d42-202dd370b858"],

Cell["... and compute their distribution.", \
"Text",ExpressionUUID->"bad6b88f-28da-4935-b15c-78ec5af0ddc4"],

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{
   RowBox[{"IGEdgeProp", "[", "EdgeWeight", "]"}], "[", "g", "]"}], 
  "]"}]], "Input",ExpressionUUID->"75540db6-8596-48c1-a5f2-30b1bcd1f94f"],

Cell["Plot the relative neighbourhood graph of African capitals.", \
"Text",ExpressionUUID->"fac1b44c-f4d8-47a8-8a80-f7e9ce6bde91"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"capitals", "=", 
   RowBox[{"CountryData", "[", 
    RowBox[{"\"\<Africa\>\"", ",", "\"\<CapitalCity\>\""}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"edges", "=", 
   RowBox[{"IGIndexEdgeList", "@", 
    RowBox[{"IGRelativeNeighborhoodGraph", "@", 
     RowBox[{"EntityValue", "[", 
      RowBox[{"capitals", ",", "\"\<Coordinates\>\""}], "]"}]}]}]}], 
  ";"}]}], "Input",ExpressionUUID->"481921fe-4df8-434d-9609-a8a6c0e104fb"],

Cell[BoxData[
 RowBox[{"GeoGraphics", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"Red", ",", "Thick", ",", 
      RowBox[{"Line", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"capitals", "[", 
          RowBox[{"[", "#", "]"}], "]"}], "&"}], "/@", "edges"}], "]"}]}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"PointSize", "[", "0.01", "]"}], ",", 
      RowBox[{"Point", "[", "capitals", "]"}]}], "}"}]}], "}"}], 
  "]"}]], "Input",ExpressionUUID->"2ea81934-b9a7-4008-a63f-7612d83db2c1"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGGabrielGraph", \
"Subsubsection",ExpressionUUID->"43181f42-98a2-4bd8-89cd-eb6b924ba36e"],

Cell[BoxData[
 RowBox[{"?", 
  "IGGabrielGraph"}]], \
"Input",ExpressionUUID->"30e80212-caa3-4086-8685-ef1edcfa6264"],

Cell[TextData[{
 "The Gabriel graph is constructed from a set of points in space. Two points ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "fec75277-0180-4fac-a8a2-09e101e40ce9"],
 " and ",
 Cell[BoxData[
  FormBox["B", TraditionalForm]],ExpressionUUID->
  "d2d0bfd6-9774-48c2-9e04-d04fe7e2053c"],
 " are connected if and only if no other point is contained in the disk of \
which ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", " ", "B"}], TraditionalForm]],ExpressionUUID->
  "71a8f2e8-328d-4820-85f5-7efb17221908"],
 " is a diameter."
}], "Text",ExpressionUUID->"a5f76bab-22d6-43ce-a431-87c52bbec161"],

Cell[TextData[{
 "The Gabriel graph coincides with a \[Beta]-skeleton for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Beta]", "=", "1"}], TraditionalForm]],ExpressionUUID->
  "937d6efb-dfb1-43cd-9557-b804a59fa2c6"],
 "."
}], "Text",ExpressionUUID->"7c828559-5ac8-4984-a9bd-f884d269fa2f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pts", "=", 
   RowBox[{"RandomPoint", "[", 
    RowBox[{
     RowBox[{"Disk", "[", "]"}], ",", "100"}], "]"}]}], ";"}], "\n", 
 RowBox[{"g", "=", 
  RowBox[{
  "IGGabrielGraph", "[", "pts", 
   "]"}]}]}], "Input",ExpressionUUID->"2f709c07-56c6-4e2c-a95e-15755ae664e3"],

Cell["The Gabriel graph is a subgraph of the Delaunay graph.", \
"Text",ExpressionUUID->"e593cdb4-8006-4c95-aeec-230602f0cd0c"],

Cell[BoxData[
 RowBox[{"HighlightGraph", "[", 
  RowBox[{
   RowBox[{"IGMeshGraph", "@", 
    RowBox[{"DelaunayMesh", "[", "pts", "]"}]}], ",", "g"}], 
  "]"}]], "Input",ExpressionUUID->"8c90796b-7523-417f-96d6-65cde2d520ba"],

Cell["\<\
Convert the Gabriel graph to a MeshRegion object by finding its faces, and \
removing the outer face. Here we use the heuristic that for a graph generated \
from a random point set, the face with the most vertices is likely to be the \
outer face.\
\>", "Text",ExpressionUUID->"85a2bc4a-99de-4be2-ac05-8ab537fa7f44"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"faces", "=", 
   RowBox[{"IGFaces", "@", 
    RowBox[{"IGCoordinatesToEmbedding", "[", "g", "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"faces", "=", 
   RowBox[{"Delete", "[", 
    RowBox[{"faces", ",", 
     RowBox[{"Ordering", "[", 
      RowBox[{
       RowBox[{"Length", "/@", "faces"}], ",", 
       RowBox[{"-", "1"}]}], "]"}]}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"cdbe7ed1-d80e-42ac-9137-46c25f895eef"],

Cell[BoxData[
 RowBox[{"MeshRegion", "[", 
  RowBox[{"pts", ",", 
   RowBox[{"Polygon", "[", "faces", "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"d9a7a3c5-b4ae-4fd3-a025-d709f35b01d7"],

Cell["Compute a Gabriel graph in 3D.", \
"Text",ExpressionUUID->"9e7595dd-0434-42ff-811b-c181b123f138"],

Cell[BoxData[
 RowBox[{"IGGabrielGraph", "@", 
  RowBox[{"RandomVariate", "[", 
   RowBox[{
    RowBox[{"MultinormalDistribution", "@", 
     RowBox[{"IdentityMatrix", "[", "3", "]"}]}], ",", "100"}], 
   "]"}]}]], "Input",ExpressionUUID->"28a9ec0e-2953-4ead-9755-1586c69acf3f"]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Weighted graphs", \
"Section",ExpressionUUID->"ab00fbdf-3848-46b2-935f-a82d55d1795c"],

Cell["\<\
These functions perform basic operations on edge-weighted graphs without \
discarding edge weights. They are not based on the igraph C library.\
\>", "Text",ExpressionUUID->"78004031-192c-4a24-b5d1-fb758660b5f2"],

Cell[CellGroupData[{

Cell["IGWeightedAdjacencyGraph", \
"Subsubsection",ExpressionUUID->"77d61a2c-5b01-43da-b467-268ed4a24315"],

Cell[TextData[{
 Cell[BoxData[
 "IGWeightedAdjacencyGraph"],ExpressionUUID->
  "ea667cde-4ce9-4b34-a618-20d45d103373"],
 " constructs an edge-weighted graph from a weighted adjacency matrix. By \
default, ",
 Cell[BoxData["0"],ExpressionUUID->"524579e4-f992-44ec-a0b1-f331beb07046"],
 " elements in the matrix are taken to indicate a lack of connection. An \
alternative value may be specified to indicate the lack of connections."
}], "Text",ExpressionUUID->"bfe8af42-da4d-4b27-9596-763ff32c8c72"],

Cell[TextData[{
 Cell[BoxData[
 "IGWeightedAdjacencyGraph"],ExpressionUUID->
  "48de30c7-ebbf-4e9b-a819-613484a5789c"],
 " takes the same options as ",
 Cell[BoxData[
 "WeightedAjdacencyGraph"],ExpressionUUID->
  "862e49bf-7fdc-4fd8-a9bb-4804305ffcc6"],
 "."
}], "Text",ExpressionUUID->"4b2568da-8995-4998-b369-f7ec961b4312"],

Cell[BoxData[
 RowBox[{"?", 
  "IGWeightedAdjacencyGraph"}]], \
"Input",ExpressionUUID->"bce278bd-b0b0-4c8d-ba2d-98af42e1ff56"],

Cell[BoxData[
 RowBox[{"IGWeightedAdjacencyGraph", "[", 
  RowBox[{
   RowBox[{"(", GridBox[{
      {"0", "2", "0"},
      {"2", "0", "3"},
      {"0", "3", "0"}
     }], ")"}], ",", 
   RowBox[{"GraphStyle", "\[Rule]", "\"\<DiagramGold\>\""}], ",", 
   RowBox[{"EdgeLabels", "\[Rule]", "\"\<EdgeWeight\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"54cc9e72-65fc-46d3-86cb-7253a61476bd"],

Cell[TextData[{
 "The built-in ",
 Cell[BoxData[
 "WeightedAdjacencyGraph"],ExpressionUUID->
  "7c25cff5-79aa-4a6f-8fad-9396a27fb9bf"],
 " uses ",
 Cell[BoxData[
 "Infinity"],ExpressionUUID->"1bfe4ffd-6a85-4606-8672-c1de336bb336"],
 " to indicate the lack of connection. This makes it inconsistent with ",
 Cell[BoxData[
 "WeightedAdjacencyMatrix"],ExpressionUUID->
  "4ce9f252-66cc-4b84-8380-63d5fadc747d"],
 ", which uses ",
 Cell[BoxData["0"],ExpressionUUID->"5940fa6c-bfd2-422c-bd57-6b28e53064c3"],
 ". The purpose of ",
 Cell[BoxData[
 "IGWeightedAdjacencyGraph"],ExpressionUUID->
  "0bcbed53-a673-4286-b795-1fbca43ce039"],
 " is to be able to easily interoperate with ",
 Cell[BoxData[
 "WeightedAdjacencyMatrix"],ExpressionUUID->
  "26865cc0-c79a-454d-9360-ad0c6414c1e5"],
 ", and to easily cycle a weighted graph through an adjacency matrix \
representation."
}], "Text",ExpressionUUID->"da6945cd-e5ac-46f1-9cc6-d535e0d6a609"],

Cell[BoxData[
 RowBox[{"wg", "=", 
  RowBox[{"RandomGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"8", ",", "15"}], "}"}], ",", 
    RowBox[{"EdgeWeight", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"_", "\[RuleDelayed]", 
       RowBox[{"RandomReal", "[", "]"}]}], "}"}]}]}], 
   "]"}]}]], "Input",ExpressionUUID->"716b6b3b-a430-45df-9c63-025287e23d03"],

Cell[BoxData[
 RowBox[{
  RowBox[{"WeightedAdjacencyMatrix", "[", "wg", "]"}], "//", 
  "MatrixForm"}]], \
"Input",ExpressionUUID->"71cf9f0d-e074-4e68-bd3e-78cf4611f129"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"IGWeightedAdjacencyGraph", "@", 
    RowBox[{"WeightedAdjacencyMatrix", "[", "wg", "]"}]}], ",", 
   RowBox[{"WeightedAdjacencyGraph", "@", 
    RowBox[{"WeightedAdjacencyMatrix", "[", "wg", "]"}]}]}], 
  "}"}]], "Input",ExpressionUUID->"6eb41e9e-1d74-4314-bce5-92e8ea98c20e"],

Cell[BoxData[
 RowBox[{"PropertyValue", "[", 
  RowBox[{"%", ",", "EdgeWeight"}], 
  "]"}]], "Input",ExpressionUUID->"2f956617-fed2-4d31-8852-3aaffacb09a6"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGWeightedAdjacencyGraph", "[", 
   RowBox[{"g", ",", "Infinity"}], "]"}]],ExpressionUUID->
  "7f8a325d-3669-4efc-be15-21ff4105c348"],
 " is equivalent to ",
 Cell[BoxData[
  RowBox[{"WeightedAdjacencyGraph", "[", "g", "]"}]],ExpressionUUID->
  "4d3d0907-9cfc-4a9c-ad1a-4d798c911cbc"],
 "."
}], "Text",ExpressionUUID->"0f1924ec-00f1-415c-b64c-4c8d5b27a55f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"IGWeightedAdjacencyGraph", "[", 
    RowBox[{
     RowBox[{"(", GridBox[{
        {"0", "2", "0"},
        {"2", "0", "3"},
        {"0", "3", "0"}
       }], ")"}], ",", "Infinity"}], "]"}], ",", 
   RowBox[{"WeightedAdjacencyGraph", "[", 
    RowBox[{"(", GridBox[{
       {"0", "2", "0"},
       {"2", "0", "3"},
       {"0", "3", "0"}
      }], ")"}], "]"}]}], 
  "}"}]], "Input",ExpressionUUID->"83b20193-e854-4039-bb7c-cc4d3e495d46"],

Cell[TextData[{
 "Use ",
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "True"}]],ExpressionUUID->
  "13cb00c1-fbdd-45e9-8bde-2d8378419ab1"],
 " to force creating a directed graph even from a symmetric matrix."
}], "Text",ExpressionUUID->"98053b89-6cd1-44ba-a59c-129ab7363f75"],

Cell[BoxData[
 RowBox[{"IGWeightedAdjacencyGraph", "[", 
  RowBox[{
   RowBox[{"(", GridBox[{
      {"0", "2", "0"},
      {"2", "0", "3"},
      {"0", "3", "0"}
     }], ")"}], ",", 
   RowBox[{"DirectedEdges", "\[Rule]", "True"}]}], 
  "]"}]], "Input",ExpressionUUID->"1d085603-c1f0-4e0b-995f-21579fe3eca2"],

Cell[TextData[{
 "When the input matrix is not symmetric, ",
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "False"}]],ExpressionUUID->
  "3d6dff05-04b0-4a72-b652-74d024665fcc"],
 " will cause the below-diagonal part of the matrix to be ignored."
}], "Text",ExpressionUUID->"fa4ed390-1080-4bb3-b6fe-10a036c33c74"],

Cell[BoxData[
 RowBox[{"IGWeightedAdjacencyGraph", "[", 
  RowBox[{
   RowBox[{"(", GridBox[{
      {"0", "2", "0"},
      {"4", "0", "0"},
      {"0", "3", "0"}
     }], ")"}], ",", 
   RowBox[{"DirectedEdges", "\[Rule]", "False"}], ",", 
   RowBox[{"GraphStyle", "\[Rule]", "\"\<DiagramGold\>\""}], ",", 
   RowBox[{"EdgeLabels", "\[Rule]", "\"\<EdgeWeight\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"f767abe1-72f3-4a66-9da7-8bcd496096b8"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGWeightedAdjacencyMatrix", \
"Subsubsection",ExpressionUUID->"4db3458b-eb6c-4e98-80bf-f5e8bebcb1bc"],

Cell[BoxData[
 RowBox[{"?", 
  "IGWeightedAdjacencyMatrix"}]], \
"Input",ExpressionUUID->"1538b6e7-ad07-4930-b81c-45c7a83b4be8"],

Cell[TextData[{
 Cell[BoxData[
 "IGWeightedAdjacencyMatrix"],ExpressionUUID->
  "fd807f7f-b808-4a8c-a5e4-a49b196f3c91"],
 " is equivalent to the built-in ",
 Cell[BoxData[
 "WeightedAdjacencyMatrix"],ExpressionUUID->
  "3bf061e3-0b00-4058-be16-fa65463dcb5f"],
 " with the difference that it allows specifying the value to use for \
representing absent connections."
}], "Text",ExpressionUUID->"3a66aa20-0b7d-45d5-ada9-10c39e678338"],

Cell[TextData[{
 "By default, absent connections are represented with ",
 Cell[BoxData["0"],ExpressionUUID->"15ab7f9d-7672-4202-8b90-9086787c427d"],
 ". This does not allow for distinguishing between absent connections and \
connections with weight ",
 Cell[BoxData["0"],ExpressionUUID->"e85e8571-d214-4d37-8eae-c4c9f91b956b"],
 "."
}], "Text",ExpressionUUID->"1ee95909-a89e-44e2-925a-79b309658909"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"Graph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "\[UndirectedEdge]", "2"}], ",", 
      RowBox[{"2", "\[UndirectedEdge]", "3"}]}], "}"}], ",", 
    RowBox[{"EdgeWeight", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"2", ",", "0"}], "}"}]}]}], 
   "]"}]}]], "Input",ExpressionUUID->"ee5cb471-56ff-4763-9510-52d79a23aaf9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGWeightedAdjacencyMatrix", "[", "g", "]"}], "//", 
  "MatrixForm"}]], \
"Input",ExpressionUUID->"16b7cf47-d12d-4470-a50a-081812b6e9d8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGWeightedAdjacencyMatrix", "[", 
   RowBox[{"g", ",", "Infinity"}], "]"}], "//", 
  "MatrixForm"}]], \
"Input",ExpressionUUID->"ae2abc6f-cb71-4713-bef6-31e8f75d14d5"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGEdgeWeightedQ", \
"Subsubsection",ExpressionUUID->"afd5085c-7b85-46d8-8c90-d6b3d38991e4"],

Cell[BoxData[
 RowBox[{"?", 
  "IGEdgeWeightedQ"}]], \
"Input",ExpressionUUID->"f71ff115-acdf-4d47-af41-ef35c08e348a"],

Cell[TextData[{
 "Unlike ",
 Cell[BoxData[
 "WeightedGraphQ"],ExpressionUUID->"e17998b4-348a-47f8-a67e-5e26fb1c593e"],
 ", ",
 Cell[BoxData[
 "IGEdgeWeightedQ"],ExpressionUUID->"eaf9dcc6-9a4f-4cd1-8d71-4dd494f516e5"],
 " does not return ",
 Cell[BoxData[
 "True"],ExpressionUUID->"033ecd09-d9da-4685-9bcd-246e39c5d3cf"],
 " for vertex-weighted graphs that have no edge weights."
}], "Text",ExpressionUUID->"08f91b39-562c-4ae2-bd6b-72bf5468b98f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"Graph", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", "\[UndirectedEdge]", "2"}], "}"}], ",", 
     RowBox[{"VertexWeight", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1.2", ",", "2.3"}], "}"}]}]}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"44b20f05-03d1-4f04-964f-44647eb878c5"],

Cell[BoxData[
 RowBox[{"IGEdgeWeightedQ", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"44ac4e37-26b6-45d6-a424-fea95777f8ed"],

Cell[BoxData[
 RowBox[{"IGEdgeWeightedQ", "[", 
  RowBox[{"SetProperty", "[", 
   RowBox[{"g", ",", 
    RowBox[{"EdgeWeight", "\[Rule]", 
     RowBox[{"{", "1", "}"}]}]}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"e90d2cec-acdf-4667-b15c-b9fea2ccb8a9"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGVertexWeightedQ", \
"Subsubsection",ExpressionUUID->"854f9b83-317a-4e0c-92bd-c5364e667458"],

Cell[BoxData[
 RowBox[{"?", 
  "IGVertexWeightedQ"}]], \
"Input",ExpressionUUID->"2648f9e3-a2de-4518-a131-d67ac700c84d"],

Cell[TextData[{
 "Unlike ",
 Cell[BoxData[
 "WeightedGraphQ"],ExpressionUUID->"1571c1d3-a3a7-4684-89cd-ce6434af0f6f"],
 ", ",
 Cell[BoxData[
 "IGVertexWeightedQ"],ExpressionUUID->
  "a6f9f3a9-8fcb-4b11-a198-c7e216b9a575"],
 " does not return ",
 Cell[BoxData[
 "True"],ExpressionUUID->"5ec45187-5fed-4355-b5ad-60f10be750b9"],
 " for edge-weighted graphs that have no vertex weights."
}], "Text",ExpressionUUID->"702e0174-7689-4d49-81d2-eda3df74f2c6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"Graph", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", "\[UndirectedEdge]", "2"}], "}"}], ",", 
     RowBox[{"EdgeWeight", "\[Rule]", 
      RowBox[{"{", "3.1", "}"}]}]}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"e1d90765-40d0-4391-9c7b-c07954b1396b"],

Cell[BoxData[
 RowBox[{"IGVertexWeightedQ", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"4977e317-98a7-4989-a512-09f762363927"],

Cell[BoxData[
 RowBox[{"IGVertexWeightedQ", "[", 
  RowBox[{"SetProperty", "[", 
   RowBox[{"g", ",", 
    RowBox[{"VertexWeight", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}]}]}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"5e9929a9-e490-447a-a241-950af97be3a8"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGVertexStrength", \
"Subsubsection",ExpressionUUID->"c2681b27-7686-480a-bc9f-c9535467be75"],

Cell[TextData[{
 Cell[BoxData[
 "IGVertexStrength"],ExpressionUUID->"b93166cd-1558-4445-8302-2f1aefc8e383"],
 " returns the strength of each vertex, i.e. the total edge weight of edges \
adjacent to it."
}], "Text",ExpressionUUID->"fca91790-ccf8-446a-a1d9-b830077e3064"],

Cell[BoxData[
 RowBox[{"?", 
  "IGVertex*Strength"}]], \
"Input",ExpressionUUID->"b49e9332-23f8-43dc-974a-425e2eb55bfa"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<NetworkGraph\>\"", ",", "\"\<EurovisionVotes\>\""}], "}"}], 
    "]"}]}], ";"}]], \
"Input",ExpressionUUID->"cb90548d-9078-492d-85ed-69bd4342677f"],

Cell[BoxData[
 RowBox[{"IGVertexStrength", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"dd7eb0c4-addf-41b6-9621-6595fe9eeee1"],

Cell["\<\
In- and out-strength can be calculated separately for directed graphs.\
\>", "Text",ExpressionUUID->"130dba5f-0ef2-4116-b6a8-2d277565defc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"IGVertexInStrength", "[", "g", "]"}], ",", 
   RowBox[{"IGVertexOutStrength", "[", "g", "]"}]}], 
  "}"}]], "Input",ExpressionUUID->"7daf8efa-a4b3-4d82-ad36-22be7851b04d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IGVertexInStrength", "[", "g", "]"}], "+", 
   RowBox[{"IGVertexOutStrength", "[", "g", "]"}]}], "==", 
  RowBox[{
  "IGVertexStrength", "[", "g", 
   "]"}]}]], "Input",ExpressionUUID->"8e72e104-7708-4012-88ef-cf04881de896"],

Cell["Scale vertices by strength:", \
"Text",ExpressionUUID->"126e1316-bd7b-494f-a9e0-b862cbfc39a5"],

Cell[BoxData[
 RowBox[{"IGVertexMap", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<Scaled\>\"", ",", 
      RowBox[{"0.1", "#"}]}], "}"}], "&"}], ",", 
   RowBox[{"VertexSize", "\[Rule]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Normalize", "[", 
       RowBox[{
        RowBox[{"IGVertexStrength", "[", "#", "]"}], ",", "Max"}], "]"}], 
      "&"}], ")"}]}], ",", "g"}], 
  "]"}]], "Input",ExpressionUUID->"bcfeaeb9-01ed-4d0f-af45-3212a0718848"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGUnweighted", \
"Subsubsection",ExpressionUUID->"90bafb2d-920d-473a-a278-7472dd95430a"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGUnweighted", "[", "g", "]"}]],ExpressionUUID->
  "9f16e26e-c07b-472f-bb26-377cb118d2e2"],
 " returns a version of the graph ",
 Cell[BoxData["g"],ExpressionUUID->"9c47deb5-a331-457e-82d7-2543f9f031a1"],
 " with edge weights removed."
}], "Text",ExpressionUUID->"f09c8506-1fac-4dd4-8e77-a2bab08bedfc"],

Cell[BoxData[
 RowBox[{"?", 
  "IGUnweighted"}]], \
"Input",ExpressionUUID->"7e64e054-5e26-43a6-b0fd-09b9dd7c3e78"],

Cell["\<\
This function is useful for computing graph properties such as betweenness \
centrality without taking weights into account.\
\>", "Text",ExpressionUUID->"c310b4df-f229-4fc0-8d9f-254bf81549d6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{"{", 
     RowBox[{
     "\"\<NetworkGraph\>\"", ",", "\"\<EastAfricaEmbassyAttacks\>\""}], "}"}],
     "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"0aeb4cf9-6503-4617-85ed-5d5ea41646a1"],

Cell[BoxData[
 RowBox[{"IGBetweenness", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"c51a908a-c456-4590-82fe-d91eaee61309"],

Cell[BoxData[
 RowBox[{"IGBetweenness", "@", 
  RowBox[{
  "IGUnweighted", "[", "g", 
   "]"}]}]], "Input",ExpressionUUID->"e1340f60-8103-425b-97ee-2c25d5532dd3"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGDistanceWeighted", \
"Subsubsection",ExpressionUUID->"1809d281-3fbd-44a4-ba58-fd8183e991b4"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGDistanceWeighted", "[", "g", "]"}]],ExpressionUUID->
  "65fdaee4-682e-4883-b694-3de0d9323fe4"],
 " returns a weighted version of the graph ",
 Cell[BoxData["g"],ExpressionUUID->"1c45a550-ab30-4767-8d0c-9f3ad6263b61"],
 ", setting the weights of edges to the distance between their endpoints. The \
distances are computed based on the ",
 Cell[BoxData[
 "VertexCoordinates"],ExpressionUUID->
  "ce7a1f2d-892e-443d-8602-228823fe98da"],
 " property."
}], "Text",ExpressionUUID->"5570479f-7efc-403b-bd22-2a4f78b50d1e"],

Cell[BoxData[
 RowBox[{"?", 
  "IGDistanceWeighted"}]], \
"Input",ExpressionUUID->"0c64a59a-c608-456e-889f-d815f401a835"],

Cell["The available options are:", \
"Text",ExpressionUUID->"e3bc1ab3-d04f-4563-8a1e-ddb6782dc03b"],

Cell[TextData[{
 Cell[BoxData[
 "DistanceFunction"],ExpressionUUID->"8dad40b9-4962-4481-a832-a9f382aca911"],
 " sets the function used to compute distances. The default is ",
 Cell[BoxData[
 "EuclideanDistance"],ExpressionUUID->
  "ce8da7bf-be8b-459c-8780-b5ebb6185206"],
 "."
}], "Item",ExpressionUUID->"b4ca406c-463f-4f1e-99ba-b4218f1bbcdb"],

Cell["Create a Delaunay graph.", \
"Text",ExpressionUUID->"18389fe4-ef06-4444-9551-ad4c0c036bd7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pts", "=", 
   RowBox[{"RandomPoint", "[", 
    RowBox[{
     RowBox[{"Disk", "[", "]"}], ",", "100"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"g", "=", 
  RowBox[{"IGDelaunayGraph", "[", 
   RowBox[{"pts", ",", 
    RowBox[{"GraphStyle", "\[Rule]", "\"\<BasicBlack\>\""}], ",", 
    RowBox[{"VertexSize", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<Scaled\>\"", ",", "0.03"}], "}"}]}]}], 
   "]"}]}]}], "Input",ExpressionUUID->"618d4512-bad5-4b57-a51b-d5607ac96d6f"],

Cell[TextData[{
 Cell[BoxData[
 "IGDelaunayGraph"],ExpressionUUID->"9411c6b0-a75b-4adc-87c7-c336d8407ace"],
 " returns unweighted graphs."
}], "Text",ExpressionUUID->"78c36f1f-8c85-4191-b3d6-6b615db157b5"],

Cell[BoxData[
 RowBox[{"IGEdgeWeightedQ", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"f16ad4ed-3d61-414b-9df7-7a3b21e45799"],

Cell["\<\
Set edge weights based on the geometrical distances between the edge \
endpoints.\
\>", "Text",ExpressionUUID->"c3fa3a36-ed28-4bab-a894-2119379f6cf0"],

Cell[BoxData[
 RowBox[{"wg", "=", 
  RowBox[{
  "IGDistanceWeighted", "[", "g", 
   "]"}]}]], "Input",ExpressionUUID->"53eab836-22b7-4940-a196-e27f0e19f572"],

Cell[BoxData[
 RowBox[{"IGEdgeWeightedQ", "[", "wg", 
  "]"}]], "Input",ExpressionUUID->"1949111c-c091-440a-a5e9-9907c754b79c"],

Cell["\<\
Edge weights are taken into account by many graph analysis functions.\
\>", "Text",ExpressionUUID->"97bb1b53-4bed-4e20-84ed-b1daa534d01c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGVertexMap", "[", 
   RowBox[{
    RowBox[{"ColorData", "[", "\"\<Rainbow\>\"", "]"}], ",", 
    RowBox[{"VertexStyle", "\[Rule]", 
     RowBox[{"Rescale", "@*", "IGBetweenness"}]}]}], "]"}], "/@", 
  RowBox[{"{", 
   RowBox[{"wg", ",", "g"}], 
   "}"}]}]], "Input",ExpressionUUID->"3ddcf2d2-49b0-4cea-9633-d1924b6c3c24"],

Cell["Compute the mean edge length.", \
"Text",ExpressionUUID->"fbf69d0a-7cd1-4a06-a044-c60dc790a170"],

Cell[BoxData[
 RowBox[{"Mean", "[", 
  RowBox[{
   RowBox[{"IGEdgeProp", "[", "EdgeWeight", "]"}], "[", "wg", "]"}], 
  "]"}]], "Input",ExpressionUUID->"680f2af9-d08e-46bf-a0c2-bc22dd0b8ca6"],

Cell["Use Manhattan distances instead of Euclidean distances.", \
"Text",ExpressionUUID->"e1bc3aa3-f85d-4d66-a20c-8e96ed55a184"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IGDistanceWeighted", "[", 
    RowBox[{"g", ",", 
     RowBox[{"DistanceFunction", "\[Rule]", "ManhattanDistance"}]}], "]"}], "//", 
   RowBox[{"IGEdgeProp", "[", "EdgeWeight", "]"}]}], "//", 
  "Mean"}]], "Input",ExpressionUUID->"7ac9190d-820f-4553-a3f7-fe614f6aa3da"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGDistanceWeighted", "[", "g", "]"}]],ExpressionUUID->
  "7d7e796c-c8ea-45e9-bbeb-77275a396d27"],
 " is effectively equivalent to the following ",
 Cell[BoxData[
 "IGEdgeMap"],ExpressionUUID->"4be06521-7127-44fe-84f9-5546570eb01d"],
 " construct, but faster for several specific distance functions: "
}], "Text",ExpressionUUID->"2cd6d536-63d1-4adb-ba0f-73727d1725be"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"wg1", "=", 
    RowBox[{"IGEdgeMap", "[", 
     RowBox[{
      RowBox[{"Apply", "[", "EuclideanDistance", "]"}], ",", 
      RowBox[{"EdgeWeight", "\[Rule]", 
       RowBox[{"IGEdgeVertexProp", "[", "VertexCoordinates", "]"}]}], ",", 
      "g"}], "]"}]}], ";"}], "//", 
  "RepeatedTiming"}]], \
"Input",ExpressionUUID->"b522e7b8-f202-4579-be63-0de163d2f51c"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"wg2", "=", 
    RowBox[{"IGDistanceWeighted", "[", "g", "]"}]}], ";"}], "//", 
  "RepeatedTiming"}]], \
"Input",ExpressionUUID->"940cebe7-7b36-4802-a969-041c2616dac1"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IGEdgeProp", "[", "EdgeWeight", "]"}], "[", "wg1", "]"}], "==", 
  RowBox[{
   RowBox[{"IGEdgeProp", "[", "EdgeWeight", "]"}], "[", "wg2", 
   "]"}]}]], "Input",ExpressionUUID->"ba6eb458-d9d6-41fd-b3dd-20395c3a4409"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGWeightedSimpleGraph", \
"Subsubsection",ExpressionUUID->"e2ba902f-bfa3-47a7-a9e4-02fb1ba78782"],

Cell[BoxData[
 RowBox[{"?", 
  "IGWeightedSimpleGraph"}]], \
"Input",ExpressionUUID->"021dd492-4b77-4770-acda-aaf3b3444c76"],

Cell[TextData[{
 Cell[BoxData[
 "IGWeightedSimpleGraph"],ExpressionUUID->
  "3779cee1-f9e5-4222-ac68-253540dd4147"],
 " creates an edge-weighted graph by combining the weights of parallel edges. \
The default combiner function is ",
 Cell[BoxData[
 "Plus"],ExpressionUUID->"915919e3-cfbc-481f-8433-1db3613cb310"],
 ". If the input is an unweighted graph, the resulting weights will be the \
edge multiplicities of the input graph."
}], "Text",ExpressionUUID->"a517df15-a6ed-4509-86cc-24a5a48a3172"],

Cell["Available options:", \
"Text",ExpressionUUID->"552a2853-9067-434f-843a-edd91c0676e2"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"SelfLoops", "\[Rule]", "False"}]],ExpressionUUID->
  "719e3e4c-ec27-4cad-ba29-bf4e85dbecbe"],
 " will discard self-loops. The default is to keep them."
}], "Item",ExpressionUUID->"961d5a69-e1a9-4806-8369-d5d42241a669"],

Cell["Convert edge multiplicities to weights.", \
"Text",ExpressionUUID->"f3dad2ab-e449-4609-a068-d25afb83e66b"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"IGGrowingGame", "[", 
   RowBox[{"30", ",", "3"}], 
   "]"}]}]], "Input",ExpressionUUID->"cc03c83c-705f-4f38-af13-990bc2f76035"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGWeightedSimpleGraph", "[", "g", "]"}], "//", 
  RowBox[{"IGEdgeMap", "[", 
   RowBox[{"AbsoluteThickness", ",", 
    RowBox[{"EdgeStyle", "\[Rule]", 
     RowBox[{"IGEdgeProp", "[", "EdgeWeight", "]"}]}]}], 
   "]"}]}]], "Input",ExpressionUUID->"70efc547-e480-4f20-add4-32ace07e4f4e"],

Cell["Discard self-loops and apply additional graph options.", \
"Text",ExpressionUUID->"45f76b1a-4d8a-4448-bdc7-27864183a1a4"],

Cell[BoxData[
 RowBox[{"IGWeightedSimpleGraph", "[", 
  RowBox[{"g", ",", 
   RowBox[{"SelfLoops", "\[Rule]", "False"}], ",", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<NeonColor\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"b60124b4-798e-42ce-95ea-4f1e6154e0eb"],

Cell[BoxData[
 RowBox[{"IGEdgeWeightedQ", "[", "%", 
  "]"}]], "Input",ExpressionUUID->"e61beefe-9ef8-421a-a713-afc5039064f2"],

Cell[TextData[{
 "Combine edge weights by adding, multiplying or averaging, as controlled by \
the second argument of ",
 Cell[BoxData[
 "IGWeightedSimpleGraph"],ExpressionUUID->
  "da013152-1880-431b-a726-89286f4e2a5f"],
 "."
}], "Text",ExpressionUUID->"1ef95015-2e8c-4b26-8ebb-e79b4d23148a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MatrixForm", "@", 
    RowBox[{"WeightedAdjacencyMatrix", "@", 
     RowBox[{"IGWeightedSimpleGraph", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Graph", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "\[UndirectedEdge]", "2"}], ",", 
           RowBox[{"1", "\[UndirectedEdge]", "2"}], ",", 
           RowBox[{"2", "\[UndirectedEdge]", "3"}]}], "}"}], ",", 
         RowBox[{"EdgeWeight", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"2", ",", "3", ",", "4"}], "}"}]}]}], "]"}], ",", 
       "\[IndentingNewLine]", "#"}], "\[IndentingNewLine]", "]"}]}]}], "&"}], 
  "/@", 
  RowBox[{"{", 
   RowBox[{"Plus", ",", "Times", ",", 
    RowBox[{
     RowBox[{"Mean", "[", 
      RowBox[{"{", "##", "}"}], "]"}], "&"}]}], 
   "}"}]}]], "Input",ExpressionUUID->"d3e625fc-1f2c-4754-b4c8-2b6c20585819"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGWeightedUndirectedGraph", \
"Subsubsection",ExpressionUUID->"f9416e37-6f22-4b68-b831-2178e730df9f"],

Cell[BoxData[
 RowBox[{"?", 
  "IGWeightedUndirectedGraph"}]], \
"Input",ExpressionUUID->"0ee2fb46-addb-4ddb-8d64-30a9a97f581a"],

Cell[TextData[{
 Cell[BoxData[
 "IGWeightedUndirectedGraph"],ExpressionUUID->
  "5dd55f55-203f-4fe0-a457-426c056d1e16"],
 " works like the built-in ",
 Cell[BoxData[
 "UndirectedGraph"],ExpressionUUID->"cb99fa98-7256-4c5b-a0b5-9e60eabc825a"],
 ", but preserves edge weights. The weights of reciprocal edges will be \
combined with the given combiner function. By default, ",
 Cell[BoxData[
 "Plus"],ExpressionUUID->"b73a69fb-bddc-4870-824b-30f2b5d5c470"],
 " is used, i.e. they are added up."
}], "Text",ExpressionUUID->"f4aeebbc-b31f-4f6f-9aaf-5bc446914d8d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IGWeightedUndirectedGraph", "[", "\[IndentingNewLine]", 
    RowBox[{"Graph", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"1", "\[Rule]", "2"}], ",", 
        RowBox[{"2", "\[Rule]", "1"}], ",", 
        RowBox[{"2", "\[Rule]", "3"}]}], "}"}], ",", 
      RowBox[{"EdgeWeight", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4", ",", "5"}], "}"}]}]}], "]"}], 
    "\[IndentingNewLine]", "]"}], "//", "WeightedAdjacencyMatrix"}], "//", 
  "MatrixForm"}]], \
"Input",ExpressionUUID->"8b331b06-23ea-41db-ad07-b7fb3c932505"],

Cell["Average weights instead of adding them.", \
"Text",ExpressionUUID->"eececf03-17b5-46da-849d-08ce61cf5a84"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IGWeightedUndirectedGraph", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Graph", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "2"}], ",", 
         RowBox[{"2", "\[Rule]", "1"}], ",", 
         RowBox[{"2", "\[Rule]", "3"}]}], "}"}], ",", 
       RowBox[{"EdgeWeight", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"3", ",", "4", ",", "5"}], "}"}]}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Mean", "[", 
       RowBox[{"{", "##", "}"}], "]"}], "&"}]}], "\[IndentingNewLine]", "]"}],
    "//", "WeightedAdjacencyMatrix"}], "//", 
  "MatrixForm"}]], \
"Input",ExpressionUUID->"ff1f72c3-8ef1-45be-bb8f-687bb2813e4d"],

Cell["\<\
This function is not meant to be used with multigraphs. If the input is a \
multigraph, weights of parallel edges will be combined with the same combiner \
function that is used for reciprocal edges. This may lead to unexpected \
results, thus a warning is issued.\
\>", "Text",ExpressionUUID->"016d404c-3075-4c9c-995a-2dd345075e98"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IGWeightedUndirectedGraph", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Graph", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "2"}], ",", 
         RowBox[{"1", "\[Rule]", "2"}], ",", 
         RowBox[{"2", "\[Rule]", "1"}], ",", 
         RowBox[{"2", "\[Rule]", "3"}]}], "}"}], ",", 
       RowBox[{"EdgeWeight", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"3", ",", "4", ",", "4", ",", "5"}], "}"}]}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Mean", "[", 
       RowBox[{"{", "##", "}"}], "]"}], "&"}]}], "\[IndentingNewLine]", "]"}],
    "//", "WeightedAdjacencyMatrix"}], "//", 
  "MatrixForm"}]], \
"Input",ExpressionUUID->"38082dfd-26cf-46bb-ba60-67f41e7cafa2"],

Cell[TextData[{
 "Use ",
 Cell[BoxData[
 "IGWeightedSimpleGraph"],ExpressionUUID->
  "3d101cf9-37d0-44d1-a775-ee23d9bd2193"],
 " to combine parallel edges before converting the graph to undirected."
}], "Text",ExpressionUUID->"1903da1c-853d-46c2-adeb-a4ace8c1292a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IGWeightedUndirectedGraph", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"IGWeightedSimpleGraph", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Graph", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "\[Rule]", "2"}], ",", 
           RowBox[{"1", "\[Rule]", "2"}], ",", 
           RowBox[{"2", "\[Rule]", "1"}], ",", 
           RowBox[{"2", "\[Rule]", "3"}]}], "}"}], ",", 
         RowBox[{"EdgeWeight", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"3", ",", "4", ",", "4", ",", "5"}], "}"}]}]}], "]"}], ",",
        "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Mean", "[", 
         RowBox[{"{", "##", "}"}], "]"}], "&"}]}], "\[IndentingNewLine]", 
      "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Mean", "[", 
       RowBox[{"{", "##", "}"}], "]"}], "&"}]}], "\[IndentingNewLine]", "]"}],
    "//", "WeightedAdjacencyMatrix"}], "//", 
  "MatrixForm"}]], \
"Input",ExpressionUUID->"e34e83ed-7e29-423f-ab3d-21f672c521ba"],

Cell[TextData[{
 "If ",
 Cell[BoxData[
 "None"],ExpressionUUID->"940b279a-429e-47e0-915c-2ed95279dd56"],
 " is used for the combiner, reciprocal edges are not combined. A weighted \
multigraph is created instead."
}], "Text",ExpressionUUID->"455f48e1-6cf3-4d08-835b-590fdb63f520"],

Cell[BoxData[
 RowBox[{"IGWeightedUndirectedGraph", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Graph", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "2"}], ",", 
       RowBox[{"2", "\[Rule]", "1"}], ",", 
       RowBox[{"2", "\[Rule]", "3"}]}], "}"}], ",", 
     RowBox[{"EdgeWeight", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "5"}], "}"}]}]}], "]"}], ",", 
   "\[IndentingNewLine]", "None"}], "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"0d07ebd0-7d5c-41db-b134-9c56b8fed39f"],

Cell[BoxData[
 RowBox[{"IGEdgeWeightedQ", "[", "%", 
  "]"}]], "Input",ExpressionUUID->"9dbca3a0-9c90-4fa5-82c7-cd84f42d9c41"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGWeightedVertexDelete", \
"Subsubsection",ExpressionUUID->"1b0e90da-dfdf-450b-b4d2-2a39411aac2f"],

Cell[BoxData[
 RowBox[{"?", 
  "IGWeightedVertexDelete"}]], \
"Input",ExpressionUUID->"25d6de5d-62f4-4808-abe4-fbbf373b9fff"],

Cell[TextData[{
 "In ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " 11.3 and earlier, the built-in ",
 Cell[BoxData[
 "VertexDelete"],ExpressionUUID->"60964e8d-3caa-426e-8453-e6f71bb3f64e"],
 " does not handle edge weights correctly, and may sometimes produce ",
 Cell[BoxData["Graph"],ExpressionUUID->"d03097f5-b1e4-4eaa-85e8-ec6d5fbb6626"],
 " expressions with a broken internal structure. The purpose of ",
 Cell[BoxData[
 "IGWeightedVertexDelete"],ExpressionUUID->
  "b959cdc4-5397-4c7d-8187-0a8927da3a35"],
 " is to provide a fast and reliable way to remove a vertex while preserving \
edge weights. Only edge weights are retained. All other properties are \
discarded."
}], "Text",ExpressionUUID->"960f8d8f-c4ac-4d5d-a1ce-8bc41beef8c3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"Graph", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[UndirectedEdge]", "2"}], ",", 
       RowBox[{"2", "\[UndirectedEdge]", "3"}]}], "}"}], ",", 
     RowBox[{"EdgeWeight", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"4", ",", "5"}], "}"}]}]}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"124f9b15-3119-49a1-b859-2ce3280a3a4f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGEdgeProp", "[", "EdgeWeight", "]"}], "[", "g", 
  "]"}]], "Input",ExpressionUUID->"30a7f1ad-8873-4001-ae4d-a3e510fd1378"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGEdgeProp", "[", "EdgeWeight", "]"}], "@", 
  RowBox[{"IGWeightedVertexDelete", "[", 
   RowBox[{"g", ",", "3"}], 
   "]"}]}]], "Input",ExpressionUUID->"6bbf06ff-7fa5-4eb7-9046-9579e122bca4"],

Cell[TextData[StyleBox["Possible issues:",
 FontWeight->
  "Bold"]], "Text",ExpressionUUID->"ee5a5c5d-b11d-499a-8628-2bbc4b5c3bc3"],

Cell[TextData[{
 "To delete a single vertex whose name is a list, it is necessary to use the \
syntax ",
 Cell[BoxData[
  RowBox[{"IGWeightedVertexDelete", "[", 
   RowBox[{"g", ",", 
    RowBox[{"{", "v", "}"}]}], "]"}]],ExpressionUUID->
  "b762319e-80f1-4f3e-848d-68619b7e0a68"],
 " to avoid ambiguity."
}], "Text",ExpressionUUID->"bb2b971f-af61-4c84-9848-e037d6a7c4f2"],

Cell[TextData[{
 "Graphs with list vertices commonly appear in the output of several \
functions, such as ",
 Cell[BoxData[
 "NearestNeighborGraph"],ExpressionUUID->
  "9394b84d-e53c-463d-8fdf-5e2c884ca5d9"],
 ", ",
 Cell[BoxData[
 "RelationGraph"],ExpressionUUID->"0d0664e3-798d-4eac-8049-9ca9c95214dc"],
 ", ",
 Cell[BoxData[
 "IGDisjointUnion"],ExpressionUUID->"330ee5ab-47e1-4d1f-802d-6cd91d87bdc7"],
 " or ",
 Cell[BoxData[
 "IGMeshCellAdjacencyGraph"],ExpressionUUID->
  "989c8a17-8ce4-46f7-98aa-5ea6b8d74520"],
 "."
}], "Text",ExpressionUUID->"c0661743-1525-4591-a2ff-5b9a2b6b0465"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{
   RowBox[{"NearestNeighborGraph", "[", 
    RowBox[{
     RowBox[{"RandomInteger", "[", 
      RowBox[{"4", ",", 
       RowBox[{"{", 
        RowBox[{"10", ",", "2"}], "}"}]}], "]"}], ",", 
     RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}], "//", 
   RowBox[{"IGEdgeMap", "[", 
    RowBox[{
     RowBox[{"Apply", "[", "EuclideanDistance", "]"}], ",", 
     RowBox[{"EdgeWeight", "\[Rule]", "EdgeList"}]}], 
    "]"}]}]}]], \
"Input",ExpressionUUID->"714e53c5-b1b9-4dcd-a34b-b02e59441210"],

Cell[BoxData[
 RowBox[{"v", "=", 
  RowBox[{"First", "@", 
   RowBox[{
   "VertexList", "[", "g", 
    "]"}]}]}]], \
"Input",ExpressionUUID->"6f307996-d9e8-47a6-98b2-b9a6f778d08e"],

Cell["\<\
In this case, the single-vertex convenience syntax will not work.\
\>", "Text",ExpressionUUID->"1b36b59b-cde5-4e02-bf8b-dd7078b84df1"],

Cell[BoxData[
 RowBox[{"IGWeightedVertexDelete", "[", 
  RowBox[{"g", ",", "v"}], 
  "]"}]], "Input",ExpressionUUID->"b2f63c34-483b-453a-b4cd-f7eeeaf8119e"],

Cell["Wrap the vertex in a list instead.", \
"Text",ExpressionUUID->"4424339b-3dd9-4bb3-8cf0-1fe15f177d12"],

Cell[BoxData[
 RowBox[{"IGWeightedVertexDelete", "[", 
  RowBox[{"g", ",", 
   RowBox[{"{", "v", "}"}]}], 
  "]"}]], "Input",ExpressionUUID->"41d21a4b-c307-4413-8724-a1c7eee55a66"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGWeightedSubgraph", \
"Subsubsection",ExpressionUUID->"5b597f04-a7ec-4be6-bb90-9a4109237eee"],

Cell[BoxData[
 RowBox[{"?", 
  "IGWeightedSubgraph"}]], \
"Input",ExpressionUUID->"9c944d4a-2666-42e7-95b9-12171a7a5078"],

Cell[TextData[{
 "In ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " 11.3 and earlier, the built-in ",
 Cell[BoxData[
 "Subgraph"],ExpressionUUID->"f0b8de07-aa15-40f1-8c26-35500b313fb9"],
 " function does not preserve edge weights. ",
 Cell[BoxData[
 "IGWeightedSubgraph"],ExpressionUUID->"13b22521-edbf-4216-bdea-ee2fdf763947"],
 " preserves edge weights, but discards all other properties."
}], "Text",ExpressionUUID->"6e5607d8-5094-43f7-ab39-b0c93771356e"],

Cell[TextData[{
 "To retain not only edge weights, but also other properties, use ",
 Cell[BoxData[
 "IGTakeSubgraph"],ExpressionUUID->"eb862757-d615-48f3-8f07-5063b2079ff4"],
 ". ",
 Cell[BoxData[
 "IGWeightedSubgraph"],ExpressionUUID->"665ab68f-9734-4d8e-9d2c-d84a6f9c1a27"],
 " offers much better performance than ",
 Cell[BoxData[
 "IGTakeSubgraph"],ExpressionUUID->"c4cbc1b8-da56-43ce-8f67-46bcd19c4360"],
 " at the cost of discarding other properties."
}], "Text",ExpressionUUID->"d4bdcd7f-a059-4fea-baa5-1be90d9bbcfc"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"Graph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "\[Rule]", "2"}], ",", 
      RowBox[{"2", "\[Rule]", "3"}], ",", 
      RowBox[{"3", "\[Rule]", "4"}], ",", 
      RowBox[{"4", "\[Rule]", "1"}]}], "}"}], ",", 
    RowBox[{"EdgeWeight", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}], ",", 
    RowBox[{"EdgeLabels", "\[Rule]", "\"\<EdgeWeight\>\""}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], 
   "]"}]}]], "Input",ExpressionUUID->"da40abb1-69cf-48e3-9193-11a4448e920e"],

Cell[BoxData[
 RowBox[{"IGWeightedSubgraph", "[", 
  RowBox[{"g", ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"EdgeLabels", "\[Rule]", "\"\<EdgeWeight\>\""}], ",", 
   RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"d8cba1c4-4e2e-4346-8fd3-00f309ecb895"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Degree sequences", \
"Section",ExpressionUUID->"2ed7b5c0-b23d-4289-a0bc-8414362b0e99"],

Cell[CellGroupData[{

Cell["Graphicality", \
"Subsection",ExpressionUUID->"1dbd4178-335d-49b2-a6c7-8f60d1e3733b"],

Cell[TextData[{
 "A sequence of integers is called ",
 StyleBox["graphical",
  FontSlant->"Italic"],
 " if there is an undirected graph that has them as its degree sequence. Some \
authors apply the term ",
 StyleBox["graphical",
  FontSlant->"Italic"],
 " only when the degrees can be realized by a ",
 StyleBox["simple",
  FontSlant->"Italic"],
 " graph. Here we use it in a more general sense, as IGraph/M is able to \
perform the test also for the cases of multigraphs with loops, loop-free \
multigraphs and simple graph with at most one self-loop per vertex. These are \
controlled by the ",
 Cell[BoxData[
 "SelfLoops"],ExpressionUUID->"459d1939-4aca-4093-a78f-409d09b0bafd"],
 " and ",
 Cell[BoxData[
 "MultiEdges"],ExpressionUUID->"32e847fd-ffcc-4082-91ae-c8222efd210d"],
 " options. The concept of graphicality generalizes to pairs of in- and \
out-degree sequences of directed graphs as well."
}], "Text",ExpressionUUID->"4085ea6c-2001-4b6d-a168-078703d9c429"],

Cell[CellGroupData[{

Cell["IGGraphicalQ", \
"Subsubsection",ExpressionUUID->"f9fd4104-75d3-45ce-8d7e-480dfc549290"],

Cell[BoxData[
 RowBox[{"?", 
  "IGGraphicalQ"}]], \
"Input",ExpressionUUID->"685a637e-8911-4086-8876-50d269bb2989"],

Cell[TextData[{
 "In the undirected case, ",
 Cell[BoxData[
 "IGGraphicalQ"],ExpressionUUID->"fe6b999e-fbc3-434a-b47c-c1824955ad3e"],
 " uses the Erd\[ODoubleAcute]s\[Dash]Gallai theorem to check if the degree \
sequence is realized by any simple graph. For loopy multigraphs, it is \
sufficient to check that the sum of degrees is even. If self-loops are \
disallowed, there is the additional condition that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Sum]", "i"], 
     SubscriptBox["d", "i"]}], "\[GreaterEqual]", 
    SubscriptBox["d", "max"]}], TraditionalForm]],ExpressionUUID->
  "abe964b0-dde3-47e6-837d-afb5c8d8c303"],
 ". If at most one self-loop is allowed per vertex, but no multi-edges, a \
modification of the Erd\[ODoubleAcute]s-Gallai conditions due to Cairns and \
Mendan are used."
}], "Text",ExpressionUUID->"c81f1af5-d1fa-4402-a836-5f3bd8aeed28"],

Cell[TextData[{
 "In the directed case, ",
 Cell[BoxData[
 "IGGraphicalQ"],ExpressionUUID->"b758d267-c234-4268-bc4b-fb9d98c08d27"],
 " uses the Fulkerson\[Dash]Chen\[Dash]Antsee theorem with Berger\
\[CloseCurlyQuote]s refinement. For loopy multi-digraphs, it is sufficient to \
check that the sum of in-degrees equals the sum of out-degrees. If self-loops \
are disallowed, there is the additional condition that the sum of in-degrees \
(or, alternatively, the sum of out-degrees) is not smaller than the maximum \
total degree. If at most one self-loop is allowed per vertex, but no \
multi-edges, the problem becomes equivalent to realizability as a simple \
bipartite graph, and the Gale\[Dash]Ryser theorem can be used (see ",
 Cell[BoxData[
 "IGBigraphicalQ"],ExpressionUUID->"e85f209f-4069-411c-ae04-0da4e9a6a808"],
 ")."
}], "Text",ExpressionUUID->"18b702e6-c3cf-4170-af6a-5799d0c338fb"],

Cell[TextData[{
 "To actually construct a realization, use the ",
 Cell[BoxData[
 "IGRealizeDegreeSequence"],ExpressionUUID->
  "de00e84f-2e45-4bab-ad71-14154d92eb22"],
 " function. To sample random realizations, use ",
 Cell[BoxData[
 "IGDegreeSequenceGame"],ExpressionUUID->
  "c43fb097-3422-4d2e-860d-39a33910c245"],
 "."
}], "Text",ExpressionUUID->"6be7700c-faee-4168-b78f-a7b23b170cbb"],

Cell["The allowed options are:", \
"Text",ExpressionUUID->"e915e451-1f26-4abb-a113-8a2f274ace59"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"SelfLoops", "\[Rule]", "True"}]],ExpressionUUID->
  "b7e5de07-92c5-4a62-b008-34bcbd8f4c1d"],
 " checks if the degree sequence has realizations that potentially contain \
self-loops."
}], "Item",ExpressionUUID->"82ce3356-daf5-4c5d-b30e-8ded77fe7e14"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"MultiEdges", "\[Rule]", "True"}]],ExpressionUUID->
  "1fd95a9b-f0a6-4093-864a-473a49001efb"],
 " checks if the degree sequence has realizations that potentially contain \
more than one connection between pairs of vertices."
}], "Item",ExpressionUUID->"643eec74-1d0d-40a2-9a8f-1e9ef9e78811"],

Cell["Check if a degree sequence is graphical \[Ellipsis]", \
"Text",ExpressionUUID->"afc34eaa-d7fc-4f44-84f0-00aebafc3bc8"],

Cell[BoxData[
 RowBox[{"IGGraphicalQ", "[", 
  RowBox[{"{", 
   RowBox[{"4", ",", "3", ",", "3", ",", "2", ",", "1", ",", "1"}], "}"}], 
  "]"}]], "Input",ExpressionUUID->"4696d3b8-ab7d-49e1-ab4c-dc26369f8298"],

Cell["\[Ellipsis] then construct a realization as a simple graph:", \
"Text",ExpressionUUID->"d675580c-2b5d-48b4-81a7-36da628a39ae"],

Cell[BoxData[
 RowBox[{"IGRealizeDegreeSequence", "[", 
  RowBox[{"{", 
   RowBox[{"4", ",", "3", ",", "3", ",", "2", ",", "1", ",", "1"}], "}"}], 
  "]"}]], "Input",ExpressionUUID->"ec0844fa-4649-4aad-90ec-c0788f7370cc"],

Cell["\<\
Check the same for a pair of in- and out-degree sequences, the construct a \
realization as a simple directed graph:\
\>", "Text",ExpressionUUID->"a6b5a352-ffca-439f-b5fc-4123bc9e41d1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"IGGraphicalQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "2", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "1"}], "}"}]}], "]"}], ",", 
   RowBox[{"IGGraphicalQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "2", ",", "0"}], "}"}]}], "]"}]}], 
  "}"}]], "Input",ExpressionUUID->"c39a6ae3-9c06-4fb0-80b5-82a615403741"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"IGRealizeDegreeSequence", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "2", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "1"}], "}"}]}], "]"}], ",", 
   RowBox[{"IGRealizeDegreeSequence", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "2", ",", "0"}], "}"}]}], "]"}]}], 
  "}"}]], "Input",ExpressionUUID->"01d4d100-a455-40bd-9eb9-2eccb1f954ae"],

Cell[TextData[{
 "The degree sequence ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"1", ",", "2", ",", "3"}], ")"}], TraditionalForm]],
  ExpressionUUID->"20f15436-62d3-4713-ad77-15c9a9370afa"],
 " has no realization as a simple graph, but it can be realized either as a \
simple loopy graph, ",
 Cell[BoxData[
  GraphicsBox[
   NamespaceBox[{
     {GrayLevel[0], Opacity[0.7], 
      BezierCurveBox[{
       DynamicLocation[
        "VertexID$1", Automatic, 
         Center], {-0.08847925546776053, -0.19078353238530196`}, \
{-0.2873577330053514, -0.24717977484589607`}, {-0.41452835747980865`, \
-0.18822269607102282`}, {-0.41452835747980865`, 
        0.18822269607102343`}, {-0.2873577330053514, 
        0.24717977484589673`}, {-0.08847925546776059, 0.19078353238530268`}, 
        DynamicLocation["VertexID$1", Automatic, Center]},
       SplineDegree->7], 
      LineBox[{DynamicLocation["VertexID$1", Automatic, Center], 
        DynamicLocation["VertexID$2", Automatic, Center]}], 
      LineBox[{DynamicLocation["VertexID$2", Automatic, Center], 
        DynamicLocation["VertexID$3", Automatic, Center]}]}, 
     {GrayLevel[0], 
      TagBox[DiskBox[{0., 3.6739403974420594*^-16}, 0.1111111111111111],
       "DynamicName",
       BoxID -> "VertexID$1"], 
      TagBox[DiskBox[{1., 2.4492935982947064*^-16}, 0.1111111111111111],
       "DynamicName",
       BoxID -> "VertexID$2"], 
      TagBox[DiskBox[{2., 0.}, 0.1111111111111111],
       "DynamicName",
       BoxID -> "VertexID$3"]}}],
   FormatType->TraditionalForm,
   FrameTicks->None,
   ImageSize->{Automatic, 15}]], "Output",ExpressionUUID->
  "a0d1a279-5eaa-417e-a5ff-bf9cd927c070"],
 ", or as a loop-free multigraph, ",
 Cell[BoxData[
  GraphicsBox[
   NamespaceBox[{
     {GrayLevel[0], Opacity[0.7], 
      LineBox[{DynamicLocation["VertexID$1", Automatic, Center], 
        DynamicLocation["VertexID$2", Automatic, Center]}], 
      BezierCurveBox[{
       DynamicLocation["VertexID$2", Automatic, Center], {1.499999999999998, 
        0.16444074718311621`}, DynamicLocation[
        "VertexID$3", Automatic, Center]}], 
      BezierCurveBox[{
       DynamicLocation["VertexID$2", Automatic, Center], {
        1.4999999999999984`, -0.1644407471831161}, DynamicLocation[
        "VertexID$3", Automatic, Center]}]}, 
     {GrayLevel[0], 
      TagBox[DiskBox[{0., 3.6739403974420594*^-16}, 0.1],
       "DynamicName",
       BoxID -> "VertexID$1"], 
      TagBox[DiskBox[{1., 2.4492935982947064*^-16}, 0.1],
       "DynamicName",
       BoxID -> "VertexID$2"], 
      TagBox[DiskBox[{2., 0.}, 0.1],
       "DynamicName",
       BoxID -> "VertexID$3"]}}],
   FormatType->TraditionalForm,
   FrameTicks->None,
   ImageSize->{Automatic, 12}]], "Output",ExpressionUUID->
  "c12881de-ee3e-49fe-993d-fc4a38eb8c1c"],
 "."
}], "Text",ExpressionUUID->"cf914498-9843-4755-932d-00c47bc804d8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"IGGraphicalQ", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"IGGraphicalQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"SelfLoops", "\[Rule]", "True"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"IGGraphicalQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"MultiEdges", "\[Rule]", "True"}]}], "]"}]}], 
  "}"}]], "Input",ExpressionUUID->"b1070873-012a-473f-8905-e0e9cbc20c57"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"4", ",", "1", ",", "1"}], ")"}], TraditionalForm]],
  ExpressionUUID->"1352a0e8-24f3-41e3-b5e5-96d2ab8331d6"],
 " is realizable as a loopy simple graph, but not as a loop-free multigraph."
}], "Text",ExpressionUUID->"55f3de06-21a8-4889-a92f-6204e99edb01"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"IGGraphicalQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "1", ",", "1"}], "}"}], ",", 
     RowBox[{"SelfLoops", "\[Rule]", "True"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"IGGraphicalQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "1", ",", "1"}], "}"}], ",", 
     RowBox[{"MultiEdges", "\[Rule]", "True"}]}], "]"}]}], 
  "}"}]], "Input",ExpressionUUID->"0a4a3b17-3f9c-4b1d-a190-124cef4ecb04"],

Cell[TextData[{
 "Any graph with the degree sequence ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"6", ",", "2", ",", "2"}], ")"}], TraditionalForm]],
  ExpressionUUID->"8132e232-a9e2-46c4-b6b8-1457bf49727f"],
 " must have both self-loops and multi-edges."
}], "Text",ExpressionUUID->"6793cc0f-fd1f-481a-b59d-5a466e25029b"],

Cell[BoxData[
 RowBox[{"TableForm", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Outer", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"IGGraphicalQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"6", ",", "2", ",", "2"}], "}"}], ",", 
        RowBox[{"SelfLoops", "\[Rule]", "#1"}], ",", 
        RowBox[{"MultiEdges", "\[Rule]", "#2"}]}], "]"}], "&"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"False", ",", "True"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"False", ",", "True"}], "}"}]}], "\[IndentingNewLine]", "]"}], 
   ",", 
   RowBox[{"TableHeadings", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<self-loops\>\"", ",", "\"\<multi-edges\>\""}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\"\<self-loops\>\"", ",", "\"\<multi-edges\>\""}], "}"}]}], 
     "}"}]}]}], 
  "]"}]], "Input",ExpressionUUID->"d118c289-ae0f-49f2-892f-9a0e74287a44"],

Cell["\<\
The following pair of in- and out-degree sequences can be realized as a \
directed graph with at most one self-loop per vertex, but not as a loop-free \
multigraph:\
\>", "Text",ExpressionUUID->"f7830469-3918-4600-a19d-e51549f17441"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"IGGraphicalQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "2"}], "}"}], ",", 
     RowBox[{"SelfLoops", "\[Rule]", "True"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"IGGraphicalQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "2"}], "}"}], ",", 
     RowBox[{"MultiEdges", "\[Rule]", "True"}]}], "]"}]}], 
  "}"}]], "Input",ExpressionUUID->"7cc76dd1-05d4-4164-a159-6d422d902100"],

Cell["\<\
Create a random graphical scale-free degree sequence and construct a \
corresponding graph:\
\>", "Text",ExpressionUUID->"5c060f8c-0544-4b78-a35e-0de63f8a3752"],

Cell[BoxData[
 RowBox[{"ds", "=", 
  RowBox[{
   RowBox[{"IGTryUntil", "[", "IGGraphicalQ", "]"}], "@", 
   RowBox[{"RandomVariate", "[", 
    RowBox[{
     RowBox[{"ZipfDistribution", "[", "1.1", "]"}], ",", "100"}], 
    "]"}]}]}]], \
"Input",ExpressionUUID->"f933f34d-aa51-4935-b6f6-4a6de53c8767"],

Cell[BoxData[
 RowBox[{"IGRealizeDegreeSequence", "[", "ds", 
  "]"}]], "Input",ExpressionUUID->"c7fb54cb-f96e-4593-b837-5f79221cc908"],

Cell[CellGroupData[{

Cell["References", \
"Subsubsubsection",ExpressionUUID->"f7c41269-f5d4-4bd1-8e97-8efdd5661f30"],

Cell[TextData[{
 "P. Erd\[ODoubleAcute]s and T. Gallai, Gr\[AAcute]fok El\[ODoubleAcute]\
\[IAcute]rt Fok\[UAcute] Pontokkal, Matematikai Lapok 11, 264 (1960). ",
 ButtonBox["https://users.renyi.hu/~p_erdos/1961-05.pdf",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://users.renyi.hu/~p_erdos/1961-05.pdf"], None},
  ButtonNote->"https://users.renyi.hu/~p_erdos/1961-05.pdf"]
}], "Item",ExpressionUUID->"6d582f7e-9511-40d5-bee2-8ca3fd67955d"],

Cell[TextData[{
 "G. Cairns and S. Mendan, Degree Sequences for Graphs with Loops, 1 (2013). ",
 ButtonBox["https://arxiv.org/abs/1303.2145v1",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://arxiv.org/abs/1303.2145v1"], None},
  ButtonNote->"https://arxiv.org/abs/1303.2145v1"]
}], "Item",ExpressionUUID->"408abfc5-5fb9-4d9e-9f24-8c0f0455e5e5"],

Cell[TextData[{
 "Z. Kir\[AAcute]ly, Recognizing Graphic Degree Sequences and Generating All \
Realizations, No. TR\[Dash]2011\[Dash]11, Egerv\[AAcute]ry Research Group, E\
\[ODoubleDot]tv\[ODoubleDot]s Lor\[AAcute]nd University, 2012. ",
 ButtonBox["http://bolyai.cs.elte.hu/egres/tr/egres-11-11.pdf",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://bolyai.cs.elte.hu/egres/tr/egres-11-11.pdf"], None},
  ButtonNote->"http://bolyai.cs.elte.hu/egres/tr/egres-11-11.pdf"]
}], "Item",ExpressionUUID->"60fb3497-508c-42ac-8c14-5a8a6b956372"],

Cell[TextData[{
 "B. Cloteaux, Is This for Real? Fast Graphicality Testing, Computing in \
Science & Engineering 17, 6 (2015). ",
 ButtonBox["https://dx.doi.org/10.1109/MCSE.2015.125",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://dx.doi.org/10.1109/MCSE.2015.125"], None},
  ButtonNote->"https://dx.doi.org/10.1109/MCSE.2015.125"]
}], "Item",ExpressionUUID->"76f1d94b-db43-4666-935c-7dcca9e08520"],

Cell[TextData[{
 "D. R. Fulkerson, Zero-One Matrices with Zero Trace, Pacific Journal of \
Mathematics 10, 3 (1960). ",
 ButtonBox["https://doi.org/10.2140/pjm.1960.10.831",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://doi.org/10.2140/pjm.1960.10.831"], None},
  ButtonNote->"https://doi.org/10.2140/pjm.1960.10.831"]
}], "Item",ExpressionUUID->"c0380783-1611-4c30-a8bf-6ed469faa3a3"],

Cell[TextData[{
 "W. K. Chen, On the Realization of a ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"p", ",", "s"}], ")"}], TraditionalForm]],ExpressionUUID->
  "71301830-4088-46f2-9a58-865beffae2f8"],
 "-digraph with Prescribed Degrees, Journal of the Franklin Institute 281, 5 \
(1966). ",
 ButtonBox["https://doi.org/10.1016/0016-0032(66)90301-2",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://doi.org/10.1016/0016-0032(66)90301-2"], None},
  ButtonNote->"https://doi.org/10.1016/0016-0032(66)90301-2"]
}], "Item",ExpressionUUID->"63e189e6-f857-4dac-84c9-65ad00b3b1e0"],

Cell[TextData[{
 "R. P. Anstee, Properties of a Class of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"0", ",", "1"}], ")"}], TraditionalForm]],ExpressionUUID->
  "680274b5-c318-447c-8f72-754ea39a1124"],
 "-matrices Covering a Given Matrix, Canadian Journal of Mathematics 34, 2 \
(1982). ",
 ButtonBox["https://doi.org/10.4153/cjm-1982-029-3",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://doi.org/10.4153/cjm-1982-029-3"], None},
  ButtonNote->"https://doi.org/10.4153/cjm-1982-029-3"]
}], "Item",ExpressionUUID->"6dff37cd-7910-42b2-b524-cc8468de1476"],

Cell[TextData[{
 "A. Berger, A Note on the Characterization of Digraphic Sequences, Discrete \
Mathematics 314, 1 (2014). ",
 ButtonBox["https://dx.doi.org/10.1016/j.disc.2013.09.010",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://dx.doi.org/10.1016/j.disc.2013.09.010"], None},
  ButtonNote->"https://dx.doi.org/10.1016/j.disc.2013.09.010"]
}], "Item",ExpressionUUID->"eacf7b01-98e6-490a-9295-28e0ec664715"],

Cell[TextData[{
 "Sz. Horv\[AAcute]t and C. D. Modes, Connectivity matters: Construction and \
exact random sampling of connected graphs (2020). ",
 ButtonBox["https://arxiv.org/abs/2009.03747",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://arxiv.org/abs/2009.03747"], None},
  ButtonNote->"https://arxiv.org/abs/2009.03747"]
}], "Item",ExpressionUUID->"1fbc8707-8666-4d79-8e02-11d7af62eacd"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["IGBigraphicalQ", \
"Subsubsection",ExpressionUUID->"fcf7fabc-dbe0-4730-989d-f37b234652cb"],

Cell[BoxData[
 RowBox[{"?", 
  "IGBigraphicalQ"}]], \
"Input",ExpressionUUID->"fc255984-a5c9-4f3d-82c1-244d89f5b1c7"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGBigraphicalQ", "[", 
   RowBox[{"degrees1", ",", " ", "degrees2"}], "]"}]],ExpressionUUID->
  "c0c79c8d-7ef8-4256-96bf-bb76d85d1d0f"],
 " checks if there is a bipartite graph which has ",
 Cell[BoxData[
 "degrees1"],ExpressionUUID->"989bd4d6-3a82-4149-9b12-6d574112d0da"],
 " and ",
 Cell[BoxData[
 "degrees2"],ExpressionUUID->"93510b77-7daa-4a06-9ff7-a98642b0f8f9"],
 " as the vertex degrees in the two partitions. Such a pair of degree \
sequences is called bigraphical."
}], "Text",ExpressionUUID->"b38b6d99-2726-4772-a9b1-7bdeb13d9f08"],

Cell[TextData[{
 "If multi-edges are allowed in the graph, it is sufficient to check that the \
two degree sequences sum to the same value. If only simple graphs are \
allowed, ",
 Cell[BoxData[
 "IGBigraphicalQ"],ExpressionUUID->"7e98222a-4515-4ba1-a1b0-13cce8a42676"],
 " uses the Gale\[Dash]Ryser theorem with Berger\[CloseCurlyQuote]s \
refinement."
}], "Text",ExpressionUUID->"8b478f95-8161-4732-a970-c06311e59476"],

Cell["The available options are:", \
"Text",ExpressionUUID->"098d4203-3ce8-47a4-b15b-45ebf682548f"],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"MultiEdges", "\[Rule]", "True"}]],ExpressionUUID->
  "3b8195fb-6f25-44d7-b88a-92a2a6d661d7"],
 " allows for multi-edges in the graph."
}], "Item",ExpressionUUID->"13d9c493-2a17-4b72-a588-6918416f86b6"],

Cell[BoxData[
 RowBox[{"IGBigraphicalQ", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"4", ",", "3", ",", "1", ",", "2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "4", ",", "4"}], "}"}]}], 
  "]"}]], "Input",ExpressionUUID->"ddf4de54-2a2e-4683-854c-6813bb76ada5"]
}, Open  ]],

Cell["\<\
The following pair of degree sequences is bigraphical only if multi-edges are \
permitted:\
\>", "Text",ExpressionUUID->"dac1f372-9da2-4e94-bcdb-86b364e1ab8c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"IGBigraphicalQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "2"}], "}"}], ",", 
     RowBox[{"{", "4", "}"}], ",", 
     RowBox[{"MultiEdges", "\[Rule]", "False"}]}], "]"}], ",", 
   RowBox[{"IGBigraphicalQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "2"}], "}"}], ",", 
     RowBox[{"{", "4", "}"}], ",", 
     RowBox[{"MultiEdges", "\[Rule]", "True"}]}], "]"}]}], 
  "}"}]], "Input",ExpressionUUID->"599e6040-6ea3-4161-81c0-18c45cefc649"],

Cell[CellGroupData[{

Cell["References", \
"Subsubsubsection",ExpressionUUID->"8fac0194-e563-435c-ab86-5dd3bd3ffc68"],

Cell[TextData[{
 "H. J. Ryser, Combinatorial Properties of Matrices of Zeros and Ones, Can. \
J. Math. 9, 371 (1957). ",
 ButtonBox["https://dx.doi.org/10.4153/cjm-1957-044-3",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://dx.doi.org/10.4153/cjm-1957-044-3"], None},
  ButtonNote->"https://dx.doi.org/10.4153/cjm-1957-044-3"]
}], "Item",ExpressionUUID->"8af96788-95b2-4571-9af8-6d66b59b9e90"],

Cell[TextData[{
 "D. Gale, A theorem on flows in networks, Pacific J. Math. 7, 1073 (1957). \
",
 ButtonBox["https://dx.doi.org/10.2140/pjm.1957.7.1073",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://dx.doi.org/10.2140/pjm.1957.7.1073"], None},
  ButtonNote->"https://dx.doi.org/10.2140/pjm.1957.7.1073"]
}], "Item",ExpressionUUID->"004722ae-8c48-4cbf-b24d-9141680ff4ed"],

Cell[TextData[{
 "A. Berger, A Note on the Characterization of Digraphic Sequences, Discrete \
Mathematics 314, 1 (2014). ",
 ButtonBox["https://dx.doi.org/10.1016/j.disc.2013.09.010",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://dx.doi.org/10.1016/j.disc.2013.09.010"], None},
  ButtonNote->"https://dx.doi.org/10.1016/j.disc.2013.09.010"]
}], "Item",ExpressionUUID->"982300ff-7f06-404a-bf42-ee22073eca69"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Potential connectedness", \
"Subsection",ExpressionUUID->"b9d229e7-5890-460e-b128-21735f8cdbb4"],

Cell[CellGroupData[{

Cell["IGPotentiallyConnectedQ", \
"Subsubsection",ExpressionUUID->"58801c5a-a7e0-43f9-90b4-9b92d8705f01"],

Cell[BoxData[
 RowBox[{"?", 
  "IGPotentiallyConnectedQ"}]], \
"Input",ExpressionUUID->"87bb1c9c-5e6e-4ce5-a4a7-85ff62804e1a"],

Cell[TextData[{
 Cell[BoxData[
 "IGPotentiallyConnectedQ"],ExpressionUUID->
  "790adcd7-f76b-4e54-ac7f-c66cd9fe511a"],
 " checks if a degree sequence (respectively, a pair of in- and out-degree \
sequences) has a realization as a connected graph (respectively strongly \
connected directed graph). The condition for the undirected case is that the \
degree sequence ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     SubscriptBox["d", "1"], ",", "\[Ellipsis]", ",", 
     SubscriptBox["d", "n"]}], ")"}], TraditionalForm]],ExpressionUUID->
  "9b055138-4f9b-4efb-9729-6ad0deed08ab"],
 " satisfy ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     FractionBox["1", "2"], 
     RowBox[{
      SubscriptBox["\[Sum]", "i"], 
      SubscriptBox["d", "i"]}]}], "\[GreaterEqual]", 
    RowBox[{"n", "-", "1"}]}], TraditionalForm]],ExpressionUUID->
  "27c449ff-f9aa-4fb6-8a41-676ddc050bb2"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["d", "i"], ">", "0"}], TraditionalForm]],ExpressionUUID->
  "d4162173-e590-42f7-a62e-325c0e511a2d"],
 " for all ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "a57437b8-5f21-4da1-ab6c-15daec8bf312"],
 ". The condition for the directed case is that all in- and out-degrees be at \
least 1. An exception to these conditions is the case of a single zero-degree \
vertex, which corresponds to the singleton-graph, and is therefore \
potentially connected. Additionally, ",
 Cell[BoxData[
 "IGPotentiallyConnectedQ"],ExpressionUUID->
  "74983815-6016-4e20-84cc-3d59c53b5bdc"],
 " requires that the sum of degrees be odd (undirected case), or that the in- \
and out-degrees sum to the same value, which is necessary for a (possibly \
non-simple) graph to exist."
}], "Text",ExpressionUUID->"20d38035-de98-48b5-943c-a52303bdd1fe"],

Cell["\<\
Check the potential connectivity of a degree sequence, then construct a \
corresponding connected graph:\
\>", "Text",ExpressionUUID->"aab1a8db-fceb-456f-a8b4-f057e084d80a"],

Cell[BoxData[
 RowBox[{"IGPotentiallyConnectedQ", "[", 
  RowBox[{"{", 
   RowBox[{"3", ",", "2", ",", "2", ",", "1", ",", "1", ",", "1"}], "}"}], 
  "]"}]], "Input",ExpressionUUID->"1d234bc8-0cb7-4748-a2ae-b42d25805ec4"],

Cell[BoxData[
 RowBox[{"IGRealizeDegreeSequence", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"3", ",", "2", ",", "2", ",", "1", ",", "1", ",", "1"}], "}"}], 
   ",", 
   RowBox[{"Method", "\[Rule]", "\"\<SmallestFirst\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"f15478f4-0e77-41fa-ad7a-7a852a288d33"],

Cell["\<\
The empty degree sequence is considered non-potentially-connected:\
\>", "Text",ExpressionUUID->"ab226189-ada0-4db3-9bdc-b764b5903de3"],

Cell[BoxData[
 RowBox[{"IGPotentiallyConnectedQ", "[", 
  RowBox[{"{", "}"}], 
  "]"}]], "Input",ExpressionUUID->"fba92448-548c-4a4c-9ac7-d3fbf03dac5a"],

Cell[TextData[{
 "The length-1 degree sequence ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", "0", ")"}], TraditionalForm]],ExpressionUUID->
  "f869fa1a-a0a9-4bbc-b4a3-ddf0bf2012a7"],
 " is considered connected:"
}], "Text",ExpressionUUID->"21083f16-0525-41db-a9a6-39bce56f440d"],

Cell[BoxData[
 RowBox[{"IGPotentiallyConnectedQ", "[", 
  RowBox[{"{", "0", "}"}], 
  "]"}]], "Input",ExpressionUUID->"cf8fc164-faef-411b-a118-f16c013a4aec"],

Cell[TextData[{
 Cell[BoxData[
 "IGPotentiallyConnectedQ"],ExpressionUUID->
  "a0354ecb-a241-4122-9509-ff4b1f8c89e5"],
 " returns ",
 Cell[BoxData["False"],ExpressionUUID->"f3f24c06-59df-4d00-a1de-18f30d9459d9"],
 " for odd-sum sequences, as no graph can have them as its degrees:"
}], "Text",ExpressionUUID->"38a7a549-1e57-4621-9eb9-54fd403737c4"],

Cell[BoxData[
 RowBox[{"IGPotentiallyConnectedQ", "[", 
  RowBox[{"{", 
   RowBox[{"3", ",", "3", ",", "3"}], "}"}], 
  "]"}]], "Input",ExpressionUUID->"b7e39dd5-5772-45d7-bc69-1bee935b63dd"],

Cell["\<\
Check the potential connectedness of a pair of in- and out-degree sequences:\
\>", "Text",ExpressionUUID->"615a073f-eec5-4eeb-a3cc-fb7a6a291ae2"],

Cell[BoxData[
 RowBox[{"IGPotentiallyConnectedQ", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "2"}], "}"}]}], 
  "]"}]], "Input",ExpressionUUID->"eb48e45b-4aec-4aa6-8e18-7fea29f14802"],

Cell["\<\
Generate a random potentially connected degree sequence and construct a \
corresponding connected non-simple graph:\
\>", "Text",ExpressionUUID->"2d097de1-d555-48e2-8cff-cf159e1b94ea"],

Cell[BoxData[
 RowBox[{"IGRealizeDegreeSequence", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"IGTryUntil", "[", "IGPotentiallyConnectedQ", "]"}], "@", 
    RowBox[{"RandomVariate", "[", 
     RowBox[{
      RowBox[{"ZipfDistribution", "[", "1", "]"}], ",", "100"}], "]"}]}], ",",
    "\[IndentingNewLine]", 
   RowBox[{"MultiEdges", "\[Rule]", "True"}], ",", 
   RowBox[{"SelfLoops", "\[Rule]", "True"}], ",", 
   RowBox[{"Method", "\[Rule]", "\"\<SmallestFirst\>\""}]}], 
  "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"01d8af99-6159-49a4-bff7-6f5ed64ed3bf"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Constructing graphs", \
"Subsection",ExpressionUUID->"e981086e-765b-43d0-8414-92331c36da1c"],

Cell["\<\
See the Graph creation section for a detailed description of these functions.\
\
\>", "Text",ExpressionUUID->"aa128256-4f98-44e8-b925-f24cab117639"],

Cell[BoxData[
 RowBox[{"?", 
  "IGRealizeDegreeSequence"}]], \
"Input",ExpressionUUID->"d1c346eb-8ba2-46e6-8da8-8cf625fb5c8c"],

Cell[BoxData[
 RowBox[{"?", 
  "IGDegreeSequenceGame"}]], \
"Input",ExpressionUUID->"b4445072-5c21-4868-b6b4-50db9ae4f481"]
}, Closed]],

Cell[CellGroupData[{

Cell["Threshold graphs", \
"Subsection",ExpressionUUID->"6aebea1e-d9bc-40c0-aab4-f4967aee4822"],

Cell[CellGroupData[{

Cell["IGSplitQ", \
"Subsubsection",ExpressionUUID->"265775d0-a35a-4e33-aba2-0f4606f8af4b"],

Cell[BoxData[
 RowBox[{"?", 
  "IGSplitQ"}]], \
"Input",ExpressionUUID->"b0ed8f07-64c9-4c7a-a707-4a8fc080fbdf"],

Cell[TextData[{
 Cell[BoxData[
 "IGSplitQ"],ExpressionUUID->"4a2ce688-5a62-4720-8214-2bf0ada7f309"],
 " recognizes split graphs, or their degree sequences. Splits graphs are the \
graphs which can be partitioned into a clique and an independent set. ",
 Cell[BoxData[
 "IGSplitQ"],ExpressionUUID->"a1718713-5b3f-4692-bb30-72814fed0968"],
 " ignores self-loops and multi-edges."
}], "Text",ExpressionUUID->"768aa455-f160-4d72-af9f-3a9ee65ee9e1"],

Cell[TextData[{
 "Split graph can be recognized solely based on their degree sequence. Let ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["d", "1"], "\[GreaterEqual]", 
    SubscriptBox["d", "2"], "\[GreaterEqual]", "\[CenterEllipsis]", 
    "\[GreaterEqual]", 
    SubscriptBox["d", "n"]}], TraditionalForm]],ExpressionUUID->
  "5dea9ffa-fcff-4e1f-a25e-fbae6b031b33"],
 " be the non-increasingly ordered degree sequence, and ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "4fc7478d-5021-41d9-af83-d6dce0f67b79"],
 " the largest index ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "1fbc7ab6-ad93-41e5-8082-426db4855e78"],
 " such that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["d", "i"], "\[GreaterEqual]", 
    RowBox[{"i", "-", "1"}]}], TraditionalForm]],ExpressionUUID->
  "a8a349ae-3b84-48a5-84ff-ca948f37b24b"],
 ". Then the graph is split if and only if"
}], "Text",ExpressionUUID->"399b3fdb-b5eb-489b-888d-0fcd7c79a83b"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    SubsuperscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "m"], 
    SubscriptBox["d", "i"]}], "=", 
   RowBox[{
    RowBox[{"m", "(", 
     RowBox[{"m", "-", "1"}], ")"}], "+", 
    RowBox[{
     SubsuperscriptBox["\[Sum]", 
      RowBox[{"i", "=", 
       RowBox[{"m", "+", "1"}]}], "n"], 
     RowBox[{
      SubscriptBox["d", "i"], "."}]}]}]}], 
  TraditionalForm]], \
"DisplayFormula",ExpressionUUID->"36dd0733-51b7-40d2-a58d-2e5b7154a2e4"],

Cell[TextData[{
 "When applied to a list of integers, ",
 Cell[BoxData[
 "IGSplitQ"],ExpressionUUID->"89b0f04c-5a76-498b-8a95-77acf4966e95"],
 " only checks this condition, but does not verify graphicality."
}], "Text",ExpressionUUID->"0eb0f421-dc70-4013-b862-8330e1816dbe"],

Cell["Test if a graph is split:", \
"Text",ExpressionUUID->"6900ea4e-cebb-4999-b03e-7e642ffb4993"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4, 5}, {
        Null, {{1, 2}, {2, 3}, {1, 3}, {1, 4}, {1, 5}}}, {
        FormatType -> TraditionalForm, GraphLayout -> {"Dimension" -> 2}, 
         GraphStyle -> Automatic, ImageSize -> {100.70703125, Automatic}, 
         VertexSize -> {Medium}}]]}, 
      TagBox[
       GraphicsGroupBox[
        GraphicsComplexBox[{{0.9435419027963764, 0.8033255380298455}, {
         0.00014409217850608336`, 1.1773781852780851`}, {0., 
         0.42939059712311506`}, {1.681717458328394, 0.}, {1.682371564880713, 
         1.6060687923997738`}}, {
          {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
           LineBox[{{1, 2}, {1, 3}, {1, 4}, {1, 5}, {2, 3}}]}, 
          {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
           DiskBox[1, 0.0747987602033914], DiskBox[2, 0.0747987602033914], 
           DiskBox[3, 0.0747987602033914], DiskBox[4, 0.0747987602033914], 
           DiskBox[5, 0.0747987602033914]}}]],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{100.70703125, Automatic}]}], 
  ";"}]], "Input",ExpressionUUID->"5ef4d590-b026-4dda-acfd-7c6300f32bf3"],

Cell[BoxData[
 RowBox[{"IGSplitQ", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"40f8e8d7-db27-468f-b832-6b3ad4f0b472"],

Cell["Highlight its clique and independent vertex set parts:", \
"Text",ExpressionUUID->"08eab383-b8fe-4c5b-a789-4ff76081e4a7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"cl", "=", 
   RowBox[{"First", "@", 
    RowBox[{"IGLargestCliques", "[", "g", "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"HighlightGraph", "[", 
  RowBox[{"g", ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Subgraph", "[", 
      RowBox[{"g", ",", "#"}], "]"}], "&"}], "/@", 
    RowBox[{"{", 
     RowBox[{"cl", ",", 
      RowBox[{"Complement", "[", 
       RowBox[{
        RowBox[{"VertexList", "[", "g", "]"}], ",", "cl"}], "]"}]}], 
     "}"}]}]}], 
  "]"}]}], "Input",ExpressionUUID->"11281018-8d09-4ef8-bf40-bdc32f0e320f"],

Cell[TextData[{
 Cell[BoxData[
 "IGSplitQ"],ExpressionUUID->"9d612084-e34d-4f73-9e0e-1883e76a801d"],
 " can be used directly on degree sequences:"
}], "Text",ExpressionUUID->"f38d571a-8717-44ea-b27c-fa34f701e4aa"],

Cell[BoxData[
 RowBox[{"IGSplitQ", "@", 
  RowBox[{
  "VertexDegree", "[", "g", 
   "]"}]}]], "Input",ExpressionUUID->"68c0bc91-9ede-4734-82b3-b30473fdb4ea"],

Cell["The following graph is not split:", \
"Text",ExpressionUUID->"8745fe3b-de9e-417e-94a4-046759f853b1"],

Cell[BoxData[
 RowBox[{"IGSplitQ", "[", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3, 4, 5}, {
       Null, {{1, 2}, {2, 3}, {1, 3}, {1, 4}, {4, 5}}}, {
       VertexLabels -> {None}, VertexSize -> {Medium}}]]}, 
     TagBox[
      GraphicsGroupBox[
       GraphicsComplexBox[{{0.9030685547773016, 0.37917912386395}, {0., 
        0.7580852019569043}, {0.00014930070374585824`, 0.}, {
        2.108167502704216, 0.37913918243962985`}, {3.1352510935796714`, 
        0.37905112883208275`}}, {
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
          LineBox[{{1, 2}, {1, 3}, {1, 4}, {2, 3}, {4, 5}}]}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          DiskBox[1, 0.07580852166588797], DiskBox[2, 0.07580852166588797], 
          DiskBox[3, 0.07580852166588797], DiskBox[4, 0.07580852166588797], 
          DiskBox[5, 0.07580852166588797]}}]],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None,
   ImageSize->{195.27734375, Automatic}], 
  "]"}]], "Input",ExpressionUUID->"042a88c7-7e81-4701-9e4d-450387abf919"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGThresholdQ", \
"Subsubsection",ExpressionUUID->"1dc1c6fb-22c6-46a9-adb8-f1f51bbe373b"],

Cell[BoxData[
 RowBox[{"?", 
  "IGThresholdQ"}]], \
"Input",ExpressionUUID->"54cdcaa7-a0fa-4f78-8706-6edcf64c5a52"],

Cell[TextData[{
 Cell[BoxData[
 "IGThresholdQ"],ExpressionUUID->"e683bf01-2783-40b8-b013-475fc60ce8f7"],
 " recognizes threshold graphs, or their degree sequences. ",
 Cell[BoxData[
 "IGThresholdQ"],ExpressionUUID->"856bc9a5-dc9d-4fc9-beac-40f855f504ec"],
 " ignores self-loops and multi-edges."
}], "Text",ExpressionUUID->"da43c53e-9e17-4416-b33f-53ce39228dab"],

Cell["Check if the following is a threshold graph:", \
"Text",ExpressionUUID->"63b9815d-f285-4366-9c52-a152fd01763c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 8, 5, 2, 4, 3, 6, 7}, {
        Null, {{1, 2}, {1, 3}, {4, 2}, {4, 3}, {5, 3}, {5, 2}, {6, 2}, {6, 
         3}, {7, 2}, {8, 2}, {3, 2}}}, {
        VertexLabels -> {None}, VertexSize -> {Large}}]]}, 
      TagBox[
       GraphicsGroupBox[
        GraphicsComplexBox[{{0.8061424745025867, 0.}, {1.0514769104600705`, 
         0.8747389964643708}, {0.3663546450188804, 0.8747786656027067}, {
         0.0019344932811055093`, 0.26705896846401467`}, {0., 
         1.481345714449008}, {0.8040179268764915, 1.7493227622660767`}, {
         2.107809646568297, 0.24839240449453015`}, {2.1057311522744984`, 
         1.5038929474185263`}}, {
          {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
           LineBox[{{1, 2}, {1, 3}, {2, 3}, {2, 4}, {2, 5}, {2, 6}, {2, 7}, {
            2, 8}, {3, 4}, {3, 5}, {3, 6}}]}, 
          {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
           DiskBox[1, 0.1370244533179256], DiskBox[2, 0.1370244533179256], 
           DiskBox[3, 0.1370244533179256], DiskBox[4, 0.1370244533179256], 
           DiskBox[5, 0.1370244533179256], DiskBox[6, 0.1370244533179256], 
           DiskBox[7, 0.1370244533179256], DiskBox[8, 0.1370244533179256]}}]],
       
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{71.80078125, Automatic}]}], 
  ";"}]], "Input",ExpressionUUID->"091121c0-5373-4c39-b556-1112eaf2caee"],

Cell[BoxData[
 RowBox[{"IGThresholdQ", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"1ec9c2dd-0ba9-41b7-9a47-0c6f7d23c8b5"],

Cell["Threshold graphs are also split graphs:", \
"Text",ExpressionUUID->"00f73c9a-cbad-47d5-a7d3-8575fa54835f"],

Cell[BoxData[
 RowBox[{"IGSplitQ", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"658dc461-68fd-48d6-8684-707e154e263b"],

Cell[TextData[{
 Cell[BoxData[
 "IGThresholdQ"],ExpressionUUID->"8e243d3f-936b-4399-bc62-e13a0bc930af"],
 " can be used directly on degree sequences:"
}], "Text",ExpressionUUID->"e4f5fcdb-da15-4cc0-9e7f-3d0d939a7b55"],

Cell[BoxData[
 RowBox[{"IGThresholdQ", "@", 
  RowBox[{
  "VertexDegree", "[", "g", 
   "]"}]}]], "Input",ExpressionUUID->"fa5a75d3-3e8f-4402-ad79-8eca2e4a5813"],

Cell[TextData[{
 "A threshold graph can be built by repeatedly adding either an isolated \
vertex, or a dominating vertex, i.e. a vertex that connects to all previous \
ones. The following function takes a specification in which ",
 Cell[BoxData["."],ExpressionUUID->"ccad6e4e-4124-4981-ab0c-4c0a1eea8221"],
 " and ",
 Cell[BoxData["-"],ExpressionUUID->"a04efd63-d89c-4578-8460-0ead9192eae6"],
 " represent isolated and dominating vertices, respectively, and builds the \
corresponding graph."
}], "Text",ExpressionUUID->"8fc2029a-7a8f-41b8-a048-67558429e871"],

Cell[BoxData[
 RowBox[{
  RowBox[{"thresholdGraph", "[", "spec_String", "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"steps", "=", 
      RowBox[{"Characters", "[", "spec", "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Graph", "[", 
     RowBox[{
      RowBox[{"Range", "@", 
       RowBox[{"Length", "[", "steps", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"Join", "@@", 
       RowBox[{"Table", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"steps", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "===", "\"\<-\>\""}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"UndirectedEdge", "[", 
              RowBox[{"i", ",", "#"}], "]"}], "&"}], "/@", 
            RowBox[{"Range", "[", 
             RowBox[{"i", "-", "1"}], "]"}]}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"Length", "[", "steps", "]"}]}], "}"}]}], 
        "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
   "\[IndentingNewLine]", 
   "]"}]}]], "Input",ExpressionUUID->"44de4954-bd7b-496c-a443-d78cce4a10f9"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{
  "thresholdGraph", "[", "\"\<...--.-\>\"", 
   "]"}]}]], "Input",ExpressionUUID->"5905e55d-9ca3-4b5f-b107-9b914335529c"],

Cell[BoxData[
 RowBox[{"IGThresholdQ", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"0e8843fd-203b-4076-8107-b9f7f4f1c9ba"],

Cell["\<\
Degree sequences of threshold graphs have precisely one realization. \
Therefore, the same graph can be reconstructed from its degree sequence:\
\>", "Text",ExpressionUUID->"c113ea53-fd7a-4e99-85fb-e235ea22fc61"],

Cell[BoxData[
 RowBox[{"IGRealizeDegreeSequence", "@", 
  RowBox[{
  "VertexDegree", "[", "g", 
   "]"}]}]], "Input",ExpressionUUID->"cafb20c1-91a8-44b2-b77e-9f8a055734f3"]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Property handling and transformations", \
"Section",ExpressionUUID->"7b2d5a8c-fa78-4745-b1fe-164a7cbefab9"],

Cell[TextData[{
 "IGraph/M includes a set of functions that make it easy to extract vertex \
and edge properties (attributes), transform them with an arbitrary function, \
set their values based on the output of various functions such as ",
 Cell[BoxData[
 "IGBetweenness"],ExpressionUUID->"a2cd0184-6661-4c5c-898b-aa195b7bebde"],
 ", or to copy values from one graph property into another."
}], "Text",ExpressionUUID->"58f1b835-2572-4c7f-a719-0feaded2e25c"],

Cell[TextData[{
 "To simplify these tasks, IGraph/M\[CloseCurlyQuote]s property handling \
framework takes a somewhat more restrictive view of graph properties than ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s built-ins. Edge and vertex properties are strictly \
distinguished, and it is assumed that when a property exists for one vertex \
(or edge), it also exists for all others. When this is not the case, the \
value ",
 Cell[BoxData[
  RowBox[{"Missing", "[", "\"\<Nonexistent\>\"", "]"}]],ExpressionUUID->
  "8ee8f3bb-ca6f-47e1-9b04-159fdeca27ef"],
 " is used."
}], "Text",ExpressionUUID->"dd06c992-2345-45bc-a1ec-3205f355fcfa"],

Cell["\<\
Let us use the following example network to demonstrate the basic usage of \
these functions.\
\>", "Text",ExpressionUUID->"cc014c95-367f-4bd1-ba65-260593768398"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"Graph", "[", 
   RowBox[{
    RowBox[{"ExampleData", "[", 
     RowBox[{"{", 
      RowBox[{
      "\"\<NetworkGraph\>\"", ",", "\"\<EastAfricaEmbassyAttacks\>\""}], 
      "}"}], "]"}], ",", 
    RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"ebc7be50-ca83-454c-bb74-1b6cbfdd385b"],

Cell[BoxData[
 RowBox[{"?", 
  "IGVertexPropertyList"}]], \
"Input",ExpressionUUID->"68f3356d-d3d8-403e-ab07-e97e7f075916"],

Cell[BoxData[
 RowBox[{"?", 
  "IGEdgePropertyList"}]], \
"Input",ExpressionUUID->"425416bb-a888-40f2-8bda-d05fbc4bf1d3"],

Cell["Find what custom edge and vertex properties this graph has.", \
"Text",ExpressionUUID->"2d4777aa-2dd9-487f-a136-203d0e445762"],

Cell[BoxData[
 RowBox[{"IGVertexPropertyList", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"c8dcb349-a70a-452a-93b8-3abe2b3c2a8d"],

Cell[BoxData[
 RowBox[{"IGEdgePropertyList", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"a910c0fa-4e7f-473e-894f-dc3ea42852b3"],

Cell[BoxData[
 RowBox[{"?", 
  "IGVertexProp"}]], \
"Input",ExpressionUUID->"031f12c8-c92d-41ba-8a0e-31aab0855b4e"],

Cell[BoxData[
 RowBox[{"?", 
  "IGEdgeProp"}]], \
"Input",ExpressionUUID->"e619555b-6bb8-4fbe-af47-604e6faed800"],

Cell[BoxData[
 RowBox[{"?", 
  "IGEdgeVertexProp"}]], \
"Input",ExpressionUUID->"cb180cfe-f5c6-41b7-92ac-160f034ed26c"],

Cell[TextData[{
 "Extract the ",
 Cell[BoxData[
 "\"\<Group\>\""],ExpressionUUID->"e30f1901-bd8c-4b1f-a7e6-542a5fa5ce94"],
 " property of each node:"
}], "Text",ExpressionUUID->"7ee6847e-0ad9-48cb-80fb-c1b081aa3311"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGVertexProp", "[", "\"\<Group\>\"", "]"}], "[", "g", 
  "]"}]], "Input",ExpressionUUID->"bb65be85-cf32-4deb-aec6-baf8084526ed"],

Cell["Extract the weight of each edge:", \
"Text",ExpressionUUID->"8942e1c3-528b-452b-9644-1111cf0f663c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGEdgeProp", "[", "EdgeWeight", "]"}], "[", "g", 
  "]"}]], "Input",ExpressionUUID->"a6440c37-1c38-4dcb-87aa-239a1cc0d0f1"],

Cell[BoxData[
 RowBox[{"?", 
  "IGVertexMap"}]], \
"Input",ExpressionUUID->"570c1115-b5e7-4d83-b970-6c398b8f1257"],

Cell[BoxData[
 RowBox[{"?", 
  "IGEdgeMap"}]], \
"Input",ExpressionUUID->"e3494b1c-22eb-4c8e-bd3b-566370e4b00d"],

Cell[TextData[{
 "Show the value of the ",
 Cell[BoxData[
 "\"\<FullName\>\""],ExpressionUUID->"308468d9-843a-466d-8e3a-dc8bd121ba6d"],
 " custom property in tooltips."
}], "Text",ExpressionUUID->"f34bfaa0-823c-4f78-9537-280a9490b2e9"],

Cell[BoxData[
 RowBox[{"IGVertexMap", "[", 
  RowBox[{
   RowBox[{"#", "&"}], ",", 
   RowBox[{"Tooltip", "\[Rule]", 
    RowBox[{"IGVertexProp", "[", "\"\<FullName\>\"", "]"}]}], ",", "g"}], 
  "]"}]], "Input",ExpressionUUID->"fe3136a0-cc68-44b1-b084-193e83c1351a"],

Cell[CellGroupData[{

Cell["Styling graphs according to stored or computed properties", \
"Subsubsection",ExpressionUUID->"3ae6d3fc-e754-4ea5-a868-095fc7913d83"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"Graph", "[", 
    RowBox[{
     RowBox[{"ExampleData", "[", 
      RowBox[{"{", 
       RowBox[{
       "\"\<NetworkGraph\>\"", ",", "\"\<EastAfricaEmbassyAttacks\>\""}], 
       "}"}], "]"}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"5c06d8b1-c2ee-4e29-bf04-762527b4d1f2"],

Cell["Scale vertices according to degree:", \
"Text",ExpressionUUID->"a06df826-de80-4ba2-8529-8dbe4a918781"],

Cell[BoxData[
 RowBox[{"IGVertexMap", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"0.1", "#"}], "&"}], ",", 
   RowBox[{"VertexSize", "\[Rule]", "VertexDegree"}], ",", "g"}], 
  "]"}]], "Input",ExpressionUUID->"3b5ccc26-11e8-4088-a53a-eff635aae09f"],

Cell[TextData[{
 "Let us colour edges by betweenness and set their thickness based on weight. \
Betweenness calculations treat high weight values as a \
\[OpenCurlyDoubleQuote]long distance\[CloseCurlyDoubleQuote], thus we invert ",
 Cell[BoxData[
 "EdgeWeight"],ExpressionUUID->"6b36e031-679d-4909-9eb1-a4712b6258e0"],
 " before calculating the betweenness. To be able to use the original \
weights, we save them into a new ",
 Cell[BoxData[
 "\"\<weight\>\""],ExpressionUUID->"2d33f562-dacf-462c-b2ad-c4a0d72fccab"],
 " property."
}], "Text",ExpressionUUID->"76175f63-9b95-4f6b-ac83-df04abf7b033"],

Cell[TextData[{
 "Calls to ",
 Cell[BoxData[
 "IGEdgeMap"],ExpressionUUID->"1fa4c876-dc4c-4bde-ab1a-6ae373cdebf0"],
 " or ",
 Cell[BoxData[
 "IGVertexMap"],ExpressionUUID->"6d289fef-8e85-44f0-aa83-88d3942dc3e1"],
 " can be conveniently chained together using their operator form."
}], "Text",ExpressionUUID->"1976e416-c81e-4f06-a433-6eb4c4cb78a5"],

Cell[BoxData[
 RowBox[{"g", "//", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"IGEdgeMap", "[", " ", 
    RowBox[{"(*", " ", 
     RowBox[{
     "save", " ", "original", " ", "weight", " ", "in", " ", "\"\<weight\>\"",
       " ", "property"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{"Identity", ",", 
     RowBox[{"\"\<weight\>\"", "\[Rule]", 
      RowBox[{"IGEdgeProp", "[", "EdgeWeight", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}], "/*", "\[IndentingNewLine]", 
   RowBox[{"IGEdgeMap", "[", " ", 
    RowBox[{"(*", " ", 
     RowBox[{
     "invert", " ", "edge", " ", "weights", " ", "for", " ", "betweenness", 
      " ", "calculation"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"1", "/", "#"}], "&"}], ",", "EdgeWeight"}], 
    "\[IndentingNewLine]", "]"}], "/*", "\[IndentingNewLine]", 
   RowBox[{"IGEdgeMap", "[", " ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"thickness", " ", "by", " ", "original", " ", "weight"}], ",", 
      " ", 
      RowBox[{
      "colour", " ", "by", " ", "betweenness", " ", "based", " ", "on", " ", 
       "inverse", " ", "weight"}]}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"Directive", "[", 
       RowBox[{
        RowBox[{"AbsoluteThickness", "[", 
         RowBox[{"9", "#1"}], "]"}], ",", 
        RowBox[{
         RowBox[{"ColorData", "[", "\"\<Rainbow\>\"", "]"}], "[", "#2", 
         "]"}]}], "]"}], "&"}], ",", "\[IndentingNewLine]", 
     RowBox[{"EdgeStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"IGEdgeProp", "[", "\"\<weight\>\"", "]"}], ",", 
        RowBox[{"Rescale", "@*", "EdgeBetweennessCentrality"}]}], "}"}]}]}], 
    "\[IndentingNewLine]", 
    "]"}]}]}]], \
"Input",ExpressionUUID->"6eebd448-3a0d-47ce-a394-88d7820fb82a"],

Cell["Label a graph with a circular layout:", \
"Text",ExpressionUUID->"38db27d6-debd-41a1-8f86-3499c0aba8b1"],

Cell[BoxData[
 RowBox[{"IGVertexMap", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Function", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"name", ",", "coord"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Placed", "[", "\[IndentingNewLine]", 
      RowBox[{"name", ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{".5", ",", ".5"}], "}"}], ",", 
         RowBox[{
          RowBox[{
           RowBox[{"-", "0.8"}], 
           RowBox[{"Normalize", "[", "coord", "]"}]}], "+", 
          RowBox[{"{", 
           RowBox[{".5", ",", ".5"}], "}"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Rotate", "[", 
         RowBox[{"#", ",", 
          RowBox[{"Mod", "[", 
           RowBox[{
            RowBox[{"ArcTan", "@@", "coord"}], ",", "Pi", ",", 
            RowBox[{
             RowBox[{"-", "Pi"}], "/", "2"}]}], "]"}]}], "]"}], "&"}]}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"VertexLabels", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"VertexList", ",", 
      RowBox[{"IGVertexProp", "[", "VertexCoordinates", "]"}]}], "}"}]}], ",",
    "\[IndentingNewLine]", 
   RowBox[{"IGLayoutCircle", "[", 
    RowBox[{"ExampleData", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<NetworkGraph\>\"", ",", "\"\<FamilyGathering\>\""}], "}"}],
      "]"}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"768b0e92-3b53-42e5-bba5-60f4ac445fd0"],

Cell["\<\
Use edge weights as edge labels, and line up labels with edges:\
\>", "Text",ExpressionUUID->"f49581cd-ea17-48dd-9fb5-33ae2bf902a7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"RandomGraph", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"10", ",", "20"}], "}"}], ",", 
     RowBox[{"EdgeWeight", "\[Rule]", 
      RowBox[{"RandomReal", "[", 
       RowBox[{"1", ",", "20"}], "]"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.702909631389135*^9, 3.702909639053191*^9}, {
   3.702909679780795*^9, 3.702909684995865*^9}, 
   3.7029102210111237`*^9},ExpressionUUID->"3d72ff0b-e612-4873-9c02-\
b3bb0f49bf70"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "returns", " ", "edge", " ", "angle", " ", "for", " ", "each", " ", 
    "edge"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"edgeAngle", "[", "g_", "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"asc", "=", 
       RowBox[{"AssociationThread", "[", 
        RowBox[{
         RowBox[{"VertexList", "[", "g", "]"}], ",", 
         RowBox[{"GraphEmbedding", "[", "g", "]"}]}], "]"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"ArcTan", "@@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"asc", "[", "#1", "]"}], "-", 
          RowBox[{"asc", "[", "#2", "]"}]}], ")"}]}], "&"}], "@@@", 
      RowBox[{"EdgeList", "[", "g", "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.702909689917468*^9, 3.702909762993664*^9}, {
  3.702910344236474*^9, 
  3.702910353228096*^9}},ExpressionUUID->"2e0d0c4d-648a-4094-bfec-\
9999f8c1a64f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGLayoutDavidsonHarel", "[", "g", "]"}], "//", 
  "\[IndentingNewLine]", 
  RowBox[{"IGEdgeMap", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Function", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"weight", ",", "angle"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Placed", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Style", "[", 
         RowBox[{
          RowBox[{"NumberForm", "[", 
           RowBox[{"weight", ",", "2"}], "]"}], ",", 
          RowBox[{"Background", "\[Rule]", "White"}]}], "]"}], ",", 
        "\[IndentingNewLine]", "Center", ",", 
        RowBox[{
         RowBox[{"Rotate", "[", 
          RowBox[{"#", ",", 
           RowBox[{"Mod", "[", 
            RowBox[{"angle", ",", "Pi", ",", 
             RowBox[{
              RowBox[{"-", "Pi"}], "/", "2"}]}], "]"}]}], "]"}], "&"}]}], 
       "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"EdgeLabels", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"IGEdgeProp", "@", "EdgeWeight"}], ",", "edgeAngle"}], 
      "}"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7029096412502003`*^9, 3.702909676684216*^9}, {
  3.702909770785358*^9, 3.702909959548255*^9}, {3.702910021776483*^9, 
  3.702910026584179*^9}},ExpressionUUID->"2f857965-e471-4334-b687-\
9d78e5c8b273"],

Cell["\<\
Colour vertices based on their graph distance form a given vertex:\
\>", "Text",ExpressionUUID->"782b9c47-018d-459c-8acb-e2da258f792d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<NetworkGraph\>\"", ",", "\"\<DolphinSocialNetwork\>\""}], 
     "}"}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"000c2408-75d8-4849-9ae7-c28f84f927fe"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Graph", "[", 
   RowBox[{"g", ",", 
    RowBox[{"EdgeStyle", "\[Rule]", "LightGray"}], ",", 
    RowBox[{"VertexSize", "\[Rule]", "1"}], ",", 
    RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], "//", 
  "\[IndentingNewLine]", 
  RowBox[{"IGVertexMap", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ColorData", "[", "\"\<Rainbow\>\"", "]"}], ",", 
    RowBox[{"VertexStyle", "->", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Rescale", "@", 
        RowBox[{"First", "@", 
         RowBox[{"IGDistanceMatrix", "[", 
          RowBox[{"#", ",", 
           RowBox[{"{", "\"\<Feather\>\"", "}"}]}], "]"}]}]}], "&"}], 
      ")"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",ExpressionUUID->"b6b42fee-ba69-4faa-bf6d-09334b79f003"],

Cell["\<\
Colour the vertices of an annotated bipartite disease-gene graph based on \
whether they represent diseases or genes.\
\>", "Text",ExpressionUUID->"d534e65e-27f6-4127-a6f5-98d31944ea3b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{"{", 
     RowBox[{
     "\"\<NetworkGraph\>\"", ",", "\"\<BipartiteDiseasomeNetwork\>\""}], 
     "}"}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"459fca6e-f865-47e9-be0c-31a77ec2efef"],

Cell["There are two types of vertices:", \
"Text",ExpressionUUID->"474745e6-0b3a-4a54-97ed-b88d449e3108"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IGVertexProp", "[", "\"\<Type\>\"", "]"}], "[", "g", "]"}], "//", 
  "Union"}]], "Input",ExpressionUUID->"a46afbae-394f-4cae-ae37-6da866d1e085"],

Cell[BoxData[
 RowBox[{"IGVertexMap", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\"\<Disease\>\"", "\[Rule]", "Red"}], ",", 
     RowBox[{"\"\<Entrez\>\"", "\[Rule]", "Blue"}]}], "\[RightAssociation]"}],
    ",", "\[IndentingNewLine]", 
   RowBox[{"VertexStyle", "\[Rule]", 
    RowBox[{"IGVertexProp", "[", "\"\<Type\>\"", "]"}]}], ",", 
   "\[IndentingNewLine]", "g"}], "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"a3f08766-2767-4076-ada4-5d6fbdd826ca"],

Cell["\<\
Compute the edge weights of a spatially embedded graph as lengths, then \
colour edges based on this value.\
\>", "Text",ExpressionUUID->"3fb12010-b1aa-4f25-8e9f-1bcce026376f"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"IGMeshCellAdjacencyGraph", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"IGLatticeMesh", "[", 
     RowBox[{"\"\<Pinwheel\>\"", ",", 
      RowBox[{"Disk", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0"}], "}"}], ",", "4"}], "]"}]}], "]"}], ",", "2",
     ",", "\[IndentingNewLine]", 
    RowBox[{"VertexCoordinates", "\[Rule]", "Automatic"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"GraphStyle", "\[Rule]", "\"\<ThickEdge\>\""}], ",", 
    RowBox[{"EdgeStyle", "\[Rule]", 
     RowBox[{"Opacity", "[", 
      RowBox[{"2", "/", "3"}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",ExpressionUUID->"365bfe1e-1a1e-48c7-8d9b-23c7c2630df5"],

Cell[BoxData[
 RowBox[{"g", "//", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"IGEdgeMap", "[", 
    RowBox[{
     RowBox[{"Apply", "[", "EuclideanDistance", "]"}], ",", 
     RowBox[{"EdgeWeight", "\[Rule]", 
      RowBox[{"IGEdgeVertexProp", "[", "VertexCoordinates", "]"}]}]}], "]"}], 
   "/*", "\[IndentingNewLine]", 
   RowBox[{"IGEdgeMap", "[", 
    RowBox[{
     RowBox[{"ColorData", "[", "\"\<DarkRainbow\>\"", "]"}], ",", 
     RowBox[{"EdgeStyle", "\[Rule]", 
      RowBox[{"Rescale", "@*", 
       RowBox[{"IGEdgeProp", "[", "EdgeWeight", "]"}]}]}]}], 
    "]"}]}]}]], "Input",ExpressionUUID->"9d0baf50-2d28-41ef-a998-c9c0c16cc944"]
}, Closed]],

Cell[CellGroupData[{

Cell["Style social network by gender", \
"Subsubsection",ExpressionUUID->"06ac2f34-0979-4b38-8d4e-24b2490d9114"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"ExampleData", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<NetworkGraph\>\"", ",", "\"\<FamilyGathering\>\""}], "}"}], 
   "]"}]}]], "Input",ExpressionUUID->"83518c36-dd4b-47c4-8499-6e942bcdb41f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"IGVertexMap", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"Interpreter", "[", "\"\<GivenName\>\"", "]"}], "[", "#", 
        "]"}], "[", "\"\<Gender\>\"", "]"}], "&"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<gender\>\"", "->", "VertexList"}], ",", 
     "\[IndentingNewLine]", "g"}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.703157286852749*^9, 3.703157302425585*^9}, {
   3.703157347818416*^9, 3.703157371960359*^9}, {3.70315741780672*^9, 
   3.703157515938076*^9}, 
   3.703157726311997*^9},ExpressionUUID->"50b1e655-efe0-466b-a3f0-\
c3064df37c00"],

Cell[BoxData[
 RowBox[{"IGVertexMap", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"<|", 
    RowBox[{
     RowBox[{
      TemplateBox[{"\"male\"", 
        RowBox[{"Entity", "[", 
          RowBox[{"\"Gender\"", ",", "\"Male\""}], "]"}], 
        "\"Entity[\\\"Gender\\\", \\\"Male\\\"]\"", "\"gender\""},
       "Entity"], "\[Rule]", 
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {RGBColor[0., 0.749, 1.], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          Frame->True,
          FrameStyle->RGBColor[0., 0.49933333333333335`, 0.6666666666666667],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 
             1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}],
          PlotRangePadding->None],
         "RGBColor[0., 0.749, 1.]"],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = 
            RGBColor[0., 0.749, 1.]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["RGBColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       RGBColor[0., 0.749, 1.],
       Editable->False,
       Selectable->False]}], ",", 
     RowBox[{
      TemplateBox[{"\"female\"", 
        RowBox[{"Entity", "[", 
          RowBox[{"\"Gender\"", ",", "\"Female\""}], "]"}], 
        "\"Entity[\\\"Gender\\\", \\\"Female\\\"]\"", "\"gender\""},
       "Entity"], "\[Rule]", 
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {RGBColor[1., 0.388195, 0.278405], RectangleBox[{0, -1}, {2, 1}]}},
          
          AspectRatio->1,
          Frame->True,
          
          FrameStyle->RGBColor[
           0.6666666666666667, 0.2587966666666667, 0.18560333333333334`],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 
             1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}],
          PlotRangePadding->None],
         "RGBColor[1., 0.388195, 0.278405]"],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = 
            RGBColor[1., 0.388195, 0.278405]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["RGBColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       RGBColor[1., 0.388195, 0.278405],
       Editable->False,
       Selectable->False]}]}], "|>"}], ",", "\[IndentingNewLine]", 
   RowBox[{"VertexStyle", "\[Rule]", 
    RowBox[{"IGVertexProp", "[", "\"\<gender\>\"", "]"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Graph", "[", 
    RowBox[{"g", ",", 
     RowBox[{"EdgeStyle", "\[Rule]", "Gray"}], ",", 
     RowBox[{"VertexSize", "\[Rule]", "Large"}]}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.7031575299674397`*^9, 
  3.70315766246682*^9}},ExpressionUUID->"1c5590fa-7907-4d84-9cc0-127e12d2904c"]
}, Closed]],

Cell[CellGroupData[{

Cell["Transform vertex coordinates", \
"Subsubsection",ExpressionUUID->"e6e84082-02ff-4c77-b61b-b8e52bcca5ef"],

Cell["\<\
Transform the vertex coordinates of a graph to obtain a more pleasing layout:\
\
\>", "Text",ExpressionUUID->"cf909ffc-cdf8-4499-a30d-6ae6bef2862a"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"Graph", "[", 
   RowBox[{
    RowBox[{"GraphData", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<Apollonian\>\"", ",", "5"}], "}"}], ",", 
      "\"\<EdgeList\>\""}], "]"}], ",", 
    RowBox[{"GraphLayout", "\[Rule]", "\"\<PlanarEmbedding\>\""}]}], 
   "]"}]}]], "Input",ExpressionUUID->"d4316526-3401-4e99-8eeb-e937959ae21d"],

Cell[BoxData[
 RowBox[{"IGVertexMap", "[", 
  RowBox[{
   RowBox[{"AffineTransform", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", 
        FractionBox["1", "2"]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", 
        FractionBox[
         SqrtBox["3"], "2"]}], "}"}]}], "}"}], "]"}], ",", 
   "VertexCoordinates", ",", "g"}], 
  "]"}]], "Input",ExpressionUUID->"7a2457c5-5337-4609-972f-d7ac04f8eaf0"],

Cell["\<\
Project coordinates from the sphere to the plane using stereographic \
projection:\
\>", "Text",ExpressionUUID->"07e1277b-bf82-49e9-9f35-69cb9b474191"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"Graph3D", "[", 
   RowBox[{"GraphData", "[", 
    RowBox[{"\"\<DodecahedralGraph\>\"", ",", "\"\<EdgeList\>\""}], "]"}], 
   "]"}]}]], "Input",ExpressionUUID->"57127d0c-b17f-4896-95cb-cd2c910fca7f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"project", "=", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CoordinateTransform", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<Standard\>\"", "\[Rule]", "\"\<Stereographic\>\""}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Sphere\>\"", ",", "1"}], "}"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Rest", "@", 
       RowBox[{"CoordinateTransform", "[", 
        RowBox[{
         RowBox[{"\"\<Cartesian\>\"", "\[Rule]", "\"\<Spherical\>\""}], ",", 
         "#"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], "&"}]}], 
  ";"}]], "Input",ExpressionUUID->"9696c104-9c95-4036-bd4c-9b40a6a792cd"],

Cell[BoxData[
 RowBox[{"Graph", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"IGVertexMap", "[", 
    RowBox[{"project", ",", 
     RowBox[{"VertexCoordinates", "\[Rule]", 
      RowBox[{"Standardize", "@*", 
       RowBox[{"IGVertexProp", "[", "VertexCoordinates", "]"}]}]}], ",", 
     "g"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"GraphLayout", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Dimension\>\"", "\[Rule]", "2"}], "}"}]}]}], 
  "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"0d1c2b92-0527-4224-8eb3-b1197a2a9d8c"]
}, Closed]],

Cell[CellGroupData[{

Cell["Copy one property into another", \
"Subsubsection",ExpressionUUID->"6f1193a0-a603-48e7-b38b-92d3d2e5437f"],

Cell["Let us import this network:", \
"Text",ExpressionUUID->"85672436-6a0f-4fa9-8e85-2d6ddfd95701"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"Import", "[", 
   RowBox[{
   "\"\<http://networkdata.ics.uci.edu/data/lesmis/lesmis.gml\>\"", ",", 
    RowBox[{"ImageSize", "\[Rule]", "Large"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"c7bca739-9428-4101-94cf-830144cabc16"],

Cell["\<\
According to the description, this should be a weighted graph:\
\>", "Text",ExpressionUUID->"dc21a67a-df17-446f-aeba-f9dddf08b8f5"],

Cell[BoxData[
 RowBox[{"Import", "[", 
  "\"\<http://networkdata.ics.uci.edu/data/lesmis/lesmis.txt\>\"", 
  "]"}]], "Input",ExpressionUUID->"fccfd2cf-6476-42a2-b841-f67772a3f9b1"],

Cell[TextData[{
 "But as imported by ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", it is not edge-weighted:"
}], "Text",ExpressionUUID->"37712bf3-e547-44a0-993c-9699049d39e8"],

Cell[BoxData[
 RowBox[{"IGEdgeWeightedQ", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"6ba96223-f1a3-4ff5-ba3b-90a161b6c18b"],

Cell[TextData[{
 "This is because the edge weights are imported into the ",
 Cell[BoxData[
 "\"\<value\>\""],ExpressionUUID->"d1cae435-6b78-4579-b39e-19a773aad92e"],
 " property instead of the standard ",
 Cell[BoxData[
 "EdgeWeight"],ExpressionUUID->"f7b055f0-5c6b-4681-97c4-848e39e60144"],
 ":"
}], "Text",ExpressionUUID->"55d25a43-b67a-48db-b748-de439804167b"],

Cell[BoxData[
 RowBox[{"IGEdgePropertyList", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"8a076542-bbb3-4229-ae3e-55095fc61121"],

Cell["Copy the values of one property into another:", \
"Text",ExpressionUUID->"aa49859f-d64f-4e41-88fd-7c6f7e3b1cf1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"IGEdgeMap", "[", 
    RowBox[{
     RowBox[{"#", "&"}], ",", 
     RowBox[{"EdgeWeight", "\[Rule]", 
      RowBox[{"IGEdgeProp", "[", "\"\<value\>\"", "]"}]}], ",", "g"}], 
    "]"}]}], ";"}]], \
"Input",ExpressionUUID->"2ebd253f-d2db-4b2f-bff9-9275221380cc"],

Cell["Now we have a weighted graph:", \
"Text",ExpressionUUID->"37e7bf9b-9bd4-4db9-b11d-8f51da3baa78"],

Cell[BoxData[
 RowBox[{"IGEdgeWeightedQ", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"52b8522d-1e91-45c8-a165-94b1d7caddaf"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Matrix functions", \
"Section",ExpressionUUID->"4f53e7ba-7ab1-4029-bf49-c535e054c7fa"],

Cell[CellGroupData[{

Cell["IGKirchhoffMatrix", \
"Subsubsection",ExpressionUUID->"bcfb344f-6d13-4167-9b52-b6fd54f10c0b"],

Cell[BoxData[
 RowBox[{"?", 
  "IGKirchhoffMatrix"}]], \
"Input",ExpressionUUID->"575e84c0-198b-4e3e-9ea7-ff340d98f571"],

Cell["The Kirchhoff matrix of a graph is defined as", \
"Text",ExpressionUUID->"81537411-d33c-4f82-ae3b-16ff1c2534bc"],

Cell[BoxData[
 FormBox[
  RowBox[{
   SubscriptBox["K", 
    RowBox[{"i", ",", "j"}]], "=", 
   TagBox[GridBox[{
      {"\[Piecewise]", GridBox[{
         {
          RowBox[{
           RowBox[{"-", 
            SubscriptBox["a", 
             RowBox[{"i", ",", "j"}]]}], ",", " ", Cell[TextData[{
            "where ",
            Cell[BoxData[
             FormBox[
              SubscriptBox["a", 
               RowBox[{"i", ",", "j"}]], TraditionalForm]],ExpressionUUID->
             "85250d54-0e8f-40c5-a4e0-5c85c7c27286"],
            " is the number of ",
            Cell[BoxData[
             FormBox[
              RowBox[{"i", "\[Rule]", "j"}], TraditionalForm]],ExpressionUUID->
             "44d7c7a8-07ab-4569-8132-e5c4c5505c3f"],
            " connections"
           }],ExpressionUUID->"0c688ccd-e8ce-4347-b67a-a2675992f3e5"]}], 
          RowBox[{"i", "\[NotEqual]", "j"}]},
         {
          RowBox[{"-", 
           RowBox[{
            SubscriptBox["\[Sum]", 
             RowBox[{"k", "\[NotEqual]", "i"}]], 
            SubscriptBox["K", 
             RowBox[{"k", ",", "i"}]]}]}], 
          RowBox[{"i", "=", "j"}]}
        },
        AllowedDimensions->{2, Automatic},
        Editable->True,
        GridBoxAlignment->{
         "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}},
           "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.84]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}},
        Selectable->True]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.35]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    "Piecewise",
    DeleteWithContents->True,
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], 
  TraditionalForm]], \
"DisplayFormula",ExpressionUUID->"ab1587c1-2921-4ce0-99a4-b121e43ccf9a"],

Cell["\<\
In other words, non-diagonal entries are the negative of the adjacency matrix \
and diagonal entries are equal to the out-degree. Rows sum up to zero.\
\>", "Text",ExpressionUUID->"9308ce51-b359-45f7-b6d1-eca1de9959f8"],

Cell[TextData[{
 "The built-in ",
 Cell[BoxData[
 "KirchoffMatrix"],ExpressionUUID->"274425a7-ed49-4a17-aebe-d745fc31ba03"],
 " function uses the total degree on the diagonal even if the input graph is \
directed, making it unsuitable for many of the usual operations done with \
Kirchhoff matrices."
}], "Text",ExpressionUUID->"516c4584-9d56-4b1a-a756-7d665ae27d6c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4}, {{{1, 2}, {2, 3}, {2, 4}}, Null}, {
        GraphLayout -> "SpringElectricalEmbedding", PerformanceGoal -> 
         "Quality", VertexLabels -> {None}, 
         VertexShapeFunction -> {"Name"}}]], Typeset`boxes, 
      Typeset`boxes$s2d = GraphicsGroupBox[{{
         Arrowheads[Medium], 
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         ArrowBox[{{
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$2", Automatic, Center]}, {
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}, {
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}}]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["1", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {1.731763559134132, 0.009494058283803897}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$1"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["2", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0.8627311468285068, 0.5044769123028114}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$2"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["3", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0., 0.}, BaseStyle -> "Graphics"], 
          "DynamicName", BoxID -> "VertexID$3"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["4", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0.8554374821613339, 1.5049365348216703`}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> 
          "VertexID$4"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        
        ImageSizeCache->{{8.881784197001252*^-16, 61.5}, {-35., 
         28.75451116552395}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None]}], 
  ";"}]], "Input",ExpressionUUID->"0951c121-4d00-492d-9833-7eeb3d6228e9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"KirchhoffMatrix", "[", "g", "]"}], "//", 
  "MatrixForm"}]], \
"Input",ExpressionUUID->"92c936b6-b2e2-4b85-ad5e-ac7465d6b274"],

Cell[TextData[{
 "By default, the diagonal contains the out-degrees, and rows sum to zero. \
This can also be requested explicitly using ",
 Cell[BoxData[
  RowBox[{"IGKirchhoffMatrix", "[", 
   RowBox[{"g", ",", " ", "\"\<Out\>\""}], "]"}]],ExpressionUUID->
  "4ed2c81d-b075-4fb1-82f4-55f0976114aa"],
 "."
}], "Text",ExpressionUUID->"01d176c8-4ac9-4902-9170-5e0ee57d3e33"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGKirchhoffMatrix", "[", "g", "]"}], "//", 
  "MatrixForm"}]], \
"Input",ExpressionUUID->"060582d0-ac39-4286-b864-4d6baa70bc8e"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGKirchhoffMatrix", "[", 
   RowBox[{"g", ",", " ", "\"\<In\>\""}], "]"}]],ExpressionUUID->
  "a283808a-2e6b-4404-9afd-ab0724047d55"],
 " will place the in-degrees on the diagonal, so that the columns will sum to \
zero."
}], "Text",ExpressionUUID->"06e2b578-5c23-46ca-bd8a-93ba120436a0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGKirchhoffMatrix", "[", 
   RowBox[{"g", ",", "\"\<In\>\""}], "]"}], "//", 
  "MatrixForm"}]], \
"Input",ExpressionUUID->"d5ad9d9e-3c84-458b-9d3f-72d996c6f232"],

Cell[TextData[{
 "Unlike the built-in ",
 Cell[BoxData[
 "KirchhoffMatrix"],ExpressionUUID->"63d6c5a2-b5a3-449b-85a4-15718b701883"],
 ", ",
 Cell[BoxData[
 "IGKirchoffMatrix"],ExpressionUUID->"fda1961b-ae7d-41b8-a593-72a42d612a28"],
 " takes into account edge multiplicities."
}], "Text",ExpressionUUID->"d83c5d63-cc8a-4127-b33e-2f2d68e47df5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"KirchhoffMatrix", "[", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3}, {Null, {{1, 2}, {2, 3}, {1, 3}, {1, 2}}}, {
        PerformanceGoal -> "Quality", VertexLabels -> {None}, 
         VertexShapeFunction -> {"Name"}}]], Typeset`boxes, 
      Typeset`boxes$s2d = GraphicsGroupBox[{{
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         BezierCurveBox[{
           DynamicLocation["VertexID$1", Automatic, Center], {
           7.470730829510974*^-15, -0.2151802710442648}, 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         BezierCurveBox[{
           DynamicLocation["VertexID$1", Automatic, Center], {
           1.4168627435279434`*^-15, -0.7848197289557832}, 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         LineBox[{
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$3", Automatic, Center]}], 
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$3", Automatic, Center]}]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["1", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {-0.8660254037844384, -0.4999999999999994}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$1"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["2", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0.8660254037844389, -0.5000000000000012}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$2"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["3", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {1.8369701987210297`*^-16, 1.}, BaseStyle -> 
           "Graphics"], "DynamicName", BoxID -> 
          "VertexID$3"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        
        ImageSizeCache->{{-0.4537564187451011, 
         51.28578766874512}, {-30.453756418745105`, 24.815332769365195`}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{51.83203125, Automatic}], "]"}], "//", 
  "MatrixForm"}]], \
"Input",ExpressionUUID->"f751d57b-220f-4956-a529-eea9defdc031"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGKirchhoffMatrix", "[", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3}, {Null, {{1, 2}, {2, 3}, {1, 3}, {1, 2}}}, {
        PerformanceGoal -> "Quality", VertexLabels -> {None}, 
         VertexShapeFunction -> {"Name"}}]], Typeset`boxes, 
      Typeset`boxes$s2d = GraphicsGroupBox[{{
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         BezierCurveBox[{
           DynamicLocation["VertexID$1", Automatic, Center], {
           7.470730829510974*^-15, -0.2151802710442648}, 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         BezierCurveBox[{
           DynamicLocation["VertexID$1", Automatic, Center], {
           1.4168627435279434`*^-15, -0.7848197289557832}, 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         LineBox[{
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$3", Automatic, Center]}], 
         LineBox[{
           DynamicLocation["VertexID$2", Automatic, Center], 
           DynamicLocation["VertexID$3", Automatic, Center]}]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["1", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {-0.8660254037844384, -0.4999999999999994}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$1"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["2", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {0.8660254037844389, -0.5000000000000012}, 
           BaseStyle -> "Graphics"], "DynamicName", BoxID -> "VertexID$2"], 
         TagBox[
          InsetBox[
           BoxData[
            FormBox[
             PaneBox["3", Alignment -> Center, ImageMargins -> 2], 
             TraditionalForm]], {1.8369701987210297`*^-16, 1.}, BaseStyle -> 
           "Graphics"], "DynamicName", BoxID -> 
          "VertexID$3"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        
        ImageSizeCache->{{-0.45375641874510464`, 
         51.28578766874513}, {-30.453756418745108`, 24.8153327693652}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{51.83203125, Automatic}], "]"}], "//", 
  "MatrixForm"}]], \
"Input",ExpressionUUID->"88dd92e7-a104-4a23-8c42-7e3ca7959a6a"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGJointDegreeMatrix", \
"Subsubsection",ExpressionUUID->"2cb1805f-607a-40e2-a3e6-460bdde4a3c0"],

Cell[BoxData[
 RowBox[{"?", 
  "IGJointDegreeMatrix"}]], \
"Input",ExpressionUUID->"aff7d321-dc80-46bf-957f-9ae2a9ee87aa"],

Cell[TextData[{
 "Entry ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["J", 
    RowBox[{"i", "\[InvisibleComma]", "j"}]], TraditionalForm]],
  ExpressionUUID->"96c734d7-d5f0-487e-8243-c8344345ae71"],
 " of the joint degree matrix ",
 Cell[BoxData[
  FormBox["J", TraditionalForm]],ExpressionUUID->
  "75da1616-ad32-4b8d-acce-3b6d04257345"],
 " is the number of edges connecting a degree ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "050159b0-fba9-4bb5-97fc-460d4854cac3"],
 " and a degree ",
 Cell[BoxData[
  FormBox["j", TraditionalForm]],ExpressionUUID->
  "30fd5016-6cf4-4606-9fdb-7911f2fb71d9"],
 " vertex. For a directed graph, ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["J", 
    RowBox[{"i", "\[InvisibleComma]", "j"}]], TraditionalForm]],
  ExpressionUUID->"f59ab907-f238-437a-87ca-42a5186b768e"],
 " is the number of edges from a vertex with out-degree ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "bc11ca2c-99bf-478a-8e7e-18f1a029ee47"],
 " to a vertex with in-degree ",
 Cell[BoxData[
  FormBox["j", TraditionalForm]],ExpressionUUID->
  "69a1882e-2669-4558-90d6-be005e2c3701"],
 "."
}], "Text",ExpressionUUID->"7f6df30b-4e26-4fda-bedb-4c19accec4e4"],

Cell[TextData[{
 "For an empty (i.e. edgeless) graph, ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"{", "}"}], "}"}]],ExpressionUUID->
  "24cde41e-4448-43ee-8464-a3e907f728a2"],
 " is returned."
}], "Text",ExpressionUUID->"ada9176b-9c52-4d90-92b8-6e2ed3f6b797"],

Cell["The available options are:", \
"Text",ExpressionUUID->"88a2cd94-cbb2-4f1c-ba79-3aa1b3a48db5"],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"Normalized", "\[Rule]", "True"}]],ExpressionUUID->
  "98deaec5-fc4a-4ca8-9689-2d10fbe39d0c"],
 " will normalize the matrix by the sum of entries for directed graphs. For \
undirected graphs, the sum of upper triangular entries is used. Thus a matrix \
entry ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["J", 
    RowBox[{"i", "\[InvisibleComma]", "j"}]], TraditionalForm]],
  ExpressionUUID->"bb7b25bf-767a-417d-a232-cc6bcf873a9d"],
 " can be interpreted as the probability that a randomly selected edge will \
connect vertices of degrees ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "4c082221-bdb5-4e5e-a56d-cae3cefc85a2"],
 " and ",
 Cell[BoxData[
  FormBox["j", TraditionalForm]],ExpressionUUID->
  "9e53cd1f-a404-4a4b-82d4-742175be20bf"],
 "."
}], "Item",ExpressionUUID->"f7d49a88-2ccb-4e80-a1c5-94785e750cba"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{
  "IGShorthand", "[", "\"\<1-2-3-4-2\>\"", 
   "]"}]}]], "Input",ExpressionUUID->"39b67721-045f-45ac-85c4-45e6db4df3ce"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"jdm", "=", 
   RowBox[{"IGJointDegreeMatrix", "[", "g", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", 
  RowBox[{"jdm", ",", 
   RowBox[{"TableHeadings", "\[Rule]", "Automatic"}]}], 
  "]"}]}], "Input",ExpressionUUID->"ef76a4d7-862e-4052-a328-bf2664444df0"]
}, Open  ]],

Cell["\<\
The degree distribution (excluding zero-degree nodes) can be recovered as \
follows. The result array contains the number of nodes having each degree.\
\>", "Text",ExpressionUUID->"22ae1408-72fb-4791-99b7-5498794a6ba8"],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{"Total", "[", "jdm", "]"}], "+", 
   RowBox[{"Diagonal", "[", "jdm", "]"}]}], 
  RowBox[{"Range", "@", 
   RowBox[{"Max", "@", 
    RowBox[{
    "VertexDegree", "[", "g", 
     "]"}]}]}]]], \
"Input",ExpressionUUID->"870ad89e-cb7a-461c-8ad1-8cb4c49dfc94"],

Cell["Compute the degree distribution directly, for comparison.", \
"Text",ExpressionUUID->"6c8d0d27-5195-47de-873e-884f0ffa1599"],

Cell[BoxData[
 RowBox[{"Rest", "@", 
  RowBox[{"BinCounts", "@", 
   RowBox[{
   "VertexDegree", "[", "g", 
    "]"}]}]}]], \
"Input",ExpressionUUID->"06bfbcb6-bdf8-4d47-be7e-8a5d589c30ba"],

Cell[TextData[{
 "Some other systems use a slightly different definition of the joint degree \
matrix for undirected graphs: the number of degree ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "6518e521-dcf5-4724-b102-43911cc2d316"],
 " vertices connecting to degree ",
 Cell[BoxData[
  FormBox["j", TraditionalForm]],ExpressionUUID->
  "64051280-d774-40f0-b320-16fc9b3ff60e"],
 " vertices. Compared to the definition used here, this definition counts \
edges running between nodes of the same degree twice. To obtain this type of \
joint degree matrix, simply add the diagonal to the original matrix."
}], "Text",ExpressionUUID->"5ad539ab-ba95-4b1e-80b9-22583a101046"],

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{
   RowBox[{"jdm", "+", 
    RowBox[{"DiagonalMatrix", "@", 
     RowBox[{"Diagonal", "[", "jdm", "]"}]}]}], ",", 
   RowBox[{"TableHeadings", "\[Rule]", "Automatic"}]}], 
  "]"}]], "Input",ExpressionUUID->"34313bdb-a27b-4625-8212-8df1c4f23951"],

Cell["Multi-edges are supported.", \
"Text",ExpressionUUID->"3fa4fd01-462b-4647-a3fa-8c0b76ac6893"],

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{
   RowBox[{"IGJointDegreeMatrix", "[", 
    GraphicsBox[
     NamespaceBox["NetworkGraphics",
      DynamicModuleBox[{Typeset`graph = HoldComplete[
        Graph[{1, 2, 3}, {Null, {{1, 2}, {1, 2}, {2, 3}}}, {
         VertexSize -> {Medium}}]]}, 
       TagBox[GraphicsGroupBox[GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGBQBmIQDQNcXfN8LCt32UB4H+zZY0SM1ZZthPIZHGDq3qe9
X9rOudve4USUutDbRfaci39zSH4/YF9Qvuv49cTl9gETGXTly47YF6xVfj1H
e7V97OyNgUf+H7ef0HQ8Sdljnf3X57fsP0w8bf/ApO3kyagN9npJTze3ap23
L5iQctTOcqN95WX18xuTL9qfiOp/92bfRntLYxC4bM8RtEOu9fVG+/Q0EHgG
57uL5Uio+z2Hq69czjY5zvQF3Dx2N84PzdIv4fbpzpz8mo/hlX0D1D0bbu83
qXj0yj4B6l5H8YN7LQ+9tk+A+kdN2In7/Lw39gZQ/76F+v/BcTB/P8z/AhD1
+/2g/heAmLc/Gup/A4h9+z9D/b8B4p79OlD/O0Dcux/m/xkQ/+yH+f9GINi/
+2H+h/Fh/oeph/kfZh7M/zD7YP5XgLoH5n8GqHth/meA+gfm/wtQ/wIAQa8I
DA==
          "], {
           {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
            {Arrowheads[0.], 
             ArrowBox[BezierCurveBox[{
              1, {0.4999999999999994, 0.16444074718311658`}, 2}], 0.1]}, 
            {Arrowheads[0.], 
             ArrowBox[BezierCurveBox[{
              1, {0.4999999999999998, -0.1644407471831159}, 2}], 0.1]}, 
            {Arrowheads[0.], ArrowBox[{2, 3}, 0.1]}}, 
           {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
            DiskBox[1, 0.1], DiskBox[2, 0.1], DiskBox[3, 0.1]}}]],
        MouseAppearanceTag["NetworkGraphics"]],
       AllowKernelInitialization->False]],
     DefaultBaseStyle->{
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
     FormatType->TraditionalForm,
     FrameTicks->None], "]"}], ",", 
   RowBox[{"TableHeadings", "\[Rule]", "Automatic"}]}], 
  "]"}]], "Input",ExpressionUUID->"fbb3fa74-b2ba-46e5-a856-f08f96e39b3d"],

Cell[TextData[{
 "Self-loops are also supported. Note that ",
 Cell[BoxData[
 "IGJointDegreeMatrix"],ExpressionUUID->
  "63f00559-0f7a-45eb-8a55-d9b693874d28"],
 " counts loop edges twice when computing the vertex degree, just like ",
 Cell[BoxData[
 "VertexDegree"],ExpressionUUID->"43827cec-eec4-4c53-a7b3-4dc0d02a3f58"],
 ". Thus the vertices of the below graph have degrees 1 and 3."
}], "Text",ExpressionUUID->"a077d402-6da7-449a-9218-f272b75267c8"],

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{
   RowBox[{"IGJointDegreeMatrix", "[", 
    GraphicsBox[
     NamespaceBox["NetworkGraphics",
      DynamicModuleBox[{Typeset`graph = HoldComplete[
        Graph[{1, 2}, {Null, {{1, 2}, {2, 2}}}, {VertexSize -> {Medium}}]]}, 
       TagBox[GraphicsGroupBox[GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQEf7BnQAHuMiLHasoU2DBeiXrdpC+xPPeluFCxa
sH9CpGaj68u2/VqXg+vnPt+0f84j5fNl1kv3m3zf7HVrycH9IkdmT5m8bNv+
Cy+kXGZkn9ivZ/UnzZPh8P6Lb1vcH9uc3S/yhpXTfsfp/Xty+w6c23p+P8/6
hA2CKZf2v+ObaTNt8fn9PitaDnzYdW1/jGHYw/XsZ/e/+L3i08L2W/t5d/zL
XCd+Yv+R1L7n8jV392s7lgt/tTi4f9P8ml17ou/vf2/1L0P748b9ENc/2A9x
/0QbmDyDNVje/ihUvz5Evz3MfEGI+fa+UPsTIfbbw9z3BeI+e3Go+w9D3G9v
APXfDYj/7CWg/r8B8b/9Amj42EDCx74AGn46kPCzh4Vvwylw+NoDAFlIyss=

          "], {
           {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
            {Arrowheads[0.], ArrowBox[{1, 2}, 0.1]}, 
            {Arrowheads[0.], 
             ArrowBox[BezierCurveBox[{2, 6, 9, 11, 17, 19, 22, 2},
              SplineDegree->7], 0.1]}}, 
           {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
            DiskBox[1, 0.1], DiskBox[2, 0.1]}}]],
        MouseAppearanceTag["NetworkGraphics"]],
       AllowKernelInitialization->False]],
     DefaultBaseStyle->{
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
     FormatType->TraditionalForm,
     FrameTicks->None], "]"}], ",", 
   RowBox[{"TableHeadings", "\[Rule]", "Automatic"}]}], 
  "]"}]], "Input",ExpressionUUID->"65623a9c-c9d4-4ac0-925f-4e95bd8da48a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGJointDegreeMatrix", "@", 
   RowBox[{"ExampleData", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<NetworkGraph\>\"", ",", "\"\<ZacharyKarateClub\>\""}], 
     "}"}], "]"}]}], "//", 
  "MatrixPlot"}]], \
"Input",ExpressionUUID->"e1e2063f-8564-43e9-b92c-acefa03661be"],

Cell["\<\
The joint degree matrix of a directed graph is not necessarily square.\
\>", "Text",ExpressionUUID->"2ca88655-da09-40d4-a306-12e8e36c438e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IGBarabasiAlbertGame", "[", 
    RowBox[{"15", ",", "3"}], "]"}], "//", "IGJointDegreeMatrix"}], "//", 
  "MatrixPlot"}]], \
"Input",ExpressionUUID->"748c71fc-0ccd-4f05-9c67-6c663b56c7d4"],

Cell["\<\
The second argument allows for obtaining joint degree matrices of a \
predictable size. This makes it convenient to operate together multiple joint \
degree matrices.\
\>", "Text",ExpressionUUID->"1d2a2eab-45b3-49d2-8aed-7749ebd19c5d"],

Cell[BoxData[
 RowBox[{"MatrixPlot", "@", 
  RowBox[{"Mean", "@", 
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"IGJointDegreeMatrix", "[", 
      RowBox[{
       RowBox[{"RandomGraph", "[", 
        RowBox[{"{", 
         RowBox[{"10", ",", "20"}], "}"}], "]"}], ",", "9", ",", 
       RowBox[{"Normalized", "\[Rule]", "True"}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", "1000", "}"}]}], "\[IndentingNewLine]", 
    "]"}]}]}]], "Input",ExpressionUUID->"a602ca8b-e1e3-4b6b-88c9-622f9eb19d43"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGAdjacencyMatrixPlot", \
"Subsubsection",ExpressionUUID->"8049853c-6573-4eb2-acc1-a5552d0c5da7"],

Cell[BoxData[
 RowBox[{"?", 
  "IGAdjacencyMatrixPlot"}]], \
"Input",ExpressionUUID->"4b317ee9-74b7-4d78-ad32-d30286da95e7"],

Cell[TextData[{
 Cell[BoxData[
 "IGAdjacencyMatrixPlot"],ExpressionUUID->
  "c62c5700-aa9a-4724-aea7-36ff1e7f7a81"],
 " is based on ",
 Cell[BoxData[
 "MatrixPlot"],ExpressionUUID->"2acdc27d-0a21-4271-805d-8a01da0ec484"],
 ", but optimized for the convenient display of labelled adjacency matrices."
}], "Text",ExpressionUUID->"899793c5-76bf-41fa-89a7-758b2434e597"],

Cell["Available options:", \
"Text",ExpressionUUID->"580b9f1b-4d19-4371-a204-9a766e04781d"],

Cell[TextData[{
 Cell[BoxData[
 "EdgeWeight"],ExpressionUUID->"69011020-5d62-4269-bccb-f7406f1b4640"],
 " sets the edge property to use for matrix elements. By default edge weights \
are used for weighted graphs. Set ",
 Cell[BoxData[
  RowBox[{"EdgeWeight", "\[Rule]", "None"}]],ExpressionUUID->
  "c1ea87c1-7ede-4d2c-9c0f-22cff009591e"],
 " to visualize the unweighted adjacency matrix even for a weighted graph."
}], "Item",ExpressionUUID->"0745a0d4-c921-480b-b8df-76581fddab2e"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<UnconnectedColor\>\""],ExpressionUUID->
  "a766b3b7-dc9b-4061-8797-40ab8299261e"],
 " sets the colour to use to represent non-existent connections."
}], "Item",ExpressionUUID->"6b1fcd25-9020-44a9-817d-b751a4e3d683"],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
 "VertexLabels"],ExpressionUUID->"d42ccfc5-2f2b-4127-bb62-b7027e497642"],
 " controls how to label the matrix\[CloseCurlyQuote]s columns and rows. \
Possible values: "
}], "Item",ExpressionUUID->"025f6fea-2038-431d-b521-697cd5937fc1"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<Index\>\""],ExpressionUUID->"030334e7-8c69-4684-bae2-d8233e488624"],
 " uses row and column numbers. These are identical to vertex indices when \
the full adjacency matrix is plotted, but not when a partial matrix is \
plotted or if the vertices are re-ordered."
}], "Subitem",ExpressionUUID->"47ca2ff8-ff99-4403-aeb1-b56fe9624e02"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<Name\>\""],ExpressionUUID->"1ac547d1-d718-4e4c-987a-e517a334396d"],
 " uses vertex names."
}], "Subitem",ExpressionUUID->"bd4e82d1-44d3-4f1c-b40c-fba029d195a8"],

Cell[TextData[{
 Cell[BoxData[
 "Automatic"],ExpressionUUID->"445ec88e-8df4-4dad-adeb-e81e02dc2abe"],
 " uses indices for large graphs and names for small ones. Use a list of \
rules to set different names for each vertex."
}], "Subitem",ExpressionUUID->"ab0e3d06-4609-44da-a448-8f7d26fa92bc"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<RotateColumnLabels\>\"", "\[Rule]", "False"}]],ExpressionUUID->
  "dbecfd24-7764-4edc-a5d4-a151fb5f6b00"],
 " will not rotate columns labels."
}], "Item",ExpressionUUID->"a7a640ae-1352-4d05-82ca-c21fddd5bd8f"],

Cell[TextData[{
 Cell[BoxData[
 "Mesh"],ExpressionUUID->"84e35292-7330-4f38-a1ec-3a2da3cd160c"],
 " controls the drawing of grid lines. By default, a grid is drawn only for \
small graphs. Use ",
 Cell[BoxData[
  RowBox[{"Mesh", "\[Rule]", "All"}]],ExpressionUUID->
  "abcf3bea-9774-4d70-8463-6a991a21917b"],
 " to force drawing the grid."
}], "Item",ExpressionUUID->"b7a9517a-def5-421d-b0cb-7aec5bc138b6"],

Cell[TextData[{
 Cell[BoxData[
 "IGAdjacencyMatrixPlot"],ExpressionUUID->
  "f68805d3-9e33-4438-b06f-ad36bf2139f2"],
 " also accepts all standard ",
 Cell[BoxData[
 "MatrixPlot"],ExpressionUUID->"4b35fd2c-3313-4d19-bc57-1faa11e7f885"],
 " options."
}], "Text",ExpressionUUID->"819f20a4-e664-4b03-9b45-f93aeb4985a6"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"ExampleData", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<NetworkGraph\>\"", ",", "\"\<Friendship\>\""}], "}"}], 
   "]"}]}]], "Input",ExpressionUUID->"8ef69c18-19d5-444a-86de-272f0a9e5b8d"],

Cell[BoxData[
 RowBox[{"IGAdjacencyMatrixPlot", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"5923e150-285d-449f-88d8-922549368104"],

Cell["Reorder graph vertices before plotting.", \
"Text",ExpressionUUID->"f56da038-e9e2-47b4-973c-33978f189ca4"],

Cell[BoxData[
 RowBox[{"IGAdjacencyMatrixPlot", "[", 
  RowBox[{"g", ",", 
   RowBox[{"Sort", "@", 
    RowBox[{"VertexList", "[", "g", "]"}]}]}], 
  "]"}]], "Input",ExpressionUUID->"43748db7-195f-4edb-a8a9-7bdb242d28bc"],

Cell["Plot a subgraph only.", \
"Text",ExpressionUUID->"0ee24868-78b8-47ff-b648-243f007f8bb4"],

Cell[BoxData[
 RowBox[{"IGAdjacencyMatrixPlot", "[", 
  RowBox[{"g", ",", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Anna\>\"", ",", "\"\<Ben\>\"", ",", "\"\<Larry\>\"", ",", 
     "\"\<Carol\>\""}], "}"}]}], 
  "]"}]], "Input",ExpressionUUID->"0cf583c9-d3c7-4fc6-a7c0-f7a37931231e"],

Cell["Plot a weighted adjacency matrix.", \
"Text",ExpressionUUID->"d9feb304-1b92-40c1-9d09-f44ce1abe1a3"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{"{", 
     RowBox[{
     "\"\<NetworkGraph\>\"", ",", "\"\<EastAfricaEmbassyAttacks\>\""}], "}"}],
     "]"}]}], ";"}], "\n", 
 RowBox[{"IGAdjacencyMatrixPlot", "[", 
  RowBox[{"g", ",", 
   RowBox[{"PlotLegends", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "300"}]}], 
  "]"}]}], "Input",ExpressionUUID->"f7c9ef25-b14d-4d76-b37b-11bb445e038b"],

Cell["\<\
Use a different edge property than weights for the matrix entries.\
\>", "Text",ExpressionUUID->"4f5e321d-9727-426f-8f65-9f792c7c9fda"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g2", "=", 
   RowBox[{
    RowBox[{"g", "//", 
     RowBox[{"IGEdgeMap", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"1", "/", "#"}], "&"}], ",", "EdgeWeight"}], "]"}]}], "//", 
    "\[IndentingNewLine]", 
    RowBox[{"IGEdgeMap", "[", 
     RowBox[{
      RowBox[{"#", "&"}], ",", 
      RowBox[{"\"\<Betweenness\>\"", "\[Rule]", "IGEdgeBetweenness"}]}], 
     "]"}]}]}], 
  ";"}]], "Input",ExpressionUUID->"774328d1-bc20-4993-8089-fdedfb5c1702"],

Cell[BoxData[
 RowBox[{"IGAdjacencyMatrixPlot", "[", 
  RowBox[{"g2", ",", 
   RowBox[{"EdgeWeight", "\[Rule]", "\"\<Betweenness\>\""}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "300"}]}], 
  "]"}]], "Input",ExpressionUUID->"1e300c8f-013a-4789-8a31-6c4ac8d5268a"],

Cell["\<\
Control the style of matrix entries denoting the lack of a connection, to be \
able to distinguish them from zero entries.\
\>", "Text",ExpressionUUID->"a9859c83-d0b4-40dc-afdf-dc1d4ac99b5e"],

Cell[BoxData[
 RowBox[{"IGAdjacencyMatrixPlot", "[", 
  RowBox[{"g2", ",", 
   RowBox[{"EdgeWeight", "\[Rule]", "\"\<Betweenness\>\""}], ",", 
   RowBox[{"\"\<UnconnectedColor\>\"", "\[Rule]", "Black"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "300"}]}], 
  "]"}]], "Input",ExpressionUUID->"c4c1a9c5-5fd9-4c50-af46-6e5548623b74"],

Cell["Plot the adjacency matrix of a very large network. ", \
"Text",ExpressionUUID->"da7aba2a-2bb1-4434-87fb-29077e7646c5"],

Cell[BoxData[
 RowBox[{"IGAdjacencyMatrixPlot", "[", 
  RowBox[{"ExampleData", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<NetworkGraph\>\"", ",", "\"\<PowerGrid\>\""}], "}"}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"70b187fc-41d1-416f-ba0d-c7f6c6799209"],

Cell[TextData[{
 "Large adjacency matrices, like the one above, are downsampled by default to \
improve readability. This can be controlled using the ",
 Cell[BoxData[
 "MaxPlotPoints"],ExpressionUUID->"ca552eef-0b79-48df-a5d4-76bb125bd64a"],
 " option."
}], "Text",ExpressionUUID->"49bb04a4-c9a3-4bee-ab11-69c7109465a9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IGAdjacencyMatrixPlot", "[", 
    RowBox[{
     RowBox[{"ExampleData", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<NetworkGraph\>\"", ",", "\"\<USPoliticsBooks\>\""}], 
       "}"}], "]"}], ",", 
     RowBox[{"MaxPlotPoints", "\[Rule]", "#"}]}], "]"}], "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{"Automatic", ",", "Infinity"}], 
   "}"}]}]], "Input",ExpressionUUID->"0b57d009-fe72-4653-8bbd-b01d271176b8"],

Cell["\<\
The vertex names and the grid are not shown by default for large graphs.\
\>", "Text",ExpressionUUID->"9d6ace4b-dc1e-4326-abaa-bb4beb62f0f0"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"ExampleData", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<NetworkGraph\>\"", ",", "\"\<DolphinSocialNetwork\>\""}], 
    "}"}], "]"}]}]], \
"Input",ExpressionUUID->"026cf505-08f9-4566-a5f8-ae34bb6ba9d2"],

Cell[BoxData[
 RowBox[{"IGAdjacencyMatrixPlot", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"37b17f61-09b0-40cf-b027-e85b6ea81483"],

Cell["\<\
Force drawing vertex names and a grid regardless of the matrix size.\
\>", "Text",ExpressionUUID->"fade4399-5fea-4e94-9ae0-8732bccff032"],

Cell[BoxData[
 RowBox[{"IGAdjacencyMatrixPlot", "[", 
  RowBox[{"g", ",", 
   RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}], ",", 
   RowBox[{"Mesh", "\[Rule]", "All"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "440"}], ",", 
   RowBox[{"FrameTicksStyle", "\[Rule]", "Tiny"}], ",", 
   RowBox[{"MeshStyle", "\[Rule]", "Thin"}]}], 
  "]"}]], "Input",ExpressionUUID->"d03c8c6b-7695-49a3-9514-a6385b7de4eb"],

Cell["\<\
Reorder the adjacency matrix and draw grid lines to show community structure.\
\
\>", "Text",ExpressionUUID->"6e1a32de-a18d-4dea-a8a4-186de963a30b"],

Cell[BoxData[
 RowBox[{"cl", "=", 
  RowBox[{
  "IGCommunitiesEdgeBetweenness", "[", "g", 
   "]"}]}]], "Input",ExpressionUUID->"120c0c0e-5b63-44e1-b1db-35bdd3377c3c"],

Cell[BoxData[
 RowBox[{"IGAdjacencyMatrixPlot", "[", 
  RowBox[{"g", ",", 
   RowBox[{"Catenate", "@", 
    RowBox[{"cl", "[", "\"\<Communities\>\"", "]"}]}], ",", 
   RowBox[{"Mesh", "\[Rule]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"#", ",", "#"}], "}"}], "&"}], "@", 
      RowBox[{"FoldList", "[", 
       RowBox[{"Plus", ",", "0", ",", 
        RowBox[{"Length", "/@", 
         RowBox[{"cl", "[", "\"\<Communities\>\"", "]"}]}]}], "]"}]}], 
     ")"}]}]}], 
  "]"}]], "Input",ExpressionUUID->"c704c01a-f13e-4ff8-95ab-bcca50a208a8"],

Cell["Avoid rotating vertex names when not necessary:", \
"Text",ExpressionUUID->"20ba5cad-5b59-49c2-881c-bd846c618764"],

Cell[BoxData[
 RowBox[{"IGAdjacencyMatrixPlot", "[", 
  RowBox[{
   RowBox[{"IGShorthand", "[", "\"\<A-B-C-D,A-C\>\"", "]"}], ",", 
   RowBox[{"\"\<RotateColumnLabels\>\"", "\[Rule]", "False"}]}], 
  "]"}]], "Input",ExpressionUUID->"118d3633-4447-4abd-a61a-f44fc2d95ccf"],

Cell["Use custom labels for vertices.", \
"Text",ExpressionUUID->"3b2d34ec-e208-4427-9ab6-35eaba9ad8fe"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"ExampleData", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<NetworkGraph\>\"", ",", "\"\<SimpleFoodWeb\>\""}], "}"}], 
   "]"}]}]], "Input",ExpressionUUID->"129a5eff-f09d-49ab-83fd-f622b60e9a60"],

Cell[BoxData[
 RowBox[{"names", "=", 
  RowBox[{"Thread", "[", 
   RowBox[{
    RowBox[{"VertexList", "[", "g", "]"}], "\[Rule]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"Show", "[", 
        RowBox[{"#", ",", 
         RowBox[{"ImageSize", "\[Rule]", "20"}]}], "]"}], "&"}], "/@", 
      RowBox[{
       RowBox[{"IGVertexProp", "[", "VertexShape", "]"}], "[", "g", "]"}]}], 
     ")"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"280bf18d-f0e9-43ba-b43f-ef6446d6fe2a"],

Cell[BoxData[
 RowBox[{"IGAdjacencyMatrixPlot", "[", 
  RowBox[{"g", ",", 
   RowBox[{"VertexLabels", "\[Rule]", "names"}], ",", 
   RowBox[{"\"\<RotateColumnLabels\>\"", "\[Rule]", "False"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "Medium"}], ",", 
   RowBox[{"ColorRules", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"0", "\[Rule]", "White"}], ",", 
      RowBox[{"1", "\[Rule]", "Black"}]}], "}"}]}]}], 
  "]"}]], "Input",ExpressionUUID->"466ba9cc-8876-4fb1-bb66-0e2aeedbecd0"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGZeroDiagonal", \
"Subsubsection",ExpressionUUID->"d0d3f3c6-6b18-4e99-9920-e21e098defeb"],

Cell[BoxData[
 RowBox[{"?", 
  "IGZeroDiagonal"}]], \
"Input",ExpressionUUID->"447de482-0aab-4307-bb0e-2b00a7f23c69"],

Cell[TextData[{
 Cell[BoxData[
 "IGZeroDiagonal"],ExpressionUUID->"82f0d26c-17c1-44e7-acc0-6861fb516a25"],
 " replaces the diagonal of a matrix with zeros. It works on dense and sparse \
matrices, and supports non-square matrices. This function is particularly \
useful when constructing adjacency matrices that are to be converted to a \
graph."
}], "Text",ExpressionUUID->"fee340a6-4e57-4d41-9749-1d0f7acea074"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mat", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "4"}], "}"}]}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"806d38eb-695a-4f80-8db9-5f1d2df5657f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGZeroDiagonal", "[", "mat", "]"}], "//", 
  "MatrixForm"}]], \
"Input",ExpressionUUID->"649d6332-7a22-470a-b1f6-0de6e16002bc"],

Cell["\<\
Connect those points in the plane whose Euclidean distance is less than 0.2, \
but do not connect each point with itself.\
\>", "Text",ExpressionUUID->"44782f1e-8c60-4f6c-8abf-f7f54baa6c9a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pts", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{"30", ",", "2"}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{"AdjacencyGraph", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"IGZeroDiagonal", "@", 
    RowBox[{"UnitStep", "[", 
     RowBox[{"0.2", "-", 
      RowBox[{"DistanceMatrix", "[", "pts", "]"}]}], "]"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"VertexCoordinates", "\[Rule]", "pts"}]}], "\[IndentingNewLine]", 
  "]"}]}], "Input",ExpressionUUID->"9ae39a5c-7ed2-4f06-9d29-5741f19d6e44"],

Cell["\<\
Connect each cell in a rectangular mesh to its Moore neighbours.\
\>", "Text",ExpressionUUID->"0cb45604-c9aa-495a-9f6f-32da4a32dc7d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"arr", "=", 
   RowBox[{"RandomInteger", "[", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "10"}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{"mesh", "=", 
  RowBox[{"ArrayMesh", "[", "arr", "]"}]}]}], "Input",
 CellChangeTimes->{{3.725535919284374*^9, 3.725535927187551*^9}, 
   3.725536823913075*^9},ExpressionUUID->"96785b21-ecda-4c17-94fb-\
3414ac0225cb"],

Cell["First, generate the square\[Dash]vertex adjacency matrix.", \
"Text",ExpressionUUID->"ba448a32-8f58-4130-a3f9-77b9b2588ec1"],

Cell[BoxData[
 RowBox[{"mat", "=", 
  RowBox[{"IGMeshCellAdjacencyMatrix", "[", 
   RowBox[{"mesh", ",", "2", ",", "0"}], 
   "]"}]}]], "Input",ExpressionUUID->"9fef5baa-0ee0-427e-bc0c-7135ba2b1556"],

Cell["\<\
Then find the graph of squares adjacent through a corner point, but excluding \
self-adjacencies.\
\>", "Text",ExpressionUUID->"e0d2c36a-2b13-4ea3-ba4c-a785934b077e"],

Cell[BoxData[
 RowBox[{"AdjacencyGraph", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"IGZeroDiagonal", "@", 
    RowBox[{"Unitize", "[", 
     RowBox[{"mat", ".", 
      RowBox[{"Transpose", "[", "mat", "]"}]}], "]"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"VertexCoordinates", "\[Rule]", 
    RowBox[{"PropertyValue", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"mesh", ",", "2"}], "}"}], ",", "MeshCellCentroid"}], "]"}]}], 
   ",", "\[IndentingNewLine]", 
   RowBox[{"GraphStyle", "\[Rule]", "\"\<BasicBlack\>\""}]}], 
  "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"b908a389-a78c-479f-8c6e-9b6cb31b92f7"],

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"mesh", ",", "%"}], 
  "]"}]], "Input",ExpressionUUID->"a8b149a9-0816-480f-ae0a-2812613f828c"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGTakeUpper and IGTakeLower", \
"Subsubsection",ExpressionUUID->"c0d40a85-988f-4b80-8e98-d4b3c6489264"],

Cell[BoxData[
 RowBox[{"?", 
  "IGTakeUpper"}]], \
"Input",ExpressionUUID->"d0d61f05-dbcc-46f1-801a-054781006db9"],

Cell[BoxData[
 RowBox[{"?", 
  "IGTakeLower"}]], \
"Input",ExpressionUUID->"f7cf0b1b-0941-4230-8bd5-0ad4f690c2d8"],

Cell[TextData[{
 Cell[BoxData[
 "IGTakeUpper"],ExpressionUUID->"8a7a40bd-b3e1-483b-9a91-22b27f4c3f49"],
 " and ",
 Cell[BoxData[
 "IGTakeLower"],ExpressionUUID->"ef8e34cf-5a6a-415c-913f-886d3a1d7c4b"],
 " extract the above-diagonal and below-diagonal elements of a matrix. The \
matrix does not need to be square. The elements are always extracted \
row-by-row."
}], "Text",ExpressionUUID->"ee47cc66-1658-4094-bb08-26ef8840efd4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"mat", "=", 
   RowBox[{"Partition", "[", 
    RowBox[{
     RowBox[{"Range", "[", "16", "]"}], ",", "4"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", "mat", 
  "]"}]}], "Input",ExpressionUUID->"73f56aeb-769e-4054-a843-7dcb1f22b72d"],

Cell[BoxData[
 RowBox[{"IGTakeUpper", "[", "mat", 
  "]"}]], "Input",ExpressionUUID->"8fa9a5ac-b3e2-46f5-85c4-4bc0730ab4d0"],

Cell[BoxData[
 RowBox[{"IGTakeLower", "[", "mat", 
  "]"}]], "Input",ExpressionUUID->"1a644d60-c669-44b9-a96f-3c2268758be3"],

Cell[TextData[{
 Cell[BoxData[
 "IGTakeUpper"],ExpressionUUID->"ffb64e71-5641-4cc8-83c3-a6b907df2f50"],
 " and ",
 Cell[BoxData[
 "IGTakeLower"],ExpressionUUID->"05ffdf89-ec04-4f96-869f-b8be1b4c11a2"],
 " support sparse matrices. When given a sparse array as input, the result \
will also be a sparse array."
}], "Text",ExpressionUUID->"7055c950-1c87-44e0-8477-6325ba5df49b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"sa", "=", 
   RowBox[{"SparseArray", "[", 
    RowBox[{
     RowBox[{"RandomInteger", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "6"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"10", ",", "2"}], "}"}]}], "]"}], "\[Rule]", 
     RowBox[{"RandomInteger", "[", 
      RowBox[{"10", ",", "10"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", "sa", 
  "]"}]}], "Input",ExpressionUUID->"c6443c23-b2b0-48d1-827d-a23beb18181d"],

Cell[BoxData[
 RowBox[{"IGTakeUpper", "[", "sa", 
  "]"}]], "Input",ExpressionUUID->"d5cbac74-baf4-4cea-a890-1e9425b638dd"],

Cell[BoxData[
 RowBox[{"Normal", "[", "%", 
  "]"}]], "Input",ExpressionUUID->"b5a80ec5-6bf5-4210-9d60-554e63e8efc1"],

Cell[TextData[{
 Cell[BoxData[
 "IGTakeUpper"],ExpressionUUID->"03ddbad0-77de-4251-bac9-658692bfb0a0"],
 " and ",
 Cell[BoxData[
 "IGTakeLower"],ExpressionUUID->"659ae852-13ef-409e-8c2e-92aebee1a9e7"],
 " are optimized for performance."
}], "Text",ExpressionUUID->"02811039-c1de-4bc3-be0c-8587315f4a81"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mat", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{"1000", ",", "1000"}], "}"}]}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"7131b940-755d-41f3-be19-b17f484c999f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IGTakeUpper", "[", "mat", "]"}], ";"}], "//", 
  "RepeatedTiming"}]], \
"Input",ExpressionUUID->"88d38bdf-fbae-475a-b4dc-aad1209ca619"],

Cell["Compute the mean pairwise distance of a random point set.", \
"Text",ExpressionUUID->"ff47a3d4-0684-4b1a-b30f-d4ff0eed47b8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pts", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{"100", ",", "2"}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{"Mean", "@", 
  RowBox[{"IGTakeUpper", "@", 
   RowBox[{
   "DistanceMatrix", "[", "pts", 
    "]"}]}]}]}], \
"Input",ExpressionUUID->"f335c6c0-e543-49ea-bd3d-e5aa5ab4543b"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Import and export", \
"Section",ExpressionUUID->"6b9020ef-f404-441e-bbc5-4d72cffdd136"],

Cell["\<\
IGraph/M provides importers and exporters for certain graph formats.\
\>", "Text",ExpressionUUID->"a6f22f3a-286b-4325-b582-64605b4bc71e"],

Cell[CellGroupData[{

Cell["Importing", \
"Subsection",ExpressionUUID->"2476a9bb-9415-43fc-97ce-67fe1b331889"],

Cell[BoxData[
 RowBox[{"?", 
  "IGImport"}]], \
"Input",ExpressionUUID->"373a5e0d-7c9d-40ec-8853-9711b49e423c"],

Cell[BoxData[
 RowBox[{"?", 
  "IGImportString"}]], \
"Input",ExpressionUUID->"0cfcdc5a-d691-4fc6-826a-7e1ba79c45ef"],

Cell[TextData[{
 "Importing is done using ",
 Cell[BoxData[
 "IGImport"],ExpressionUUID->"d88dd59c-af7b-4944-a44b-48b235733458"],
 " and ",
 Cell[BoxData[
 "IGImportString"],ExpressionUUID->"9a21cdc1-725e-41e4-9104-d51cda39e464"],
 ", which work analogously to the built-in ",
 Cell[BoxData[
 "Import"],ExpressionUUID->"f7b9e33b-9dcb-4e5a-a644-9bf0e90c948c"],
 " and ",
 Cell[BoxData[
 "ImportString"],ExpressionUUID->"894a08e8-9556-46e2-8da1-bb200a0814bd"],
 ". The supported export formats are listed in ",
 Cell[BoxData[
 "$IGImportFormats"],ExpressionUUID->"6089c336-f84e-40cb-9dcd-bdd16c6a3ba8"],
 ":"
}], "Text",ExpressionUUID->"f584a3de-6e90-4b84-8bb0-64ba23989607"],

Cell[BoxData["$IGImportFormats"], \
"Input",ExpressionUUID->"a2d86c7c-6959-49c1-a011-5e68a36989b4"],

Cell[CellGroupData[{

Cell["Nauty / Graph6", \
"Subsubsection",ExpressionUUID->"729fce94-9b4c-4fe1-9f43-b3d3bf10f6e5"],

Cell[TextData[{
 "The Graph6, Sparse6 and Digraph6 formats are used by the ",
 StyleBox["gtools", "Program"],
 " suite included with ",
 StyleBox["nauty", "Program"],
 ". IGraph/M refers to this family of formats collectively as the \
\[OpenCurlyDoubleQuote]Nauty formats\[CloseCurlyDoubleQuote]. ",
 StyleBox["gtools", "Program"],
 " includes many command line programs for generating, transforming and \
filtering graphs. For more information about ",
 StyleBox["gtools", "Program"],
 ", see ",
 ButtonBox["http://pallini.di.uniroma1.it/",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://pallini.di.uniroma1.it/"], None},
  ButtonNote->"http://pallini.di.uniroma1.it/"]
}], "Text",ExpressionUUID->"fbe238f7-de92-4b7d-ab47-901f202412e0"],

Cell[TextData[{
 "The formal description of these formats is available on the home page of \
Brendan McKay at ",
 ButtonBox["https://users.cecs.anu.edu.au/~bdm/data/formats.html",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://users.cecs.anu.edu.au/~bdm/data/formats.html"], None},
  ButtonNote->"https://users.cecs.anu.edu.au/~bdm/data/formats.html"],
 "."
}], "Text",ExpressionUUID->"de36d0b1-9ede-4900-9331-ed13db30f42a"],

Cell[TextData[{
 "As of version 12.1, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " has built-in support for Graph6 and Sparse6, but not for Digraph6. \
IGraph/M provides support Digraph6, a unified interface to all three formats \
(with auto-detection of the specific sub-format), as well as significantly \
better performance."
}], "Text",ExpressionUUID->"5ec51406-5e5e-46b5-95e9-5634841a4ba0"],

Cell[TextData[{
 "To convert a single string to a graph, use ",
 Cell[BoxData[
 "IGFromNauty"],ExpressionUUID->"a1906cbd-b6ee-406f-9b71-dea17a61ae6a"],
 "."
}], "Text",ExpressionUUID->"88e9dbd8-8407-49fd-bf35-baa40966a540"],

Cell[BoxData[
 RowBox[{"IGFromNauty", "[", "\"\<JR_IK?@?I?_\>\"", 
  "]"}]], "Input",ExpressionUUID->"fcc25c4b-1855-4343-9bd1-b92cd7e6a72b"],

Cell[TextData[{
 "The purpose of ",
 Cell[BoxData[
 "IGImport"],ExpressionUUID->"fd6036bf-a25e-496f-a82f-a489526c3de5"],
 " and ",
 Cell[BoxData[
 "IGImportString"],ExpressionUUID->"ce087a67-4e9a-47e8-9e52-a4026768cb8d"],
 " is to read lists containing several graphs."
}], "Text",ExpressionUUID->"5b6b013f-654d-4a90-8d16-246ae3ec67e1"],

Cell[BoxData[
 RowBox[{"IGImportString", "[", 
  RowBox[{
  "\"\<\nG]kq]K\nG]dq\\\\S\nG]Ku]W\nG[|akk\nGS\\\\unO\nG~`HW{\>\"", ",", 
   "\"\<Graph6\>\""}], 
  "]"}]], "Input",ExpressionUUID->"f00ad2f7-c9fa-4a0b-9c23-d9c1350c8f67"],

Cell[TextData[{
 "The following examples assume that the ",
 StyleBox["gtools", "Program"],
 " programs are in a directory that is on the operating system\
\[CloseCurlyQuote]s PATH environment variable. If necessary, specify the full \
path to each program."
}], "Text",ExpressionUUID->"6403a000-0143-4832-a590-0eaf5fdca8a5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"StringFreeQ", "[", 
     RowBox[{
      RowBox[{"Environment", "[", "\"\<PATH\>\"", "]"}], ",", 
      "\"\</opt/local/bin\>\""}], "]"}], ",", 
    RowBox[{"SetEnvironment", "[", 
     RowBox[{"\"\<PATH\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{"Environment", "[", "\"\<PATH\>\"", "]"}], "<>", 
       "\"\<:/opt/local/bin\>\""}]}], "]"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"$Line", "-=", "1"}], ";"}]}], "Input",
 CellTags->
  "DeleteCell",ExpressionUUID->"4f9ee458-5eef-4571-974a-55a465fdd9a2"],

Cell["Generate all non-isomorphic undirected graphs on 4 vertices.", \
"Text",ExpressionUUID->"8c770046-5c33-40b0-8093-bf466d08dffa"],

Cell[BoxData[
 RowBox[{"IGImport", "[", 
  RowBox[{"\"\<!geng 4\>\"", ",", "\"\<Nauty\>\""}], 
  "]"}]], "Input",ExpressionUUID->"42063e76-ff78-449e-83db-f51229016f41"],

Cell["Generate all non-isomorphic directed graphs on 3 vertices.", \
"Text",ExpressionUUID->"8a24090b-5eac-4711-9524-cfe61bd592f8"],

Cell[BoxData[
 RowBox[{"IGImport", "[", 
  RowBox[{"\"\<!geng 3 | directg\>\"", ",", "\"\<Graph6\>\"", ",", 
   RowBox[{"GraphLayout", "\[Rule]", "\"\<CircularEmbedding\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"8e6434ae-151a-4ac8-bafb-7667ddb10314"],

Cell[TextData[{
 "Find all non-isomorphic cactus graphs on 5 vertices. A cactus on ",
 Cell[BoxData[
  FormBox["V", TraditionalForm]],ExpressionUUID->
  "ae0d6ea0-3351-4428-8b3d-fd1bfc2e1d6d"],
 " vertices has between ",
 Cell[BoxData[
  FormBox[
   RowBox[{"V", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "211e8da9-bcc3-454a-aa9b-5e88acf4abe3"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"3", " ", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"V", "-", "1"}], ")"}], "/", "2"}]}], TraditionalForm]],
  ExpressionUUID->"0360130e-6b36-49ad-8479-9ca8f31cc793"],
 " edges. Thus we instruct the ",
 StyleBox["geng", "Program"],
 " program to only generate connected graphs with an edge count in this range."
}], "Text",ExpressionUUID->"595a18a7-42f8-474f-9549-c1d359c3f9f6"],

Cell[BoxData[
 RowBox[{"Select", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"IGImport", "[", 
    RowBox[{"\"\<!geng -c 5 4:6\>\"", ",", "\"\<Graph6\>\"", ",", 
     RowBox[{"GraphStyle", "\[Rule]", "\"\<Minimal\>\""}]}], "]"}], ",", 
   "\[IndentingNewLine]", "IGCactusQ"}], "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"98439335-de07-41d6-bfe2-9edd478f3844"],

Cell["Generate all strongly connected tournaments on 5 vertices.", \
"Text",ExpressionUUID->"ceff9333-01d9-4c51-b02c-0c82c197b9a0"],

Cell[BoxData[
 RowBox[{"IGImport", "[", 
  RowBox[{"\"\<!gentourng -c 5 -z\>\"", ",", "\"\<Graph6\>\""}], 
  "]"}]], "Input",ExpressionUUID->"3abc12eb-8174-4e76-9d36-23e5d75da8aa"],

Cell[TextData[{
 "Generate all non-isomorphic trees on 6 vertices. ",
 StyleBox["gengtreeg", "Program"],
 " outputs Sparse6 by default. ",
 Cell[BoxData[
 "IGImport"],ExpressionUUID->"63395520-c8c9-41a9-8440-5a73bf08d3b0"],
 " detects this format automatically."
}], "Text",ExpressionUUID->"0085e62d-7caf-40a0-b330-f53a16061d04"],

Cell[BoxData[
 RowBox[{"IGImport", "[", 
  RowBox[{"\"\<!gentreeg 6\>\"", ",", "\"\<Nauty\>\"", ",", 
   RowBox[{"GraphStyle", "\[Rule]", "\"\<WarmColor\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"c54d7cea-27fd-4844-9ec5-55e5305f2057"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Exporting", \
"Subsection",ExpressionUUID->"16385529-88e0-44c1-8ae8-44de6bcd9aa6"],

Cell[BoxData[
 RowBox[{"?", 
  "IGExport"}]], \
"Input",ExpressionUUID->"c7fbebb4-949e-4dfe-9f74-a2c93c83583a"],

Cell[BoxData[
 RowBox[{"?", 
  "IGExportString"}]], \
"Input",ExpressionUUID->"124e7dbd-40da-453b-b451-c04ace6d3666"],

Cell[TextData[{
 "Exporting is done using ",
 Cell[BoxData[
 "IGExport"],ExpressionUUID->"27278cc8-2011-4bbd-92f8-a96b54b78f39"],
 " and ",
 Cell[BoxData[
 "IGExportString"],ExpressionUUID->"85c93822-3a70-492a-9844-59a47c3c41e9"],
 ", which work analogously to the built-in ",
 Cell[BoxData[
 "Export"],ExpressionUUID->"bebc161e-a882-4bce-93a6-dcf39b6fe061"],
 " and ",
 Cell[BoxData[
 "ExportString"],ExpressionUUID->"df7e86da-a13d-44ce-964b-fc0b811dc16f"],
 ". The supported export formats are listed in ",
 Cell[BoxData[
 "$IGExportFormats"],ExpressionUUID->"d01a22aa-1412-4c72-9b5d-f0a01648dfe3"],
 ":"
}], "Text",ExpressionUUID->"1ff01476-5262-4e40-8aa0-574b44524b66"],

Cell[BoxData["$IGExportFormats"], \
"Input",ExpressionUUID->"1fa19489-a270-4f1f-b5fa-4c5a36d3a3c5"],

Cell[CellGroupData[{

Cell["GraphML", \
"Subsubsection",ExpressionUUID->"524e6974-8e0c-4f4d-8bef-d9f7cd9f4bd9"],

Cell[TextData[{
 "As of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " 12.1, the built-in ",
 Cell[BoxData[
 "Export"],ExpressionUUID->"84251994-5727-4b54-b0f1-f4de95b0f5d2"],
 " function produces non-standard GraphML files that cannot be read by some \
other graph manipulation packages, such as the igraph library itself. ",
 Cell[BoxData[
 "IGExport"],ExpressionUUID->"e6b1f313-b264-499c-af67-cfc9c6184bec"],
 " provides a standards-compliant implementation."
}], "Text",ExpressionUUID->"9a15030c-6ebb-4d30-a3b0-c4c3c8203a9e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGExportString", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ExampleData", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<NetworkGraph\>\"", ",", "\"\<EurovisionVotes\>\""}], "}"}],
      "]"}], ",", "\[IndentingNewLine]", "\"\<GraphML\>\""}], 
   "\[IndentingNewLine]", "]"}], "//", 
  RowBox[{
   RowBox[{"Short", "[", 
    RowBox[{"#", ",", "15"}], "]"}], "&"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "avoid", " ", "showing", " ", "more", " ", "than", " ", "15", " ", 
    "lines"}], " ", 
   "*)"}]}]], "Input",ExpressionUUID->"9127ab6f-c4f0-4e4c-8086-bbb412a1b452"]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Utility functions", \
"Section",ExpressionUUID->"b5613f0a-130a-4334-8b86-7c2b76774992"],

Cell[CellGroupData[{

Cell["Structural transformations", \
"Subsection",ExpressionUUID->"74d9372a-31b7-4a6d-bece-ba18f852aec6"],

Cell[CellGroupData[{

Cell["IGUndirectedGraph", \
"Subsubsection",ExpressionUUID->"9cb306fe-79f9-4046-b33c-a4bba4954cde"],

Cell[BoxData[
 RowBox[{"?", 
  "IGUndirectedGraph"}]], \
"Input",ExpressionUUID->"42e5e9f9-a9d9-4608-bb2f-cec1da801a13"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGUndirectedGraph", "[", 
   RowBox[{"g", ",", " ", "method"}], "]"}]],ExpressionUUID->
  "92fd8f6f-2692-400f-a547-14f08d5b35cf"],
 " converts a directed graph to an undirected one, using the specified edge \
conversion method:"
}], "Text",ExpressionUUID->"61c46d23-a45e-4869-8114-5cccac3dd32b"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<Simple\>\""],ExpressionUUID->"dc461d65-a0ef-4ade-a015-961a4fe79979"],
 " creates a single undirected edge between connected vertices"
}], "Item",ExpressionUUID->"5e2e7b54-ffe6-4b43-ae4e-df70f1a68c67"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<All\>\""],ExpressionUUID->"d002f51c-861a-46f4-a6cf-443a967da499"],
 " creates one undirected edge for each directed one. This may result in \
multiple edges between the same vertices."
}], "Item",ExpressionUUID->"1913dd40-9f8c-476a-9f63-7b9573195c63"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<Mutual\>\""],ExpressionUUID->"302db566-6b0a-4326-b73a-d360b866f603"],
 " creates an edge only between mutually connected vertices."
}], "Item",ExpressionUUID->"0867c744-bc6c-4aa4-be01-5fe7b81c902a"],

Cell["If the graph was already undirected, it will not be changed.", \
"Text",ExpressionUUID->"fedcd822-b9cf-48ba-81df-8c381399ef4d"],

Cell[TextData[{
 Cell[BoxData[
 "IGUndirectedGraph"],ExpressionUUID->
  "ed357660-a207-42e8-9535-fda8753a2e52"],
 " is guaranteed to preserve both the vertex names and the vertex ordering of \
the original graph. The built-in ",
 Cell[BoxData[
 "UndirectedGraph"],ExpressionUUID->"9136e6de-19d2-47d3-8df6-5676b2fef91f"],
 " has a bug where it sometimes relabels vertices."
}], "Text",ExpressionUUID->"6549c309-c7db-4f15-b1bf-739534617674"],

Cell[TextData[{
 StyleBox["Warning: ",
  FontWeight->"Bold"],
 "As of IGraph/M 0.5, ",
 Cell[BoxData[
 "IGUndirectedGraph"],ExpressionUUID->
  "d353f84e-8b74-41e9-8f8a-19ecceb6b723"],
 " discards graph properties such as edge weights."
}], "Text",ExpressionUUID->"6f010a5e-1cf3-4196-98c9-9f63f4b683b8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3}, {{{1, 2}, {2, 1}, {2, 3}, {3, 1}}, Null}, {
        ImageSize -> Small}]]}, 
      TagBox[GraphicsGroupBox[GraphicsComplexBox[CompressedData["
1:eJwBQQK+/SFib1JlAgAAACMAAAACAAAAtUEeyZLN3z8AAAAAAAAAAD6QoaXy
/+8/wpQs9uSn6z8AAAAAAAAAAGQllAb6xOs/WKBo6VSU4D/aUN37miC8Pw4q
noCuxeA/3EKnq1OawT9HofFN3QHhP9C8hAvQGcU/PjZOr71I4T/cKzFqsIzI
P/iSwK0lmuE/gX6UC+rwyz/Bjk8W5fXhP4ngVOB6RM8/iNuFlsVb4j9xIRpb
tULRPzrHm9yKy+I/4GhLMebY0j/G82/DATzpP7y86kdofOQ/4DIComm16T9o
buXo5EHlP8OOQDcsOOo/dyQe0lAB5j/sRH0X/MPqP/qvRq06uuY/AOQDe4ZY
6z9+kYH+NGznP8yCHG9z9es/RMA0ZdYW6D80TB4KZprsP4wCbtq5ueg/Noty
ovxG7T/a5bPsflTpP8MQyCBnUu8/p+qwltEj6D8Mh5KJDSHvPwzEQgtQQec/
1A8/vN7k7j+PZUvzcGHmP9x64lr+ne4/y0mg27iE5T8jHnBclkzuPyJ1R3Oq
q+Q/WCLh89bw7T+gXBc+xtbjP5LVqnP2iu0/CoSfSIoG4z/g6ZQtMRvtP1Pg
ht1xO+I/VL3ARrqq5j8gYAe58q3MPzp+LmhSMeY/apkcNQCYyT9WIvDSj67l
PzDBOZBQmsY/Lmyz8r8i5T8kk5cjqbbDPxrNLI81juQ/Fg2s3r/uwD9OLhSb
SPHjP/Sjvod0iLw/52QSAFZM4z+8kfTdWHG3P+Qlvme/n+I/THfFSzCbsj8s
Kh2M
         "], {
          {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
           ArrowBox[BezierCurveBox[{
            1, {0.6063408377933767, 0.5148479015247521}, 2}], 
            0.01272991894543915], 
           ArrowBox[BezierCurveBox[{
            2, {0.8905749984480941, 0.3493970180697965}, 1}], 
            0.01272991894543915], ArrowBox[{2, 3}, 0.01272991894543915], 
           ArrowBox[{3, 1}, 0.01272991894543915]}, 
          {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
           DiskBox[1, 0.01272991894543915], DiskBox[2, 0.01272991894543915], 
           DiskBox[3, 0.01272991894543915]}}]],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{95.8359375, Automatic}]}], 
  ";"}]], "Input",ExpressionUUID->"5bd3ebd2-17db-49f8-a590-16496a060629"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IGUndirectedGraph", "[", 
    RowBox[{"g", ",", "#"}], "]"}], "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{"\"\<Simple\>\"", ",", "\"\<All\>\"", ",", "\"\<Mutual\>\""}], 
   "}"}]}]], "Input",ExpressionUUID->"0070beb4-0cad-4174-af3d-3def038ceb6e"],

Cell[TextData[{
 "The default method is ",
 Cell[BoxData[
 "\"\<Simple\>\""],ExpressionUUID->"64bff496-8420-4096-98f6-65f660a5423d"],
 ":"
}], "Text",ExpressionUUID->"9e2b7b74-318c-4f86-9cb0-1b0c89ea68c5"],

Cell[BoxData[
 RowBox[{"IGUndirectedGraph", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"4d2d92eb-76d7-4eff-986f-ef3544474a2f"],

Cell["Self-loops are preserved by all methods:", \
"Text",ExpressionUUID->"10f89f74-8533-4367-90bb-1dee2fd8b5cf"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IGUndirectedGraph", "[", 
    RowBox[{
     RowBox[{"Graph", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "1"}], ",", 
         RowBox[{"1", "\[Rule]", "2"}]}], "}"}]}], "]"}], ",", "#"}], "]"}], 
   "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{"\"\<Simple\>\"", ",", "\"\<All\>\"", ",", "\"\<Mutual\>\""}], 
   "}"}]}]], "Input",ExpressionUUID->"fc48c97c-37ee-4782-ac99-b232ff88f04e"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGReverseGraph", \
"Subsubsection",ExpressionUUID->"ddb8ec87-753e-424e-a5ce-2fc46ca292a7"],

Cell[BoxData[
 RowBox[{"?", 
  "IGReverseGraph"}]], \
"Input",ExpressionUUID->"ca4eda31-ef97-4fbd-8224-1da0c379161d"],

Cell[TextData[{
 "In ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " 11.3 and earlier, ",
 Cell[BoxData[
 "ReverseGraph"],ExpressionUUID->"051ea7ee-ff84-4551-8f1f-93e465df9e9c"],
 " does not correctly transfer graph properties such as edge weights to the \
result."
}], "Text",ExpressionUUID->"aa2b86e2-0183-4464-aaa3-9cbda194c227"],

Cell[TextData[{
 Cell[BoxData[
 "IGReverseGraph"],ExpressionUUID->"d88f6d6c-25d6-44ca-9c69-afc266d5a03d"],
 " reverses the direction of each edge while preserving the following graph \
properties: ",
 Cell[BoxData[
 "EdgeWeight"],ExpressionUUID->"2895d96e-42c2-456b-a025-82740b2edb84"],
 ", ",
 Cell[BoxData[
 "EdgeCapacity"],ExpressionUUID->"b90ce0c6-6e75-4a0c-892c-2ec440998c72"],
 ", ",
 Cell[BoxData[
 "EdgeCost"],ExpressionUUID->"f8bd2aba-7c73-4945-be20-313c0b6dd4da"],
 ", ",
 Cell[BoxData[
 "VertexWeight"],ExpressionUUID->"8f9b7cbe-3564-4fa8-9838-c0e2a8500619"],
 ", ",
 Cell[BoxData[
 "VertexCapacity"],ExpressionUUID->"23e87aca-5119-4aa4-830f-650a1b44b70b"],
 ". Other properties are discarded."
}], "Text",ExpressionUUID->"18f4940c-d719-42c5-864e-31ff1ee5c983"],

Cell["Undirected graphs are returned unmodified.", \
"Text",ExpressionUUID->"394a49c3-4e4c-47c4-b5dd-b054de078489"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGSimpleGraph", \
"Subsubsection",ExpressionUUID->"51012f3f-d142-4111-9314-30ba96152024"],

Cell[BoxData[
 RowBox[{"?", 
  "IGSimpleGraph"}]], \
"Input",ExpressionUUID->"e7108151-4b06-43ac-ba4b-025807cd4fee"],

Cell[TextData[{
 Cell[BoxData[
 "IGSimpleGraph"],ExpressionUUID->"1b952653-9fe6-40b9-abc6-58661eae3a5a"],
 " removes self-loops and collapses multi-edges into simple ones, as \
specified in the options."
}], "Text",ExpressionUUID->"c567f88a-8777-47cb-bb7f-583bd10c365a"],

Cell["The available options are:", \
"Text",ExpressionUUID->"bf5fe99f-a441-4197-b55e-033dfaa8311c"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"SelfLoops", "\[Rule]", "True"}]],ExpressionUUID->
  "f2df03bd-7b7d-4d6a-8eec-96a267118054"],
 " keeps self-loops in the graph."
}], "Item",ExpressionUUID->"36c21515-bb7c-468e-b7d0-b70970d583e2"],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"MultiEdges", "\[Rule]", "True"}]],ExpressionUUID->
  "3bc76cc3-d4f0-443c-bd64-bd2b28330c4d"],
 " keeps parallel edges in the graph."
}], "Item",ExpressionUUID->"563c984a-50fa-4425-9b9b-3287e571c34b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IGSimpleGraph", "[", 
    RowBox[{
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{1, 2}, {{{1, 2}, {2, 1}, {1, 2}, {1, 1}}, Null}]]}, 
        TagBox[GraphicsGroupBox[GraphicsComplexBox[CompressedData["
1:eJxV0F9IU1EcB/CLBfNlOhYpmEWx0GIQa0X+ae07KzIiyppUW0kqFa2MoB4U
LMy5okJcEESi9VI+WlLEpGi/TZJtFJUlbQ2WWpalKddZhoQr9fzuwz1wufdw
7jnn+/muqj67/3iaJElFc8/8WwwZkmrIpHx9cBYcaZxbn4qUmu1LL+FEx+Ks
jsMyNry3N9wZ6cEaa7LGZ59E8Z/Hu+L3+9BYd/Pcu/4kot9ztt8+HcP1DHLo
A78QH/eUfrEksKi+pCdzYhrhMy2B108G0HTQFEs3z2A2o9Vy694AVpdvrayr
+Iua9QeGHmoSSF4sn3m7bRYru1OuB9kxDJlDU5n+FFBSu+R3YR9ie60Vnzr/
Ydnm1EnjZFBx2NKye5uvufotcV5/VbywTsO8P0fsp2k+P+VbOJ/W8v1l4n66
yvm+iXyUzvl9Ij+1sO+N8FET+18KPxm5n02iH1L6M4j+SOk3KfqlHXmerLtb
fkAXdubrxx/RhXXu+vOeEdhqn4aiVT5y+hpc8ouvsHUaxtqNz8huzo8ul4ZR
6Q5VG3b6SdOsH9QUfEZ445VIxBmg0T3avOenBnHoxrFea1GQdI6uqvbCBLqc
3omf/iB5W+fHR8j7uldcHgtSm5iTMs8V/5PyvyzOI+U8rbiPlPscIg+VcZ6j
Ii+ZOK9beMjEnt3CSxJ72U/sB/uJ/WA/sR/sJ/ZDo86DUXVe6NQeeNVetKn7
QK66L8jqPqFV9w32g/1gP9gP9oP9YD/Yj/+cWMiL
           "], {
            {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
             ArrowBox[BezierCurveBox[{1, 6, 9, 11, 17, 19, 22, 1},
              SplineDegree->7], 0.02261146496815286], 
             ArrowBox[BezierCurveBox[{1, {0., -0.32888149436623376`}, 2}], 
              0.02261146496815286], ArrowBox[{1, 2}, 0.02261146496815286], 
             ArrowBox[BezierCurveBox[{2, {0., 0.32888149436623376`}, 1}], 
              0.02261146496815286]}, 
            {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
             DiskBox[1, 0.02261146496815286], 
             DiskBox[2, 0.02261146496815286]}}]],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->{
       "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
        Hue[0.8, 1., 0.6]},
      FormatType->TraditionalForm,
      FrameTicks->None], ",", 
     RowBox[{"SelfLoops", "\[Rule]", "#1"}], ",", 
     RowBox[{"MultiEdges", "\[Rule]", "#2"}]}], "]"}], "&"}], "@@@", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"True", ",", "True"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"True", ",", "False"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"False", ",", "True"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"False", ",", "False"}], "}"}]}], 
   "}"}]}]], "Input",ExpressionUUID->"a157bd10-2fc1-4657-b049-f225e5e63f16"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["IGDisjointUnion", \
"Subsubsection",ExpressionUUID->"f57ccfe6-2346-46ab-b2d0-b800dc5b168e"],

Cell[BoxData[
 RowBox[{"?", 
  "IGDisjointUnion"}]], \
"Input",ExpressionUUID->"5266d474-167a-4bea-be7e-ef9a8b71ca67"],

Cell[TextData[{
 Cell[BoxData[
 "IGDisjointUnion"],ExpressionUUID->"70f8da41-e728-4aa3-94ed-ec6b7f72399a"],
 " will combine the given graphs into a single graph having them as its \
connected components."
}], "Text",ExpressionUUID->"36819c80-03a7-42fe-8eb4-7c290a7eb9c4"],

Cell[TextData[{
 Cell[BoxData[
 "IGDisjointUnion"],ExpressionUUID->"c4dcb43a-d1a9-42d3-bf1c-4a63a3e19da1"],
 " differs from the built-in ",
 Cell[BoxData[
 "GraphDisjointUnion"],ExpressionUUID->"4198a3d2-1f94-43a9-8449-224a8cd2f117"],
 " in several ways."
}], "Text",ExpressionUUID->"6d13e92d-bd8a-422a-b9c2-7417db7ea56d"],

Cell[TextData[{
 Cell[BoxData[
 "IGDisjointUnion"],ExpressionUUID->"ab0e7787-83c7-4a7f-bbb8-8a996f5746b8"],
 " takes the input graphs in a list instead of as separate arguments. It can \
also take graph options to apply to the final graph."
}], "Text",ExpressionUUID->"fb665a96-7cde-4a11-b49a-da8a63e35078"],

Cell[BoxData[
 RowBox[{"IGDisjointUnion", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"TuranGraph", "[", 
      RowBox[{"8", ",", "2"}], "]"}], ",", 
     RowBox[{"TuranGraph", "[", 
      RowBox[{"6", ",", "3"}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"EdgeStyle", "\[Rule]", "Black"}], ",", 
   RowBox[{"VertexStyle", "\[Rule]", 
    RowBox[{"Directive", "[", 
     RowBox[{
      RowBox[{"FaceForm", "[", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[0.254906, 0.411802, 0.882397], 
             RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           
           FrameStyle->RGBColor[
            0.16993733333333336`, 0.2745346666666667, 0.5882646666666667],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"0.254906`", ",", "0.411802`", ",", "0.882397`"}], "]"}],
            NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = 
             RGBColor[0.254906, 0.411802, 0.882397]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[0.254906, 0.411802, 0.882397],
        Editable->False,
        Selectable->False], "]"}], ",", 
      RowBox[{"EdgeForm", "@", 
       RowBox[{"Directive", "[", 
        RowBox[{"Thick", ",", 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[1], Opacity[1], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             DefaultBaseStyle->"ColorSwatchGraphics",
             Frame->True,
             FrameStyle->GrayLevel[0.6666666666666666, 1.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 
                1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}],
             PlotRangePadding->None],
            StyleBox[
             RowBox[{"GrayLevel", "[", 
               RowBox[{"1", ",", "1"}], "]"}], NumberMarks -> False]],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[1]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[1, 1],
          Editable->False,
          Selectable->False]}], "]"}]}]}], "]"}]}], ",", 
   RowBox[{"VertexSize", "\[Rule]", "Medium"}]}], 
  "]"}]], "Input",ExpressionUUID->"fb629a59-81dd-48a6-8325-2c499537de5c"],

Cell[TextData[{
 Cell[BoxData[
 "IGDisjointUnion"],ExpressionUUID->"fa0a7437-7d54-4cbd-b88d-7a65d6c18f2a"],
 " is considerably faster than ",
 Cell[BoxData[
 "GraphDisjointUnion"],ExpressionUUID->"1cf5bd73-d764-437b-9dcd-cd88710e0eb1"],
 " when combining moderately sized networks."
}], "Text",ExpressionUUID->"08c08193-ae31-4269-ab39-28b94fd3f4ce"],

Cell[BoxData[
 RowBox[{
  RowBox[{"graphs", "=", 
   RowBox[{"RandomGraph", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"300", ",", "600"}], "}"}], ",", "30"}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"884aee04-ff7e-4a60-b0b5-f98cda12d855"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IGDisjointUnion", "[", "graphs", "]"}], ";"}], "//", 
  "RepeatedTiming"}]], \
"Input",ExpressionUUID->"ebebf4e4-a608-4641-9511-9be5616f1ef8"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GraphDisjointUnion", "@@", "graphs"}], ";"}], "//", 
  "RepeatedTiming"}]], \
"Input",ExpressionUUID->"a6cd5224-2d70-4752-a91a-8644fd421ad3"],

Cell[TextData[{
 Cell[BoxData[
 "IGDisjointUnion"],ExpressionUUID->"df724291-5cd4-40b1-a004-41b4a424022c"],
 " does not support mixed graphs."
}], "Text",ExpressionUUID->"a03dca01-894a-4e39-9bfd-381884175c26"],

Cell[BoxData[
 RowBox[{"IGDisjointUnion", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Graph", "[", 
     RowBox[{"{", 
      RowBox[{"1", "\[UndirectedEdge]", "2"}], "}"}], "]"}], ",", 
    RowBox[{"Graph", "[", 
     RowBox[{"{", 
      RowBox[{"1", "\[DirectedEdge]", "2"}], "}"}], "]"}]}], "}"}], 
  "]"}]], "Input",ExpressionUUID->"0d2e5029-bdac-4e40-84c8-1820d3268a34"],

Cell[TextData[{
 "Use ",
 Cell[BoxData[
 "GraphDisjointUnion"],ExpressionUUID->"a7ca5ed2-bb4b-4a2b-a900-c8d1abd29fdd"],
 " instead."
}], "Text",ExpressionUUID->"3aacbb6e-526a-4335-acec-ca50c270e6a9"],

Cell[BoxData[
 RowBox[{"GraphDisjointUnion", "[", 
  RowBox[{
   RowBox[{"Graph", "[", 
    RowBox[{"{", 
     RowBox[{"1", "\[UndirectedEdge]", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Graph", "[", 
    RowBox[{"{", 
     RowBox[{"1", "\[DirectedEdge]", "2"}], "}"}], "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"772f7d04-315d-4581-9c30-ae6f76428940"],

Cell[TextData[{
 Cell[BoxData[
 "IGDisjointUnion"],ExpressionUUID->"dfedaae0-0bb2-4569-989b-7cb83c0cf094"],
 " will use vertex names of the form ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"gi", ",", "v"}], "}"}]],ExpressionUUID->
  "90b05af4-4446-4d00-be64-1d670333a76d"],
 ", where ",
 Cell[BoxData["gi"],ExpressionUUID->"b242565e-6bc2-48ad-9c4e-b9828a91279f"],
 " is an identifier of the original graph and ",
 Cell[BoxData["v"],ExpressionUUID->"19652805-aace-4f02-b594-c301bbb5b135"],
 " is the original name of the vertex. When the input is a list ",
 Cell[BoxData["gi"],ExpressionUUID->"54188141-5963-4bbf-b9ec-e75b030af6ab"],
 " is the index of the original graph. When the input is an association, ",
 Cell[BoxData["gi"],ExpressionUUID->"0d90ff40-4de5-410e-94b9-c98874fce37d"],
 " is its key."
}], "Text",ExpressionUUID->"df36d506-58e1-4c16-bea5-883a82d20e0e"],

Cell[TextData[{
 "In contrast, ",
 Cell[BoxData[
 "GraphDisjointUnion"],ExpressionUUID->"beee09d8-4825-4e80-9ae7-5c10e94159c6"],
 " uses consecutive integers as vertex names. Use ",
 Cell[BoxData[
 "IndexGraph"],ExpressionUUID->"c7a08760-c619-4299-9446-7b97a1453914"],
 " to obtain a similar result from the output of ",
 Cell[BoxData[
 "IGDisjointUnion"],ExpressionUUID->"caba086c-f178-4c21-888d-18a56adf125f"],
 "."
}], "Text",ExpressionUUID->"2cca3131-7b99-42bf-88f3-0f0f3477b108"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"IGDisjointUnion", "[", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<a\>\"", "\[Rule]", 
       RowBox[{"CycleGraph", "[", "4", "]"}]}], ",", 
      RowBox[{"\"\<b\>\"", "\[Rule]", 
       RowBox[{"StarGraph", "[", "4", "]"}]}]}], "|>"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"VertexList", "[", "g", 
  "]"}]}], "Input",ExpressionUUID->"97433d5b-9acc-48fe-a7d7-6bcbb8bdbcf6"],

Cell["\<\
This allows for convenient further manipulation, or for copying over \
arbitrary properties stored in the original graphs.\
\>", "Text",ExpressionUUID->"47ed1b51-c3f3-4d6b-8694-8455887ae2a8"],

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{"g", ",", 
   RowBox[{"VertexStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<a\>\"", ",", "_"}], "}"}], "\[Rule]", "Green"}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<b\>\"", ",", "_"}], "}"}], "\[Rule]", "Red"}]}], 
     "}"}]}]}], 
  "]"}]], "Input",ExpressionUUID->"1e65e89b-56f5-4270-b1b9-9afdd1d56f20"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"graphs", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Graph", "[", 
      RowBox[{"{", 
       RowBox[{"Property", "[", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "2"}], ",", 
         RowBox[{"\"\<length\>\"", "\[Rule]", "5"}]}], "]"}], "}"}], "]"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"Graph", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Property", "[", 
         RowBox[{
          RowBox[{"1", "\[Rule]", "2"}], ",", 
          RowBox[{"\"\<length\>\"", "\[Rule]", "3"}]}], "]"}], ",", 
        RowBox[{"Property", "[", 
         RowBox[{
          RowBox[{"3", "\[Rule]", "2"}], ",", 
          RowBox[{"\"\<length\>\"", "\[Rule]", "2"}]}], "]"}]}], "}"}], 
      "]"}]}], "\[IndentingNewLine]", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"IGDisjointUnion", "[", 
  RowBox[{"graphs", ",", "\[IndentingNewLine]", 
   RowBox[{"Properties", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"gi_", ",", "v1_"}], "}"}], "\[DirectedEdge]", 
       RowBox[{"{", 
        RowBox[{"gi_", ",", "v2_"}], "}"}]}], "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{"\"\<length\>\"", "\[Rule]", 
        RowBox[{"PropertyValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
            "graphs", "\[LeftDoubleBracket]", "gi", "\[RightDoubleBracket]"}],
             ",", 
            RowBox[{"v1", "\[DirectedEdge]", "v2"}]}], "}"}], ",", 
          "\"\<length\>\""}], "]"}]}], "}"}]}], "}"}]}]}], 
  "]"}]}], "Input",ExpressionUUID->"24929de6-d99b-4494-a860-99cb78f01283"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGEdgeProp", "[", "\"\<length\>\"", "]"}], "[", "%", 
  "]"}]], "Input",ExpressionUUID->"1a6f1ca3-1f92-4a7e-a4f4-2cf58645203a"],

Cell[TextData[{
 Cell[BoxData[
 "IGDisjointUnion"],ExpressionUUID->"51785f1e-bd9d-4ff5-9213-e80dff40bb71"],
 " is also practically useful for simply showing many small graphs together."
}], "Text",ExpressionUUID->"393d17c1-b987-4ed4-a4f8-ac0b0a3bc241"],

Cell[BoxData[
 RowBox[{"IGDisjointUnion", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{"IGGraphAtlas", "/@", 
      RowBox[{"Range", "[", 
       RowBox[{"2", ",", "150"}], "]"}]}], ",", "IGConnectedQ"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"GraphStyle", "\[Rule]", "\"\<BasicBlue\>\""}], ",", 
   RowBox[{"VertexSize", "\[Rule]", "1"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"4f8c56f8-6ee4-4a93-9e48-bbfd86c5eda1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"g", "=", 
    RowBox[{"IndexGraph", "[", "%", "]"}]}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "workaround", " ", "for", " ", "highlighting", " ", "in", " ", 
     "Mathematica"}], " ", "\[LessEqual]", " ", "11.2"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"HighlightGraph", "[", 
  RowBox[{
   RowBox[{"IGLayoutFruchtermanReingold", "[", "g", "]"}], ",", 
   RowBox[{"ConnectedGraphComponents", "[", "g", "]"}]}], 
  "]"}]}], "Input",ExpressionUUID->"7d5f417d-fe52-4b83-ac9e-dd30fca51fad"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGOrientTree", \
"Subsubsection",ExpressionUUID->"0086b28e-776e-4267-98ae-05a17bbdd2a8"],

Cell[BoxData[
 RowBox[{"?", 
  "IGOrientTree"}]], \
"Input",ExpressionUUID->"26225257-4799-468a-8370-d306780a1fc8"],

Cell[TextData[{
 Cell[BoxData[
 "IGOrientTree"],ExpressionUUID->"5f55d5d0-1835-4c79-8d5d-a487bb03488a"],
 " creates an out-tree (also called an arborescence) out of an undirected \
tree. Graph properties are preserved, but the vertex ordering of the graph is \
changed."
}], "Text",ExpressionUUID->"da316ce3-4f3b-44bd-a61d-2f1d57b568c1"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"KaryTree", "[", 
   RowBox[{"10", ",", "3", ",", 
    RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], 
   "]"}]}]], "Input",ExpressionUUID->"450436aa-8012-45bd-8467-b733ce6f0626"],

Cell[BoxData[
 RowBox[{"IGOrientTree", "[", 
  RowBox[{"g", ",", "1"}], 
  "]"}]], "Input",ExpressionUUID->"770af0f3-af2b-4e51-93f7-2c41df88b501"],

Cell[BoxData[
 RowBox[{"IGOrientTree", "[", 
  RowBox[{"g", ",", "5", ",", 
   RowBox[{"GraphLayout", "\[Rule]", "\"\<LayeredDigraphEmbedding\>\""}]}], 
  "]"}]], "Input",ExpressionUUID->"5e62b8aa-9ad0-411c-8a82-5c2c4c1719cc"],

Cell["The result is an out-tree, also called an arborescence.", \
"Text",ExpressionUUID->"f84553ff-224f-4253-8767-be03e24804ab"],

Cell[BoxData[
 RowBox[{"IGTreeQ", "[", 
  RowBox[{"%", ",", "\"\<Out\>\""}], 
  "]"}]], "Input",ExpressionUUID->"e05e411a-7f90-4e47-898a-b38171d09bad"],

Cell["\<\
Once the tree is made directed, it is easy to find its root and leaf nodes:\
\>", "Text",ExpressionUUID->"99a56dcd-48fa-49e6-bb8f-07e4e3107ff0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"IGSourceVertexList", "[", "%", "]"}], ",", 
   RowBox[{"IGSinkVertexList", "[", "%", "]"}]}], 
  "}"}]], "Input",ExpressionUUID->"44f690be-d8f7-46a2-a5d0-9f6b7edacd7d"],

Cell["Edges can be oriented towards or away from the root.", \
"Text",ExpressionUUID->"c89801f9-4aa0-4f23-a51d-4b236c8b3280"],

Cell[BoxData[
 RowBox[{"t", "=", 
  RowBox[{"IGTreeGame", "[", 
   RowBox[{"7", ",", 
    RowBox[{"VertexLabels", "\[Rule]", "Automatic"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"2b8ef0ea-ba83-4bbf-aa3c-a0e05eaaa8f8"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IGOrientTree", "[", 
    RowBox[{"t", ",", "4", ",", "#", ",", 
     RowBox[{"GraphLayout", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<LayeredEmbedding\>\"", ",", 
        RowBox[{"\"\<RootVertex\>\"", "\[Rule]", "4"}]}], "}"}]}]}], "]"}], 
   "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{"\"\<In\>\"", ",", "\"\<Out\>\""}], 
   "}"}]}]], "Input",ExpressionUUID->"19dbc51e-ce49-41cb-824a-1db53f03d810"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGTakeSubgraph", \
"Subsubsection",ExpressionUUID->"8d30e837-2e51-43ac-84b4-b69c08dc7249"],

Cell[BoxData[
 RowBox[{"?", 
  "IGTakeSubgraph"}]], \
"Input",ExpressionUUID->"813d8391-887d-4198-91d9-355620b64950"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGTakeSubgraph", "[", 
   RowBox[{"graph", ",", " ", "subgraph"}], "]"}]],ExpressionUUID->
  "f79a45e9-7d2f-4539-86cf-66a1e93fce9a"],
 " will effectively transfer graph properties of a larger graph onto its \
specified subgraph. It can be used in conjunction with other graph subsetting \
functions that do not retain some or all graph properties, such as ",
 Cell[BoxData[
 "Subgraph"],ExpressionUUID->"60beb570-6778-466c-a9a4-b97af4f71b93"],
 ", ",
 Cell[BoxData[
 "VertexDelete"],ExpressionUUID->"c4d0131d-c8b7-4784-b049-0855af9d3f8c"],
 ", ",
 Cell[BoxData[
 "NeighborhoodGraph"],ExpressionUUID->
  "a50e499d-a5ff-4d79-ac08-db144bd428a6"],
 ", etc."
}], "Text",ExpressionUUID->"930ed789-6355-4ce1-90ca-edc7f5aeb64f"],

Cell[TextData[{
 "If only the edge weights need to be preserved, use ",
 Cell[BoxData[
 "IGWeightedSubgraph"],ExpressionUUID->"d3035344-8da0-4afd-893d-ca852fbad436"],
 " when possible. It offers better performance."
}], "Text",ExpressionUUID->"727651f0-fd54-463a-bd4b-a3e24ddf24ae"],

Cell["\<\
Take a subgraph of a larger graph while preserving all graph properties, \
including styling attributes.\
\>", "Text",ExpressionUUID->"9869c202-fb3b-4136-aa68-d980175f344d"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"ExampleData", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<NetworkGraph\>\"", ",", "\"\<EastAfricaEmbassyAttacks\>\""}],
     "}"}], "]"}]}]], \
"Input",ExpressionUUID->"802bd7f9-ba47-4151-85ec-df20b2cc53e9"],

Cell[BoxData[
 RowBox[{"IGTakeSubgraph", "[", 
  RowBox[{"g", ",", 
   RowBox[{"Subgraph", "[", 
    RowBox[{"g", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Osama\>\"", ",", "\"\<Salim\>\"", ",", "\"\<Abdullah\>\"", ",", 
       "\"\<Hage\>\"", ",", "\"\<Abouhlaima\>\"", ",", "\"\<Owhali\>\""}], 
      "}"}]}], "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"e133ca61-09ec-4f77-9ae9-11955a607f88"],

Cell["\<\
Show the neighbourhood graph of a vertex while preserving vertex shapes.\
\>", "Text",ExpressionUUID->"90a7c2a0-a81a-4e75-b654-72416a829cc1"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"ExampleData", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<NetworkGraph\>\"", ",", "\"\<SimpleFoodWeb\>\""}], "}"}], 
   "]"}]}]], "Input",ExpressionUUID->"ae120b80-6e67-4889-8fc1-c92ec0b0f122"],

Cell[BoxData[
 RowBox[{"IGTakeSubgraph", "[", 
  RowBox[{"g", ",", 
   RowBox[{"NeighborhoodGraph", "[", 
    RowBox[{"g", ",", "\"\<Sunflower\>\""}], "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"ca6f026f-07f5-4e5e-ab03-55270888a8f9"],

Cell["\<\
Take a subgraph of a mesh graph while preserving vertex coordinates.\
\>", "Text",ExpressionUUID->"7e4f611b-a58f-489c-92d1-d52954d7bdee"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"IGMeshGraph", "[", 
   RowBox[{
    RowBox[{"DelaunayMesh", "@", 
     RowBox[{"RandomReal", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"10", ",", "2"}], "}"}]}], "]"}]}], ",", 
    RowBox[{"VertexLabels", "->", "\"\<Name\>\""}]}], 
   "]"}]}]], "Input",ExpressionUUID->"c6079883-e674-468d-8046-db2ed2fe4af1"],

Cell[BoxData[
 RowBox[{"IGTakeSubgraph", "[", 
  RowBox[{"g", ",", 
   RowBox[{"First", "@", 
    RowBox[{"FindHamiltonianCycle", "[", "g", "]"}]}]}], 
  "]"}]], "Input",ExpressionUUID->"308fc9f7-9968-475c-9842-8c1b493bd740"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Other utility functions", \
"Subsection",ExpressionUUID->"386f6d4b-3666-4959-8f2d-185c7480a101"],

Cell[CellGroupData[{

Cell["IGIndexEdgeList", \
"Subsubsection",ExpressionUUID->"7657e1e7-20c1-4a19-8605-bce7ce61b4a0"],

Cell[BoxData[
 RowBox[{"?", 
  "IGIndexEdgeList"}]], \
"Input",ExpressionUUID->"ee32e0b0-63de-4bec-8126-338c0ff55409"],

Cell[TextData[{
 Cell[BoxData[
 "IGIndexEdgeList"],ExpressionUUID->"1010ecf8-e997-4a09-bfb1-941d967b9de8"],
 " is useful for implementing graph processing functions in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", and is used internally by many IGraph/M functions that do not call the \
igraph library."
}], "Text",ExpressionUUID->"5e1acc8c-4d50-4092-bfab-f9adf39353ba"],

Cell[BoxData[
 RowBox[{"IGIndexEdgeList", "[", 
  RowBox[{"Graph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"b", "\[UndirectedEdge]", "c"}], ",", 
      RowBox[{"c", "\[UndirectedEdge]", "a"}]}], "}"}]}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"507d8a01-4215-43b1-bb68-a9553c78f41e"],

Cell[BoxData[
 RowBox[{"Developer`PackedArrayQ", "[", "%", 
  "]"}]], "Input",ExpressionUUID->"a6b622f2-4287-4b3a-83df-5686ba88693c"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGIndexEdgeList", "[", "g", "]"}]],ExpressionUUID->
  "4128b9e3-ca2e-4466-bf5d-3fec03e078c4"],
 " is faster than ",
 Cell[BoxData[
  RowBox[{"EdgeList", "[", "g", "]"}]],ExpressionUUID->
  "c5adee88-06a8-41ee-927c-78f2372712dc"],
 " and usually much faster than ",
 Cell[BoxData[
  RowBox[{"EdgeList", "@", 
   RowBox[{"IndexGraph", "[", "g", "]"}]}]],ExpressionUUID->
  "c844721e-c63a-4222-bd07-b22a2c97d3ed"],
 "."
}], "Text",ExpressionUUID->"245b09f1-9838-4f2d-ad88-158692969dd9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{"{", 
     RowBox[{
     "\"\<NetworkGraph\>\"", ",", "\"\<CondensedMatterCollaborations\>\""}], 
     "}"}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"ca686779-40a9-4045-bac5-b7a9712be388"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"First", "@", 
    RowBox[{"RepeatedTiming", "@", 
     RowBox[{"EdgeList", "[", "g", "]"}]}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"First", "@", 
    RowBox[{"RepeatedTiming", "@", 
     RowBox[{"EdgeList", "@", 
      RowBox[{"IndexGraph", "[", "g", "]"}]}]}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"First", "@", 
    RowBox[{"RepeatedTiming", "@", 
     RowBox[{"IGIndexEdgeList", "[", "g", "]"}]}]}]}], 
  "}"}]], "Input",ExpressionUUID->"84e68dca-5390-4059-8cf7-c8a0525a5c14"],

Cell[BoxData[
 RowBox[{
  RowBox[{"List", "@@@", 
   RowBox[{"Sort", "/@", 
    RowBox[{"EdgeList", "@", 
     RowBox[{"IndexGraph", "[", "g", "]"}]}]}]}], "===", 
  RowBox[{"Sort", "/@", 
   RowBox[{
   "IGIndexEdgeList", "[", "g", 
    "]"}]}]}]], \
"Input",ExpressionUUID->"5261d84a-6802-4628-a1ab-81b0d4d7cf98"],

Cell["\<\
A graph can be directly re-built from an index-based edge list.\
\>", "Text",ExpressionUUID->"af437237-33f9-48a2-ae4e-c9206f07bf1d"],

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}]}], "}"}]}], 
  "]"}]], "Input",ExpressionUUID->"68a321da-3296-4be2-8552-4fcdd4514e0b"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGSameGraphQ", \
"Subsubsection",ExpressionUUID->"5c33020d-4c23-457f-a1b5-8b7272c0c409"],

Cell[BoxData[
 RowBox[{"?", 
  "IGSameGraphQ"}]], \
"Input",ExpressionUUID->"acd80dcb-d43a-49b1-879a-1bd0cc2f5dc0"],

Cell[TextData[{
 Cell[BoxData[
 "IGSameGraphQ"],ExpressionUUID->"e5b7459b-3498-49d2-bac2-58229f654e36"],
 " checks if two graphs have the same vertex and edge set. Edge and vertex \
properties, as well as edge tags, are ignored."
}], "Text",ExpressionUUID->"0fe47c3f-4c1e-4b1b-87a9-8e9e6344129b"],

Cell[BoxData[
 RowBox[{"IGSameGraphQ", "[", 
  RowBox[{
   RowBox[{"IGShorthand", "[", 
    RowBox[{"\"\<1-2-1\>\"", ",", 
     RowBox[{"MultiEdges", "\[Rule]", "True"}]}], "]"}], ",", 
   RowBox[{"Graph", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "\[UndirectedEdge]", "2"}], ",", 
      RowBox[{"1", "\[UndirectedEdge]", "2"}]}], "}"}], "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"a381197c-d48b-46de-8789-bf2d3107734a"],

Cell[TextData[{
 "The vertex names must be the same in order for ",
 Cell[BoxData[
 "IGSameGraphQ"],ExpressionUUID->"8e2f24c7-9060-43af-807c-0fa2114109da"],
 " to return ",
 Cell[BoxData[
 "True"],ExpressionUUID->"67c83010-668e-4a7e-8474-9b5483af8b8a"],
 "."
}], "Text",ExpressionUUID->"cf6f97d3-6138-428b-b98a-d099732be53a"],

Cell[BoxData[
 RowBox[{"IGSameGraphQ", "[", 
  RowBox[{
   RowBox[{"IGShorthand", "[", 
    RowBox[{"\"\<A-B-A\>\"", ",", 
     RowBox[{"MultiEdges", "\[Rule]", "True"}]}], "]"}], ",", 
   RowBox[{"Graph", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "\[UndirectedEdge]", "2"}], ",", 
      RowBox[{"1", "\[UndirectedEdge]", "2"}]}], "}"}], "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"a0798f1c-5270-477f-9962-3c20fe51a48e"],

Cell["The order of the edge and vertex lists does not matter.", \
"Text",ExpressionUUID->"86d09c57-891a-47e6-ad35-fb61b365a3af"],

Cell[BoxData[
 RowBox[{"IGSameGraphQ", "[", 
  RowBox[{
   RowBox[{"Graph", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "\[UndirectedEdge]", "2"}], ",", 
      RowBox[{"3", "\[UndirectedEdge]", "4"}]}], "}"}], "]"}], ",", 
   RowBox[{"Graph", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"4", "\[UndirectedEdge]", "3"}], ",", 
      RowBox[{"1", "\[UndirectedEdge]", "2"}]}], "}"}], "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"e15af62b-0c74-415e-8deb-f97f8391063b"],

Cell[TextData[{
 "For non-",
 Cell[BoxData["Graph"],ExpressionUUID->"9ed5fc58-5769-47de-bfec-849851754d40"],
 " expressions, ",
 Cell[BoxData[
 "IGSameGraphQ"],ExpressionUUID->"467771d4-c441-4b18-9f6c-a8f01e4abcd5"],
 " returns ",
 Cell[BoxData["False"],ExpressionUUID->"2a6473ea-64c8-42ee-aa36-79d401df0e61"],
 "."
}], "Text",ExpressionUUID->"729a6af8-942e-44d8-bba1-6b7524890455"],

Cell[BoxData[
 RowBox[{"IGSameGraphQ", "[", 
  RowBox[{"1", ",", "2"}], 
  "]"}]], "Input",ExpressionUUID->"34cfb9fe-8e96-4d1b-a274-32665e7f32f4"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGAdjacentVerticesQ", \
"Subsubsection",ExpressionUUID->"29e5da86-0834-4284-b6c6-b470fbddf218"],

Cell[BoxData[
 RowBox[{"?", 
  "IGAdjacentVerticesQ"}]], \
"Input",ExpressionUUID->"60eb2654-ef8c-46ab-bc7f-7ed775097eb2"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGAdjacentVerticesQ", "[", 
   RowBox[{"graph", ",", 
    RowBox[{"{", 
     RowBox[{"u", ",", "v"}], "}"}]}], "]"}]],ExpressionUUID->
  "68957f53-9003-49dd-9c2d-4897b833421d"],
 " tests if there is an edge from ",
 Cell[BoxData["u"],ExpressionUUID->"0aeb45f1-bd5b-461c-a414-00cb297c2dc3"],
 " to ",
 Cell[BoxData["v"],ExpressionUUID->"b1abbca4-166a-4a68-9e77-280e9dc76cb6"],
 "."
}], "Text",ExpressionUUID->"1db18897-8aea-4178-9adf-f9bae42d125e"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"CycleGraph", "[", 
   RowBox[{"6", ",", 
    RowBox[{"DirectedEdges", "\[Rule]", "True"}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], 
   "]"}]}]], "Input",ExpressionUUID->"bdda9092-0223-4051-92d7-af485fa937a0"],

Cell[BoxData[
 RowBox[{"IGAdjacentVerticesQ", "[", 
  RowBox[{"g", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}]}], 
  "]"}]], "Input",ExpressionUUID->"f941967c-2c7b-423d-b919-e492c0719814"],

Cell["Edge directions are taken into account:", \
"Text",ExpressionUUID->"e627824b-9972-4027-8365-bc429f845fd3"],

Cell[BoxData[
 RowBox[{"IGAdjacentVerticesQ", "[", 
  RowBox[{"g", ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1"}], "}"}]}], 
  "]"}]], "Input",ExpressionUUID->"22790fd5-f04f-4a82-a547-4703a3d4d297"],

Cell["The following vertices are not adjacent:", \
"Text",ExpressionUUID->"506dc5b1-8b7d-4f80-bb37-7c49ca52b2fc"],

Cell[BoxData[
 RowBox[{"IGAdjacentVerticesQ", "[", 
  RowBox[{"g", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}]}], 
  "]"}]], "Input",ExpressionUUID->"d09e2a28-db9b-49a1-9768-64f9c35904a8"],

Cell["\<\
Vertices that are not part of the graph are allowed. They are considered not \
to be adjacent:\
\>", "Text",ExpressionUUID->"6d42c996-059d-4d78-9031-ff00457ef10b"],

Cell[BoxData[
 RowBox[{"IGAdjacentVerticesQ", "[", 
  RowBox[{"g", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<x\>\"", ",", "2"}], "}"}]}], 
  "]"}]], "Input",ExpressionUUID->"a49ae813-0d48-48ea-8902-4f85888a5f58"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGPartitionsToMembership and IGMembershipToPartitions", \
"Subsubsection",ExpressionUUID->"649a4448-61ed-4ae2-94fb-5a6f28edd522"],

Cell[BoxData[
 RowBox[{"?", 
  "IGPartitionsToMembership"}]], \
"Input",ExpressionUUID->"7912a99c-771f-4af3-976c-4792c4525376"],

Cell[BoxData[
 RowBox[{"?", 
  "IGMembershipToPartitions"}]], \
"Input",ExpressionUUID->"7d793496-5cee-4a60-8544-1afd2ee334cf"],

Cell["\<\
A partitioning of a set of elements can be represented in multiple ways. One \
way is to list the members of each partition. Another is to annotate each \
element with the index of the partition it belongs to, i.e. construct a \
\[OpenCurlyDoubleQuote]membership vector\[CloseCurlyDoubleQuote]. These \
functions convert between these representations.\
\>", "Text",ExpressionUUID->"dedcf9a9-bda8-430c-88cc-a6ccc506cdd9"],

Cell["\<\
IGraph/M generally uses disjoint subsets to represents partitions. Membership \
vectors are useful when storing the membership information as vertex \
attributes, or when exchanging data with other interfaces of igraph.\
\>", "Text",ExpressionUUID->"53d731f4-5122-416b-b0e8-000448d735ce"],

Cell[BoxData[
 RowBox[{"IGPartitionsToMembership", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "c"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"d", ",", "b"}], "}"}]}], "}"}]}], 
  "]"}]], "Input",ExpressionUUID->"96dd9c4d-290e-44ba-bfbb-39f17c1dd682"],

Cell[BoxData[
 RowBox[{"IGMembershipToPartitions", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "1", ",", "2"}], "}"}]}], 
  "]"}]], "Input",ExpressionUUID->"f26a3159-8518-47f4-a69d-e3619dbb6aba"],

Cell[TextData[{
 "If the given partitions do not cover the element set, the missing elements \
will be marked with ",
 Cell[BoxData["0"],ExpressionUUID->"912bfa3d-7664-4f17-aadc-a9a5f3ce2376"],
 " in the membership vector."
}], "Text",ExpressionUUID->"e2e28e93-aa8a-4cca-9b00-ddbb50b60d7f"],

Cell[BoxData[
 RowBox[{"IGPartitionsToMembership", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "a", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"b", ",", "d"}], "}"}]}], "}"}]}], 
  "]"}]], "Input",ExpressionUUID->"f996f612-f5c3-4724-a137-d7c0779b14fc"],

Cell["\<\
The following graph has the type of nodes encoded as a vertex attribute.\
\>", "Text",ExpressionUUID->"d28a7819-00aa-4cf1-82bd-4a79af07ae6f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{"{", 
     RowBox[{
     "\"\<NetworkGraph\>\"", ",", "\"\<BipartiteDiseasomeNetwork\>\""}], 
     "}"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"IGVertexProp", "[", "\"\<Type\>\"", "]"}], "[", "g", "]"}], "//", 
  "Short"}]}], "Input",ExpressionUUID->"66bf5721-af64-416a-ba70-451d5f754679"],

Cell["\<\
Let us extract the attribute values as a vector and construct the two vertex \
partitions.\
\>", "Text",ExpressionUUID->"65b4814b-9438-4fc3-8bd1-de39aee7b7e4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"parts", "=", 
   RowBox[{"IGMembershipToPartitions", "[", 
    RowBox[{"g", ",", 
     RowBox[{
      RowBox[{"IGVertexProp", "[", "\"\<Type\>\"", "]"}], "[", "g", "]"}]}], 
    "]"}]}], ";"}]], \
"Input",ExpressionUUID->"c6818e7c-cd9d-4810-b3ad-455ed9bf4881"],

Cell["\<\
Verify that the graph is bipartite according to this partitioning.\
\>", "Text",ExpressionUUID->"06bf1dd8-bcf3-4aca-8b22-ea5714160335"],

Cell[BoxData[
 RowBox[{"IGBipartiteQ", "[", 
  RowBox[{"g", ",", "parts"}], 
  "]"}]], "Input",ExpressionUUID->"19b71e64-2d85-4909-9c7d-0dc29b7aaabb"],

Cell["\<\
Annotate the vertices of a bipartite graph with their computed membership \
value.\
\>", "Text",ExpressionUUID->"ff3e8522-c69c-4648-b52c-9ef09d32722e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"IGBipartiteGameGNM", "[", 
    RowBox[{"5", ",", "6", ",", "14", ",", 
     RowBox[{"VertexSize", "\[Rule]", "Large"}]}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"a31786f1-7d78-417f-8ee9-caddcebcf99d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"IGVertexMap", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"#", "&"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<membership\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{"IGPartitionsToMembership", "[", 
        RowBox[{"VertexList", "[", "g", "]"}], "]"}], "@*", 
       "IGBipartitePartitions"}]}], ",", "\[IndentingNewLine]", "g"}], 
    "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"67b0ddcf-edcc-4a22-9023-cec69ce0b172"],

Cell["Colour the vertices accordingly.", \
"Text",ExpressionUUID->"c75e7c87-575d-4297-b2b2-05b9085779c8"],

Cell[BoxData[
 RowBox[{"IGVertexMap", "[", 
  RowBox[{
   RowBox[{"ColorData", "[", "100", "]"}], ",", 
   RowBox[{"VertexStyle", "\[Rule]", 
    RowBox[{"IGVertexProp", "[", "\"\<membership\>\"", "]"}]}], ",", "g"}], 
  "]"}]], "Input",ExpressionUUID->"bb3888bc-83eb-4829-b381-b372c4c81ddd"],

Cell[TextData[{
 "Visualize a vertex colouring using ",
 Cell[BoxData[
 "HighlightGraph"],ExpressionUUID->"edb9c38d-9afe-4aaa-b1bd-2440d80542a7"],
 "."
}], "Text",ExpressionUUID->"44b18eaf-c1e6-4cdc-98df-97cb6f820dec"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"IGSquareLattice", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "2", ",", "2", ",", "2"}], "}"}], ",", 
    RowBox[{"\"\<Periodic\>\"", "\[Rule]", "True"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"551f673f-9b21-42cf-9ff3-6f760d85c6f7"],

Cell[BoxData[
 RowBox[{"HighlightGraph", "[", "\[IndentingNewLine]", 
  RowBox[{"g", ",", 
   RowBox[{"IGMembershipToPartitions", "[", 
    RowBox[{"g", ",", 
     RowBox[{"IGVertexColoring", "[", "g", "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"VertexSize", "\[Rule]", "Medium"}], ",", 
   RowBox[{"GraphHighlightStyle", "\[Rule]", "\"\<DehighlightGray\>\""}]}], 
  "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"dbf7f7f6-a03c-4047-ba10-15e7dd5acd14"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGReorderVertices", \
"Subsubsection",ExpressionUUID->"0cac94f2-1fe6-4bc6-971a-fe3fbc2b055a"],

Cell[BoxData[
 RowBox[{"?", 
  "IGReorderVertices"}]], \
"Input",ExpressionUUID->"a59560f5-b6a7-42b9-97fd-0e4778a6a15c"],

Cell[TextData[{
 Cell[BoxData[
 "IGReorderVertices"],ExpressionUUID->
  "9c195a17-3a4d-450d-b68e-216f6faa86e6"],
 " changes the order in which graph vertices are stored. The graph itself is \
not modified, only its representation. The ordering of vertices affects how \
several of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s graph processing functions work."
}], "Text",ExpressionUUID->"5bd253d0-148a-4cdb-bc48-e1ede91c23a4"],

Cell["\<\
Let us use a styled graph for illustration, to demonstrate that graph \
properties are preserved.\
\>", "Text",ExpressionUUID->"a45d0975-7fd8-49ca-8b3b-d3e1910012b6"],

Cell[BoxData[
 RowBox[{"g1", "=", 
  RowBox[{"RandomGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"5", ",", "5"}], "}"}], ",", 
    RowBox[{"VertexStyle", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "LightRed"}], ",", 
       RowBox[{"3", "\[Rule]", "LightGreen"}]}], "}"}]}], ",", 
    RowBox[{"VertexSize", "\[Rule]", "Medium"}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", 
     RowBox[{"Placed", "[", 
      RowBox[{"Automatic", ",", "Center"}], "]"}]}]}], 
   "]"}]}]], "Input",ExpressionUUID->"b48714ba-e8e7-42ae-b176-38a989a1d22e"],

Cell[BoxData[
 RowBox[{"g2", "=", 
  RowBox[{"IGReorderVertices", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"5", ",", "4", ",", "3", ",", "2", ",", "1"}], "}"}], ",", 
    "g1"}], "]"}]}]], \
"Input",ExpressionUUID->"b8a0d636-8a59-4951-842f-0da2773eb653"],

Cell[BoxData[
 RowBox[{"VertexList", "/@", 
  RowBox[{"{", 
   RowBox[{"g1", ",", "g2"}], 
   "}"}]}]], "Input",ExpressionUUID->"7fdb3aa0-8991-4d9c-9550-4bb4dd526dce"],

Cell[BoxData[
 RowBox[{"IGIsomorphicQ", "[", 
  RowBox[{"g1", ",", "g2"}], 
  "]"}]], "Input",ExpressionUUID->"d9f035a4-757a-4bba-90fb-0083ceca934f"],

Cell[TextData[{
 "The result of certain operations, such as ",
 Cell[BoxData[
  RowBox[{"DirectedGraph", "[", 
   RowBox[{"\[Ellipsis]", ",", "\"\<Acyclic\>\""}], "]"}]],ExpressionUUID->
  "32503cd6-5ed3-41d6-9b25-68297a849c60"],
 " or ",
 Cell[BoxData[
 "AdjacencyMatrix"],ExpressionUUID->"123de3d4-e695-47cd-9508-5f30754740f8"],
 ", depends on the vertex ordering."
}], "Text",ExpressionUUID->"0ea7cc36-0056-4f4b-bf94-cc0b8e134b69"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DirectedGraph", "[", 
    RowBox[{"#", ",", "\"\<Acyclic\>\""}], "]"}], "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{"g1", ",", "g2"}], 
   "}"}]}]], "Input",ExpressionUUID->"8e7653ce-4cce-486a-a8a4-f93f61fc498d"],

Cell["\<\
Order the vertices of a directed acyclic graph so that its adjacency matrix \
is upper triangular.\
\>", "Text",ExpressionUUID->"f83000e4-d4fc-4397-bee4-4e626eb916c5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"RandomGraph", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"10", ",", "30"}], "}"}], ",", 
     RowBox[{"DirectedEdges", "\[Rule]", "True"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"EdgeDelete", "[", 
    RowBox[{"g", ",", 
     RowBox[{"IGFeedbackArcSet", "[", "g", "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{"ArrayPlot", "/@", 
  RowBox[{"AdjacencyMatrix", "/@", 
   RowBox[{"{", 
    RowBox[{"g", ",", 
     RowBox[{"IGReorderVertices", "[", 
      RowBox[{
       RowBox[{"TopologicalSort", "[", "g", "]"}], ",", "g"}], "]"}]}], 
    "}"}]}]}]}], \
"Input",ExpressionUUID->"11bf6410-bc93-4775-ae28-533d11f29d6c"],

Cell["\<\
Visualize a graph so that a Hamiltonian cycle is on a circle.\
\>", "Text",ExpressionUUID->"89769134-10d1-4aa4-90d3-1eee936f553a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"GraphData", "[", "\"\<DodecahedralGraph\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"IGLayoutCircle", "@", 
  RowBox[{"IGReorderVertices", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"FindHamiltonianCycle", "[", "g", "]"}], "[", 
     RowBox[{"[", 
      RowBox[{"1", ",", "All", ",", "1"}], "]"}], "]"}], ",", "g"}], 
   "]"}]}]}], "Input",ExpressionUUID->"14a3ad0c-8999-43ad-b706-ff7c06979d05"],

Cell["\<\
Change the order how graph vertices are drawn in a circular layout without \
discarding any styling or other properties.\
\>", "Text",ExpressionUUID->"7725af1f-9122-4b77-8414-d820abfc30c4"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"IGLayoutCircle", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ExampleData", "[", 
     RowBox[{"{", 
      RowBox[{
      "\"\<NetworkGraph\>\"", ",", "\"\<EastAfricaEmbassyAttacks\>\""}], 
      "}"}], "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"VertexLabels", "\[Rule]", 
     RowBox[{"(", 
      RowBox[{"_", "\[Rule]", 
       RowBox[{"Placed", "[", 
        RowBox[{"\"\<Name\>\"", ",", "Tooltip"}], "]"}]}], ")"}]}]}], 
   "\[IndentingNewLine]", 
   "]"}]}]], "Input",ExpressionUUID->"ba089ce1-f5ff-44fe-9608-473e75d45255"],

Cell[BoxData[
 RowBox[{"IGLayoutCircle", "@", 
  RowBox[{"IGReorderVertices", "[", 
   RowBox[{
    RowBox[{"RandomSample", "@", 
     RowBox[{"VertexList", "[", "g", "]"}]}], ",", "g"}], 
   "]"}]}]], "Input",ExpressionUUID->"4dadb8cc-7cf3-4947-8249-a363549029e8"],

Cell[TextData[{
 "Reorder the vertices of a bipartite graph to make the bipartite structure \
explicit in its adjacency matrix. Note that if the goal is simply visualizing \
the adjacency matrix, ",
 Cell[BoxData[
 "IGAdjacencyMatrixPlot"],ExpressionUUID->
  "89b8776d-e96c-4048-a7b0-bb296d61c5b4"],
 " can be used instead."
}], "Text",ExpressionUUID->"59406b91-18f2-4848-b77d-f65dc54734f8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"CycleGraph", "[", "10", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"ArrayPlot", "/@", 
  RowBox[{"AdjacencyMatrix", "/@", 
   RowBox[{"{", 
    RowBox[{"g", ",", 
     RowBox[{"IGReorderVertices", "[", 
      RowBox[{
       RowBox[{"Flatten", "@", 
        RowBox[{"IGBipartitePartitions", "[", "g", "]"}]}], ",", "g"}], 
      "]"}]}], "}"}]}]}]}], \
"Input",ExpressionUUID->"ab06e8f7-fdd8-4d9e-b0dc-7bdb9ece7992"],

Cell["Order the vertices of a graph by increasing degree.", \
"Text",ExpressionUUID->"f92d1398-9734-4090-8206-0d6f7febe532"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"RandomGraph", "[", 
    RowBox[{"{", 
     RowBox[{"20", ",", "40"}], "}"}], "]"}]}], ";"}], "\n", 
 RowBox[{"{", 
  RowBox[{
   RowBox[{"IGLayoutCircle", "[", "g", "]"}], ",", 
   RowBox[{"IGLayoutCircle", "@", 
    RowBox[{"IGReorderVertices", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"VertexList", "[", "g", "]"}], "\[LeftDoubleBracket]", 
       RowBox[{"Ordering", "@", 
        RowBox[{"VertexDegree", "[", "g", "]"}]}], "\[RightDoubleBracket]"}], 
      ",", "g"}], "]"}]}]}], 
  "}"}]}], "Input",ExpressionUUID->"b5e57bc3-4a56-4fe7-b583-50dc88ccdc0e"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGAdjacencyList", \
"Subsubsection",ExpressionUUID->"2e83df40-8d76-4340-8554-1f7b0043ea59"],

Cell[BoxData[
 RowBox[{"?", 
  "IGAdjacencyList"}]], \
"Input",ExpressionUUID->"b2d563bd-3dfd-438f-bcdc-c0f057d73560"],

Cell[TextData[{
 Cell[BoxData[
 "IGAdjacencyList"],ExpressionUUID->"1cba0ffa-f62f-4272-9a92-5f9ea30b58f3"],
 " returns the adjacency list of a graph as an association. This is often a \
more useful format than what the built-in ",
 Cell[BoxData[
 "AdjacencyList"],ExpressionUUID->"8685afb4-5441-4c9b-ad78-e63e9ae8e126"],
 " provides."
}], "Text",ExpressionUUID->"cc539303-4405-44a9-a583-f6d7ca9cc8da"],

Cell[BoxData[
 RowBox[{"IGAdjacencyList", "[", 
  RowBox[{"Graph", "[", 
   RowBox[{"{", 
    RowBox[{"1", "\[UndirectedEdge]", "2"}], "}"}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"42e19331-73da-4227-bc4b-437d5bdea924"],

Cell[TextData[{
 "For directed graphs, only outgoing edges are considered when building the \
adjacency list. In contrast, the built-in ",
 Cell[BoxData[
 "AdjacencyList"],ExpressionUUID->"f756831d-154b-428b-8120-5d56e319c326"],
 " ignores edge directions."
}], "Text",ExpressionUUID->"04d2287b-20bd-4275-83fe-ab5d1811a2aa"],

Cell[BoxData[
 RowBox[{"IGAdjacencyList", "[", 
  RowBox[{"Graph", "[", 
   RowBox[{"{", 
    RowBox[{"1", "\[Rule]", "2"}], "}"}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"06573ea0-3a8f-4304-903c-d1888db16b0f"],

Cell[BoxData[
 RowBox[{"AdjacencyList", "[", 
  RowBox[{"Graph", "[", 
   RowBox[{"{", 
    RowBox[{"1", "\[Rule]", "2"}], "}"}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"66d2eecf-ecc8-424d-bfe1-bfd6187094ec"],

Cell["Consider incoming edges instead.", \
"Text",ExpressionUUID->"7f0cee39-6dd3-4a4c-9392-cca18e20ff35"],

Cell[BoxData[
 RowBox[{"IGAdjacencyList", "[", 
  RowBox[{
   RowBox[{"Graph", "[", 
    RowBox[{"{", 
     RowBox[{"1", "\[Rule]", "2"}], "}"}], "]"}], ",", "\"\<In\>\""}], 
  "]"}]], "Input",ExpressionUUID->"954ce873-6f76-40b1-a13e-65c655f1e0d1"],

Cell["Consider both incoming and outgoing edges.", \
"Text",ExpressionUUID->"06b8844a-0d90-4328-9c6e-681cb46b2096"],

Cell[BoxData[
 RowBox[{"IGAdjacencyList", "[", 
  RowBox[{
   RowBox[{"Graph", "[", 
    RowBox[{"{", 
     RowBox[{"1", "\[Rule]", "2"}], "}"}], "]"}], ",", "\"\<All\>\""}], 
  "]"}]], "Input",ExpressionUUID->"22fa0ce1-b56e-4616-a919-07a34c7aba79"],

Cell["\<\
With this option, reciprocal edges are considered individually in directed \
graphs.\
\>", "Text",ExpressionUUID->"5d59b22d-497f-4ae8-a359-5b388d7fd4b4"],

Cell[BoxData[
 RowBox[{"IGAdjacencyList", "[", 
  RowBox[{
   RowBox[{"Graph", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "\[Rule]", "2"}], ",", 
      RowBox[{"2", "\[Rule]", "1"}]}], "}"}], "]"}], ",", "\"\<All\>\""}], 
  "]"}]], "Input",ExpressionUUID->"de2818bb-f52a-46dc-b277-b54750b8a1ce"],

Cell[TextData[{
 "Multi-edges and self-loops are supported. In contrast, the built-in ",
 Cell[BoxData[
 "AdjacencyList"],ExpressionUUID->"8fab3b07-bf62-4df2-ae6b-c59eb33f450b"],
 " ignores them."
}], "Text",ExpressionUUID->"bd4b3254-9898-4c1c-94a3-d61924d85d88"],

Cell[BoxData[
 RowBox[{"IGAdjacencyList", "[", 
  RowBox[{"Graph", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "2"}], ",", 
     RowBox[{"1", "\[Rule]", "2"}], ",", 
     RowBox[{"2", "\[Rule]", "2"}], ",", 
     RowBox[{"2", "\[Rule]", "2"}]}], "}"}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"eeac3b11-497c-4d1f-a822-4f195512b0b4"],

Cell[BoxData[
 RowBox[{"AdjacencyList", "[", 
  RowBox[{"Graph", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "2"}], ",", 
     RowBox[{"1", "\[Rule]", "2"}], ",", 
     RowBox[{"2", "\[Rule]", "2"}]}], "}"}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"40d08f34-db9c-415e-a810-b6171b1b60d0"],

Cell[TextData[{
 "Self-loops are traversed in only one direction in undirected graphs. Thus \
the result of the below is not ",
 Cell[BoxData[
  RowBox[{"\[LeftAssociation]", 
   RowBox[{"1", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}]}], "\[RightAssociation]"}]],
  ExpressionUUID->"94c8ac3a-03e0-4ec9-b299-7aefd6f01fe7"],
 " but simply ",
 Cell[BoxData[
  RowBox[{"\[LeftAssociation]", 
   RowBox[{"1", "\[Rule]", 
    RowBox[{"{", "1", "}"}]}], "\[RightAssociation]"}]],ExpressionUUID->
  "56b5ecb5-1957-4ead-a4e0-c8bd82770cdc"],
 ".  This is consistent with ",
 Cell[BoxData[
 "AdjacencyMatrix"],ExpressionUUID->"da2df878-e53d-4c20-8b98-bc621bfa2e8c"],
 ", but not with ",
 Cell[BoxData[
 "VertexDegree"],ExpressionUUID->"61c90b6e-c15e-4638-b43b-99edc0b88645"],
 "."
}], "Text",ExpressionUUID->"f196a220-d355-4f26-8407-b6f193537287"],

Cell[BoxData[
 RowBox[{"IGAdjacencyList", "[", 
  RowBox[{"Graph", "[", 
   RowBox[{"{", 
    RowBox[{"1", "\[UndirectedEdge]", "1"}], "}"}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"46c10fbc-4459-4b82-af90-6311020996fd"],

Cell[TextData[{
 Cell[BoxData[
 "IGAdjacencyList"],ExpressionUUID->"accd82c5-22c8-4168-95ab-b6983c269d32"],
 " can be used to find the parent of each node in a rooted tree. The root \
itself will have no parent."
}], "Text",ExpressionUUID->"95a38488-2ecd-49c2-989f-a68d0850334f"],

Cell[BoxData[
 RowBox[{"IGAdjacencyList", "[", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4, 5, 6, 7, 
        8}, {{{1, 2}, {3, 4}, {5, 1}, {6, 5}, {5, 7}, {6, 8}, {5, 3}}, 
         Null}, {GraphStyle -> "ClassicDiagram", VertexSize -> {Large}}]], 
      Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
         Arrowheads[Medium], 
         Directive[
          Hue[0, 1, 0.5], 
          Opacity[1]], 
         ArrowBox[{{
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$2", Automatic, Center]}, {
            DynamicLocation["VertexID$3", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}, {
            DynamicLocation["VertexID$5", Automatic, Center], 
            DynamicLocation["VertexID$1", Automatic, Center]}, {
            DynamicLocation["VertexID$5", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}, {
            DynamicLocation["VertexID$5", Automatic, Center], 
            DynamicLocation["VertexID$7", Automatic, Center]}, {
            DynamicLocation["VertexID$6", Automatic, Center], 
            DynamicLocation["VertexID$5", Automatic, Center]}, {
            DynamicLocation["VertexID$6", Automatic, Center], 
            DynamicLocation["VertexID$8", Automatic, Center]}}]}, {
         Directive[
          Hue[0.15, 0.2, 1], 
          EdgeForm[{
            Thickness[0.003], 
            Hue[0.15, 0.6, 0.9], 
            Opacity[1]}]], 
         TagBox[{
           TagBox[
            
            RectangleBox[{-0.15148149397152186`, 0.7069135813074301}, {
             0.15148149397152186`, 1.0098765692504739`}], "DynamicName", 
            BoxID -> "VertexID$1"], 
           InsetBox[
            FormBox["1", TraditionalForm], 
            DynamicLocation["VertexID$1", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$1"], 
         TagBox[{
           TagBox[
            
            RectangleBox[{-0.15148149397152186`, -0.15148149397152186`}, {
             0.15148149397152186`, 0.15148149397152186`}], "DynamicName", 
            BoxID -> "VertexID$2"], 
           InsetBox[
            FormBox["2", TraditionalForm], 
            DynamicLocation["VertexID$2", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$2"], 
         TagBox[{
           TagBox[
            
            RectangleBox[{0.7069135813074302, 0.7069135813074301}, {
             1.0098765692504739`, 1.0098765692504739`}], "DynamicName", BoxID -> 
            "VertexID$3"], 
           InsetBox[
            FormBox["3", TraditionalForm], 
            DynamicLocation["VertexID$3", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$3"], 
         TagBox[{
           TagBox[
            
            RectangleBox[{0.7069135813074302, -0.15148149397152186`}, {
             1.0098765692504739`, 0.15148149397152186`}], "DynamicName", 
            BoxID -> "VertexID$4"], 
           InsetBox[
            FormBox["4", TraditionalForm], 
            DynamicLocation["VertexID$4", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$4"], 
         TagBox[{
           TagBox[
            
            RectangleBox[{0.7069135813074302, 1.565308656586382}, {
             1.0098765692504739`, 1.8682716445294258`}], "DynamicName", BoxID -> 
            "VertexID$5"], 
           InsetBox[
            FormBox["5", TraditionalForm], 
            DynamicLocation["VertexID$5", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$5"], 
         TagBox[{
           TagBox[
            
            RectangleBox[{1.1361111189469062`, 2.4237037318653343`}, {
             1.43907410688995, 2.726666719808378}], "DynamicName", BoxID -> 
            "VertexID$6"], 
           InsetBox[
            FormBox["6", TraditionalForm], 
            DynamicLocation["VertexID$6", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$6"], 
         TagBox[{
           TagBox[
            
            RectangleBox[{1.5653086565863823`, 0.7069135813074301}, {
             1.868271644529426, 1.0098765692504739`}], "DynamicName", BoxID -> 
            "VertexID$7"], 
           InsetBox[
            FormBox["7", TraditionalForm], 
            DynamicLocation["VertexID$7", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$7"], 
         TagBox[{
           TagBox[
            
            RectangleBox[{1.5653086565863823`, 1.565308656586382}, {
             1.868271644529426, 1.8682716445294258`}], "DynamicName", BoxID -> 
            "VertexID$8"], 
           InsetBox[
            FormBox["8", TraditionalForm], 
            DynamicLocation["VertexID$8", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> 
          "VertexLabelID$8"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        
        ImageSizeCache->{{1.4851827858031612`, 
         78.79496779815149}, {-58.29887016507624, 53.204873618807085`}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{81.28015058395465, Automatic}], ",", "\"\<In\>\""}], 
  "]"}]], "Input",ExpressionUUID->"de67511c-aacc-4aba-99ad-d52d27e1c7ac"],

Cell["Find the children of each node.", \
"Text",ExpressionUUID->"5cea0822-0cae-4462-9704-b9a46f4f6990"],

Cell[BoxData[
 RowBox[{"IGAdjacencyList", "[", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3, 4, 5, 6, 7, 
        8}, {{{1, 2}, {3, 4}, {5, 1}, {6, 5}, {5, 7}, {6, 8}, {5, 3}}, 
         Null}, {GraphStyle -> "ClassicDiagram", VertexSize -> {Large}}]], 
      Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
         Arrowheads[Medium], 
         Directive[
          Hue[0, 1, 0.5], 
          Opacity[1]], 
         ArrowBox[{{
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$2", Automatic, Center]}, {
            DynamicLocation["VertexID$3", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}, {
            DynamicLocation["VertexID$5", Automatic, Center], 
            DynamicLocation["VertexID$1", Automatic, Center]}, {
            DynamicLocation["VertexID$5", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}, {
            DynamicLocation["VertexID$5", Automatic, Center], 
            DynamicLocation["VertexID$7", Automatic, Center]}, {
            DynamicLocation["VertexID$6", Automatic, Center], 
            DynamicLocation["VertexID$5", Automatic, Center]}, {
            DynamicLocation["VertexID$6", Automatic, Center], 
            DynamicLocation["VertexID$8", Automatic, Center]}}]}, {
         Directive[
          Hue[0.15, 0.2, 1], 
          EdgeForm[{
            Thickness[0.003], 
            Hue[0.15, 0.6, 0.9], 
            Opacity[1]}]], 
         TagBox[{
           TagBox[
            
            RectangleBox[{-0.15148149397152186`, 0.7069135813074301}, {
             0.15148149397152186`, 1.0098765692504739`}], "DynamicName", 
            BoxID -> "VertexID$1"], 
           InsetBox[
            FormBox["1", TraditionalForm], 
            DynamicLocation["VertexID$1", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$1"], 
         TagBox[{
           TagBox[
            
            RectangleBox[{-0.15148149397152186`, -0.15148149397152186`}, {
             0.15148149397152186`, 0.15148149397152186`}], "DynamicName", 
            BoxID -> "VertexID$2"], 
           InsetBox[
            FormBox["2", TraditionalForm], 
            DynamicLocation["VertexID$2", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$2"], 
         TagBox[{
           TagBox[
            
            RectangleBox[{0.7069135813074302, 0.7069135813074301}, {
             1.0098765692504739`, 1.0098765692504739`}], "DynamicName", BoxID -> 
            "VertexID$3"], 
           InsetBox[
            FormBox["3", TraditionalForm], 
            DynamicLocation["VertexID$3", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$3"], 
         TagBox[{
           TagBox[
            
            RectangleBox[{0.7069135813074302, -0.15148149397152186`}, {
             1.0098765692504739`, 0.15148149397152186`}], "DynamicName", 
            BoxID -> "VertexID$4"], 
           InsetBox[
            FormBox["4", TraditionalForm], 
            DynamicLocation["VertexID$4", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$4"], 
         TagBox[{
           TagBox[
            
            RectangleBox[{0.7069135813074302, 1.565308656586382}, {
             1.0098765692504739`, 1.8682716445294258`}], "DynamicName", BoxID -> 
            "VertexID$5"], 
           InsetBox[
            FormBox["5", TraditionalForm], 
            DynamicLocation["VertexID$5", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$5"], 
         TagBox[{
           TagBox[
            
            RectangleBox[{1.1361111189469062`, 2.4237037318653343`}, {
             1.43907410688995, 2.726666719808378}], "DynamicName", BoxID -> 
            "VertexID$6"], 
           InsetBox[
            FormBox["6", TraditionalForm], 
            DynamicLocation["VertexID$6", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$6"], 
         TagBox[{
           TagBox[
            
            RectangleBox[{1.5653086565863823`, 0.7069135813074301}, {
             1.868271644529426, 1.0098765692504739`}], "DynamicName", BoxID -> 
            "VertexID$7"], 
           InsetBox[
            FormBox["7", TraditionalForm], 
            DynamicLocation["VertexID$7", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$7"], 
         TagBox[{
           TagBox[
            
            RectangleBox[{1.5653086565863823`, 1.565308656586382}, {
             1.868271644529426, 1.8682716445294258`}], "DynamicName", BoxID -> 
            "VertexID$8"], 
           InsetBox[
            FormBox["8", TraditionalForm], 
            DynamicLocation["VertexID$8", None, Center], BaseStyle -> 
            "Graphics"]}, "DynamicName", BoxID -> 
          "VertexLabelID$8"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        
        ImageSizeCache->{{1.4851827858031612`, 
         78.79496779815149}, {-58.29887016507624, 53.204873618807085`}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{81.28015058395465, Automatic}], ",", "\"\<Out\>\""}], 
  "]"}]], "Input",ExpressionUUID->"a880a2b2-e143-42f5-92fa-8568a6f3a644"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGAdjacencyGraph", \
"Subsubsection",ExpressionUUID->"158ae111-c62e-476c-874b-59521776a88c"],

Cell[BoxData[
 RowBox[{"?", 
  "IGAdjacencyGraph"}]], \
"Input",ExpressionUUID->"63a44dd4-cff5-4e69-a6e8-2b1085d31ab5"],

Cell[TextData[{
 Cell[BoxData[
 "IGAdjacencyGraph"],ExpressionUUID->"4949aeb7-979f-4a64-b1bb-7c9587f7c99d"],
 " can convert an adjacency matrix or an adjacency list representation of a \
graph into a ",
 Cell[BoxData["Graph"],ExpressionUUID->"a13a65e7-bbaf-44cf-8bde-7179c5d3cbf8"],
 " expression. When given a matrix, it behaves equivalently to the built-in \
function ",
 Cell[BoxData[
 "AdjacencyGraph"],ExpressionUUID->"d8f8edc4-0b9b-4617-9d1f-125e4d7066e9"],
 "."
}], "Text",ExpressionUUID->"c8d1e89f-11f5-45ef-85ec-252beb1cc65f"],

Cell["The available options are:", \
"Text",ExpressionUUID->"384fd1d3-676b-4204-a316-5e851762bade"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "True"}]],ExpressionUUID->
  "9102a4e6-3825-4c3f-a6f1-cd6a54e02edf"],
 " and ",
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "False"}]],ExpressionUUID->
  "a00960e0-aba8-4d8b-af03-129444a7f884"],
 " create a directed or undirected graph, respectively. The default setting \
is ",
 Cell[BoxData[
  RowBox[{"DirectedEdges", "\[Rule]", "Automatic"}]],ExpressionUUID->
  "d7df1826-1146-44d5-ba7d-518df75ee985"],
 ", which creates an undirected graph when this is consistent with the given \
adjacency matrix or adjacency list."
}], "Item",ExpressionUUID->"42673cb9-8a78-498d-a4ba-625ce6fd00ec"],

Cell[TextData[{
 "Compute the adjacency list of a graph, then convert it back to a ",
 Cell[BoxData["Graph"],ExpressionUUID->"b5943bf7-0a7c-474e-84f7-7c238fab010c"],
 " expression."
}], "Text",ExpressionUUID->"92f5b7e6-8b99-41fe-8591-35f568c0c178"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"RandomGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"5", ",", "6"}], "}"}], ",", 
    RowBox[{"DirectedEdges", "\[Rule]", "True"}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], 
   "]"}]}]], "Input",ExpressionUUID->"95e31f4c-08b7-4f47-aa7a-7dd0fbe08c78"],

Cell[BoxData[
 RowBox[{"IGAdjacencyList", "[", "g", 
  "]"}]], "Input",ExpressionUUID->"058222b6-594e-498c-8a4f-a922fbfb6438"],

Cell[BoxData[
 RowBox[{"IGAdjacencyGraph", "[", "%", 
  "]"}]], "Input",ExpressionUUID->"4d9aa68c-f0cd-4814-9a75-583482c53dc3"],

Cell["\<\
The representation of combinatorial embeddings used by IGraph/M is also a \
valid adjacency list.\
\>", "Text",ExpressionUUID->"96c24028-ddac-4201-8ae2-e832ec578b93"],

Cell[BoxData[
 RowBox[{"IGPlanarEmbedding", "@", 
  RowBox[{
  "CompleteGraph", "[", "4", 
   "]"}]}]], "Input",ExpressionUUID->"f0545470-852d-47f3-a3ff-219257d1127b"],

Cell[BoxData[
 RowBox[{"IGAdjacencyGraph", "[", "%", 
  "]"}]], "Input",ExpressionUUID->"8cec51c3-1705-4382-b278-bc47c0d08e5c"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGVertexAssociate", \
"Subsubsection",ExpressionUUID->"24cfc40c-de76-427a-bd68-3c3e91c30e98"],

Cell[BoxData[
 RowBox[{"?", 
  "IGVertexAssociate"}]], \
"Input",ExpressionUUID->"ff660bf6-3297-4082-b5e6-c45a79c096a7"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"IGVertexAssociate", "[", "fun", "]"}]],ExpressionUUID->
  "6424e5dc-2d97-42c2-9fde-31be441528cd"],
 " is an operator that, when applied to ",
 Cell[BoxData["graph"],ExpressionUUID->"07e73751-c2f5-4b13-b7d7-3c0f27794ad4"],
 ", will associate the result of ",
 Cell[BoxData[
  RowBox[{"fun", "[", "graph", "]"}]],ExpressionUUID->
  "27c68748-5d47-40f1-bc33-13e38c82047f"],
 " with each vertex."
}], "Text",ExpressionUUID->"c6394ec4-bc8e-439a-9a0e-46b7a7c109a3"],

Cell[TextData[{
 "In ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", functions that compute a value for each vertex always return a list, with \
the values ordered to correspond to the ",
 Cell[BoxData[
 "VertexList"],ExpressionUUID->"f2f896d4-b127-4d2f-8488-88b8c9e043e5"],
 " of the graph. In many situations, it is more convenient to use an \
association where the keys are the vertex names. If ",
 Cell[BoxData["fun"],ExpressionUUID->"78ac8a99-1e14-417d-a225-7984040cc1dd"],
 " is a function that computes a vertex property and gives the result as a \
list, the operator ",
 Cell[BoxData[
  RowBox[{"IGVertexAssociation", "[", "fun", "]"}]],ExpressionUUID->
  "b67922d2-bbaa-4f36-9dbb-d7cc6f9e60f9"],
 " will give an association instead."
}], "Text",ExpressionUUID->"d9c2d31e-0551-49a1-8994-ff9e20739777"],

Cell["Get the betweenness of a vertex by name:", \
"Text",ExpressionUUID->"ce5ec58b-c9a9-4355-bda3-f7420415702b"],

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"ExampleData", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<NetworkGraph\>\"", ",", "\"\<Friendship\>\""}], "}"}], 
   "]"}]}]], "Input",ExpressionUUID->"8132ba75-e5e4-4876-a533-03a8bb3acd82"],

Cell[BoxData[
 RowBox[{"betw", "=", 
  RowBox[{
   RowBox[{"IGVertexAssociate", "[", "IGBetweenness", "]"}], "[", "net", 
   "]"}]}]], "Input",ExpressionUUID->"5fb175b2-057f-47ed-a723-7b1a158d48f9"],

Cell[BoxData[
 RowBox[{"betw", "[", "\"\<Larry\>\"", 
  "]"}]], "Input",ExpressionUUID->"a82a6e9f-4210-4284-ab49-93e538195ca3"],

Cell[TextData[{
 "IGraph/M has many functions which can be restricted to compute values for \
only a subset of vertices. These use the syntax ",
 Cell[BoxData[
  RowBox[{"fun", "[", 
   RowBox[{"graph", ",", " ", "vertices"}], "]"}]],ExpressionUUID->
  "21e4bb4e-752a-4c24-9e41-5073b256da10"],
 ". If ",
 Cell[BoxData["fun"],ExpressionUUID->"8d0fe876-c86f-473d-abe7-bccbde5f6785"],
 " supports this syntax, then ",
 Cell[BoxData[
  RowBox[{"IGVertexAssociate", "[", "fun", "]"}]],ExpressionUUID->
  "eb64c038-4f7e-47bc-a791-110309d4ba22"],
 " also takes a vertex list as its second argument. "
}], "Text",ExpressionUUID->"9d04e6e7-9653-48a6-8fdd-89c8938bf5df"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGVertexAssociate", "[", "IGEccentricity", "]"}], "[", 
  RowBox[{"net", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<Anna\>\"", ",", "\"\<James\>\"", ",", "\"\<Rudy\>\""}], 
    "}"}]}], "]"}]], \
"Input",ExpressionUUID->"5c099dba-dc55-442c-a018-7be6715cfb40"],

Cell["\<\
Smoothen away the degree-2 vertices of a graph while retaining the \
coordinates of each vertex:\
\>", "Text",ExpressionUUID->"bb9ac05b-4b39-4905-90b0-e86da5a144a8"],

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"IGGiantComponent", "@", 
   RowBox[{"RandomGraph", "[", 
    RowBox[{"{", 
     RowBox[{"100", ",", "100"}], "}"}], 
    "]"}]}]}]], \
"Input",ExpressionUUID->"7be5b6dc-780c-475c-bb07-699831de949a"],

Cell[BoxData[
 RowBox[{"g2", "=", 
  RowBox[{
   RowBox[{"IGSmoothen", "[", "g", "]"}], "//", 
   RowBox[{"IGVertexMap", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"IGVertexAssociate", "[", "GraphEmbedding", "]"}], "[", "g", 
      "]"}], ",", 
     RowBox[{"VertexCoordinates", "\[Rule]", "VertexList"}]}], 
    "]"}]}]}]], \
"Input",ExpressionUUID->"58cb5843-92f5-440e-9616-547371df0740"],

Cell["\<\
Compare the smoothened graph with the original in a flip view:\
\>", "Text",ExpressionUUID->"c92471ca-0716-457f-950e-eb36ecf4c48e"],

Cell[BoxData[
 RowBox[{"FlipView", "[", 
  RowBox[{"{", 
   RowBox[{"g", ",", "g2"}], "}"}], 
  "]"}]], "Input",ExpressionUUID->"5a7bcb4f-c880-4ae2-a044-c4e41c26a8d7"],

Cell["Extract a vertex property as an association:", \
"Text",ExpressionUUID->"39bae0b9-c64e-4783-8e33-4bd9d7e5f9ba"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGVertexAssociate", "[", 
   RowBox[{"IGVertexProp", "[", "\"\<Group\>\"", "]"}], "]"}], "@", 
  RowBox[{"ExampleData", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<NetworkGraph\>\"", ",", "\"\<EastAfricaEmbassyAttacks\>\""}],
     "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7942497908482103`*^9, 
  3.7942498584201317`*^9}},ExpressionUUID->"adb4a3a7-bfc1-4b44-95f7-\
81cefb277d06"]
}, Closed]],

Cell[CellGroupData[{

Cell["IGTryUntil", \
"Subsubsection",ExpressionUUID->"efa65be0-88e6-4b73-b5a7-640b83d6be3c"],

Cell[BoxData[
 RowBox[{"?", 
  "IGTryUntil"}]], \
"Input",ExpressionUUID->"f618f185-61a1-4192-9d03-043050a24081"],

Cell[TextData[{
 Cell[BoxData[
 "IGTryUntil"],ExpressionUUID->"bc0ad9bf-98c4-4f0a-9519-60c12570762b"],
 " repeatedly evaluates an expression until the result of the evaluation \
satisfies a condition. It is particularly useful for concisely implementing \
rejection sampling."
}], "Text",ExpressionUUID->"ff2d657c-a8df-44eb-9f34-7f2aa0a2a8f3"],

Cell["Choose 10 distinct random primes not greater than 100:", \
"Text",ExpressionUUID->"a9ebdcc1-bc65-4729-9e2d-38c3861e6cb5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGTryUntil", "[", "DuplicateFreeQ", "]"}], "[", 
  RowBox[{"RandomPrime", "[", 
   RowBox[{"100", ",", "10"}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"136ee8dd-9b94-40c5-a22c-72b2d85e3033"],

Cell["\<\
Create a power-law distributed degree sequence and build a corresponding \
graph:\
\>", "Text",ExpressionUUID->"9895458e-d3e6-4688-b6c1-8de8c917f7ba"],

Cell[BoxData[
 RowBox[{"IGRealizeDegreeSequence", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"IGTryUntil", "[", "IGGraphicalQ", "]"}], "@", 
   RowBox[{"RandomVariate", "[", 
    RowBox[{
     RowBox[{"ZipfDistribution", "[", "1", "]"}], ",", "100"}], "]"}]}], 
  "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"99e1b86d-2cf4-41b5-82d6-e1485afb02aa"],

Cell["\<\
Generate a random tree (a connected graph) with a given degree sequence using \
the configuration model:\
\>", "Text",ExpressionUUID->"c5b4409d-7b6d-4501-87f9-898abbc77733"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ds", "=", 
   RowBox[{"{", 
    RowBox[{
    "3", ",", "3", ",", "3", ",", "3", ",", "3", ",", "3", ",", "2", ",", "2",
      ",", "2", ",", "2", ",", "2", ",", "2", ",", "1", ",", "1", ",", "1", 
     ",", "1", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"IGTryUntil", "[", "IGConnectedQ", "]"}], "@", 
  RowBox[{"IGDegreeSequenceGame", "[", 
   RowBox[{"ds", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<ConfigurationModelSimple\>\""}]}], 
   "]"}]}]}], "Input",ExpressionUUID->"5c07fc49-ec3d-4ce6-a155-1512de6251b2"],

Cell[TextData[{
 "Some result will occur very infrequently or not at all, so it is useful to \
limit the number of trials. The following attempts to generate a random \
non-connected cubic graph on 50 vertices, and simply returns ",
 Cell[BoxData[
 "$Failed"],ExpressionUUID->"2db02d4f-0fd2-4718-b1c2-bad387bbdc19"],
 " if it does not succeed after 100 tries."
}], "Text",ExpressionUUID->"c692b6f0-de06-4142-bf3b-382e6c6e5cc9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IGTryUntil", "[", 
   RowBox[{
    RowBox[{"Not", "@*", "IGConnectedQ"}], ",", "100"}], "]"}], "[", 
  "\[IndentingNewLine]", 
  RowBox[{"IGDegreeSequenceGame", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ConstantArray", "[", 
     RowBox[{"3", ",", "50"}], "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Method", "\[Rule]", "\"\<ConfigurationModelSimple\>\""}]}], 
   "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"3aed9553-b0ec-4bf0-a84a-52fc32140d77"]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Built-in data", \
"Section",ExpressionUUID->"ddb8d726-b1b8-4d70-bc02-1f05eaaf9b8b"],

Cell[CellGroupData[{

Cell["Graph data", \
"Subsection",ExpressionUUID->"55b24bd5-e588-4cc5-afa6-c367756f4648"],

Cell[TextData[{
 "The ",
 Cell[BoxData[
  RowBox[{"IGData", "[", "]"}]],ExpressionUUID->
  "98c9f694-a14b-44a6-a386-567b730fb577"],
 " function provides access to various useful datasets. In particular, it can \
list small directed graphs ordered based on their ",
 Cell[BoxData[
  RowBox[{"IGIsoclass", "[", "]"}]],ExpressionUUID->
  "bd5c53d5-819d-4373-b97a-7a8d2789e76e"],
 ", i.e. the same order that motif counting functions use."
}], "Text",ExpressionUUID->"f00ae9d6-a09b-410c-ba6a-b152d6ffca37"],

Cell[BoxData[
 RowBox[{"?", 
  "IGData"}]], "Input",ExpressionUUID->"47c9c285-c99a-4235-9bc7-9cbfcf2bd365"],

Cell["List the available datasets:", \
"Text",ExpressionUUID->"14a0adfb-fb32-4486-b791-5703eca85c0b"],

Cell[BoxData[
 RowBox[{"IGData", "[", 
  "]"}]], "Input",ExpressionUUID->"a8f2897b-9dcb-41bd-95af-54d74e29769a"],

Cell["These are all size 3 directed graphs:", \
"Text",ExpressionUUID->"f2a4ccb6-37a8-43f7-8ebc-8469c9ac1d78"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IGData", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<AllDirectedGraphs\>\"", ",", "3"}], "}"}], "]"}], "//", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{"Framed", "@", 
      RowBox[{"Labeled", "[", 
       RowBox[{
        RowBox[{"Graph", "[", 
         RowBox[{"#", ",", 
          RowBox[{"ImageSize", "\[Rule]", "50"}]}], "]"}], ",", 
        RowBox[{"IGIsoclass", "[", "#", "]"}]}], "]"}]}], "&"}], "]"}]}], "//",
   "Multicolumn"}]], \
"Input",ExpressionUUID->"54926f58-5648-41af-afbe-49c5b0bd0bc2"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<MANTriadLabels\>\""],ExpressionUUID->
  "aa081326-e1c2-484a-b142-373609266a4f"],
 " refers to the mutual, asymmetric, null labelling of triads used by ",
 Cell[BoxData[
  RowBox[{"IGTriadCensus", "[", "]"}]],ExpressionUUID->
  "224d1a4c-cb39-4fe8-b43d-9e5d3d29b6c0"],
 ". Each label is mapped to the corresponding graph, ordered based on their \
",
 Cell[BoxData[
 "IGIsoclass"],ExpressionUUID->"4c7efddf-2a96-4567-8fa8-c97984cae8ba"],
 ". This is useful for converting the output of ",
 Cell[BoxData[
  RowBox[{"IGTriadCensus", "[", "]"}]],ExpressionUUID->
  "6730a034-eced-4ed7-a98c-0cb63699dc6a"],
 " to a format compatible with ",
 Cell[BoxData[
  RowBox[{"IGMotifs", "[", "]"}]],ExpressionUUID->
  "9a5131fd-3373-43f7-8580-4aefdfc4d25b"],
 "."
}], "Text",ExpressionUUID->"8c103b73-3152-4106-9818-138a7686efc5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"RandomGraph", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"20", ",", "50"}], "}"}], ",", 
     RowBox[{"DirectedEdges", "\[Rule]", "True"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"IGMotifs", "[", 
     RowBox[{"g", ",", "3"}], "]"}], ",", 
    RowBox[{"Lookup", "[", 
     RowBox[{
      RowBox[{"IGTriadCensus", "[", "g", "]"}], ",", 
      RowBox[{"Keys", "@", 
       RowBox[{"IGData", "[", "\"\<MANTriadLabels\>\"", "]"}]}]}], "]"}]}], 
   "}"}], "//", 
  "Grid"}]}], "Input",ExpressionUUID->"baa619d5-b7e9-42bb-a534-4486891fe4d2"],

Cell[TextData[{
 "The ",
 Cell[BoxData[
 "IGGraphAtlas"],ExpressionUUID->"58e6c9c9-2be0-48df-83c7-7df24e2e05b0"],
 " function provides access to the graphs listed in An Atlas of Graphs by \
Ronald C. Read and Robin J. Wilson, Oxford University Press, 1998."
}], "Text",ExpressionUUID->"5004b67a-9782-4e5c-86e7-bc434b4d36ec"],

Cell[BoxData[
 RowBox[{"?", 
  "IGGraphAtlas"}]], \
"Input",ExpressionUUID->"bb1684d6-4615-4792-bce6-853092e2bbcf"],

Cell[BoxData[
 RowBox[{"IGGraphAtlas", "[", "341", 
  "]"}]], "Input",ExpressionUUID->"c475be1b-5159-4490-aae9-15a2c115fad3"],

Cell[TextData[{
 "Finally, remember that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " itself comes with a large database of graphs and their properties, \
accessible through ",
 Cell[BoxData[
  ButtonBox["GraphData",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/GraphData"]],ExpressionUUID->
  "87932ffd-5a39-4793-b336-a5da42c6c515"],
 "."
}], "Text",ExpressionUUID->"1f106ce0-48db-4651-a8c3-9944dc5297e3"]
}, Closed]],

Cell[CellGroupData[{

Cell["Lattice data", \
"Subsection",ExpressionUUID->"7223c8d4-ad02-4c7c-a719-cbd13ab09b61"],

Cell[TextData[{
 "The ",
 Cell[BoxData[
 "IGLatticeMesh"],ExpressionUUID->"28d6c8ec-543d-49ce-a3a3-0afd40167388"],
 " function includes a set of pre-defined two-dimensional lattice structures. \
Evaluate ",
 Cell[BoxData[
  RowBox[{"IGLatticeMesh", "[", "]"}]],ExpressionUUID->
  "333db461-f29a-4db3-8b3c-2d95d724d07b"],
 " to get the list of available lattices."
}], "Text",ExpressionUUID->"4fbbc8f1-a496-4412-9f99-c7ec412d50d1"],

Cell[TextData[{
 "The data used by ",
 Cell[BoxData[
 "IGMeshGraph"],ExpressionUUID->"742c9f11-a19d-4f82-b01b-2f461e12ef3b"],
 " was sourced from Wolfram|Alpha and ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s curated data system in April 2018."
}], "Text",ExpressionUUID->"24afc745-498c-45f9-b61d-6377a280083a"],

Cell[BoxData[
 RowBox[{"?", 
  "IGLatticeMesh"}]], \
"Input",ExpressionUUID->"e18ed809-fe4c-41ce-b8ec-f1ac2d340b63"],

Cell[BoxData[
 RowBox[{"IGLatticeMesh", "[", 
  "]"}]], "Input",ExpressionUUID->"5c39e072-8856-4e8d-bb14-50ee1c971fd8"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["IGraph/M system functions", \
"Section",ExpressionUUID->"92bdfb56-7a9e-4170-8fc7-0daaae2d4612"],

Cell[CellGroupData[{

Cell["The random number generator", \
"Subsection",ExpressionUUID->"a57f4900-93c7-401b-80d8-9460c67af5ff"],

Cell[TextData[{
 "IGraph/M makes use of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s own random number generator by default, thus functions \
like ",
 Cell[BoxData[
 "SeedRandom"],ExpressionUUID->"45a7cd19-fa3d-4459-b326-030b4a01dc9a"],
 " and ",
 Cell[BoxData[
 "BlockRandom"],ExpressionUUID->"94cee001-bd69-4ca9-874e-d59990180ecf"],
 " have the expected effect."
}], "Text",ExpressionUUID->"14fd09c3-2267-429d-9876-c8e989f9225a"],

Cell[BoxData[{
 RowBox[{"SeedRandom", "[", "137", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"BlockRandom", "@", 
    RowBox[{"IGErdosRenyiGameGNM", "[", 
     RowBox[{"6", ",", "9"}], "]"}]}], ",", 
   RowBox[{"{", "3", "}"}]}], 
  "]"}]}], "Input",ExpressionUUID->"cbc51bab-e8cc-4de1-af98-e2662a734fb8"],

Cell[TextData[{
 Cell[BoxData[
 "BlockRandom"],ExpressionUUID->"eb580ea5-e938-48b6-8e30-190c3fcf2e1c"],
 " is useful for example to get consistent graph layouts without affecting \
subsequent uses of the random number generator."
}], "Text",ExpressionUUID->"37c7dc40-f8f7-40c9-b02d-441452e3cdb6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"RandomGraph", "[", 
    RowBox[{"{", 
     RowBox[{"100", ",", "150"}], "}"}], "]"}]}], ";"}], "\n", 
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"IGLayoutFruchtermanReingold", "[", "g", "]"}], ",", 
   RowBox[{"{", "4", "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7653419338861647`*^9, 3.765341937224715*^9}, {
  3.765342034073781*^9, 
  3.765342090837318*^9}},ExpressionUUID->"1b870761-92dc-4ab9-9535-\
28c88931aa70"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"BlockRandom", "[", 
    RowBox[{
     RowBox[{"SeedRandom", "[", "1234", "]"}], ";", 
     RowBox[{"IGLayoutFruchtermanReingold", "[", "g", "]"}]}], "]"}], ",", 
   RowBox[{"{", "4", "}"}]}], 
  "]"}]], "Input",ExpressionUUID->"ada4761c-b15e-4540-a6ea-9412f3e71ad7"],

Cell[TextData[{
 "IGraph/M can be configured to either use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s built-in generator, or the default generator of the \
igraph C library. The default generator of igraph will perform better, but it \
does not react to ",
 Cell[BoxData[
 "BlockRandom"],ExpressionUUID->"eb20cfb7-5677-46ef-a0d8-b75d0c1873ff"],
 " and must be seeded with ",
 Cell[BoxData[
 "IGSeedRandom"],ExpressionUUID->"81968b81-f08d-4830-9dcd-e9375656895c"],
 " (not with ",
 Cell[BoxData[
 "SeedRandom"],ExpressionUUID->"9f754d8e-df0d-4cb6-ac59-fc89f7c25084"],
 ")."
}], "Text",ExpressionUUID->"b95ee8dc-b3b1-47d4-861b-e9b8a99b61ca"],

Cell[TextData[{
 "Benchmark ",
 Cell[BoxData[
 "IGRandomWalk"],ExpressionUUID->"c2ff9782-6c26-4332-a428-3eaa4b4a55cf"],
 " when using ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s random number generator:"
}], "Text",ExpressionUUID->"cd8c9c4e-8bfb-4a90-a6e9-9a90b6d394b8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"IGGiantComponent", "@", 
    RowBox[{"RandomGraph", "[", 
     RowBox[{"{", 
      RowBox[{"1000", ",", "2000"}], "}"}], "]"}]}]}], 
  ";"}]], "Input",ExpressionUUID->"49fca926-8dad-4e94-94bd-710fa578d678"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IGRandomWalk", "[", 
    RowBox[{"g", ",", "1", ",", "10000000"}], "]"}], ";"}], "//", 
  "RepeatedTiming"}]], \
"Input",ExpressionUUID->"4e709357-25f5-451c-852f-60972fbd9e12"],

Cell["Benchmark it with igraph\[CloseCurlyQuote]s default generator:", \
"Text",ExpressionUUID->"6f59e3e0-02e6-4fff-9b69-1b1ef8b2965a"],

Cell[BoxData[{
 RowBox[{"IGSeedRandom", "[", 
  RowBox[{"Method", "\[Rule]", "\"\<igraph\>\""}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"IGRandomWalk", "[", 
    RowBox[{"g", ",", "1", ",", "10000000"}], "]"}], ";"}], "//", 
  "RepeatedTiming"}]}], \
"Input",ExpressionUUID->"f693d086-a4a1-4c39-b738-c7b92d8d279a"],

Cell[TextData[{
 "Set the generator back to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s:"
}], "Text",ExpressionUUID->"b2d032b2-cc7c-4a3f-bc70-47837105e3b9"],

Cell[BoxData[
 RowBox[{"IGSeedRandom", "[", 
  RowBox[{"Method", "\[Rule]", "\"\<Mathematica\>\""}], 
  "]"}]], "Input",ExpressionUUID->"db8ecc47-db80-4f93-bb32-ab1f59deaf12"],

Cell[CellGroupData[{

Cell["IGSeedRandom", \
"Subsubsection",ExpressionUUID->"ca8c4e8a-932d-4493-b5ce-c7040d640ecc"],

Cell[BoxData[
 RowBox[{"?", 
  "IGSeedRandom"}]], \
"Input",ExpressionUUID->"c9565242-6c35-4db8-9e9c-c79ca53fd2db"],

Cell[TextData[{
 "Available ",
 Cell[BoxData[
 "Method"],ExpressionUUID->"38b881af-f935-499b-a5de-cc01fef487fb"],
 " option values are:"
}], "Text",ExpressionUUID->"18c32337-e9d1-4d86-b8fd-289773c27f65"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<Mathematica\>\""],ExpressionUUID->
  "aae8400f-c8cf-41b1-89bb-a8043c9070b9"],
 " uses Mathematica\[CloseCurlyQuote]s built-in random number generator. With \
this choice, functions like ",
 Cell[BoxData[
 "SeedRandom"],ExpressionUUID->"ac62ccdf-2dc8-4147-bca6-6d66a7f0b55d"],
 " and ",
 Cell[BoxData[
 "BlockRandom"],ExpressionUUID->"513401d9-7f6a-4e22-9526-d19f0399f6f5"],
 " will IGraph/M functions as expected. Performance is not as good as with \
the ",
 Cell[BoxData[
 "\"\<igraph\>\""],ExpressionUUID->"54001500-cc59-44c7-869f-f175a39c8525"],
 " generator"
}], "Item",ExpressionUUID->"65231bfe-eb24-4b36-a9e8-88a9fad59528"],

Cell[TextData[{
 Cell[BoxData[
 "\"\<igraph\>\""],ExpressionUUID->"0cce9d42-65f5-4b0f-a941-3d955841c097"],
 " uses the core igraph C library\[CloseCurlyQuote]s random number generator. \
",
 Cell[BoxData[
 "SeedRandom"],ExpressionUUID->"217a4a1d-c23a-482d-bb7f-6f6200a21d84"],
 " and ",
 Cell[BoxData[
 "BlockRandom"],ExpressionUUID->"0715611b-0876-4f5f-be2c-231ec8d5f8bf"],
 " have no effect on this generator. Seeding can be done with ",
 Cell[BoxData[
 "IGSeedRandom"],ExpressionUUID->"42144836-f2a4-45d4-9165-b32780aca8c6"],
 ". Performance is better than with the ",
 Cell[BoxData[
 "\"\<Mathematica\>\""],ExpressionUUID->
  "d8249e37-ca86-4641-b3be-820a3bf90145"],
 " generator."
}], "Item",ExpressionUUID->"85dfb83c-1f3e-434e-bbd7-536707d6d021"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Progress reporting", \
"Subsection",ExpressionUUID->"5a65e1a8-dddf-4956-aa13-1483816f73c0"],

Cell["\<\
Some igraph functions can report their progress while working. IGraph/M \
contains experimental functionality that exposes igraph\[CloseCurlyQuote]s \
progress reports. This functionality may change without notice in the future.\
\
\>", "Text",ExpressionUUID->"cd5354c3-a7fb-4d0f-bf23-e9e2069b0179"],

Cell[BoxData[
 RowBox[{"?", 
  "IGraphM`Progress`*"}]], \
"Input",ExpressionUUID->"ad33fb80-2d15-4b40-8b01-cb5437396de0"],

Cell["Show the progress indicator.", \
"Text",ExpressionUUID->"0d5ffd7b-c619-4416-bcce-da690a839dc3"],

Cell[BoxData[
 RowBox[{"IGraphM`Progress`Indicator", "[", 
  "]"}]], "Input",ExpressionUUID->"70001149-3b9f-4b0e-a306-2e6ee566e650"],

Cell["\<\
Progress reporting has a performance cost, therefore it is disabled by \
default. To enable it, use:\
\>", "Text",ExpressionUUID->"0fde6426-8028-4cbf-b970-897d3e60b6a6"],

Cell[BoxData[
 RowBox[{"IGraphM`Progress`SetReporting", "[", "True", 
  "]"}]], "Input",ExpressionUUID->"18273c80-e394-4d9b-a828-cc9b9892f0f3"],

Cell["\<\
When a computation that supports progress reporting is running, the indicator \
will show the status.\
\>", "Text",ExpressionUUID->"ed32fb2c-3e8a-4774-9c8a-f93352e6afed"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"compute", "[", "]"}], ":=", 
    RowBox[{"IGCommunitiesGreedy", "@", 
     RowBox[{"IGStochasticBlockModelGame", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"0.02", 
         RowBox[{"IdentityMatrix", "[", "10", "]"}]}], "+", "0.005"}], ",", 
       RowBox[{"ConstantArray", "[", 
        RowBox[{"800", ",", "10"}], "]"}]}], "]"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"compute", "[", "]"}], 
  ";"}]}], "Input",ExpressionUUID->"692b8724-b507-4df3-86da-fabb35a10717"],

Cell["\<\
By default, the progress indicator is updated only if progress has increased \
by at least 1%. In other words, the reporting granularity is 1%. The lower \
the granularity value, the higher the performance impact of reporting.\
\>", "Text",ExpressionUUID->"16c7e009-c364-46ef-a884-09d0ad1047bb"],

Cell["Change the reporting granularity to 10%.", \
"Text",ExpressionUUID->"37825147-7333-4de9-944c-cc546b656632"],

Cell[BoxData[
 RowBox[{"IGraphM`Progress`SetReporting", "[", 
  RowBox[{"True", ",", 
   RowBox[{"\"\<Granularity\>\"", "\[Rule]", "10"}]}], 
  "]"}]], "Input",ExpressionUUID->"71631282-b56d-4921-a71e-950dd7d071d2"],

Cell["\<\
Follow the progress by dynamically showing the value of internal progress \
variables:\
\>", "Text",ExpressionUUID->"6f79aa68-48eb-47b8-bf00-87bc6a776982"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Dynamic", "@", 
   RowBox[{"{", 
    RowBox[{"IGraphM`Progress`Message", ",", "IGraphM`Progress`Percent"}], 
    "}"}]}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"compute", "[", "]"}], 
  ";"}]}], "Input",ExpressionUUID->"28ece19a-156f-48c2-a5f4-34455c4536b6"],

Cell["\<\
Disable progress reporting and set the granularity to its default values (in \
case it gets enabled again later).\
\>", "Text",ExpressionUUID->"f28ddae7-3fdd-450d-bc88-8b36dcbe4d8c"],

Cell[BoxData[
 RowBox[{"IGraphM`Progress`SetReporting", "[", 
  RowBox[{"False", ",", 
   RowBox[{"\"\<Granularity\>\"", "\[Rule]", "Automatic"}]}], 
  "]"}]], "Input",ExpressionUUID->"bd6255ae-562f-483b-837d-a99b0163290d"]
}, Closed]],

Cell[CellGroupData[{

Cell["Library version", \
"Subsection",ExpressionUUID->"a25f0b41-acc1-445b-ac81-477957e89630"],

Cell["\<\
The following symbols and functions can be used to retrieve the IGraph/M \
version.\
\>", "Text",ExpressionUUID->"53c095c2-8976-4e25-8167-afa62bf1fb2b"],

Cell[BoxData[
 RowBox[{"?", 
  "IGVersion"}]], \
"Input",ExpressionUUID->"4461af50-2e53-40be-b28c-5e43a65ca18f"],

Cell[BoxData[
 RowBox[{"IGVersion", "[", 
  "]"}]], "Input",ExpressionUUID->"4aaa4410-75df-4153-9b53-1c9885843c7b"],

Cell[BoxData[
 RowBox[{"?", 
  "IGraphM`Information`$Version"}]], \
"Input",ExpressionUUID->"7eb6db93-bb94-43b4-9bbd-94b932f9354c"],

Cell[BoxData["IGraphM`Information`$Version"], \
"Input",ExpressionUUID->"ba78bba3-c321-4661-9538-8d74d01b8311"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Support and troubleshooting", \
"Section",ExpressionUUID->"df16ae0c-5de4-41d3-a25b-25be823f5eff"],

Cell["\<\
If you need help with using this package, the following support options are \
available:\
\>", "Text",ExpressionUUID->"bb0a29e8-8b0a-49a9-8eeb-a01580888a15"],

Cell[TextData[{
 "Post on the ",
 ButtonBox["igraph discussion forum",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://igraph.discourse.group/"], None},
  ButtonNote->"https://igraph.discourse.group/"],
 " and tag the post as ",
 Cell[BoxData[
 "Mathematica"],ExpressionUUID->"a08f4223-f696-4604-b813-2d94f06a2d4e"],
 "."
}], "Item",ExpressionUUID->"d6ad71a5-18ad-4de0-9ee8-3960b0b76339"],

Cell[TextData[{
 "Post on the ",
 ButtonBox["Mathematica StackExchange",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://mathematica.stackexchange.com/"], None},
  ButtonNote->"https://mathematica.stackexchange.com/"],
 " and tag the post as ",
 Cell[BoxData[
 "igraphm"],ExpressionUUID->"8cf9301f-9fcf-494d-84e8-309bf2313792"],
 "."
}], "Item",ExpressionUUID->"f4b91fd8-da43-412d-84e2-3f84bd19b6ce"],

Cell[TextData[{
 "If you find a problem with IGraph/M or its documentation, please report it \
through the ",
 ButtonBox["GitHub issue tracker",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/szhorvat/IGraphM/issues"], None},
  ButtonNote->"https://github.com/szhorvat/IGraphM/issues"],
 " or the ",
 ButtonBox["igraph discussion forum",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://igraph.discourse.group/"], None},
  ButtonNote->"https://igraph.discourse.group/"],
 ". Always include the output of the ",
 Cell[BoxData[
  RowBox[{"GetInfo", "[", "]"}]],ExpressionUUID->
  "5ca27974-ba65-465b-afa4-1fe88e2c27f0"],
 " function with problem reports."
}], "Text",ExpressionUUID->"b326712e-73de-4ad2-b79b-5302b8b65ce3"],

Cell[BoxData[
 RowBox[{"?", 
  "IGraphM`Developer`GetInfo"}]], \
"Input",ExpressionUUID->"ff9950c7-58de-43e9-9c58-3e042335a32a"]
}, Closed]],

Cell[CellGroupData[{

Cell["Acknowledgements", \
"Section",ExpressionUUID->"67e683fc-435d-42dc-b815-24cbb8d4bb28"],

Cell[TextData[{
 "Most functions in IGraph/M are based on the igraph C library, originally \
written by G\[AAcute]bor Cs\[AAcute]rdi and Tam\[AAcute]s Nepusz. To cite the \
igraph C library in publications, see ",
 ButtonBox["\[OpenCurlyDoubleQuote]Citing igraph\[CloseCurlyDoubleQuote] in \
the igraph Reference Manual",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://igraph.org/c/doc/igraph-Introduction.html"], None},
  ButtonNote->"https://igraph.org/c/doc/igraph-Introduction.html"],
 ". Website: ",
 ButtonBox["https://igraph.org/",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://igraph.org/"], None},
  ButtonNote->"https://igraph.org/"]
}], "Text",ExpressionUUID->"6bdb25cb-fd82-4ed1-bac9-f29a4e4f0dcc"],

Cell[TextData[{
 "Some functions, in particular in the area of planar graphs, use the LEMON \
graph library. Website: ",
 ButtonBox["https://lemon.cs.elte.hu/",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://lemon.cs.elte.hu/"], None},
  ButtonNote->"https://lemon.cs.elte.hu/"]
}], "Text",ExpressionUUID->"8c1a7a91-41b0-4884-a007-8f33eea239a7"],

Cell[TextData[{
 "Some proximity graph functions make use of the nanoflann library. Website: ",
 ButtonBox["https://github.com/jlblancoc/nanoflann",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/jlblancoc/nanoflann"], None},
  ButtonNote->"https://github.com/jlblancoc/nanoflann"]
}], "Text",ExpressionUUID->"c56c79b9-e91e-4b6c-9f34-c157c5386ef3"],

Cell[TextData[{
 "IGraph/M was developed with the Wolfram Language Plugin for IntelliJ IDEA \
by Patrick Scheibe. Without the help of this IDE, it would have been \
difficult to manage the complexity of this package. Website: ",
 ButtonBox["http://wlplugin.halirutan.de/",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://wlplugin.halirutan.de/"], None},
  ButtonNote->"http://wlplugin.halirutan.de/"]
}], "Text",ExpressionUUID->"dd1be29b-c2ce-463a-837f-d2568510ebca"],

Cell[TextData[{
 "The web version of the documentation is prepared with the M2MD package by \
Kuba Podkalicki. Website: ",
 ButtonBox["https://github.com/kubaPod/M2MD/",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/kubaPod/M2MD/"], None},
  ButtonNote->"https://github.com/kubaPod/M2MD/"]
}], "Text",ExpressionUUID->"41c3500e-ddbd-41c7-95d8-7e923e523262"],

Cell[TextData[{
 "The help of the ",
 ButtonBox["Mathematica StackExchange",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://mathematica.stackexchange.com/"], None},
  ButtonNote->"https://mathematica.stackexchange.com/"],
 " community was invaluable while developing this package."
}], "Text",ExpressionUUID->"08e0faaa-2f5e-4d6b-b0c6-4f44d0a98a0e"],

Cell["People who have contributed to IGraph/M:", \
"Text",ExpressionUUID->"7c84d6d5-d64f-402a-90b7-1158a6d23b8b"],

Cell["Szabolcs Horv\[AAcute]t (main author and maintainer)", \
"Item",ExpressionUUID->"40ebc97e-4305-4d88-92da-92b6c8670438"],

Cell["\<\
Henrik Schumacher (help with mesh-graph conversion and proximity graph \
functions)\
\>", "Item",ExpressionUUID->"6fe65a77-f56b-400b-8eff-239b9fa0e3c9"],

Cell["\<\
Juho Lauri (advice with the implementation of graph colouring functions)\
\>", "Item",ExpressionUUID->"191fd7ed-1601-40da-b93b-83c898df4e98"],

Cell[TextData[{
 "To cite IGraph/M in a publication, please refer to ",
 ButtonBox["doi:10.5281/zenodo.1134932",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://doi.org/10.5281/zenodo.1134932"], None},
  ButtonNote->"https://doi.org/10.5281/zenodo.1134932"]
}], "Text",ExpressionUUID->"044fbe24-02a7-4739-afa2-6fe90823b56a"]
}, Closed]],

Cell[CellGroupData[{

Cell["License", \
"Section",ExpressionUUID->"8255d8a9-329b-49f5-8660-b2c6d78f4f46"],

Cell["Copyright \[Copyright] 2016-2020 Szabolcs Horv\[AAcute]t", \
"Text",ExpressionUUID->"a9291bea-7127-43f9-abf5-fc8a1c0363eb"],

Cell["\<\
This program is free software: you can redistribute it and/or modify it under \
the terms of the GNU General Public License as published by the Free Software \
Foundation, either version 3 of the License, or (at your option) any later \
version.\
\>", "Text",ExpressionUUID->"78990471-072b-4053-a83b-96b79bbf5f8d"],

Cell["\<\
This program is distributed in the hope that it will be useful, but WITHOUT \
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS \
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more \
details.\
\>", "Text",ExpressionUUID->"e5ee6e80-1d46-435c-83e5-7916544e8d8e"],

Cell[TextData[{
 "You should have received a copy of the GNU General Public License along \
with this program.  If not, see ",
 ButtonBox["https://www.gnu.org/licenses/",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.gnu.org/licenses/"], None},
  ButtonNote->"https://www.gnu.org/licenses/"]
}], "Text",ExpressionUUID->"eccb4146-9055-478e-8a6a-94c059273fc5"]
}, Closed]]
}, Open  ]]
},
WindowSize->{899, 855},
WindowMargins->{{Automatic, 218}, {Automatic, 540}},
WindowTitle->"IGraph/M Documentation",
WindowStatusArea->None,
PrintingCopies->1,
PrintingStartingPageNumber->1,
PrintingPageRange->{1, Automatic},
PageHeaders->{{
   Cell[
    TextData[{
      StyleBox[
       CounterBox["Page"], "PageNumber"], "   ", "|", 
      StyleBox[
       RowBox[{" ", 
         StyleBox[" ", "Header"]}]], 
      StyleBox[
       RowBox[{"IGraph", "/", "M", " ", "Documentation"}], "Header"]}], 
    "Header", CellMargins -> {{0, Inherited}, {Inherited, Inherited}}], None, 
   None}, {None, None, 
   Cell[
    TextData[{
      StyleBox[
       RowBox[{"IGraph", "/", "M", " ", "Documentation"}], "Header"], 
      StyleBox[
       RowBox[{
         StyleBox[" ", "Header"], " "}]], "|", "   ", 
      StyleBox[
       CounterBox["Page"], "PageNumber"]}], "Header", 
    CellMargins -> {{Inherited, 0}, {Inherited, Inherited}}]}},
PageFooters->{{None, None, None}, {None, None, None}},
PageHeaderLines->{False, False},
PageFooterLines->{False, False},
PrintingOptions->{"FacingPages"->True,
"FirstPageFace"->Right,
"FirstPageFooter"->True,
"FirstPageHeader"->False,
"PrintCellBrackets"->False,
"PrintMultipleHorizontalPages"->False,
"PrintRegistrationMarks"->False,
"PrintingMargins"->{{28.346457, 28.346457}, {72.00000078000001, \
72.00000078000001}}},
PrivateNotebookOptions->{"FileOutlineCache"->False},
TaggingRules->{
 "SEUploaderLastUpdateCheck" -> 3.766254953638397`16.32848470505581*^9, 
  "SEUploaderVersion" -> {
   "Version" -> 130, "Changes" -> {"Fixed SE Uploader to use https"}}, 
  "DevTools" -> {"MenuMethod" -> "Cell"}, "TryRealOnly" -> False},
CellLabelAutoDelete->True,
ShowCellTags->True,
TrackCellChangeTimes->False,
GraphicsBoxOptions->{ImageSizeRaw->250},
FrontEndVersion->"13.0 for Mac OS X x86 (64-bit) (February 4, 2022)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    StyleData[All, "Printout"], Magnification -> 0.66], 
   Cell[
    StyleData["Section"], ShowGroupOpener -> True], 
   Cell[
    StyleData["Subsection"], ShowGroupOpener -> True], 
   Cell[
    StyleData["Subsubsection"], ShowGroupOpener -> True], 
   Cell[
    StyleData["Text"], DefaultInlineFormatType -> StandardForm], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Item"], DefaultInlineFormatType -> StandardForm], 
      Cell[
       StyleData["Hyperlink", "Printout"], FontColor -> 
       RGBColor[0.269993, 0.308507, 0.6]]}, Open]]}, 
  WindowMargins -> {{316, Automatic}, {-440, Automatic}}, Visible -> False, 
  FrontEndVersion -> "13.0 for Mac OS X x86 (64-bit) (February 4, 2022)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"],
ExpressionUUID->"f2c61c1c-5321-4c3e-9047-2d29e9f66d92"
]

